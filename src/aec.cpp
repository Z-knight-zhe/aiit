#include <math.h>
#include "enc_def.h"
//#include "enc_eco.h"
//#include "com_df.h"
//#include "enc_mode.h"
//#include "com_util.h"
//#include "aec_testbench.h"
#include "sao.h"
#include "aec.h"
#include "com_util.h"
#include "stddef.h"

#pragma optimize("", off)
#if AEC_STAGE1_DEBUG
FILE* fp_stage1_InParam = NULL;
#endif

#define H6_OK 1
#define SRCC_P2S 0

#define AEC_PHASE1 0

#if AEC_STAGE3_DEBUG

#if AEC_STAGE3_CTX_DEBUG
FILE* fp_ctx = NULL;
#endif
#if AEC_STAGE3_BS_DEBUG
FILE* fp_bs = NULL;
#endif
#if AEC_STAGE3_BINA_DEBUG
FILE* fp_bina = NULL;
#endif
#endif

#if AEC_STAGE3_PHASE2_DEBUG

#if AEC_STAGE3_CTX_PHASE2_DEBUG
FILE* fp_ctx = NULL;
#endif
#if AEC_STAGE3_BS_PHASE2_DEBUG
FILE* fp_bs = NULL;
#endif
#if AEC_STAGE3_RLPS_PHASE2_DEBUG
FILE* fp_rLPS = NULL;
#endif
#if AEC_STAGE3_BINA_PHASE2_DEBUG
FILE* fp_bina = NULL;
#endif
#endif
#if AEC_STAGE1_2_DEBUG
FILE* fpStream = NULL;
FILE* fpStage1 = NULL;
FILE* fpMvd = NULL;
FILE* fpPb = NULL;
FILE* fpTb = NULL;
FILE* fpPm = NULL;
FILE* fpMvr = NULL;
FILE* fpUmvF = NULL;
FILE* fpUmvI = NULL;
FILE* fpSkipI = NULL;
FILE* fpAff = NULL;
FILE* fpIpf = NULL;
FILE* fpMvp = NULL;
FILE* fpMpm = NULL;
FILE* fpIpm = NULL;
FILE* fpRefi = NULL;
FILE* fpNumC = NULL;
FILE* fpSqh = NULL;
FILE* fpInfo = NULL;
FILE* fpRpm = NULL;
FILE* fpCoef = NULL;
FILE* fpRes = NULL;
FILE* fpFoutI = NULL;
FILE* fpMapIn = NULL;
FILE* fpModIn = NULL;
FILE* fpScuAb = NULL;
FILE* fpCuAb = NULL;
FILE* fpTest = NULL;
FILE* fpInfoS1 = NULL;
FILE* fpSplitM = NULL;
#endif  
//AEC_input  AEC_DATA_input;
extern ENC_SBAC aec_sbac_local;
extern AEC_COM_SBAC_CTX aec_ctx;
extern COM_SBAC_CTX aec_ctx_phase2;
extern AEC_output AEC_DATA_output;

#if PATCH_DEBUG
extern PATCH_INFO* patch;
#endif



//FEC_info FEC_info_local;
//u32 fetch_output_me_line_map_ptr_map_scu_above_line[1920];
//u32 fetch_output_me_line_map_ptr_map_scu_above_line[(MAX_WIDTH >> MIN_CU_LOG2) << 1];//2*(MAX_WIDTH >> MIN_CU_LOG2),1920
//u32 fetch_output_me_line_map_ptr_map_cu_mode_above_line[1920];
//u32 fetch_output_me_line_map_ptr_map_cu_mode_above_line[(MAX_WIDTH >> MIN_CU_LOG2) << 1];
//extern int saoclip[NUM_SAO_OFFSET][3];
extern int EO_OFFSET_MAP[8];
extern int EO_OFFSET_MAP_DULPI1[8];
extern int EO_OFFSET_MAP_DULPI2[8];
//SBAC_CTX_MODEL run_rdoq[NUM_SBAC_CTX_RUN];//24 
extern int EO_OFFSET_MAP_DULPI3[8];

extern int com_bsw_flush(COM_BSW* bs);
static const s8 aec_com_tbl_log2[257] = {
    /* 0, 1 */
    -1, -1,
    /* 2, 3 */
    1, -1,
    /* 4 ~ 7 */
    2, -1, -1, -1,
    /* 8 ~ 15 */
    3, -1, -1, -1, -1, -1, -1, -1,
    /* 16 ~ 31 */
    4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    /* 31 ~ 63 */
    5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    /* 64 ~ 127 */
    6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    /* 128 ~ 255 */
    7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    /* 256 */
    8
};
static const u16 tab_cycno_lgpmps_mps[1 << 14] = {
    2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077,
    2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105,
    2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131,
    2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159,
    2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185,
    2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213,
    2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239,
    2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267,
    2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293,
    2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321,
    2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347,
    2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375,
    2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401,
    2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429,
    2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455,
    2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483,
    2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509,
    2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537,
    2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562, 2563,
    2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591,
    2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617,
    2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645,
    2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671,
    2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699,
    2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725,
    2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753,
    2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779,
    2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807,
    2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833,
    2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861,
    2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887,
    2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915,
    2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941,
    2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969,
    2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995,
    2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023,
    3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049,
    3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077,
    3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103,
    3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131,
    3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157,
    3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185,
    3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211,
    3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239,
    3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265,
    3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293,
    3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319,
    3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347,
    3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357, 3358, 3359, 3358, 3359, 3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373,
    3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401,
    3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427,
    3426, 3427, 3428, 3429, 3430, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3440, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455,
    3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3462, 3463, 3464, 3465, 3466, 3467, 3466, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478, 3479, 3480, 3481,
    3480, 3481, 3482, 3483, 3484, 3485, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509,
    3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3518, 3519, 3520, 3521, 3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529, 3530, 3531, 3532, 3533, 3534, 3535,
    3534, 3535, 3536, 3537, 3538, 3539, 3540, 3541, 3542, 3543, 3544, 3545, 3546, 3547, 3548, 3549, 3548, 3549, 3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563,
    3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573, 3574, 3575, 3574, 3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 3585, 3586, 3587, 3588, 3589,
    3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596, 3597, 3598, 3599, 3600, 3601, 3602, 3603, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617,
    3614, 3615, 3616, 3617, 3618, 3619, 3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629, 3628, 3629, 3630, 3631, 3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3643,
    3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3656, 3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671,
    3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697,
    3696, 3697, 3698, 3699, 3700, 3701, 3702, 3703, 3704, 3705, 3706, 3707, 3708, 3709, 3710, 3711, 3710, 3711, 3712, 3713, 3714, 3715, 3716, 3717, 3718, 3719, 3720, 3721, 3722, 3723, 3724, 3725,
    3722, 3723, 3724, 3725, 3726, 3727, 3728, 3729, 3730, 3731, 3732, 3733, 3734, 3735, 3736, 3737, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 3743, 3744, 3745, 3746, 3747, 3748, 3749, 3750, 3751,
    3750, 3751, 3752, 3753, 3754, 3755, 3756, 3757, 3758, 3759, 3760, 3761, 3762, 3763, 3764, 3765, 3764, 3765, 3766, 3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 3775, 3776, 3777, 3778, 3779,
    2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077,
    2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105,
    2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131,
    2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159,
    2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185,
    2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213,
    2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239,
    2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267,
    2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293,
    2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321,
    2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332, 2333, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347,
    2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375,
    2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386, 2387, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401,
    2400, 2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429,
    2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455,
    2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483,
    2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509,
    2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537,
    2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562, 2563,
    2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591,
    2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617,
    2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645,
    2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671,
    2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699,
    2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725,
    2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753,
    2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779,
    2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807,
    2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833,
    2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861,
    2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887,
    2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915,
    2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941,
    2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969,
    2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995,
    2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023,
    3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049,
    3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077,
    3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103,
    3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131,
    3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157,
    3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185,
    3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211,
    3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239,
    3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265,
    3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293,
    3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319,
    3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347,
    3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357, 3358, 3359, 3358, 3359, 3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373,
    3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401,
    3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427,
    3426, 3427, 3428, 3429, 3430, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3440, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455,
    3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3462, 3463, 3464, 3465, 3466, 3467, 3466, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478, 3479, 3480, 3481,
    3480, 3481, 3482, 3483, 3484, 3485, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509,
    3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3518, 3519, 3520, 3521, 3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529, 3530, 3531, 3532, 3533, 3534, 3535,
    3534, 3535, 3536, 3537, 3538, 3539, 3540, 3541, 3542, 3543, 3544, 3545, 3546, 3547, 3548, 3549, 3548, 3549, 3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563,
    3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573, 3574, 3575, 3574, 3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 3585, 3586, 3587, 3588, 3589,
    3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596, 3597, 3598, 3599, 3600, 3601, 3602, 3603, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617,
    3614, 3615, 3616, 3617, 3618, 3619, 3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629, 3628, 3629, 3630, 3631, 3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3643,
    3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3656, 3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671,
    3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697,
    3696, 3697, 3698, 3699, 3700, 3701, 3702, 3703, 3704, 3705, 3706, 3707, 3708, 3709, 3710, 3711, 3710, 3711, 3712, 3713, 3714, 3715, 3716, 3717, 3718, 3719, 3720, 3721, 3722, 3723, 3724, 3725,
    3722, 3723, 3724, 3725, 3726, 3727, 3728, 3729, 3730, 3731, 3732, 3733, 3734, 3735, 3736, 3737, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 3743, 3744, 3745, 3746, 3747, 3748, 3749, 3750, 3751,
    3750, 3751, 3752, 3753, 3754, 3755, 3756, 3757, 3758, 3759, 3760, 3761, 3762, 3763, 3764, 3765, 3764, 3765, 3766, 3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 3775, 3776, 3777, 3778, 3779,
    4096, 4097, 4098, 4099, 4100, 4101, 4102, 4103, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 4112, 4113, 4114, 4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4127,
    4126, 4127, 4128, 4129, 4130, 4131, 4132, 4133, 4134, 4135, 4136, 4137, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4157,
    4156, 4157, 4158, 4159, 4160, 4161, 4162, 4163, 4164, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4172, 4173, 4174, 4175, 4176, 4177, 4178, 4179, 4180, 4181, 4182, 4183, 4184, 4185, 4186, 4187,
    4186, 4187, 4188, 4189, 4190, 4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 4211, 4212, 4213, 4214, 4215, 4216, 4217,
    4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223, 4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245,
    4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254, 4255, 4256, 4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272, 4273, 4274, 4275,
    4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302, 4303, 4304, 4305,
    4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332, 4333, 4334, 4335,
    4332, 4333, 4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4343, 4344, 4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4353, 4354, 4355, 4356, 4357, 4358, 4359, 4360, 4361, 4362, 4363,
    4362, 4363, 4364, 4365, 4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4377, 4378, 4379, 4380, 4381, 4382, 4383, 4384, 4385, 4386, 4387, 4388, 4389, 4390, 4391, 4392, 4393,
    4392, 4393, 4394, 4395, 4396, 4397, 4398, 4399, 4400, 4401, 4402, 4403, 4404, 4405, 4406, 4407, 4408, 4409, 4410, 4411, 4412, 4413, 4414, 4415, 4416, 4417, 4418, 4419, 4420, 4421, 4422, 4423,
    4422, 4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4431, 4432, 4433, 4434, 4435, 4436, 4437, 4438, 4439, 4440, 4441, 4442, 4443, 4444, 4445, 4446, 4447, 4448, 4449, 4450, 4451, 4452, 4453,
    4450, 4451, 4452, 4453, 4454, 4455, 4456, 4457, 4458, 4459, 4460, 4461, 4462, 4463, 4464, 4465, 4466, 4467, 4468, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481,
    4480, 4481, 4482, 4483, 4484, 4485, 4486, 4487, 4488, 4489, 4490, 4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499, 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4511,
    4510, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520, 4521, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532, 4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541,
    4540, 4541, 4542, 4543, 4544, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571,
    4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576, 4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4586, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598, 4599,
    4598, 4599, 4600, 4601, 4602, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4621, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4629,
    4628, 4629, 4630, 4631, 4632, 4633, 4634, 4635, 4636, 4637, 4638, 4639, 4640, 4641, 4642, 4643, 4644, 4645, 4646, 4647, 4648, 4649, 4650, 4651, 4652, 4653, 4654, 4655, 4656, 4657, 4658, 4659,
    4658, 4659, 4660, 4661, 4662, 4663, 4664, 4665, 4666, 4667, 4668, 4669, 4670, 4671, 4672, 4673, 4674, 4675, 4676, 4677, 4678, 4679, 4680, 4681, 4682, 4683, 4684, 4685, 4686, 4687, 4688, 4689,
    4686, 4687, 4688, 4689, 4690, 4691, 4692, 4693, 4694, 4695, 4696, 4697, 4698, 4699, 4700, 4701, 4702, 4703, 4704, 4705, 4706, 4707, 4708, 4709, 4710, 4711, 4712, 4713, 4714, 4715, 4716, 4717,
    4716, 4717, 4718, 4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739, 4740, 4741, 4742, 4743, 4744, 4745, 4746, 4747,
    4746, 4747, 4748, 4749, 4750, 4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760, 4761, 4762, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4770, 4771, 4772, 4773, 4774, 4775, 4776, 4777,
    4776, 4777, 4778, 4779, 4780, 4781, 4782, 4783, 4784, 4785, 4786, 4787, 4788, 4789, 4790, 4791, 4792, 4793, 4794, 4795, 4796, 4797, 4798, 4799, 4800, 4801, 4802, 4803, 4804, 4805, 4806, 4807,
    4804, 4805, 4806, 4807, 4808, 4809, 4810, 4811, 4812, 4813, 4814, 4815, 4816, 4817, 4818, 4819, 4820, 4821, 4822, 4823, 4824, 4825, 4826, 4827, 4828, 4829, 4830, 4831, 4832, 4833, 4834, 4835,
    4834, 4835, 4836, 4837, 4838, 4839, 4840, 4841, 4842, 4843, 4844, 4845, 4846, 4847, 4848, 4849, 4850, 4851, 4852, 4853, 4854, 4855, 4856, 4857, 4858, 4859, 4860, 4861, 4862, 4863, 4864, 4865,
    4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873, 4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893, 4894, 4895,
    4894, 4895, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903, 4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4916, 4917, 4918, 4919, 4920, 4921, 4922, 4923, 4924, 4925,
    4922, 4923, 4924, 4925, 4926, 4927, 4928, 4929, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4937, 4938, 4939, 4940, 4941, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949, 4950, 4951, 4952, 4953,
    4952, 4953, 4954, 4955, 4956, 4957, 4958, 4959, 4960, 4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968, 4969, 4970, 4971, 4972, 4973, 4974, 4975, 4976, 4977, 4978, 4979, 4980, 4981, 4982, 4983,
    4982, 4983, 4984, 4985, 4986, 4987, 4988, 4989, 4990, 4991, 4992, 4993, 4994, 4995, 4996, 4997, 4998, 4999, 5000, 5001, 5002, 5003, 5004, 5005, 5006, 5007, 5008, 5009, 5010, 5011, 5012, 5013,
    5012, 5013, 5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 5024, 5025, 5026, 5027, 5028, 5029, 5030, 5031, 5032, 5033, 5034, 5035, 5036, 5037, 5038, 5039, 5040, 5041, 5042, 5043,
    5040, 5041, 5042, 5043, 5044, 5045, 5046, 5047, 5048, 5049, 5050, 5051, 5052, 5053, 5054, 5055, 5056, 5057, 5058, 5059, 5060, 5061, 5062, 5063, 5064, 5065, 5066, 5067, 5068, 5069, 5070, 5071,
    5070, 5071, 5072, 5073, 5074, 5075, 5076, 5077, 5078, 5079, 5080, 5081, 5082, 5083, 5084, 5085, 5086, 5087, 5088, 5089, 5090, 5091, 5092, 5093, 5094, 5095, 5096, 5097, 5098, 5099, 5100, 5101,
    5100, 5101, 5102, 5103, 5104, 5105, 5106, 5107, 5108, 5109, 5110, 5111, 5112, 5113, 5114, 5115, 5116, 5117, 5118, 5119, 5120, 5121, 5122, 5123, 5124, 5125, 5126, 5127, 5128, 5129, 5130, 5131,
    5130, 5131, 5132, 5133, 5134, 5135, 5136, 5137, 5138, 5139, 5140, 5141, 5142, 5143, 5144, 5145, 5146, 5147, 5148, 5149, 5150, 5151, 5152, 5153, 5154, 5155, 5156, 5157, 5158, 5159, 5160, 5161,
    5158, 5159, 5160, 5161, 5162, 5163, 5164, 5165, 5166, 5167, 5168, 5169, 5170, 5171, 5172, 5173, 5174, 5175, 5176, 5177, 5178, 5179, 5180, 5181, 5182, 5183, 5184, 5185, 5186, 5187, 5188, 5189,
    5188, 5189, 5190, 5191, 5192, 5193, 5194, 5195, 5196, 5197, 5198, 5199, 5200, 5201, 5202, 5203, 5204, 5205, 5206, 5207, 5208, 5209, 5210, 5211, 5212, 5213, 5214, 5215, 5216, 5217, 5218, 5219,
    5218, 5219, 5220, 5221, 5222, 5223, 5224, 5225, 5226, 5227, 5228, 5229, 5230, 5231, 5232, 5233, 5234, 5235, 5236, 5237, 5238, 5239, 5240, 5241, 5242, 5243, 5244, 5245, 5246, 5247, 5248, 5249,
    5248, 5249, 5250, 5251, 5252, 5253, 5254, 5255, 5256, 5257, 5258, 5259, 5260, 5261, 5262, 5263, 5264, 5265, 5266, 5267, 5268, 5269, 5270, 5271, 5272, 5273, 5274, 5275, 5276, 5277, 5278, 5279,
    5276, 5277, 5278, 5279, 5280, 5281, 5282, 5283, 5284, 5285, 5286, 5287, 5288, 5289, 5290, 5291, 5292, 5293, 5294, 5295, 5296, 5297, 5298, 5299, 5300, 5301, 5302, 5303, 5304, 5305, 5306, 5307,
    5306, 5307, 5308, 5309, 5310, 5311, 5312, 5313, 5314, 5315, 5316, 5317, 5318, 5319, 5320, 5321, 5322, 5323, 5324, 5325, 5326, 5327, 5328, 5329, 5330, 5331, 5332, 5333, 5334, 5335, 5336, 5337,
    5336, 5337, 5338, 5339, 5340, 5341, 5342, 5343, 5344, 5345, 5346, 5347, 5348, 5349, 5350, 5351, 5352, 5353, 5354, 5355, 5356, 5357, 5358, 5359, 5360, 5361, 5362, 5363, 5364, 5365, 5366, 5367,
    5366, 5367, 5368, 5369, 5370, 5371, 5372, 5373, 5374, 5375, 5376, 5377, 5378, 5379, 5380, 5381, 5382, 5383, 5384, 5385, 5386, 5387, 5388, 5389, 5390, 5391, 5392, 5393, 5394, 5395, 5396, 5397,
    5394, 5395, 5396, 5397, 5398, 5399, 5400, 5401, 5402, 5403, 5404, 5405, 5406, 5407, 5408, 5409, 5410, 5411, 5412, 5413, 5414, 5415, 5416, 5417, 5418, 5419, 5420, 5421, 5422, 5423, 5424, 5425,
    5424, 5425, 5426, 5427, 5428, 5429, 5430, 5431, 5432, 5433, 5434, 5435, 5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443, 5444, 5445, 5446, 5447, 5448, 5449, 5450, 5451, 5452, 5453, 5454, 5455,
    5454, 5455, 5456, 5457, 5458, 5459, 5460, 5461, 5462, 5463, 5464, 5465, 5466, 5467, 5468, 5469, 5470, 5471, 5472, 5473, 5474, 5475, 5476, 5477, 5478, 5479, 5480, 5481, 5482, 5483, 5484, 5485,
    5484, 5485, 5486, 5487, 5488, 5489, 5490, 5491, 5492, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 5500, 5501, 5502, 5503, 5504, 5505, 5506, 5507, 5508, 5509, 5510, 5511, 5512, 5513, 5514, 5515,
    5512, 5513, 5514, 5515, 5516, 5517, 5518, 5519, 5520, 5521, 5522, 5523, 5524, 5525, 5526, 5527, 5528, 5529, 5530, 5531, 5532, 5533, 5534, 5535, 5536, 5537, 5538, 5539, 5540, 5541, 5542, 5543,
    5542, 5543, 5544, 5545, 5546, 5547, 5548, 5549, 5550, 5551, 5552, 5553, 5554, 5555, 5556, 5557, 5558, 5559, 5560, 5561, 5562, 5563, 5564, 5565, 5566, 5567, 5568, 5569, 5570, 5571, 5572, 5573,
    5572, 5573, 5574, 5575, 5576, 5577, 5578, 5579, 5580, 5581, 5582, 5583, 5584, 5585, 5586, 5587, 5588, 5589, 5590, 5591, 5592, 5593, 5594, 5595, 5596, 5597, 5598, 5599, 5600, 5601, 5602, 5603,
    5602, 5603, 5604, 5605, 5606, 5607, 5608, 5609, 5610, 5611, 5612, 5613, 5614, 5615, 5616, 5617, 5618, 5619, 5620, 5621, 5622, 5623, 5624, 5625, 5626, 5627, 5628, 5629, 5630, 5631, 5632, 5633,
    5630, 5631, 5632, 5633, 5634, 5635, 5636, 5637, 5638, 5639, 5640, 5641, 5642, 5643, 5644, 5645, 5646, 5647, 5648, 5649, 5650, 5651, 5652, 5653, 5654, 5655, 5656, 5657, 5658, 5659, 5660, 5661,
    5660, 5661, 5662, 5663, 5664, 5665, 5666, 5667, 5668, 5669, 5670, 5671, 5672, 5673, 5674, 5675, 5676, 5677, 5678, 5679, 5680, 5681, 5682, 5683, 5684, 5685, 5686, 5687, 5688, 5689, 5690, 5691,
    5690, 5691, 5692, 5693, 5694, 5695, 5696, 5697, 5698, 5699, 5700, 5701, 5702, 5703, 5704, 5705, 5706, 5707, 5708, 5709, 5710, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5719, 5720, 5721,
    5720, 5721, 5722, 5723, 5724, 5725, 5726, 5727, 5728, 5729, 5730, 5731, 5732, 5733, 5734, 5735, 5736, 5737, 5738, 5739, 5740, 5741, 5742, 5743, 5744, 5745, 5746, 5747, 5748, 5749, 5750, 5751,
    5748, 5749, 5750, 5751, 5752, 5753, 5754, 5755, 5756, 5757, 5758, 5759, 5760, 5761, 5762, 5763, 5764, 5765, 5766, 5767, 5768, 5769, 5770, 5771, 5772, 5773, 5774, 5775, 5776, 5777, 5778, 5779,
    5778, 5779, 5780, 5781, 5782, 5783, 5784, 5785, 5786, 5787, 5788, 5789, 5790, 5791, 5792, 5793, 5794, 5795, 5796, 5797, 5798, 5799, 5800, 5801, 5802, 5803, 5804, 5805, 5806, 5807, 5808, 5809,
    5808, 5809, 5810, 5811, 5812, 5813, 5814, 5815, 5816, 5817, 5818, 5819, 5820, 5821, 5822, 5823, 5824, 5825, 5826, 5827, 5828, 5829, 5830, 5831, 5832, 5833, 5834, 5835, 5836, 5837, 5838, 5839,
    5838, 5839, 5840, 5841, 5842, 5843, 5844, 5845, 5846, 5847, 5848, 5849, 5850, 5851, 5852, 5853, 5854, 5855, 5856, 5857, 5858, 5859, 5860, 5861, 5862, 5863, 5864, 5865, 5866, 5867, 5868, 5869,
    5866, 5867, 5868, 5869, 5870, 5871, 5872, 5873, 5874, 5875, 5876, 5877, 5878, 5879, 5880, 5881, 5882, 5883, 5884, 5885, 5886, 5887, 5888, 5889, 5890, 5891, 5892, 5893, 5894, 5895, 5896, 5897,
    5896, 5897, 5898, 5899, 5900, 5901, 5902, 5903, 5904, 5905, 5906, 5907, 5908, 5909, 5910, 5911, 5912, 5913, 5914, 5915, 5916, 5917, 5918, 5919, 5920, 5921, 5922, 5923, 5924, 5925, 5926, 5927,
    5926, 5927, 5928, 5929, 5930, 5931, 5932, 5933, 5934, 5935, 5936, 5937, 5938, 5939, 5940, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5949, 5950, 5951, 5952, 5953, 5954, 5955, 5956, 5957,
    5956, 5957, 5958, 5959, 5960, 5961, 5962, 5963, 5964, 5965, 5966, 5967, 5968, 5969, 5970, 5971, 5972, 5973, 5974, 5975, 5976, 5977, 5978, 5979, 5980, 5981, 5982, 5983, 5984, 5985, 5986, 5987,
    6144, 6145, 6146, 6147, 6148, 6149, 6150, 6151, 6152, 6153, 6154, 6155, 6156, 6157, 6158, 6159, 6160, 6161, 6162, 6163, 6164, 6165, 6166, 6167, 6168, 6169, 6170, 6171, 6172, 6173, 6174, 6175,
    6176, 6177, 6178, 6179, 6180, 6181, 6182, 6183, 6184, 6185, 6186, 6187, 6188, 6189, 6190, 6191, 6192, 6193, 6194, 6195, 6196, 6197, 6198, 6199, 6200, 6201, 6202, 6203, 6204, 6205, 6206, 6207,
    6206, 6207, 6208, 6209, 6210, 6211, 6212, 6213, 6214, 6215, 6216, 6217, 6218, 6219, 6220, 6221, 6222, 6223, 6224, 6225, 6226, 6227, 6228, 6229, 6230, 6231, 6232, 6233, 6234, 6235, 6236, 6237,
    6238, 6239, 6240, 6241, 6242, 6243, 6244, 6245, 6246, 6247, 6248, 6249, 6250, 6251, 6252, 6253, 6254, 6255, 6256, 6257, 6258, 6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6267, 6268, 6269,
    6268, 6269, 6270, 6271, 6272, 6273, 6274, 6275, 6276, 6277, 6278, 6279, 6280, 6281, 6282, 6283, 6284, 6285, 6286, 6287, 6288, 6289, 6290, 6291, 6292, 6293, 6294, 6295, 6296, 6297, 6298, 6299,
    6300, 6301, 6302, 6303, 6304, 6305, 6306, 6307, 6308, 6309, 6310, 6311, 6312, 6313, 6314, 6315, 6316, 6317, 6318, 6319, 6320, 6321, 6322, 6323, 6324, 6325, 6326, 6327, 6328, 6329, 6330, 6331,
    6330, 6331, 6332, 6333, 6334, 6335, 6336, 6337, 6338, 6339, 6340, 6341, 6342, 6343, 6344, 6345, 6346, 6347, 6348, 6349, 6350, 6351, 6352, 6353, 6354, 6355, 6356, 6357, 6358, 6359, 6360, 6361,
    6362, 6363, 6364, 6365, 6366, 6367, 6368, 6369, 6370, 6371, 6372, 6373, 6374, 6375, 6376, 6377, 6378, 6379, 6380, 6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6389, 6390, 6391, 6392, 6393,
    6390, 6391, 6392, 6393, 6394, 6395, 6396, 6397, 6398, 6399, 6400, 6401, 6402, 6403, 6404, 6405, 6406, 6407, 6408, 6409, 6410, 6411, 6412, 6413, 6414, 6415, 6416, 6417, 6418, 6419, 6420, 6421,
    6422, 6423, 6424, 6425, 6426, 6427, 6428, 6429, 6430, 6431, 6432, 6433, 6434, 6435, 6436, 6437, 6438, 6439, 6440, 6441, 6442, 6443, 6444, 6445, 6446, 6447, 6448, 6449, 6450, 6451, 6452, 6453,
    6452, 6453, 6454, 6455, 6456, 6457, 6458, 6459, 6460, 6461, 6462, 6463, 6464, 6465, 6466, 6467, 6468, 6469, 6470, 6471, 6472, 6473, 6474, 6475, 6476, 6477, 6478, 6479, 6480, 6481, 6482, 6483,
    6484, 6485, 6486, 6487, 6488, 6489, 6490, 6491, 6492, 6493, 6494, 6495, 6496, 6497, 6498, 6499, 6500, 6501, 6502, 6503, 6504, 6505, 6506, 6507, 6508, 6509, 6510, 6511, 6512, 6513, 6514, 6515,
    6514, 6515, 6516, 6517, 6518, 6519, 6520, 6521, 6522, 6523, 6524, 6525, 6526, 6527, 6528, 6529, 6530, 6531, 6532, 6533, 6534, 6535, 6536, 6537, 6538, 6539, 6540, 6541, 6542, 6543, 6544, 6545,
    6546, 6547, 6548, 6549, 6550, 6551, 6552, 6553, 6554, 6555, 6556, 6557, 6558, 6559, 6560, 6561, 6562, 6563, 6564, 6565, 6566, 6567, 6568, 6569, 6570, 6571, 6572, 6573, 6574, 6575, 6576, 6577,
    6576, 6577, 6578, 6579, 6580, 6581, 6582, 6583, 6584, 6585, 6586, 6587, 6588, 6589, 6590, 6591, 6592, 6593, 6594, 6595, 6596, 6597, 6598, 6599, 6600, 6601, 6602, 6603, 6604, 6605, 6606, 6607,
    6608, 6609, 6610, 6611, 6612, 6613, 6614, 6615, 6616, 6617, 6618, 6619, 6620, 6621, 6622, 6623, 6624, 6625, 6626, 6627, 6628, 6629, 6630, 6631, 6632, 6633, 6634, 6635, 6636, 6637, 6638, 6639,
    6636, 6637, 6638, 6639, 6640, 6641, 6642, 6643, 6644, 6645, 6646, 6647, 6648, 6649, 6650, 6651, 6652, 6653, 6654, 6655, 6656, 6657, 6658, 6659, 6660, 6661, 6662, 6663, 6664, 6665, 6666, 6667,
    6668, 6669, 6670, 6671, 6672, 6673, 6674, 6675, 6676, 6677, 6678, 6679, 6680, 6681, 6682, 6683, 6684, 6685, 6686, 6687, 6688, 6689, 6690, 6691, 6692, 6693, 6694, 6695, 6696, 6697, 6698, 6699,
    6698, 6699, 6700, 6701, 6702, 6703, 6704, 6705, 6706, 6707, 6708, 6709, 6710, 6711, 6712, 6713, 6714, 6715, 6716, 6717, 6718, 6719, 6720, 6721, 6722, 6723, 6724, 6725, 6726, 6727, 6728, 6729,
    6730, 6731, 6732, 6733, 6734, 6735, 6736, 6737, 6738, 6739, 6740, 6741, 6742, 6743, 6744, 6745, 6746, 6747, 6748, 6749, 6750, 6751, 6752, 6753, 6754, 6755, 6756, 6757, 6758, 6759, 6760, 6761,
    6760, 6761, 6762, 6763, 6764, 6765, 6766, 6767, 6768, 6769, 6770, 6771, 6772, 6773, 6774, 6775, 6776, 6777, 6778, 6779, 6780, 6781, 6782, 6783, 6784, 6785, 6786, 6787, 6788, 6789, 6790, 6791,
    6792, 6793, 6794, 6795, 6796, 6797, 6798, 6799, 6800, 6801, 6802, 6803, 6804, 6805, 6806, 6807, 6808, 6809, 6810, 6811, 6812, 6813, 6814, 6815, 6816, 6817, 6818, 6819, 6820, 6821, 6822, 6823,
    6822, 6823, 6824, 6825, 6826, 6827, 6828, 6829, 6830, 6831, 6832, 6833, 6834, 6835, 6836, 6837, 6838, 6839, 6840, 6841, 6842, 6843, 6844, 6845, 6846, 6847, 6848, 6849, 6850, 6851, 6852, 6853,
    6854, 6855, 6856, 6857, 6858, 6859, 6860, 6861, 6862, 6863, 6864, 6865, 6866, 6867, 6868, 6869, 6870, 6871, 6872, 6873, 6874, 6875, 6876, 6877, 6878, 6879, 6880, 6881, 6882, 6883, 6884, 6885,
    6882, 6883, 6884, 6885, 6886, 6887, 6888, 6889, 6890, 6891, 6892, 6893, 6894, 6895, 6896, 6897, 6898, 6899, 6900, 6901, 6902, 6903, 6904, 6905, 6906, 6907, 6908, 6909, 6910, 6911, 6912, 6913,
    6914, 6915, 6916, 6917, 6918, 6919, 6920, 6921, 6922, 6923, 6924, 6925, 6926, 6927, 6928, 6929, 6930, 6931, 6932, 6933, 6934, 6935, 6936, 6937, 6938, 6939, 6940, 6941, 6942, 6943, 6944, 6945,
    6944, 6945, 6946, 6947, 6948, 6949, 6950, 6951, 6952, 6953, 6954, 6955, 6956, 6957, 6958, 6959, 6960, 6961, 6962, 6963, 6964, 6965, 6966, 6967, 6968, 6969, 6970, 6971, 6972, 6973, 6974, 6975,
    6976, 6977, 6978, 6979, 6980, 6981, 6982, 6983, 6984, 6985, 6986, 6987, 6988, 6989, 6990, 6991, 6992, 6993, 6994, 6995, 6996, 6997, 6998, 6999, 7000, 7001, 7002, 7003, 7004, 7005, 7006, 7007,
    7006, 7007, 7008, 7009, 7010, 7011, 7012, 7013, 7014, 7015, 7016, 7017, 7018, 7019, 7020, 7021, 7022, 7023, 7024, 7025, 7026, 7027, 7028, 7029, 7030, 7031, 7032, 7033, 7034, 7035, 7036, 7037,
    7038, 7039, 7040, 7041, 7042, 7043, 7044, 7045, 7046, 7047, 7048, 7049, 7050, 7051, 7052, 7053, 7054, 7055, 7056, 7057, 7058, 7059, 7060, 7061, 7062, 7063, 7064, 7065, 7066, 7067, 7068, 7069,
    7068, 7069, 7070, 7071, 7072, 7073, 7074, 7075, 7076, 7077, 7078, 7079, 7080, 7081, 7082, 7083, 7084, 7085, 7086, 7087, 7088, 7089, 7090, 7091, 7092, 7093, 7094, 7095, 7096, 7097, 7098, 7099,
    7100, 7101, 7102, 7103, 7104, 7105, 7106, 7107, 7108, 7109, 7110, 7111, 7112, 7113, 7114, 7115, 7116, 7117, 7118, 7119, 7120, 7121, 7122, 7123, 7124, 7125, 7126, 7127, 7128, 7129, 7130, 7131,
    7128, 7129, 7130, 7131, 7132, 7133, 7134, 7135, 7136, 7137, 7138, 7139, 7140, 7141, 7142, 7143, 7144, 7145, 7146, 7147, 7148, 7149, 7150, 7151, 7152, 7153, 7154, 7155, 7156, 7157, 7158, 7159,
    7160, 7161, 7162, 7163, 7164, 7165, 7166, 7167, 7168, 7169, 7170, 7171, 7172, 7173, 7174, 7175, 7176, 7177, 7178, 7179, 7180, 7181, 7182, 7183, 7184, 7185, 7186, 7187, 7188, 7189, 7190, 7191,
    7190, 7191, 7192, 7193, 7194, 7195, 7196, 7197, 7198, 7199, 7200, 7201, 7202, 7203, 7204, 7205, 7206, 7207, 7208, 7209, 7210, 7211, 7212, 7213, 7214, 7215, 7216, 7217, 7218, 7219, 7220, 7221,
    7222, 7223, 7224, 7225, 7226, 7227, 7228, 7229, 7230, 7231, 7232, 7233, 7234, 7235, 7236, 7237, 7238, 7239, 7240, 7241, 7242, 7243, 7244, 7245, 7246, 7247, 7248, 7249, 7250, 7251, 7252, 7253,
    7252, 7253, 7254, 7255, 7256, 7257, 7258, 7259, 7260, 7261, 7262, 7263, 7264, 7265, 7266, 7267, 7268, 7269, 7270, 7271, 7272, 7273, 7274, 7275, 7276, 7277, 7278, 7279, 7280, 7281, 7282, 7283,
    7284, 7285, 7286, 7287, 7288, 7289, 7290, 7291, 7292, 7293, 7294, 7295, 7296, 7297, 7298, 7299, 7300, 7301, 7302, 7303, 7304, 7305, 7306, 7307, 7308, 7309, 7310, 7311, 7312, 7313, 7314, 7315,
    7314, 7315, 7316, 7317, 7318, 7319, 7320, 7321, 7322, 7323, 7324, 7325, 7326, 7327, 7328, 7329, 7330, 7331, 7332, 7333, 7334, 7335, 7336, 7337, 7338, 7339, 7340, 7341, 7342, 7343, 7344, 7345,
    7346, 7347, 7348, 7349, 7350, 7351, 7352, 7353, 7354, 7355, 7356, 7357, 7358, 7359, 7360, 7361, 7362, 7363, 7364, 7365, 7366, 7367, 7368, 7369, 7370, 7371, 7372, 7373, 7374, 7375, 7376, 7377,
    7374, 7375, 7376, 7377, 7378, 7379, 7380, 7381, 7382, 7383, 7384, 7385, 7386, 7387, 7388, 7389, 7390, 7391, 7392, 7393, 7394, 7395, 7396, 7397, 7398, 7399, 7400, 7401, 7402, 7403, 7404, 7405,
    7406, 7407, 7408, 7409, 7410, 7411, 7412, 7413, 7414, 7415, 7416, 7417, 7418, 7419, 7420, 7421, 7422, 7423, 7424, 7425, 7426, 7427, 7428, 7429, 7430, 7431, 7432, 7433, 7434, 7435, 7436, 7437,
    7436, 7437, 7438, 7439, 7440, 7441, 7442, 7443, 7444, 7445, 7446, 7447, 7448, 7449, 7450, 7451, 7452, 7453, 7454, 7455, 7456, 7457, 7458, 7459, 7460, 7461, 7462, 7463, 7464, 7465, 7466, 7467,
    7468, 7469, 7470, 7471, 7472, 7473, 7474, 7475, 7476, 7477, 7478, 7479, 7480, 7481, 7482, 7483, 7484, 7485, 7486, 7487, 7488, 7489, 7490, 7491, 7492, 7493, 7494, 7495, 7496, 7497, 7498, 7499,
    7498, 7499, 7500, 7501, 7502, 7503, 7504, 7505, 7506, 7507, 7508, 7509, 7510, 7511, 7512, 7513, 7514, 7515, 7516, 7517, 7518, 7519, 7520, 7521, 7522, 7523, 7524, 7525, 7526, 7527, 7528, 7529,
    7530, 7531, 7532, 7533, 7534, 7535, 7536, 7537, 7538, 7539, 7540, 7541, 7542, 7543, 7544, 7545, 7546, 7547, 7548, 7549, 7550, 7551, 7552, 7553, 7554, 7555, 7556, 7557, 7558, 7559, 7560, 7561,
    7560, 7561, 7562, 7563, 7564, 7565, 7566, 7567, 7568, 7569, 7570, 7571, 7572, 7573, 7574, 7575, 7576, 7577, 7578, 7579, 7580, 7581, 7582, 7583, 7584, 7585, 7586, 7587, 7588, 7589, 7590, 7591,
    7592, 7593, 7594, 7595, 7596, 7597, 7598, 7599, 7600, 7601, 7602, 7603, 7604, 7605, 7606, 7607, 7608, 7609, 7610, 7611, 7612, 7613, 7614, 7615, 7616, 7617, 7618, 7619, 7620, 7621, 7622, 7623,
    7620, 7621, 7622, 7623, 7624, 7625, 7626, 7627, 7628, 7629, 7630, 7631, 7632, 7633, 7634, 7635, 7636, 7637, 7638, 7639, 7640, 7641, 7642, 7643, 7644, 7645, 7646, 7647, 7648, 7649, 7650, 7651,
    7652, 7653, 7654, 7655, 7656, 7657, 7658, 7659, 7660, 7661, 7662, 7663, 7664, 7665, 7666, 7667, 7668, 7669, 7670, 7671, 7672, 7673, 7674, 7675, 7676, 7677, 7678, 7679, 7680, 7681, 7682, 7683,
    7682, 7683, 7684, 7685, 7686, 7687, 7688, 7689, 7690, 7691, 7692, 7693, 7694, 7695, 7696, 7697, 7698, 7699, 7700, 7701, 7702, 7703, 7704, 7705, 7706, 7707, 7708, 7709, 7710, 7711, 7712, 7713,
    7714, 7715, 7716, 7717, 7718, 7719, 7720, 7721, 7722, 7723, 7724, 7725, 7726, 7727, 7728, 7729, 7730, 7731, 7732, 7733, 7734, 7735, 7736, 7737, 7738, 7739, 7740, 7741, 7742, 7743, 7744, 7745,
    7744, 7745, 7746, 7747, 7748, 7749, 7750, 7751, 7752, 7753, 7754, 7755, 7756, 7757, 7758, 7759, 7760, 7761, 7762, 7763, 7764, 7765, 7766, 7767, 7768, 7769, 7770, 7771, 7772, 7773, 7774, 7775,
    7776, 7777, 7778, 7779, 7780, 7781, 7782, 7783, 7784, 7785, 7786, 7787, 7788, 7789, 7790, 7791, 7792, 7793, 7794, 7795, 7796, 7797, 7798, 7799, 7800, 7801, 7802, 7803, 7804, 7805, 7806, 7807,
    7806, 7807, 7808, 7809, 7810, 7811, 7812, 7813, 7814, 7815, 7816, 7817, 7818, 7819, 7820, 7821, 7822, 7823, 7824, 7825, 7826, 7827, 7828, 7829, 7830, 7831, 7832, 7833, 7834, 7835, 7836, 7837,
    7838, 7839, 7840, 7841, 7842, 7843, 7844, 7845, 7846, 7847, 7848, 7849, 7850, 7851, 7852, 7853, 7854, 7855, 7856, 7857, 7858, 7859, 7860, 7861, 7862, 7863, 7864, 7865, 7866, 7867, 7868, 7869,
    7866, 7867, 7868, 7869, 7870, 7871, 7872, 7873, 7874, 7875, 7876, 7877, 7878, 7879, 7880, 7881, 7882, 7883, 7884, 7885, 7886, 7887, 7888, 7889, 7890, 7891, 7892, 7893, 7894, 7895, 7896, 7897,
    7898, 7899, 7900, 7901, 7902, 7903, 7904, 7905, 7906, 7907, 7908, 7909, 7910, 7911, 7912, 7913, 7914, 7915, 7916, 7917, 7918, 7919, 7920, 7921, 7922, 7923, 7924, 7925, 7926, 7927, 7928, 7929,
    7928, 7929, 7930, 7931, 7932, 7933, 7934, 7935, 7936, 7937, 7938, 7939, 7940, 7941, 7942, 7943, 7944, 7945, 7946, 7947, 7948, 7949, 7950, 7951, 7952, 7953, 7954, 7955, 7956, 7957, 7958, 7959,
    7960, 7961, 7962, 7963, 7964, 7965, 7966, 7967, 7968, 7969, 7970, 7971, 7972, 7973, 7974, 7975, 7976, 7977, 7978, 7979, 7980, 7981, 7982, 7983, 7984, 7985, 7986, 7987, 7988, 7989, 7990, 7991,
    7990, 7991, 7992, 7993, 7994, 7995, 7996, 7997, 7998, 7999, 8000, 8001, 8002, 8003, 8004, 8005, 8006, 8007, 8008, 8009, 8010, 8011, 8012, 8013, 8014, 8015, 8016, 8017, 8018, 8019, 8020, 8021,
    8022, 8023, 8024, 8025, 8026, 8027, 8028, 8029, 8030, 8031, 8032, 8033, 8034, 8035, 8036, 8037, 8038, 8039, 8040, 8041, 8042, 8043, 8044, 8045, 8046, 8047, 8048, 8049, 8050, 8051, 8052, 8053,
    8052, 8053, 8054, 8055, 8056, 8057, 8058, 8059, 8060, 8061, 8062, 8063, 8064, 8065, 8066, 8067, 8068, 8069, 8070, 8071, 8072, 8073, 8074, 8075, 8076, 8077, 8078, 8079, 8080, 8081, 8082, 8083,
    8084, 8085, 8086, 8087, 8088, 8089, 8090, 8091, 8092, 8093, 8094, 8095, 8096, 8097, 8098, 8099, 8100, 8101, 8102, 8103, 8104, 8105, 8106, 8107, 8108, 8109, 8110, 8111, 8112, 8113, 8114, 8115,
    2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473,
    2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505,
    2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537,
    2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569,
    2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601,
    2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633,
    2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665,
    2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697,
    2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729,
    2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761,
    2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793,
    2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825,
    2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857,
    2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889,
    2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921,
    2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953,
    2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985,
    2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017,
    3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049,
    3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081,
    3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113,
    3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145,
    3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177,
    3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209,
    3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241,
    3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273,
    3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305,
    3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 3337,
    3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3369,
    3370, 3371, 3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401,
    3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431, 3432, 3433,
    3434, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3462, 3463, 3464, 3465,
    3466, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 3484, 3485, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497,
    3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3518, 3519, 3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529,
    3530, 3531, 3532, 3533, 3534, 3535, 3536, 3537, 3538, 3539, 3540, 3541, 3542, 3543, 3544, 3545, 3546, 3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559, 3560, 3561,
    3562, 3563, 3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 3585, 3586, 3587, 3588, 3589, 3590, 3591, 3592, 3593,
    3594, 3595, 3596, 3597, 3598, 3599, 3600, 3601, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618, 3619, 3620, 3621, 3622, 3623, 3624, 3625,
    3626, 3627, 3628, 3629, 3630, 3631, 3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657,
    3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689,
    3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697, 3698, 3699, 3700, 3701, 3702, 3703, 3704, 3705, 3706, 3707, 3708, 3709, 3710, 3711, 3712, 3713, 3714, 3715, 3716, 3717, 3718, 3719, 3720, 3721,
    3722, 3723, 3724, 3725, 3726, 3727, 3728, 3729, 3730, 3731, 3732, 3733, 3734, 3735, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 3743, 3744, 3745, 3746, 3747, 3748, 3749, 3750, 3751, 3752, 3753,
    3754, 3755, 3756, 3757, 3758, 3759, 3760, 3761, 3762, 3763, 3764, 3765, 3766, 3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 3775, 3776, 3777, 3778, 3779, 3780, 3781, 3782, 3783, 3784, 3785,
    3786, 3787, 3788, 3789, 3790, 3791, 3792, 3793, 3794, 3795, 3796, 3797, 3798, 3799, 3800, 3801, 3802, 3803, 3804, 3805, 3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 3816, 3817,
    3818, 3819, 3820, 3821, 3822, 3823, 3824, 3825, 3826, 3827, 3828, 3829, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837, 3838, 3839, 3840, 3841, 3842, 3843, 3844, 3845, 3846, 3847, 3848, 3849,
    3850, 3851, 3852, 3853, 3854, 3855, 3856, 3857, 3858, 3859, 3860, 3861, 3862, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3871, 3872, 3873, 3874, 3875, 3876, 3877, 3878, 3879, 3880, 3881,
    3882, 3883, 3884, 3885, 3886, 3887, 3888, 3889, 3890, 3891, 3892, 3893, 3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901, 3902, 3903, 3904, 3905, 3906, 3907, 3908, 3909, 3910, 3911, 3912, 3913,
    3914, 3915, 3916, 3917, 3918, 3919, 3920, 3921, 3922, 3923, 3924, 3925, 3926, 3927, 3928, 3929, 3930, 3931, 3932, 3933, 3934, 3935, 3936, 3937, 3938, 3939, 3940, 3941, 3942, 3943, 3944, 3945,
    3946, 3947, 3948, 3949, 3950, 3951, 3952, 3953, 3954, 3955, 3956, 3957, 3958, 3959, 3960, 3961, 3962, 3963, 3964, 3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972, 3973, 3974, 3975, 3976, 3977,
    3978, 3979, 3980, 3981, 3982, 3983, 3984, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 3992, 3993, 3994, 3995, 3996, 3997, 3998, 3999, 4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009,
    4010, 4011, 4012, 4013, 4014, 4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035, 4036, 4037, 4038, 4039, 4040, 4041,
    4042, 4043, 4044, 4045, 4046, 4047, 4048, 4049, 4050, 4051, 4052, 4053, 4054, 4055, 4056, 4057, 4058, 4059, 4060, 4061, 4062, 4063, 4064, 4065, 4066, 4067, 4068, 4069, 4070, 4071, 4072, 4073,
    4074, 4075, 4076, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085, 4086, 4087, 4088, 4089, 4090, 4091, 4092, 4093, 4094, 4095, 4095, 4094, 4093, 4092, 4091, 4090, 4089, 4088, 4087, 4086,
    4085, 4084, 4083, 4082, 4081, 4080, 4079, 4078, 4077, 4076, 4075, 4074, 4073, 4072, 4071, 4070, 4069, 4068, 4067, 4066, 4065, 4064, 4063, 4062, 4061, 4060, 4059, 4058, 4057, 4056, 4055, 4054,
    4053, 4052, 4051, 4050, 4049, 4048, 4047, 4046, 4045, 4044, 4043, 4042, 4041, 4040, 4039, 4038, 4037, 4036, 4035, 4034, 4033, 4032, 4031, 4030, 4029, 4028, 4027, 4026, 4025, 4024, 4023, 4022,
    4021, 4020, 4019, 4018, 4017, 4016, 4015, 4014, 4013, 4012, 4011, 4010, 4009, 4008, 4007, 4006, 4005, 4004, 4003, 4002, 4001, 4000, 3999, 3998, 3997, 3996, 3995, 3994, 3993, 3992, 3991, 3990,
    3989, 3988, 3987, 3986, 3985, 3984, 3983, 3982, 3981, 3980, 3979, 3978, 3977, 3976, 3975, 3974, 3973, 3972, 3971, 3970, 3969, 3968, 3967, 3966, 3965, 3964, 3963, 3962, 3961, 3960, 3959, 3958,
    3957, 3956, 3955, 3954, 3953, 3952, 3951, 3950, 3949, 3948, 3947, 3946, 3945, 3944, 3943, 3942, 3941, 3940, 3939, 3938, 3937, 3936, 3935, 3934, 3933, 3932, 3931, 3930, 3929, 3928, 3927, 3926,
    3925, 3924, 3923, 3922, 3921, 3920, 3919, 3918, 3917, 3916, 3915, 3914, 3913, 3912, 3911, 3910, 3909, 3908, 3907, 3906, 3905, 3904, 3903, 3902, 3901, 3900, 3899, 3898, 3897, 3896, 3895, 3894,
    3893, 3892, 3891, 3890, 3889, 3888, 3887, 3886, 3885, 3884, 3883, 3882, 3881, 3880, 3879, 3878, 3877, 3876, 3875, 3874, 3873, 3872, 3871, 3870, 3869, 3868, 3867, 3866, 3865, 3864, 3863, 3862,
    3861, 3860, 3859, 3858, 3857, 3856, 3855, 3854, 3853, 3852, 3851, 3850, 3849, 3848, 3847, 3846, 3845, 3844, 3843, 3842, 3841, 3840, 3839, 3838, 3837, 3836, 3835, 3834, 3833, 3832, 3831, 3830,
    3829, 3828, 3827, 3826, 3825, 3824, 3823, 3822, 3821, 3820, 3819, 3818, 3817, 3816, 3815, 3814, 3813, 3812, 3811, 3810, 3809, 3808, 3807, 3806, 3805, 3804, 3803, 3802, 3801, 3800, 3799, 3798,
    3797, 3796, 3795, 3794, 3793, 3792, 3791, 3790, 3789, 3788, 3787, 3786, 3785, 3784, 3783, 3782, 3781, 3780, 3779, 3778, 3777, 3776, 3775, 3774, 3773, 3772, 3771, 3770, 3769, 3768, 3767, 3766,
    3765, 3764, 3763, 3762, 3761, 3760, 3759, 3758, 3757, 3756, 3755, 3754, 3753, 3752, 3751, 3750, 3749, 3748, 3747, 3746, 3745, 3744, 3743, 3742, 3741, 3740, 3739, 3738, 3737, 3736, 3735, 3734,
    3733, 3732, 3731, 3730, 3729, 3728, 3727, 3726, 3725, 3724, 3723, 3722, 3721, 3720, 3719, 3718, 3717, 3716, 3715, 3714, 3713, 3712, 3711, 3710, 3709, 3708, 3707, 3706, 3705, 3704, 3703, 3702,
    4490, 4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499, 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520, 4521,
    4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532, 4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541, 4542, 4543, 4544, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553,
    4554, 4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576, 4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585,
    4586, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598, 4599, 4600, 4601, 4602, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617,
    4618, 4619, 4620, 4621, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4629, 4630, 4631, 4632, 4633, 4634, 4635, 4636, 4637, 4638, 4639, 4640, 4641, 4642, 4643, 4644, 4645, 4646, 4647, 4648, 4649,
    4650, 4651, 4652, 4653, 4654, 4655, 4656, 4657, 4658, 4659, 4660, 4661, 4662, 4663, 4664, 4665, 4666, 4667, 4668, 4669, 4670, 4671, 4672, 4673, 4674, 4675, 4676, 4677, 4678, 4679, 4680, 4681,
    4682, 4683, 4684, 4685, 4686, 4687, 4688, 4689, 4690, 4691, 4692, 4693, 4694, 4695, 4696, 4697, 4698, 4699, 4700, 4701, 4702, 4703, 4704, 4705, 4706, 4707, 4708, 4709, 4710, 4711, 4712, 4713,
    4714, 4715, 4716, 4717, 4718, 4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739, 4740, 4741, 4742, 4743, 4744, 4745,
    4746, 4747, 4748, 4749, 4750, 4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760, 4761, 4762, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4770, 4771, 4772, 4773, 4774, 4775, 4776, 4777,
    4778, 4779, 4780, 4781, 4782, 4783, 4784, 4785, 4786, 4787, 4788, 4789, 4790, 4791, 4792, 4793, 4794, 4795, 4796, 4797, 4798, 4799, 4800, 4801, 4802, 4803, 4804, 4805, 4806, 4807, 4808, 4809,
    4810, 4811, 4812, 4813, 4814, 4815, 4816, 4817, 4818, 4819, 4820, 4821, 4822, 4823, 4824, 4825, 4826, 4827, 4828, 4829, 4830, 4831, 4832, 4833, 4834, 4835, 4836, 4837, 4838, 4839, 4840, 4841,
    4842, 4843, 4844, 4845, 4846, 4847, 4848, 4849, 4850, 4851, 4852, 4853, 4854, 4855, 4856, 4857, 4858, 4859, 4860, 4861, 4862, 4863, 4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873,
    4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893, 4894, 4895, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903, 4904, 4905,
    4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4916, 4917, 4918, 4919, 4920, 4921, 4922, 4923, 4924, 4925, 4926, 4927, 4928, 4929, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4937,
    4938, 4939, 4940, 4941, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949, 4950, 4951, 4952, 4953, 4954, 4955, 4956, 4957, 4958, 4959, 4960, 4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968, 4969,
    4970, 4971, 4972, 4973, 4974, 4975, 4976, 4977, 4978, 4979, 4980, 4981, 4982, 4983, 4984, 4985, 4986, 4987, 4988, 4989, 4990, 4991, 4992, 4993, 4994, 4995, 4996, 4997, 4998, 4999, 5000, 5001,
    5002, 5003, 5004, 5005, 5006, 5007, 5008, 5009, 5010, 5011, 5012, 5013, 5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 5024, 5025, 5026, 5027, 5028, 5029, 5030, 5031, 5032, 5033,
    5034, 5035, 5036, 5037, 5038, 5039, 5040, 5041, 5042, 5043, 5044, 5045, 5046, 5047, 5048, 5049, 5050, 5051, 5052, 5053, 5054, 5055, 5056, 5057, 5058, 5059, 5060, 5061, 5062, 5063, 5064, 5065,
    5066, 5067, 5068, 5069, 5070, 5071, 5072, 5073, 5074, 5075, 5076, 5077, 5078, 5079, 5080, 5081, 5082, 5083, 5084, 5085, 5086, 5087, 5088, 5089, 5090, 5091, 5092, 5093, 5094, 5095, 5096, 5097,
    5098, 5099, 5100, 5101, 5102, 5103, 5104, 5105, 5106, 5107, 5108, 5109, 5110, 5111, 5112, 5113, 5114, 5115, 5116, 5117, 5118, 5119, 5120, 5121, 5122, 5123, 5124, 5125, 5126, 5127, 5128, 5129,
    5130, 5131, 5132, 5133, 5134, 5135, 5136, 5137, 5138, 5139, 5140, 5141, 5142, 5143, 5144, 5145, 5146, 5147, 5148, 5149, 5150, 5151, 5152, 5153, 5154, 5155, 5156, 5157, 5158, 5159, 5160, 5161,
    5162, 5163, 5164, 5165, 5166, 5167, 5168, 5169, 5170, 5171, 5172, 5173, 5174, 5175, 5176, 5177, 5178, 5179, 5180, 5181, 5182, 5183, 5184, 5185, 5186, 5187, 5188, 5189, 5190, 5191, 5192, 5193,
    5194, 5195, 5196, 5197, 5198, 5199, 5200, 5201, 5202, 5203, 5204, 5205, 5206, 5207, 5208, 5209, 5210, 5211, 5212, 5213, 5214, 5215, 5216, 5217, 5218, 5219, 5220, 5221, 5222, 5223, 5224, 5225,
    5226, 5227, 5228, 5229, 5230, 5231, 5232, 5233, 5234, 5235, 5236, 5237, 5238, 5239, 5240, 5241, 5242, 5243, 5244, 5245, 5246, 5247, 5248, 5249, 5250, 5251, 5252, 5253, 5254, 5255, 5256, 5257,
    5258, 5259, 5260, 5261, 5262, 5263, 5264, 5265, 5266, 5267, 5268, 5269, 5270, 5271, 5272, 5273, 5274, 5275, 5276, 5277, 5278, 5279, 5280, 5281, 5282, 5283, 5284, 5285, 5286, 5287, 5288, 5289,
    5290, 5291, 5292, 5293, 5294, 5295, 5296, 5297, 5298, 5299, 5300, 5301, 5302, 5303, 5304, 5305, 5306, 5307, 5308, 5309, 5310, 5311, 5312, 5313, 5314, 5315, 5316, 5317, 5318, 5319, 5320, 5321,
    5322, 5323, 5324, 5325, 5326, 5327, 5328, 5329, 5330, 5331, 5332, 5333, 5334, 5335, 5336, 5337, 5338, 5339, 5340, 5341, 5342, 5343, 5344, 5345, 5346, 5347, 5348, 5349, 5350, 5351, 5352, 5353,
    5354, 5355, 5356, 5357, 5358, 5359, 5360, 5361, 5362, 5363, 5364, 5365, 5366, 5367, 5368, 5369, 5370, 5371, 5372, 5373, 5374, 5375, 5376, 5377, 5378, 5379, 5380, 5381, 5382, 5383, 5384, 5385,
    5386, 5387, 5388, 5389, 5390, 5391, 5392, 5393, 5394, 5395, 5396, 5397, 5398, 5399, 5400, 5401, 5402, 5403, 5404, 5405, 5406, 5407, 5408, 5409, 5410, 5411, 5412, 5413, 5414, 5415, 5416, 5417,
    5418, 5419, 5420, 5421, 5422, 5423, 5424, 5425, 5426, 5427, 5428, 5429, 5430, 5431, 5432, 5433, 5434, 5435, 5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443, 5444, 5445, 5446, 5447, 5448, 5449,
    5450, 5451, 5452, 5453, 5454, 5455, 5456, 5457, 5458, 5459, 5460, 5461, 5462, 5463, 5464, 5465, 5466, 5467, 5468, 5469, 5470, 5471, 5472, 5473, 5474, 5475, 5476, 5477, 5478, 5479, 5480, 5481,
    5482, 5483, 5484, 5485, 5486, 5487, 5488, 5489, 5490, 5491, 5492, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 5500, 5501, 5502, 5503, 5504, 5505, 5506, 5507, 5508, 5509, 5510, 5511, 5512, 5513,
    5514, 5515, 5516, 5517, 5518, 5519, 5520, 5521, 5522, 5523, 5524, 5525, 5526, 5527, 5528, 5529, 5530, 5531, 5532, 5533, 5534, 5535, 5536, 5537, 5538, 5539, 5540, 5541, 5542, 5543, 5544, 5545,
    5546, 5547, 5548, 5549, 5550, 5551, 5552, 5553, 5554, 5555, 5556, 5557, 5558, 5559, 5560, 5561, 5562, 5563, 5564, 5565, 5566, 5567, 5568, 5569, 5570, 5571, 5572, 5573, 5574, 5575, 5576, 5577,
    5578, 5579, 5580, 5581, 5582, 5583, 5584, 5585, 5586, 5587, 5588, 5589, 5590, 5591, 5592, 5593, 5594, 5595, 5596, 5597, 5598, 5599, 5600, 5601, 5602, 5603, 5604, 5605, 5606, 5607, 5608, 5609,
    5610, 5611, 5612, 5613, 5614, 5615, 5616, 5617, 5618, 5619, 5620, 5621, 5622, 5623, 5624, 5625, 5626, 5627, 5628, 5629, 5630, 5631, 5632, 5633, 5634, 5635, 5636, 5637, 5638, 5639, 5640, 5641,
    5642, 5643, 5644, 5645, 5646, 5647, 5648, 5649, 5650, 5651, 5652, 5653, 5654, 5655, 5656, 5657, 5658, 5659, 5660, 5661, 5662, 5663, 5664, 5665, 5666, 5667, 5668, 5669, 5670, 5671, 5672, 5673,
    5674, 5675, 5676, 5677, 5678, 5679, 5680, 5681, 5682, 5683, 5684, 5685, 5686, 5687, 5688, 5689, 5690, 5691, 5692, 5693, 5694, 5695, 5696, 5697, 5698, 5699, 5700, 5701, 5702, 5703, 5704, 5705,
    5706, 5707, 5708, 5709, 5710, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5719, 5720, 5721, 5722, 5723, 5724, 5725, 5726, 5727, 5728, 5729, 5730, 5731, 5732, 5733, 5734, 5735, 5736, 5737,
    5738, 5739, 5740, 5741, 5742, 5743, 5744, 5745, 5746, 5747, 5748, 5749, 5750, 5751, 5752, 5753, 5754, 5755, 5756, 5757, 5758, 5759, 5760, 5761, 5762, 5763, 5764, 5765, 5766, 5767, 5768, 5769,
    5770, 5771, 5772, 5773, 5774, 5775, 5776, 5777, 5778, 5779, 5780, 5781, 5782, 5783, 5784, 5785, 5786, 5787, 5788, 5789, 5790, 5791, 5792, 5793, 5794, 5795, 5796, 5797, 5798, 5799, 5800, 5801,
    5802, 5803, 5804, 5805, 5806, 5807, 5808, 5809, 5810, 5811, 5812, 5813, 5814, 5815, 5816, 5817, 5818, 5819, 5820, 5821, 5822, 5823, 5824, 5825, 5826, 5827, 5828, 5829, 5830, 5831, 5832, 5833,
    5834, 5835, 5836, 5837, 5838, 5839, 5840, 5841, 5842, 5843, 5844, 5845, 5846, 5847, 5848, 5849, 5850, 5851, 5852, 5853, 5854, 5855, 5856, 5857, 5858, 5859, 5860, 5861, 5862, 5863, 5864, 5865,
    5866, 5867, 5868, 5869, 5870, 5871, 5872, 5873, 5874, 5875, 5876, 5877, 5878, 5879, 5880, 5881, 5882, 5883, 5884, 5885, 5886, 5887, 5888, 5889, 5890, 5891, 5892, 5893, 5894, 5895, 5896, 5897,
    5898, 5899, 5900, 5901, 5902, 5903, 5904, 5905, 5906, 5907, 5908, 5909, 5910, 5911, 5912, 5913, 5914, 5915, 5916, 5917, 5918, 5919, 5920, 5921, 5922, 5923, 5924, 5925, 5926, 5927, 5928, 5929,
    5930, 5931, 5932, 5933, 5934, 5935, 5936, 5937, 5938, 5939, 5940, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5949, 5950, 5951, 5952, 5953, 5954, 5955, 5956, 5957, 5958, 5959, 5960, 5961,
    5962, 5963, 5964, 5965, 5966, 5967, 5968, 5969, 5970, 5971, 5972, 5973, 5974, 5975, 5976, 5977, 5978, 5979, 5980, 5981, 5982, 5983, 5984, 5985, 5986, 5987, 5988, 5989, 5990, 5991, 5992, 5993,
    5994, 5995, 5996, 5997, 5998, 5999, 6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6009, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025,
    6026, 6027, 6028, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6036, 6037, 6038, 6039, 6040, 6041, 6042, 6043, 6044, 6045, 6046, 6047, 6048, 6049, 6050, 6051, 6052, 6053, 6054, 6055, 6056, 6057,
    6058, 6059, 6060, 6061, 6062, 6063, 6064, 6065, 6066, 6067, 6068, 6069, 6070, 6071, 6072, 6073, 6074, 6075, 6076, 6077, 6078, 6079, 6080, 6081, 6082, 6083, 6084, 6085, 6086, 6087, 6088, 6089,
    6090, 6091, 6092, 6093, 6094, 6095, 6096, 6097, 6098, 6099, 6100, 6101, 6102, 6103, 6104, 6105, 6106, 6107, 6108, 6109, 6110, 6111, 6112, 6113, 6114, 6115, 6116, 6117, 6118, 6119, 6120, 6121,
    6122, 6123, 6124, 6125, 6126, 6127, 6128, 6129, 6130, 6131, 6132, 6133, 6134, 6135, 6136, 6137, 6138, 6139, 6140, 6141, 6142, 6143, 6143, 6142, 6141, 6140, 6139, 6138, 6137, 6136, 6135, 6134,
    6133, 6132, 6131, 6130, 6129, 6128, 6127, 6126, 6125, 6124, 6123, 6122, 6121, 6120, 6119, 6118, 6117, 6116, 6115, 6114, 6113, 6112, 6111, 6110, 6109, 6108, 6107, 6106, 6105, 6104, 6103, 6102,
    6101, 6100, 6099, 6098, 6097, 6096, 6095, 6094, 6093, 6092, 6091, 6090, 6089, 6088, 6087, 6086, 6085, 6084, 6083, 6082, 6081, 6080, 6079, 6078, 6077, 6076, 6075, 6074, 6073, 6072, 6071, 6070,
    6069, 6068, 6067, 6066, 6065, 6064, 6063, 6062, 6061, 6060, 6059, 6058, 6057, 6056, 6055, 6054, 6053, 6052, 6051, 6050, 6049, 6048, 6047, 6046, 6045, 6044, 6043, 6042, 6041, 6040, 6039, 6038,
    6037, 6036, 6035, 6034, 6033, 6032, 6031, 6030, 6029, 6028, 6027, 6026, 6025, 6024, 6023, 6022, 6021, 6020, 6019, 6018, 6017, 6016, 6015, 6014, 6013, 6012, 6011, 6010, 6009, 6008, 6007, 6006,
    6005, 6004, 6003, 6002, 6001, 6000, 5999, 5998, 5997, 5996, 5995, 5994, 5993, 5992, 5991, 5990, 5989, 5988, 5987, 5986, 5985, 5984, 5983, 5982, 5981, 5980, 5979, 5978, 5977, 5976, 5975, 5974,
    5973, 5972, 5971, 5970, 5969, 5968, 5967, 5966, 5965, 5964, 5963, 5962, 5961, 5960, 5959, 5958, 5957, 5956, 5955, 5954, 5953, 5952, 5951, 5950, 5949, 5948, 5947, 5946, 5945, 5944, 5943, 5942,
    5941, 5940, 5939, 5938, 5937, 5936, 5935, 5934, 5933, 5932, 5931, 5930, 5929, 5928, 5927, 5926, 5925, 5924, 5923, 5922, 5921, 5920, 5919, 5918, 5917, 5916, 5915, 5914, 5913, 5912, 5911, 5910,
    5909, 5908, 5907, 5906, 5905, 5904, 5903, 5902, 5901, 5900, 5899, 5898, 5897, 5896, 5895, 5894, 5893, 5892, 5891, 5890, 5889, 5888, 5887, 5886, 5885, 5884, 5883, 5882, 5881, 5880, 5879, 5878,
    5877, 5876, 5875, 5874, 5873, 5872, 5871, 5870, 5869, 5868, 5867, 5866, 5865, 5864, 5863, 5862, 5861, 5860, 5859, 5858, 5857, 5856, 5855, 5854, 5853, 5852, 5851, 5850, 5849, 5848, 5847, 5846,
    5845, 5844, 5843, 5842, 5841, 5840, 5839, 5838, 5837, 5836, 5835, 5834, 5833, 5832, 5831, 5830, 5829, 5828, 5827, 5826, 5825, 5824, 5823, 5822, 5821, 5820, 5819, 5818, 5817, 5816, 5815, 5814,
    5813, 5812, 5811, 5810, 5809, 5808, 5807, 5806, 5805, 5804, 5803, 5802, 5801, 5800, 5799, 5798, 5797, 5796, 5795, 5794, 5793, 5792, 5791, 5790, 5789, 5788, 5787, 5786, 5785, 5784, 5783, 5782,
    5781, 5780, 5779, 5778, 5777, 5776, 5775, 5774, 5773, 5772, 5771, 5770, 5769, 5768, 5767, 5766, 5765, 5764, 5763, 5762, 5761, 5760, 5759, 5758, 5757, 5756, 5755, 5754, 5753, 5752, 5751, 5750,
    6334, 6335, 6336, 6337, 6338, 6339, 6340, 6341, 6342, 6343, 6344, 6345, 6346, 6347, 6348, 6349, 6350, 6351, 6352, 6353, 6354, 6355, 6356, 6357, 6358, 6359, 6360, 6361, 6362, 6363, 6364, 6365,
    6366, 6367, 6368, 6369, 6370, 6371, 6372, 6373, 6374, 6375, 6376, 6377, 6378, 6379, 6380, 6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6389, 6390, 6391, 6392, 6393, 6394, 6395, 6396, 6397,
    6398, 6399, 6400, 6401, 6402, 6403, 6404, 6405, 6406, 6407, 6408, 6409, 6410, 6411, 6412, 6413, 6414, 6415, 6416, 6417, 6418, 6419, 6420, 6421, 6422, 6423, 6424, 6425, 6426, 6427, 6428, 6429,
    6430, 6431, 6432, 6433, 6434, 6435, 6436, 6437, 6438, 6439, 6440, 6441, 6442, 6443, 6444, 6445, 6446, 6447, 6448, 6449, 6450, 6451, 6452, 6453, 6454, 6455, 6456, 6457, 6458, 6459, 6460, 6461,
    6462, 6463, 6464, 6465, 6466, 6467, 6468, 6469, 6470, 6471, 6472, 6473, 6474, 6475, 6476, 6477, 6478, 6479, 6480, 6481, 6482, 6483, 6484, 6485, 6486, 6487, 6488, 6489, 6490, 6491, 6492, 6493,
    6494, 6495, 6496, 6497, 6498, 6499, 6500, 6501, 6502, 6503, 6504, 6505, 6506, 6507, 6508, 6509, 6510, 6511, 6512, 6513, 6514, 6515, 6516, 6517, 6518, 6519, 6520, 6521, 6522, 6523, 6524, 6525,
    6526, 6527, 6528, 6529, 6530, 6531, 6532, 6533, 6534, 6535, 6536, 6537, 6538, 6539, 6540, 6541, 6542, 6543, 6544, 6545, 6546, 6547, 6548, 6549, 6550, 6551, 6552, 6553, 6554, 6555, 6556, 6557,
    6558, 6559, 6560, 6561, 6562, 6563, 6564, 6565, 6566, 6567, 6568, 6569, 6570, 6571, 6572, 6573, 6574, 6575, 6576, 6577, 6578, 6579, 6580, 6581, 6582, 6583, 6584, 6585, 6586, 6587, 6588, 6589,
    6590, 6591, 6592, 6593, 6594, 6595, 6596, 6597, 6598, 6599, 6600, 6601, 6602, 6603, 6604, 6605, 6606, 6607, 6608, 6609, 6610, 6611, 6612, 6613, 6614, 6615, 6616, 6617, 6618, 6619, 6620, 6621,
    6622, 6623, 6624, 6625, 6626, 6627, 6628, 6629, 6630, 6631, 6632, 6633, 6634, 6635, 6636, 6637, 6638, 6639, 6640, 6641, 6642, 6643, 6644, 6645, 6646, 6647, 6648, 6649, 6650, 6651, 6652, 6653,
    6654, 6655, 6656, 6657, 6658, 6659, 6660, 6661, 6662, 6663, 6664, 6665, 6666, 6667, 6668, 6669, 6670, 6671, 6672, 6673, 6674, 6675, 6676, 6677, 6678, 6679, 6680, 6681, 6682, 6683, 6684, 6685,
    6686, 6687, 6688, 6689, 6690, 6691, 6692, 6693, 6694, 6695, 6696, 6697, 6698, 6699, 6700, 6701, 6702, 6703, 6704, 6705, 6706, 6707, 6708, 6709, 6710, 6711, 6712, 6713, 6714, 6715, 6716, 6717,
    6718, 6719, 6720, 6721, 6722, 6723, 6724, 6725, 6726, 6727, 6728, 6729, 6730, 6731, 6732, 6733, 6734, 6735, 6736, 6737, 6738, 6739, 6740, 6741, 6742, 6743, 6744, 6745, 6746, 6747, 6748, 6749,
    6750, 6751, 6752, 6753, 6754, 6755, 6756, 6757, 6758, 6759, 6760, 6761, 6762, 6763, 6764, 6765, 6766, 6767, 6768, 6769, 6770, 6771, 6772, 6773, 6774, 6775, 6776, 6777, 6778, 6779, 6780, 6781,
    6782, 6783, 6784, 6785, 6786, 6787, 6788, 6789, 6790, 6791, 6792, 6793, 6794, 6795, 6796, 6797, 6798, 6799, 6800, 6801, 6802, 6803, 6804, 6805, 6806, 6807, 6808, 6809, 6810, 6811, 6812, 6813,
    6814, 6815, 6816, 6817, 6818, 6819, 6820, 6821, 6822, 6823, 6824, 6825, 6826, 6827, 6828, 6829, 6830, 6831, 6832, 6833, 6834, 6835, 6836, 6837, 6838, 6839, 6840, 6841, 6842, 6843, 6844, 6845,
    6846, 6847, 6848, 6849, 6850, 6851, 6852, 6853, 6854, 6855, 6856, 6857, 6858, 6859, 6860, 6861, 6862, 6863, 6864, 6865, 6866, 6867, 6868, 6869, 6870, 6871, 6872, 6873, 6874, 6875, 6876, 6877,
    6878, 6879, 6880, 6881, 6882, 6883, 6884, 6885, 6886, 6887, 6888, 6889, 6890, 6891, 6892, 6893, 6894, 6895, 6896, 6897, 6898, 6899, 6900, 6901, 6902, 6903, 6904, 6905, 6906, 6907, 6908, 6909,
    6910, 6911, 6912, 6913, 6914, 6915, 6916, 6917, 6918, 6919, 6920, 6921, 6922, 6923, 6924, 6925, 6926, 6927, 6928, 6929, 6930, 6931, 6932, 6933, 6934, 6935, 6936, 6937, 6938, 6939, 6940, 6941,
    6942, 6943, 6944, 6945, 6946, 6947, 6948, 6949, 6950, 6951, 6952, 6953, 6954, 6955, 6956, 6957, 6958, 6959, 6960, 6961, 6962, 6963, 6964, 6965, 6966, 6967, 6968, 6969, 6970, 6971, 6972, 6973,
    6974, 6975, 6976, 6977, 6978, 6979, 6980, 6981, 6982, 6983, 6984, 6985, 6986, 6987, 6988, 6989, 6990, 6991, 6992, 6993, 6994, 6995, 6996, 6997, 6998, 6999, 7000, 7001, 7002, 7003, 7004, 7005,
    7006, 7007, 7008, 7009, 7010, 7011, 7012, 7013, 7014, 7015, 7016, 7017, 7018, 7019, 7020, 7021, 7022, 7023, 7024, 7025, 7026, 7027, 7028, 7029, 7030, 7031, 7032, 7033, 7034, 7035, 7036, 7037,
    7038, 7039, 7040, 7041, 7042, 7043, 7044, 7045, 7046, 7047, 7048, 7049, 7050, 7051, 7052, 7053, 7054, 7055, 7056, 7057, 7058, 7059, 7060, 7061, 7062, 7063, 7064, 7065, 7066, 7067, 7068, 7069,
    7070, 7071, 7072, 7073, 7074, 7075, 7076, 7077, 7078, 7079, 7080, 7081, 7082, 7083, 7084, 7085, 7086, 7087, 7088, 7089, 7090, 7091, 7092, 7093, 7094, 7095, 7096, 7097, 7098, 7099, 7100, 7101,
    7102, 7103, 7104, 7105, 7106, 7107, 7108, 7109, 7110, 7111, 7112, 7113, 7114, 7115, 7116, 7117, 7118, 7119, 7120, 7121, 7122, 7123, 7124, 7125, 7126, 7127, 7128, 7129, 7130, 7131, 7132, 7133,
    7134, 7135, 7136, 7137, 7138, 7139, 7140, 7141, 7142, 7143, 7144, 7145, 7146, 7147, 7148, 7149, 7150, 7151, 7152, 7153, 7154, 7155, 7156, 7157, 7158, 7159, 7160, 7161, 7162, 7163, 7164, 7165,
    7166, 7167, 7168, 7169, 7170, 7171, 7172, 7173, 7174, 7175, 7176, 7177, 7178, 7179, 7180, 7181, 7182, 7183, 7184, 7185, 7186, 7187, 7188, 7189, 7190, 7191, 7192, 7193, 7194, 7195, 7196, 7197,
    7198, 7199, 7200, 7201, 7202, 7203, 7204, 7205, 7206, 7207, 7208, 7209, 7210, 7211, 7212, 7213, 7214, 7215, 7216, 7217, 7218, 7219, 7220, 7221, 7222, 7223, 7224, 7225, 7226, 7227, 7228, 7229,
    7230, 7231, 7232, 7233, 7234, 7235, 7236, 7237, 7238, 7239, 7240, 7241, 7242, 7243, 7244, 7245, 7246, 7247, 7248, 7249, 7250, 7251, 7252, 7253, 7254, 7255, 7256, 7257, 7258, 7259, 7260, 7261,
    7262, 7263, 7264, 7265, 7266, 7267, 7268, 7269, 7270, 7271, 7272, 7273, 7274, 7275, 7276, 7277, 7278, 7279, 7280, 7281, 7282, 7283, 7284, 7285, 7286, 7287, 7288, 7289, 7290, 7291, 7292, 7293,
    7294, 7295, 7296, 7297, 7298, 7299, 7300, 7301, 7302, 7303, 7304, 7305, 7306, 7307, 7308, 7309, 7310, 7311, 7312, 7313, 7314, 7315, 7316, 7317, 7318, 7319, 7320, 7321, 7322, 7323, 7324, 7325,
    7326, 7327, 7328, 7329, 7330, 7331, 7332, 7333, 7334, 7335, 7336, 7337, 7338, 7339, 7340, 7341, 7342, 7343, 7344, 7345, 7346, 7347, 7348, 7349, 7350, 7351, 7352, 7353, 7354, 7355, 7356, 7357,
    7358, 7359, 7360, 7361, 7362, 7363, 7364, 7365, 7366, 7367, 7368, 7369, 7370, 7371, 7372, 7373, 7374, 7375, 7376, 7377, 7378, 7379, 7380, 7381, 7382, 7383, 7384, 7385, 7386, 7387, 7388, 7389,
    7390, 7391, 7392, 7393, 7394, 7395, 7396, 7397, 7398, 7399, 7400, 7401, 7402, 7403, 7404, 7405, 7406, 7407, 7408, 7409, 7410, 7411, 7412, 7413, 7414, 7415, 7416, 7417, 7418, 7419, 7420, 7421,
    7422, 7423, 7424, 7425, 7426, 7427, 7428, 7429, 7430, 7431, 7432, 7433, 7434, 7435, 7436, 7437, 7438, 7439, 7440, 7441, 7442, 7443, 7444, 7445, 7446, 7447, 7448, 7449, 7450, 7451, 7452, 7453,
    7454, 7455, 7456, 7457, 7458, 7459, 7460, 7461, 7462, 7463, 7464, 7465, 7466, 7467, 7468, 7469, 7470, 7471, 7472, 7473, 7474, 7475, 7476, 7477, 7478, 7479, 7480, 7481, 7482, 7483, 7484, 7485,
    7486, 7487, 7488, 7489, 7490, 7491, 7492, 7493, 7494, 7495, 7496, 7497, 7498, 7499, 7500, 7501, 7502, 7503, 7504, 7505, 7506, 7507, 7508, 7509, 7510, 7511, 7512, 7513, 7514, 7515, 7516, 7517,
    7518, 7519, 7520, 7521, 7522, 7523, 7524, 7525, 7526, 7527, 7528, 7529, 7530, 7531, 7532, 7533, 7534, 7535, 7536, 7537, 7538, 7539, 7540, 7541, 7542, 7543, 7544, 7545, 7546, 7547, 7548, 7549,
    7550, 7551, 7552, 7553, 7554, 7555, 7556, 7557, 7558, 7559, 7560, 7561, 7562, 7563, 7564, 7565, 7566, 7567, 7568, 7569, 7570, 7571, 7572, 7573, 7574, 7575, 7576, 7577, 7578, 7579, 7580, 7581,
    7582, 7583, 7584, 7585, 7586, 7587, 7588, 7589, 7590, 7591, 7592, 7593, 7594, 7595, 7596, 7597, 7598, 7599, 7600, 7601, 7602, 7603, 7604, 7605, 7606, 7607, 7608, 7609, 7610, 7611, 7612, 7613,
    7614, 7615, 7616, 7617, 7618, 7619, 7620, 7621, 7622, 7623, 7624, 7625, 7626, 7627, 7628, 7629, 7630, 7631, 7632, 7633, 7634, 7635, 7636, 7637, 7638, 7639, 7640, 7641, 7642, 7643, 7644, 7645,
    7646, 7647, 7648, 7649, 7650, 7651, 7652, 7653, 7654, 7655, 7656, 7657, 7658, 7659, 7660, 7661, 7662, 7663, 7664, 7665, 7666, 7667, 7668, 7669, 7670, 7671, 7672, 7673, 7674, 7675, 7676, 7677,
    7678, 7679, 7680, 7681, 7682, 7683, 7684, 7685, 7686, 7687, 7688, 7689, 7690, 7691, 7692, 7693, 7694, 7695, 7696, 7697, 7698, 7699, 7700, 7701, 7702, 7703, 7704, 7705, 7706, 7707, 7708, 7709,
    7710, 7711, 7712, 7713, 7714, 7715, 7716, 7717, 7718, 7719, 7720, 7721, 7722, 7723, 7724, 7725, 7726, 7727, 7728, 7729, 7730, 7731, 7732, 7733, 7734, 7735, 7736, 7737, 7738, 7739, 7740, 7741,
    7742, 7743, 7744, 7745, 7746, 7747, 7748, 7749, 7750, 7751, 7752, 7753, 7754, 7755, 7756, 7757, 7758, 7759, 7760, 7761, 7762, 7763, 7764, 7765, 7766, 7767, 7768, 7769, 7770, 7771, 7772, 7773,
    7774, 7775, 7776, 7777, 7778, 7779, 7780, 7781, 7782, 7783, 7784, 7785, 7786, 7787, 7788, 7789, 7790, 7791, 7792, 7793, 7794, 7795, 7796, 7797, 7798, 7799, 7800, 7801, 7802, 7803, 7804, 7805,
    7806, 7807, 7808, 7809, 7810, 7811, 7812, 7813, 7814, 7815, 7816, 7817, 7818, 7819, 7820, 7821, 7822, 7823, 7824, 7825, 7826, 7827, 7828, 7829, 7830, 7831, 7832, 7833, 7834, 7835, 7836, 7837,
    7838, 7839, 7840, 7841, 7842, 7843, 7844, 7845, 7846, 7847, 7848, 7849, 7850, 7851, 7852, 7853, 7854, 7855, 7856, 7857, 7858, 7859, 7860, 7861, 7862, 7863, 7864, 7865, 7866, 7867, 7868, 7869,
    7870, 7871, 7872, 7873, 7874, 7875, 7876, 7877, 7878, 7879, 7880, 7881, 7882, 7883, 7884, 7885, 7886, 7887, 7888, 7889, 7890, 7891, 7892, 7893, 7894, 7895, 7896, 7897, 7898, 7899, 7900, 7901,
    7902, 7903, 7904, 7905, 7906, 7907, 7908, 7909, 7910, 7911, 7912, 7913, 7914, 7915, 7916, 7917, 7918, 7919, 7920, 7921, 7922, 7923, 7924, 7925, 7926, 7927, 7928, 7929, 7930, 7931, 7932, 7933,
    7934, 7935, 7936, 7937, 7938, 7939, 7940, 7941, 7942, 7943, 7944, 7945, 7946, 7947, 7948, 7949, 7950, 7951, 7952, 7953, 7954, 7955, 7956, 7957, 7958, 7959, 7960, 7961, 7962, 7963, 7964, 7965,
    7966, 7967, 7968, 7969, 7970, 7971, 7972, 7973, 7974, 7975, 7976, 7977, 7978, 7979, 7980, 7981, 7982, 7983, 7984, 7985, 7986, 7987, 7988, 7989, 7990, 7991, 7992, 7993, 7994, 7995, 7996, 7997,
    7998, 7999, 8000, 8001, 8002, 8003, 8004, 8005, 8006, 8007, 8008, 8009, 8010, 8011, 8012, 8013, 8014, 8015, 8016, 8017, 8018, 8019, 8020, 8021, 8022, 8023, 8024, 8025, 8026, 8027, 8028, 8029,
    8030, 8031, 8032, 8033, 8034, 8035, 8036, 8037, 8038, 8039, 8040, 8041, 8042, 8043, 8044, 8045, 8046, 8047, 8048, 8049, 8050, 8051, 8052, 8053, 8054, 8055, 8056, 8057, 8058, 8059, 8060, 8061,
    8062, 8063, 8064, 8065, 8066, 8067, 8068, 8069, 8070, 8071, 8072, 8073, 8074, 8075, 8076, 8077, 8078, 8079, 8080, 8081, 8082, 8083, 8084, 8085, 8086, 8087, 8088, 8089, 8090, 8091, 8092, 8093,
    8094, 8095, 8096, 8097, 8098, 8099, 8100, 8101, 8102, 8103, 8104, 8105, 8106, 8107, 8108, 8109, 8110, 8111, 8112, 8113, 8114, 8115, 8116, 8117, 8118, 8119, 8120, 8121, 8122, 8123, 8124, 8125,
    8126, 8127, 8128, 8129, 8130, 8131, 8132, 8133, 8134, 8135, 8136, 8137, 8138, 8139, 8140, 8141, 8142, 8143, 8144, 8145, 8146, 8147, 8148, 8149, 8150, 8151, 8152, 8153, 8154, 8155, 8156, 8157,
    8158, 8159, 8160, 8161, 8162, 8163, 8164, 8165, 8166, 8167, 8168, 8169, 8170, 8171, 8172, 8173, 8174, 8175, 8176, 8177, 8178, 8179, 8180, 8181, 8182, 8183, 8184, 8185, 8186, 8187, 8188, 8189,
    8190, 8191, 8191, 8190, 8189, 8188, 8187, 8186, 8185, 8184, 8183, 8182, 8181, 8180, 8179, 8178, 8177, 8176, 8175, 8174, 8173, 8172, 8171, 8170, 8169, 8168, 8167, 8166, 8165, 8164, 8163, 8162,
    8161, 8160, 8159, 8158, 8157, 8156, 8155, 8154, 8153, 8152, 8151, 8150, 8149, 8148, 8147, 8146, 8145, 8144, 8143, 8142, 8141, 8140, 8139, 8138, 8137, 8136, 8135, 8134, 8133, 8132, 8131, 8130,
    8129, 8128, 8127, 8126, 8125, 8124, 8123, 8122, 8121, 8120, 8119, 8118, 8117, 8116, 8115, 8114, 8113, 8112, 8111, 8110, 8109, 8108, 8107, 8106, 8105, 8104, 8103, 8102, 8101, 8100, 8099, 8098,
    8097, 8096, 8095, 8094, 8093, 8092, 8091, 8090, 8089, 8088, 8087, 8086, 8085, 8084, 8083, 8082, 8081, 8080, 8079, 8078, 8077, 8076, 8075, 8074, 8073, 8072, 8071, 8070, 8069, 8068, 8067, 8066,
    8065, 8064, 8063, 8062, 8061, 8060, 8059, 8058, 8057, 8056, 8055, 8054, 8053, 8052, 8051, 8050, 8049, 8048, 8047, 8046, 8045, 8044, 8043, 8042, 8041, 8040, 8039, 8038, 8037, 8036, 8035, 8034,
    8033, 8032, 8031, 8030, 8029, 8028, 8027, 8026, 8025, 8024, 8023, 8022, 8021, 8020, 8019, 8018, 8017, 8016, 8015, 8014, 8013, 8012, 8011, 8010, 8009, 8008, 8007, 8006, 8005, 8004, 8003, 8002,
    6236, 6237, 6238, 6239, 6240, 6241, 6242, 6243, 6244, 6245, 6246, 6247, 6248, 6249, 6250, 6251, 6252, 6253, 6254, 6255, 6256, 6257, 6258, 6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6267,
    6268, 6269, 6270, 6271, 6272, 6273, 6274, 6275, 6276, 6277, 6278, 6279, 6280, 6281, 6282, 6283, 6284, 6285, 6286, 6287, 6288, 6289, 6290, 6291, 6292, 6293, 6294, 6295, 6296, 6297, 6298, 6299,
    6300, 6301, 6302, 6303, 6304, 6305, 6306, 6307, 6308, 6309, 6310, 6311, 6312, 6313, 6314, 6315, 6316, 6317, 6318, 6319, 6320, 6321, 6322, 6323, 6324, 6325, 6326, 6327, 6328, 6329, 6330, 6331,
    6332, 6333, 6334, 6335, 6336, 6337, 6338, 6339, 6340, 6341, 6342, 6343, 6344, 6345, 6346, 6347, 6348, 6349, 6350, 6351, 6352, 6353, 6354, 6355, 6356, 6357, 6358, 6359, 6360, 6361, 6362, 6363,
    6364, 6365, 6366, 6367, 6368, 6369, 6370, 6371, 6372, 6373, 6374, 6375, 6376, 6377, 6378, 6379, 6380, 6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6389, 6390, 6391, 6392, 6393, 6394, 6395,
    6396, 6397, 6398, 6399, 6400, 6401, 6402, 6403, 6404, 6405, 6406, 6407, 6408, 6409, 6410, 6411, 6412, 6413, 6414, 6415, 6416, 6417, 6418, 6419, 6420, 6421, 6422, 6423, 6424, 6425, 6426, 6427,
    6428, 6429, 6430, 6431, 6432, 6433, 6434, 6435, 6436, 6437, 6438, 6439, 6440, 6441, 6442, 6443, 6444, 6445, 6446, 6447, 6448, 6449, 6450, 6451, 6452, 6453, 6454, 6455, 6456, 6457, 6458, 6459,
    6460, 6461, 6462, 6463, 6464, 6465, 6466, 6467, 6468, 6469, 6470, 6471, 6472, 6473, 6474, 6475, 6476, 6477, 6478, 6479, 6480, 6481, 6482, 6483, 6484, 6485, 6486, 6487, 6488, 6489, 6490, 6491,
    6492, 6493, 6494, 6495, 6496, 6497, 6498, 6499, 6500, 6501, 6502, 6503, 6504, 6505, 6506, 6507, 6508, 6509, 6510, 6511, 6512, 6513, 6514, 6515, 6516, 6517, 6518, 6519, 6520, 6521, 6522, 6523,
    6524, 6525, 6526, 6527, 6528, 6529, 6530, 6531, 6532, 6533, 6534, 6535, 6536, 6537, 6538, 6539, 6540, 6541, 6542, 6543, 6544, 6545, 6546, 6547, 6548, 6549, 6550, 6551, 6552, 6553, 6554, 6555,
    6556, 6557, 6558, 6559, 6560, 6561, 6562, 6563, 6564, 6565, 6566, 6567, 6568, 6569, 6570, 6571, 6572, 6573, 6574, 6575, 6576, 6577, 6578, 6579, 6580, 6581, 6582, 6583, 6584, 6585, 6586, 6587,
    6588, 6589, 6590, 6591, 6592, 6593, 6594, 6595, 6596, 6597, 6598, 6599, 6600, 6601, 6602, 6603, 6604, 6605, 6606, 6607, 6608, 6609, 6610, 6611, 6612, 6613, 6614, 6615, 6616, 6617, 6618, 6619,
    6620, 6621, 6622, 6623, 6624, 6625, 6626, 6627, 6628, 6629, 6630, 6631, 6632, 6633, 6634, 6635, 6636, 6637, 6638, 6639, 6640, 6641, 6642, 6643, 6644, 6645, 6646, 6647, 6648, 6649, 6650, 6651,
    6652, 6653, 6654, 6655, 6656, 6657, 6658, 6659, 6660, 6661, 6662, 6663, 6664, 6665, 6666, 6667, 6668, 6669, 6670, 6671, 6672, 6673, 6674, 6675, 6676, 6677, 6678, 6679, 6680, 6681, 6682, 6683,
    6684, 6685, 6686, 6687, 6688, 6689, 6690, 6691, 6692, 6693, 6694, 6695, 6696, 6697, 6698, 6699, 6700, 6701, 6702, 6703, 6704, 6705, 6706, 6707, 6708, 6709, 6710, 6711, 6712, 6713, 6714, 6715,
    6716, 6717, 6718, 6719, 6720, 6721, 6722, 6723, 6724, 6725, 6726, 6727, 6728, 6729, 6730, 6731, 6732, 6733, 6734, 6735, 6736, 6737, 6738, 6739, 6740, 6741, 6742, 6743, 6744, 6745, 6746, 6747,
    6748, 6749, 6750, 6751, 6752, 6753, 6754, 6755, 6756, 6757, 6758, 6759, 6760, 6761, 6762, 6763, 6764, 6765, 6766, 6767, 6768, 6769, 6770, 6771, 6772, 6773, 6774, 6775, 6776, 6777, 6778, 6779,
    6780, 6781, 6782, 6783, 6784, 6785, 6786, 6787, 6788, 6789, 6790, 6791, 6792, 6793, 6794, 6795, 6796, 6797, 6798, 6799, 6800, 6801, 6802, 6803, 6804, 6805, 6806, 6807, 6808, 6809, 6810, 6811,
    6812, 6813, 6814, 6815, 6816, 6817, 6818, 6819, 6820, 6821, 6822, 6823, 6824, 6825, 6826, 6827, 6828, 6829, 6830, 6831, 6832, 6833, 6834, 6835, 6836, 6837, 6838, 6839, 6840, 6841, 6842, 6843,
    6844, 6845, 6846, 6847, 6848, 6849, 6850, 6851, 6852, 6853, 6854, 6855, 6856, 6857, 6858, 6859, 6860, 6861, 6862, 6863, 6864, 6865, 6866, 6867, 6868, 6869, 6870, 6871, 6872, 6873, 6874, 6875,
    6876, 6877, 6878, 6879, 6880, 6881, 6882, 6883, 6884, 6885, 6886, 6887, 6888, 6889, 6890, 6891, 6892, 6893, 6894, 6895, 6896, 6897, 6898, 6899, 6900, 6901, 6902, 6903, 6904, 6905, 6906, 6907,
    6908, 6909, 6910, 6911, 6912, 6913, 6914, 6915, 6916, 6917, 6918, 6919, 6920, 6921, 6922, 6923, 6924, 6925, 6926, 6927, 6928, 6929, 6930, 6931, 6932, 6933, 6934, 6935, 6936, 6937, 6938, 6939,
    6940, 6941, 6942, 6943, 6944, 6945, 6946, 6947, 6948, 6949, 6950, 6951, 6952, 6953, 6954, 6955, 6956, 6957, 6958, 6959, 6960, 6961, 6962, 6963, 6964, 6965, 6966, 6967, 6968, 6969, 6970, 6971,
    6972, 6973, 6974, 6975, 6976, 6977, 6978, 6979, 6980, 6981, 6982, 6983, 6984, 6985, 6986, 6987, 6988, 6989, 6990, 6991, 6992, 6993, 6994, 6995, 6996, 6997, 6998, 6999, 7000, 7001, 7002, 7003,
    7004, 7005, 7006, 7007, 7008, 7009, 7010, 7011, 7012, 7013, 7014, 7015, 7016, 7017, 7018, 7019, 7020, 7021, 7022, 7023, 7024, 7025, 7026, 7027, 7028, 7029, 7030, 7031, 7032, 7033, 7034, 7035,
    7036, 7037, 7038, 7039, 7040, 7041, 7042, 7043, 7044, 7045, 7046, 7047, 7048, 7049, 7050, 7051, 7052, 7053, 7054, 7055, 7056, 7057, 7058, 7059, 7060, 7061, 7062, 7063, 7064, 7065, 7066, 7067,
    7068, 7069, 7070, 7071, 7072, 7073, 7074, 7075, 7076, 7077, 7078, 7079, 7080, 7081, 7082, 7083, 7084, 7085, 7086, 7087, 7088, 7089, 7090, 7091, 7092, 7093, 7094, 7095, 7096, 7097, 7098, 7099,
    7100, 7101, 7102, 7103, 7104, 7105, 7106, 7107, 7108, 7109, 7110, 7111, 7112, 7113, 7114, 7115, 7116, 7117, 7118, 7119, 7120, 7121, 7122, 7123, 7124, 7125, 7126, 7127, 7128, 7129, 7130, 7131,
    7132, 7133, 7134, 7135, 7136, 7137, 7138, 7139, 7140, 7141, 7142, 7143, 7144, 7145, 7146, 7147, 7148, 7149, 7150, 7151, 7152, 7153, 7154, 7155, 7156, 7157, 7158, 7159, 7160, 7161, 7162, 7163,
    7164, 7165, 7166, 7167, 7168, 7169, 7170, 7171, 7172, 7173, 7174, 7175, 7176, 7177, 7178, 7179, 7180, 7181, 7182, 7183, 7184, 7185, 7186, 7187, 7188, 7189, 7190, 7191, 7192, 7193, 7194, 7195,
    7196, 7197, 7198, 7199, 7200, 7201, 7202, 7203, 7204, 7205, 7206, 7207, 7208, 7209, 7210, 7211, 7212, 7213, 7214, 7215, 7216, 7217, 7218, 7219, 7220, 7221, 7222, 7223, 7224, 7225, 7226, 7227,
    7228, 7229, 7230, 7231, 7232, 7233, 7234, 7235, 7236, 7237, 7238, 7239, 7240, 7241, 7242, 7243, 7244, 7245, 7246, 7247, 7248, 7249, 7250, 7251, 7252, 7253, 7254, 7255, 7256, 7257, 7258, 7259,
    7260, 7261, 7262, 7263, 7264, 7265, 7266, 7267, 7268, 7269, 7270, 7271, 7272, 7273, 7274, 7275, 7276, 7277, 7278, 7279, 7280, 7281, 7282, 7283, 7284, 7285, 7286, 7287, 7288, 7289, 7290, 7291,
    7292, 7293, 7294, 7295, 7296, 7297, 7298, 7299, 7300, 7301, 7302, 7303, 7304, 7305, 7306, 7307, 7308, 7309, 7310, 7311, 7312, 7313, 7314, 7315, 7316, 7317, 7318, 7319, 7320, 7321, 7322, 7323,
    7324, 7325, 7326, 7327, 7328, 7329, 7330, 7331, 7332, 7333, 7334, 7335, 7336, 7337, 7338, 7339, 7340, 7341, 7342, 7343, 7344, 7345, 7346, 7347, 7348, 7349, 7350, 7351, 7352, 7353, 7354, 7355,
    7356, 7357, 7358, 7359, 7360, 7361, 7362, 7363, 7364, 7365, 7366, 7367, 7368, 7369, 7370, 7371, 7372, 7373, 7374, 7375, 7376, 7377, 7378, 7379, 7380, 7381, 7382, 7383, 7384, 7385, 7386, 7387,
    7388, 7389, 7390, 7391, 7392, 7393, 7394, 7395, 7396, 7397, 7398, 7399, 7400, 7401, 7402, 7403, 7404, 7405, 7406, 7407, 7408, 7409, 7410, 7411, 7412, 7413, 7414, 7415, 7416, 7417, 7418, 7419,
    7420, 7421, 7422, 7423, 7424, 7425, 7426, 7427, 7428, 7429, 7430, 7431, 7432, 7433, 7434, 7435, 7436, 7437, 7438, 7439, 7440, 7441, 7442, 7443, 7444, 7445, 7446, 7447, 7448, 7449, 7450, 7451,
    7452, 7453, 7454, 7455, 7456, 7457, 7458, 7459, 7460, 7461, 7462, 7463, 7464, 7465, 7466, 7467, 7468, 7469, 7470, 7471, 7472, 7473, 7474, 7475, 7476, 7477, 7478, 7479, 7480, 7481, 7482, 7483,
    7484, 7485, 7486, 7487, 7488, 7489, 7490, 7491, 7492, 7493, 7494, 7495, 7496, 7497, 7498, 7499, 7500, 7501, 7502, 7503, 7504, 7505, 7506, 7507, 7508, 7509, 7510, 7511, 7512, 7513, 7514, 7515,
    7516, 7517, 7518, 7519, 7520, 7521, 7522, 7523, 7524, 7525, 7526, 7527, 7528, 7529, 7530, 7531, 7532, 7533, 7534, 7535, 7536, 7537, 7538, 7539, 7540, 7541, 7542, 7543, 7544, 7545, 7546, 7547,
    7548, 7549, 7550, 7551, 7552, 7553, 7554, 7555, 7556, 7557, 7558, 7559, 7560, 7561, 7562, 7563, 7564, 7565, 7566, 7567, 7568, 7569, 7570, 7571, 7572, 7573, 7574, 7575, 7576, 7577, 7578, 7579,
    7580, 7581, 7582, 7583, 7584, 7585, 7586, 7587, 7588, 7589, 7590, 7591, 7592, 7593, 7594, 7595, 7596, 7597, 7598, 7599, 7600, 7601, 7602, 7603, 7604, 7605, 7606, 7607, 7608, 7609, 7610, 7611,
    7612, 7613, 7614, 7615, 7616, 7617, 7618, 7619, 7620, 7621, 7622, 7623, 7624, 7625, 7626, 7627, 7628, 7629, 7630, 7631, 7632, 7633, 7634, 7635, 7636, 7637, 7638, 7639, 7640, 7641, 7642, 7643,
    7644, 7645, 7646, 7647, 7648, 7649, 7650, 7651, 7652, 7653, 7654, 7655, 7656, 7657, 7658, 7659, 7660, 7661, 7662, 7663, 7664, 7665, 7666, 7667, 7668, 7669, 7670, 7671, 7672, 7673, 7674, 7675,
    7676, 7677, 7678, 7679, 7680, 7681, 7682, 7683, 7684, 7685, 7686, 7687, 7688, 7689, 7690, 7691, 7692, 7693, 7694, 7695, 7696, 7697, 7698, 7699, 7700, 7701, 7702, 7703, 7704, 7705, 7706, 7707,
    7708, 7709, 7710, 7711, 7712, 7713, 7714, 7715, 7716, 7717, 7718, 7719, 7720, 7721, 7722, 7723, 7724, 7725, 7726, 7727, 7728, 7729, 7730, 7731, 7732, 7733, 7734, 7735, 7736, 7737, 7738, 7739,
    7740, 7741, 7742, 7743, 7744, 7745, 7746, 7747, 7748, 7749, 7750, 7751, 7752, 7753, 7754, 7755, 7756, 7757, 7758, 7759, 7760, 7761, 7762, 7763, 7764, 7765, 7766, 7767, 7768, 7769, 7770, 7771,
    7772, 7773, 7774, 7775, 7776, 7777, 7778, 7779, 7780, 7781, 7782, 7783, 7784, 7785, 7786, 7787, 7788, 7789, 7790, 7791, 7792, 7793, 7794, 7795, 7796, 7797, 7798, 7799, 7800, 7801, 7802, 7803,
    7804, 7805, 7806, 7807, 7808, 7809, 7810, 7811, 7812, 7813, 7814, 7815, 7816, 7817, 7818, 7819, 7820, 7821, 7822, 7823, 7824, 7825, 7826, 7827, 7828, 7829, 7830, 7831, 7832, 7833, 7834, 7835,
    7836, 7837, 7838, 7839, 7840, 7841, 7842, 7843, 7844, 7845, 7846, 7847, 7848, 7849, 7850, 7851, 7852, 7853, 7854, 7855, 7856, 7857, 7858, 7859, 7860, 7861, 7862, 7863, 7864, 7865, 7866, 7867,
    7868, 7869, 7870, 7871, 7872, 7873, 7874, 7875, 7876, 7877, 7878, 7879, 7880, 7881, 7882, 7883, 7884, 7885, 7886, 7887, 7888, 7889, 7890, 7891, 7892, 7893, 7894, 7895, 7896, 7897, 7898, 7899,
    7900, 7901, 7902, 7903, 7904, 7905, 7906, 7907, 7908, 7909, 7910, 7911, 7912, 7913, 7914, 7915, 7916, 7917, 7918, 7919, 7920, 7921, 7922, 7923, 7924, 7925, 7926, 7927, 7928, 7929, 7930, 7931,
    7932, 7933, 7934, 7935, 7936, 7937, 7938, 7939, 7940, 7941, 7942, 7943, 7944, 7945, 7946, 7947, 7948, 7949, 7950, 7951, 7952, 7953, 7954, 7955, 7956, 7957, 7958, 7959, 7960, 7961, 7962, 7963,
    7964, 7965, 7966, 7967, 7968, 7969, 7970, 7971, 7972, 7973, 7974, 7975, 7976, 7977, 7978, 7979, 7980, 7981, 7982, 7983, 7984, 7985, 7986, 7987, 7988, 7989, 7990, 7991, 7992, 7993, 7994, 7995,
    7996, 7997, 7998, 7999, 8000, 8001, 8002, 8003, 8004, 8005, 8006, 8007, 8008, 8009, 8010, 8011, 8012, 8013, 8014, 8015, 8016, 8017, 8018, 8019, 8020, 8021, 8022, 8023, 8024, 8025, 8026, 8027,
    8028, 8029, 8030, 8031, 8032, 8033, 8034, 8035, 8036, 8037, 8038, 8039, 8040, 8041, 8042, 8043, 8044, 8045, 8046, 8047, 8048, 8049, 8050, 8051, 8052, 8053, 8054, 8055, 8056, 8057, 8058, 8059,
    8060, 8061, 8062, 8063, 8064, 8065, 8066, 8067, 8068, 8069, 8070, 8071, 8072, 8073, 8074, 8075, 8076, 8077, 8078, 8079, 8080, 8081, 8082, 8083, 8084, 8085, 8086, 8087, 8088, 8089, 8090, 8091,
    8092, 8093, 8094, 8095, 8096, 8097, 8098, 8099, 8100, 8101, 8102, 8103, 8104, 8105, 8106, 8107, 8108, 8109, 8110, 8111, 8112, 8113, 8114, 8115, 8116, 8117, 8118, 8119, 8120, 8121, 8122, 8123,
    8124, 8125, 8126, 8127, 8128, 8129, 8130, 8131, 8132, 8133, 8134, 8135, 8136, 8137, 8138, 8139, 8140, 8141, 8142, 8143, 8144, 8145, 8146, 8147, 8148, 8149, 8150, 8151, 8152, 8153, 8154, 8155,
    8156, 8157, 8158, 8159, 8160, 8161, 8162, 8163, 8164, 8165, 8166, 8167, 8168, 8169, 8170, 8171, 8172, 8173, 8174, 8175, 8176, 8177, 8178, 8179, 8180, 8181, 8182, 8183, 8184, 8185, 8186, 8187,
    8188, 8189, 8190, 8191, 8191, 8190, 8189, 8188, 8187, 8186, 8185, 8184, 8183, 8182, 8181, 8180, 8179, 8178, 8177, 8176, 8175, 8174, 8173, 8172, 8171, 8170, 8169, 8168, 8167, 8166, 8165, 8164,
    8163, 8162, 8161, 8160, 8159, 8158, 8157, 8156, 8155, 8154, 8153, 8152, 8151, 8150, 8149, 8148, 8147, 8146, 8145, 8144, 8143, 8142, 8141, 8140, 8139, 8138, 8137, 8136, 8135, 8134, 8133, 8132,
    8131, 8130, 8129, 8128, 8127, 8126, 8125, 8124, 8123, 8122, 8121, 8120, 8119, 8118, 8117, 8116, 8115, 8114, 8113, 8112, 8111, 8110, 8109, 8108, 8107, 8106, 8105, 8104, 8103, 8102, 8101, 8100
};

// #define CONV_LOG2(v)                    (aec_com_tbl_log2[v])
u8 log2_func(u8 w)
{
#pragma HLS inline
    u8 log2_val = 0;
    switch (w)
    {
        case 4:  log2_val = 2; break;
        case 8:  log2_val = 3; break;
        case 16: log2_val = 4; break;
        case 32: log2_val = 5; break;
        case 64: log2_val = 6; break;
        default: {
            log2_val = 0;
            assert(0);
            break;
        }
    }
    return log2_val;
}

u32 get_exp_golomb_symbol(u16 symbol)
{
#pragma HLS inline
    u8 exp_golomb_order = 0;
    u32 sum_symbol = 0; 

    u16 symbol_1 = symbol + 1;
    bool bit_16 = (symbol_1 >> 16) & 1;
    bool bit_15 = (symbol_1 >> 15) & 1;
    bool bit_14 = (symbol_1 >> 14) & 1;
    bool bit_13 = (symbol_1 >> 13) & 1;
    bool bit_12 = (symbol_1 >> 12) & 1;
    bool bit_11 = (symbol_1 >> 11) & 1;
    bool bit_10 = (symbol_1 >> 10) & 1;
    bool bit_9 = (symbol_1 >> 9) & 1;
    bool bit_8 = (symbol_1 >> 8) & 1;
    bool bit_7 = (symbol_1 >> 7) & 1;
    bool bit_6 = (symbol_1 >> 6) & 1;
    bool bit_5 = (symbol_1 >> 5) & 1;
    bool bit_4 = (symbol_1 >> 4) & 1;
    bool bit_3 = (symbol_1 >> 3) & 1;
    bool bit_2 = (symbol_1 >> 2) & 1;
    bool bit_1 = (symbol_1 >> 1) & 1;

    if (bit_16) exp_golomb_order = 15;
    else if (bit_15) exp_golomb_order = 15;
    else if (bit_14) exp_golomb_order = 14;
    else if (bit_13) exp_golomb_order = 13;
    else if (bit_12) exp_golomb_order = 12;
    else if (bit_11) exp_golomb_order = 11;
    else if (bit_10) exp_golomb_order = 10;
    else if (bit_9)  exp_golomb_order = 9;
    else if (bit_8)  exp_golomb_order = 8;
    else if (bit_7)  exp_golomb_order = 7;
    else if (bit_6)  exp_golomb_order = 6;
    else if (bit_5)  exp_golomb_order = 5;
    else if (bit_4)  exp_golomb_order = 4;
    else if (bit_3)  exp_golomb_order = 3;
    else if (bit_2)  exp_golomb_order = 2;
    else if (bit_1)  exp_golomb_order = 1;
    else             exp_golomb_order = 0;

    if (bit_16)      sum_symbol = 32767;
    else if (bit_15) sum_symbol = 32767;
    else if (bit_14) sum_symbol = 16383;
    else if (bit_13) sum_symbol = 8191;
    else if (bit_12) sum_symbol = 4095;
    else if (bit_11) sum_symbol = 2047;
    else if (bit_10) sum_symbol = 1023;
    else if (bit_9)  sum_symbol = 511;
    else if (bit_8)  sum_symbol = 255;
    else if (bit_7)  sum_symbol = 127;
    else if (bit_6)  sum_symbol = 63;
    else if (bit_5)  sum_symbol = 31;
    else if (bit_4)  sum_symbol = 15;
    else if (bit_3)  sum_symbol = 7;
    else if (bit_2)  sum_symbol = 3;
    else if (bit_1)  sum_symbol = 1;
    else             sum_symbol = 0;

    u32 out = (sum_symbol << 8) + exp_golomb_order;
    return out;
}

#define CONV_LOG2(v)         (log2_func(v))

#if DT_SYNTAX
//extern int  com_dt_allow(int cu_w, int cu_h, int pred_mode, int max_dt_size);
int com_dt_allow_aec(int cu_w, int cu_h, int pred_mode, int max_dt_size)
{
#pragma HLS INLINE off
    //only allow intra DT
    if (pred_mode != MODE_INTRA) {
        return 0;
    }

    int max_size = max_dt_size;
    int min_size = 16;
    int hori_allow = cu_h >= min_size && (cu_w <= max_size && cu_h <= max_size) && cu_w < cu_h * 4;
    int vert_allow = cu_w >= min_size && (cu_w <= max_size && cu_h <= max_size) && cu_h < cu_w * 4;

    return hori_allow + (vert_allow << 1);
}
#endif
//extern void get_part_info(U11 pic_width_in_scu, U13 x, U13 y, U7 w, U7 h, U4 part_size, COM_PART_INFO* sub_info);
void get_part_info_aec(U11 pic_width_in_scu, U13 x, U13 y, U7 w, U7 h, U4 part_size, COM_PART_INFO* sub_info)
{
#if	CLOSE_MD_HLS
#pragma HLS ARRAY_PARTITION variable=sub_info->sub_x complete dim=0
#pragma HLS ARRAY_PARTITION variable=sub_info->sub_y complete dim=0
#pragma HLS ARRAY_PARTITION variable=sub_info->sub_w complete dim=0
#pragma HLS ARRAY_PARTITION variable=sub_info->sub_h complete dim=0
#pragma HLS ARRAY_PARTITION variable=sub_info->sub_scup complete dim=0
#pragma HLS INLINE
#endif
    U8 i;
    U5 qw = w >> 2;
    U5 qh = h >> 2;
    U12 x_scu, y_scu;

    for (i = 0; i < MAX_NUM_PB; i++) {
#pragma HLS unroll
#pragma HLS LOOP_TRIPCOUNT max=4
        sub_info->num_sub_part = 0;
        sub_info->sub_x[i] = 0;
        sub_info->sub_y[i] = 0;
        sub_info->sub_w[i] = 0;
        sub_info->sub_h[i] = 0;
        sub_info->sub_scup[i] = 0;
    }

    //derive sub_part x, y, w, h
    if (part_size == SIZE_2Nx2N) {
        sub_info->num_sub_part = 1;
        sub_info->sub_x[0] = x;
        sub_info->sub_y[0] = y;
        sub_info->sub_w[0] = w;
        sub_info->sub_h[0] = h;
    }
    else if (part_size == SIZE_2NxhN) {
        sub_info->num_sub_part = 4;
        for (i = 0; i < 4; i++) {
#pragma HLS unroll
#pragma HLS LOOP_TRIPCOUNT max=4
            sub_info->sub_x[i] = x;
            sub_info->sub_y[i] = qh * i + y;
            sub_info->sub_w[i] = w;
            sub_info->sub_h[i] = qh;
        }
    }
    else if (part_size == SIZE_2NxnU) {
        sub_info->num_sub_part = 2;
        for (i = 0; i < 2; i++) {
#pragma HLS unroll
#pragma HLS LOOP_TRIPCOUNT max=2
            sub_info->sub_x[i] = x;
            sub_info->sub_y[i] = qh * (i == 0 ? 0 : 1) + y;
            sub_info->sub_w[i] = w;
            sub_info->sub_h[i] = qh * (i == 0 ? 1 : 3);
        }
    }
    else if (part_size == SIZE_2NxnD) {
        sub_info->num_sub_part = 2;
        for (i = 0; i < 2; i++) {
#pragma HLS unroll
#pragma HLS LOOP_TRIPCOUNT max=2
            sub_info->sub_x[i] = x;
            sub_info->sub_y[i] = qh * (i == 0 ? 0 : 3) + y;
            sub_info->sub_w[i] = w;
            sub_info->sub_h[i] = qh * (i == 0 ? 3 : 1);
        }
    }
    else if (part_size == SIZE_hNx2N) {
        sub_info->num_sub_part = 4;
        for (i = 0; i < 4; i++) {
#pragma HLS unroll
#pragma HLS LOOP_TRIPCOUNT max=4
            sub_info->sub_x[i] = qw * i + x;
            sub_info->sub_y[i] = y;
            sub_info->sub_w[i] = qw;
            sub_info->sub_h[i] = h;
        }
    }
    else if (part_size == SIZE_nLx2N) {
        sub_info->num_sub_part = 2;
        for (i = 0; i < 2; i++) {
#pragma HLS unroll
#pragma HLS LOOP_TRIPCOUNT max=2
            sub_info->sub_x[i] = qw * (i == 0 ? 0 : 1) + x;
            sub_info->sub_y[i] = y;
            sub_info->sub_w[i] = qw * (i == 0 ? 1 : 3);
            sub_info->sub_h[i] = h;
        }
    }
    else if (part_size == SIZE_nRx2N) {
        sub_info->num_sub_part = 2;
        for (i = 0; i < 2; i++) {
#pragma HLS unroll
#pragma HLS LOOP_TRIPCOUNT max=2
            sub_info->sub_x[i] = qw * (i == 0 ? 0 : 3) + x;
            sub_info->sub_y[i] = y;
            sub_info->sub_w[i] = qw * (i == 0 ? 3 : 1);
            sub_info->sub_h[i] = h;
        }
    }
    else if (part_size == SIZE_NxN) {
        sub_info->num_sub_part = 4;
        for (i = 0; i < 4; i++) {
#pragma HLS unroll
#pragma HLS LOOP_TRIPCOUNT max=4
            sub_info->sub_x[i] = qw * (i == 0 || i == 2 ? 0 : 2) + x;
            sub_info->sub_y[i] = qh * (i == 0 || i == 1 ? 0 : 2) + y;
            sub_info->sub_w[i] = qw * 2;
            sub_info->sub_h[i] = qh * 2;
        }
    }
    else {
        assert(0);
    }

    //derive sub_part scup
    //for (i = 0; i < sub_info->num_sub_part; i++) {
    for (i = 0; i < 4; i++) {
#pragma HLS unroll
#pragma HLS LOOP_TRIPCOUNT max=4
        x_scu = PEL2SCU(sub_info->sub_x[i]);
        y_scu = PEL2SCU(sub_info->sub_y[i]);
        sub_info->sub_scup[i] = x_scu + y_scu * pic_width_in_scu;
    }
}
//extern void get_tb_start_pos(int w, int h, PART_SIZE part, int idx, int* pos_x, int* pos_y);
void get_tb_start_pos_aec(int w, int h, PART_SIZE part, int idx, int* pos_x, int* pos_y)
{
#pragma HLS INLINE off
    int x = 0, y = 0;

    switch (part) {
    case SIZE_2Nx2N:
        x = y = 0;
        break;
    case SIZE_NxN:
        y = (idx / 2) * h / 2;
        x = (idx % 2) * w / 2;
        break;
    case SIZE_2NxhN:
        x = 0;
        y = idx * (h / 4);
        break;
    case SIZE_hNx2N:
        y = 0;
        x = idx * (w / 4);
        break;
    default:
        assert(0);
        break;
    }
    *pos_x = x;
    *pos_y = y;
}

int ace_get_shift_phase2(int v)
{
#pragma HLS INLINE off
    int index;
    if (v == 0) {
        index = 0;
    }
    else {
        for (index = 8; index >= 0; index--) {
#pragma HLS LOOP_TRIPCOUNT max=9
            if (v & (1 << index)) {
                break;
            }
        }
    }
    return 8 - index;

}

void com_sbac_ctx_init_aec(COM_SBAC_CTX* sbac_ctx)
{
#if USE_ENH
    int i, num;
    //SBAC_CTX_MODEL *p;

    //com_mset(sbac_ctx, 0x00, sizeof(*sbac_ctx));

    ///* Initialization of the context models */
    //num = sizeof(COM_SBAC_CTX) / sizeof(SBAC_CTX_MODEL);
    //p = (SBAC_CTX_MODEL*)sbac_ctx;

    //for (i = 0; i < num; i++)
    //{
    //    p[i] = PROB_INIT;
    //}

    sbac_ctx->sp_or_ibc_flag[0] = PROB_INIT;
    sbac_ctx->sp_flag[0] = PROB_INIT;
    sbac_ctx->sp_copy_direct_flag[0] = PROB_INIT;
    sbac_ctx->sp_is_matched_flag[0] = PROB_INIT;
    sbac_ctx->sp_above_offset[0] = PROB_INIT;
    sbac_ctx->sp_offset_y_zero[0] = PROB_INIT;
    sbac_ctx->sp_offset_x_zero[0] = PROB_INIT;
    sbac_ctx->sp_n_recent_flag[0] = PROB_INIT;
    sbac_ctx->sp_pixel_is_matched_flag[0] = PROB_INIT;
    sbac_ctx->sp_cs2_flag[0] = PROB_INIT;
    sbac_ctx->sp_mode_context[0] = PROB_INIT;
    sbac_ctx->sp_str_type_context[0] = PROB_INIT;
    sbac_ctx->sp_str_scanmode_context[0] = PROB_INIT;
    sbac_ctx->sp_evs_present_flag_context[0] = PROB_INIT;
    sbac_ctx->sp_SRB_lo_ref_color_flag_context[0] = PROB_INIT;
    sbac_ctx->bgc_flag = PROB_INIT;
    sbac_ctx->bgc_idx = PROB_INIT;
    sbac_ctx->umve_awp_flag = PROB_INIT;
    sbac_ctx->umve_base_idx[0] = PROB_INIT;
    sbac_ctx->umve_step_idx[0] = PROB_INIT;
    sbac_ctx->affine_umve_flag = PROB_INIT;
    sbac_ctx->affine_umve_step_idx[0] = PROB_INIT;
    sbac_ctx->cons_mode[0] = PROB_INIT;
    sbac_ctx->iip_flag[0] = PROB_INIT;
    sbac_ctx->ipf_flag[0] = PROB_INIT;
    sbac_ctx->bvr_idx[0] = PROB_INIT;
    sbac_ctx->mvp_from_hmvp_flag[0] = PROB_INIT;
    sbac_ctx->tb_split[0] = PROB_INIT;
    sbac_ctx->affine_flag[0] = PROB_INIT;
    sbac_ctx->etmvp_flag[0] = PROB_INIT;
    sbac_ctx->awp_flag[0] = PROB_INIT;
    sbac_ctx->sawp_flag[0] = PROB_INIT;
    sbac_ctx->awp_mvr_flag = PROB_INIT;
    sbac_ctx->awp_mvr_step_idx[0] = PROB_INIT;
    sbac_ctx->smvd_flag[0] = PROB_INIT;
    sbac_ctx->ets_flag[0] = PROB_INIT;
    sbac_ctx->ts_flag[0] = PROB_INIT;
    sbac_ctx->est_flag[0] = PROB_INIT;
    sbac_ctx->st_chroma_flag[0] = PROB_INIT;
    sbac_ctx->sao_mode[0] = PROB_INIT;
    sbac_ctx->sao_offset[0] = PROB_INIT;
    sbac_ctx->alf_lcu_enable[0] = PROB_INIT;
    sbac_ctx->esao_lcu_enable[0] = PROB_INIT;
    sbac_ctx->esao_offset[0] = PROB_INIT;
    sbac_ctx->esao_chroma_mode_flag[0] = PROB_INIT;
    sbac_ctx->ccsao_lcu_flag[0] = PROB_INIT;
    sbac_ctx->ccsao_offset[0] = PROB_INIT;

    for (i = 0; i < 2; i++) {
        sbac_ctx->direct_flag[i] = PROB_INIT;
        sbac_ctx->inter_filter_flag[i] = PROB_INIT;
        sbac_ctx->umve_dir_idx[i] = PROB_INIT;
        sbac_ctx->affine_umve_dir_idx[i] = PROB_INIT;
        sbac_ctx->affine_mvr_idx[i] = PROB_INIT;
        sbac_ctx->ctp_zero_flag[i] = PROB_INIT;
        sbac_ctx->awp_mvr_dir_idx[i] = PROB_INIT;
    }

    for (i = 0; i < 3; i++) {
        sbac_ctx->ibc_flag[i] = PROB_INIT;
        sbac_ctx->sp_string_length[i] = PROB_INIT;
        sbac_ctx->sp_n_index[i] = PROB_INIT;
        sbac_ctx->sp_SRB_copy_toprun_context[i] = PROB_INIT;
        sbac_ctx->ipc_flag[i] = PROB_INIT;
        sbac_ctx->inter_dir[i] = PROB_INIT;
        sbac_ctx->refi[i] = PROB_INIT;
        sbac_ctx->cbf[i] = PROB_INIT;
        sbac_ctx->split_mode[i] = PROB_INIT;
        sbac_ctx->awp_idx[i] = PROB_INIT;
        sbac_ctx->sao_merge_flag[i] = PROB_INIT;
        sbac_ctx->nnlf_lcu_enable[i] = PROB_INIT;
    }

    for (i = 0; i < 4; i++) {
        sbac_ctx->skip_flag[i] = PROB_INIT;
        sbac_ctx->sp_lo_ref_maxlength_context[i] = PROB_INIT;
        sbac_ctx->mvr_idx[i] = PROB_INIT;
        sbac_ctx->cu_qp_delta_abs[i] = PROB_INIT;
        sbac_ctx->split_flag[i] = PROB_INIT;
        sbac_ctx->affine_mrg_idx[i] = PROB_INIT;
        sbac_ctx->etmvp_idx[i] = PROB_INIT;
        sbac_ctx->delta_qp[i] = PROB_INIT;
    }

    for (i = 0; i < 5; i++) {
        sbac_ctx->split_dir[i] = PROB_INIT;
    }

    for (i = 0; i < 6; i++) {
        sbac_ctx->pred_mode[i] = PROB_INIT;
        sbac_ctx->cbvp_idx[i] = PROB_INIT;
        sbac_ctx->mvd[2][i] = PROB_INIT;
        sbac_ctx->part_size[i] = PROB_INIT;
    }

    for (i = 0; i < 7; i++) {
        sbac_ctx->sbt_info[i] = PROB_INIT;
    }

    for (i = 0; i < 9; i++) {
        sbac_ctx->bt_split_flag[i] = PROB_INIT;
        sbac_ctx->nnlf_lcu_set[i] = PROB_INIT;
    }

    for (i = 0; i < 11; i++) {
        sbac_ctx->skip_idx_ctx[i] = PROB_INIT;
    }

    for (i = 0; i < 12; i++) {
        sbac_ctx->last1[i] = PROB_INIT;
    }

    for (i = 0; i < 14; i++) {
        sbac_ctx->intra_dir[i] = PROB_INIT;
        sbac_ctx->svd[2][i] = PROB_INIT;
    }

    for (i = 0; i < 16; i++) {
        sbac_ctx->bvd[2][i] = PROB_INIT;
    }

    for (i = 0; i < 22; i++) {
        sbac_ctx->cc_gt1[i] = PROB_INIT;
        sbac_ctx->last2[i] = PROB_INIT;
    }

    for (i = 0; i < 24; i++) {
        sbac_ctx->run[i] = PROB_INIT;
        sbac_ctx->run_rdoq[i] = PROB_INIT;
        sbac_ctx->level[i] = PROB_INIT;
    }

    for (i = 0; i < 28; i++) {
        sbac_ctx->cc_scanr_x[i] = PROB_INIT;
        sbac_ctx->cc_scanr_y[i] = PROB_INIT;
    }

    for (i = 0; i < 60; i++) {
        sbac_ctx->cc_gt0[i] = PROB_INIT;
    }
#else
    add by yanyy
        int i;
#if !AWP
    sbac_ctx->umve_flag = PROB_INIT;
#endif
    sbac_ctx->umve_base_idx[0] = PROB_INIT;
    sbac_ctx->umve_step_idx[0] = PROB_INIT;
    sbac_ctx->cons_mode[0] = PROB_INIT;
    sbac_ctx->ipf_flag[0] = PROB_INIT;
    sbac_ctx->mvp_from_hmvp_flag[0] = PROB_INIT;
    sbac_ctx->tb_split[0] = PROB_INIT;
    sbac_ctx->affine_flag[0] = PROB_INIT;
    sbac_ctx->smvd_flag[0] = PROB_INIT;
    sbac_ctx->sao_mode[0] = PROB_INIT;
    sbac_ctx->sao_offset[0] = PROB_INIT;
    sbac_ctx->alf_lcu_enable[0] = PROB_INIT;

    for (i = 0; i < 2; i++) {
        sbac_ctx->direct_flag[i] = PROB_INIT;
        sbac_ctx->umve_dir_idx[i] = PROB_INIT;
        sbac_ctx->affine_mvr_idx[i] = PROB_INIT;
        sbac_ctx->ctp_zero_flag[i] = PROB_INIT;
        for (int j = 0; j < 3; j++) {
            sbac_ctx->mvd[i][j] = PROB_INIT;
        }
    }
    for (i = 0; i < 3; i++) {
        sbac_ctx->inter_dir[i] = PROB_INIT;
        sbac_ctx->cbf[i] = PROB_INIT;
        sbac_ctx->split_mode[i] = PROB_INIT;
        sbac_ctx->refi[i] = PROB_INIT;
        sbac_ctx->sao_merge_flag[i] = PROB_INIT;
    }
    for (i = 0; i < 4; i++) {
        sbac_ctx->skip_flag[i] = PROB_INIT;
        sbac_ctx->mvr_idx[i] = PROB_INIT;
        sbac_ctx->affine_mrg_idx[i] = PROB_INIT;
        sbac_ctx->delta_qp[i] = PROB_INIT;
        sbac_ctx->split_flag[i] = PROB_INIT;
    }
    for (i = 0; i < 5; i++) {
        sbac_ctx->split_dir[i] = PROB_INIT;
    }
    for (i = 0; i < 6; i++) {
        sbac_ctx->pred_mode[i] = PROB_INIT;
        sbac_ctx->part_size[i] = PROB_INIT;
    }
    for (i = 0; i < 9; i++) {
        sbac_ctx->bt_split_flag[i] = PROB_INIT;
    }
    for (i = 0; i < 10; i++) {
        sbac_ctx->intra_dir[i] = PROB_INIT;
    }
    for (i = 0; i < 11; i++) {
        sbac_ctx->skip_idx_ctx[i] = PROB_INIT;
    }
    for (i = 0; i < 12; i++) {
        sbac_ctx->last1[i] = PROB_INIT;
    }
    for (i = 0; i < 22; i++) {
        sbac_ctx->last2[i] = PROB_INIT;
    }
    for (i = 0; i < 24; i++) {
        sbac_ctx->run[i] = PROB_INIT;
        sbac_ctx->run_rdoq[i] = PROB_INIT;
        sbac_ctx->level[i] = PROB_INIT;
    }
#endif
}
extern int com_split_part_count(U3 split_mode);
extern int com_split_is_vertical(U3 mode);
extern U8 com_split_get_part_size(U3 split_mode, U3 part_num, U8 length);
extern U3 com_split_get_part_size_idx(U3 split_mode, U3 part_num, U3 length_idx);

void aec_com_split_get_part_structure(int split_mode, int x0, int y0, int cu_width, int cu_height, int cup, int cud,
    int log2_culine, COM_SPLIT_STRUCT* split_struct)
{
    int i;
    int log_cuw, log_cuh;
    int cup_w, cup_h;
    split_struct->part_count = com_split_part_count(split_mode);
    log_cuw = CONV_LOG2(cu_width);
    log_cuh = CONV_LOG2(cu_height);
    split_struct->x_pos[0] = x0;
    split_struct->y_pos[0] = y0;
    split_struct->cup[0] = cup;
    switch (split_mode) {
    case NO_SPLIT: {
        split_struct->width[0] = cu_width;
        split_struct->height[0] = cu_height;
        split_struct->log_cuw[0] = log_cuw;
        split_struct->log_cuh[0] = log_cuh;
    }
                 break;
    case SPLIT_QUAD: {
        split_struct->width[0] = cu_width >> 1;
        split_struct->height[0] = cu_height >> 1;
        split_struct->log_cuw[0] = log_cuw - 1;
        split_struct->log_cuh[0] = log_cuh - 1;
        for (i = 1; i < split_struct->part_count; ++i) {
#pragma HLS loop_tripcount max=3
            split_struct->width[i] = split_struct->width[0];
            split_struct->height[i] = split_struct->height[0];
            split_struct->log_cuw[i] = split_struct->log_cuw[0];
            split_struct->log_cuh[i] = split_struct->log_cuh[0];
        }
        split_struct->x_pos[1] = x0 + split_struct->width[0];
        split_struct->y_pos[1] = y0;
        split_struct->x_pos[2] = x0;
        split_struct->y_pos[2] = y0 + split_struct->height[0];
        split_struct->x_pos[3] = split_struct->x_pos[1];
        split_struct->y_pos[3] = split_struct->y_pos[2];
        cup_w = (split_struct->width[0] >> MIN_CU_LOG2);
        cup_h = ((split_struct->height[0] >> MIN_CU_LOG2) << log2_culine);
        split_struct->cup[1] = cup + cup_w;
        split_struct->cup[2] = cup + cup_h;
        split_struct->cup[3] = split_struct->cup[1] + cup_h;
        split_struct->cud = cud + 1;
    }
                   break;
    default: {
        if (com_split_is_vertical((SPLIT_MODE)split_mode)) {
            for (i = 0; i < split_struct->part_count; ++i) {
#pragma HLS loop_tripcount max=4
                split_struct->width[i] = com_split_get_part_size(split_mode, i, cu_width);
                split_struct->log_cuw[i] = com_split_get_part_size_idx(split_mode, i, log_cuw);

                if (split_mode == SPLIT_EQT_VER) {
                    if (i == 0 || i == 3) {
                        split_struct->height[i] = cu_height;
                        split_struct->log_cuh[i] = log_cuh;
                    }
                    else {
                        split_struct->height[i] = cu_height >> 1;
                        split_struct->log_cuh[i] = log_cuh - 1;
                    }
                }
                else {
                    split_struct->height[i] = cu_height;
                    split_struct->log_cuh[i] = log_cuh;
                    if (i) {
                        split_struct->x_pos[i] = split_struct->x_pos[i - 1] + split_struct->width[i - 1];
                        split_struct->y_pos[i] = split_struct->y_pos[i - 1];
                        split_struct->cup[i] = split_struct->cup[i - 1] + (split_struct->width[i - 1] >> MIN_CU_LOG2);
                    }
                }

            }
#if EQT_TEMP
            if (split_mode == SPLIT_EQT_VER) {
                split_struct->x_pos[1] = split_struct->x_pos[0] + split_struct->width[0];
                split_struct->y_pos[1] = split_struct->y_pos[0];
                split_struct->cup[1] = split_struct->cup[0] + (split_struct->width[0] >> MIN_CU_LOG2);
                cup_h = ((split_struct->height[1] >> MIN_CU_LOG2) << log2_culine);
                split_struct->x_pos[2] = split_struct->x_pos[1];
                split_struct->y_pos[2] = split_struct->y_pos[1] + split_struct->height[1];
                split_struct->cup[2] = split_struct->cup[1] + cup_h;
                split_struct->x_pos[3] = split_struct->x_pos[1] + split_struct->width[1];
                split_struct->y_pos[3] = split_struct->y_pos[1];
                split_struct->cup[3] = split_struct->cup[1] + (split_struct->width[1] >> MIN_CU_LOG2);
            }
#endif
        }
        else {
            for (i = 0; i < split_struct->part_count; ++i) {
#pragma HLS loop_tripcount max=4
#if 0
                if (split_mode == SPLIT_EQT_HOR) {
                    if (i == 0 || i == 3) {
                        split_struct->width[i] = cu_width;
                        split_struct->log_cuw[i] = log_cuw;
                    }
                    else 

                    {
                        split_struct->width[i] = cu_width >> 1;
                        split_struct->log_cuw[i] = log_cuw - 1;
                    }
                }
                else
#endif                
               {
                    split_struct->width[i] = cu_width;
                    split_struct->log_cuw[i] = log_cuw;
                    if (i) {
                        split_struct->y_pos[i] = split_struct->y_pos[i - 1] + split_struct->height[i - 1];
                        split_struct->x_pos[i] = split_struct->x_pos[i - 1];
                        split_struct->cup[i] = split_struct->cup[i - 1] + ((split_struct->height[i - 1] >> MIN_CU_LOG2) << log2_culine);
                    }
                }

                split_struct->height[i] = com_split_get_part_size(split_mode, i, cu_height);
                split_struct->log_cuh[i] = com_split_get_part_size_idx(split_mode, i, log_cuh);
            }
#if EQT_TEMP
            if (split_mode == SPLIT_EQT_HOR) {
                split_struct->y_pos[1] = split_struct->y_pos[0] + split_struct->height[0];
                split_struct->x_pos[1] = split_struct->x_pos[0];
                split_struct->cup[1] = split_struct->cup[0] + ((split_struct->height[0] >> MIN_CU_LOG2) << log2_culine);
                split_struct->y_pos[2] = split_struct->y_pos[1];
                split_struct->x_pos[2] = split_struct->x_pos[1] + split_struct->width[1];
                split_struct->cup[2] = split_struct->cup[1] + (split_struct->width[1] >> MIN_CU_LOG2);
                split_struct->y_pos[3] = split_struct->y_pos[1] + split_struct->height[1];
                split_struct->x_pos[3] = split_struct->x_pos[1];
                split_struct->cup[3] = split_struct->cup[1] + ((split_struct->height[1] >> MIN_CU_LOG2) << log2_culine);
            }
#endif
        }
        switch (split_mode) {
        case SPLIT_BI_VER:
            split_struct->cud = cud + ((cu_width == cu_height || cu_width < cu_height) ? 0 : 1);
            break;
        case SPLIT_BI_HOR:
            split_struct->cud = cud + ((cu_width == cu_height || cu_width > cu_height) ? 0 : 1);
            break;
        default:
            // Triple tree case
            split_struct->cud = cud + (cu_width == cu_height ? 0 : 1);
            break;
        }
    }
           break;
    }
}

#if EQT_TEMP
int aec_com_split_is_EQT(SPLIT_MODE mode)
{
    return (mode == SPLIT_EQT_HOR) || (mode == SPLIT_EQT_VER) ? 1 : 0;
}
#endif

int  aec_com_split_is_BT(SPLIT_MODE mode)
{
    return (mode == SPLIT_BI_HOR) || (mode == SPLIT_BI_VER) ? 1 : 0;
}

#if AEC_PHASE1
void aec_init_scan(u16* scan, int size_x, int size_y, int scan_type)
{
#pragma HLS INLINE off
    int x, y, l, pos, num_line;
    pos = 0;
    num_line = size_x + size_y - 1;
    if (scan_type == COEF_SCAN_ZIGZAG) {
        /* starting point */
        scan[pos] = 0;
        pos++;
        /* loop */
        for (l = 1; l < num_line; l++) {
#pragma HLS LOOP_TRIPCOUNT max=127
            if (l % 2) { /* decreasing loop */
                x = COM_MIN(l, size_x - 1);
                y = COM_MAX(0, l - (size_x - 1));
                while (x >= 0 && y < size_y) {
#pragma HLS LOOP_TRIPCOUNT max=64
                    scan[pos] = (u16)(y * size_x + x);
                    pos++;
                    x--;
                    y++;
                }
            }
            else { /* increasing loop */
                y = COM_MIN(l, size_y - 1);
                x = COM_MAX(0, l - (size_y - 1));
                while (y >= 0 && x < size_x) {
#pragma HLS LOOP_TRIPCOUNT max=64
                    scan[pos] = (u16)(y * size_x + x);
                    pos++;
                    x++;
                    y--;
                }
            }
        }
    }
}

int aec_get_part_num(PART_SIZE size)
{
#pragma HLS INLINE off
    switch (size) {
    case SIZE_2Nx2N:
        return 1;
    default:
        assert(0);
        return -1;
    }
}
#endif

#if MODE_CONS
u8 aec_com_constrain_pred_mode(int w, int h, SPLIT_MODE split, u8 slice_type)
{
    if (slice_type == SLICE_I) {
        return 0;
    }
    else {
        int s = w * h;
        if (/*(aec_com_split_is_EQT(split) && s == 128) ||*/ ((aec_com_split_is_BT(split) || split == SPLIT_QUAD) && s == 64)) {
            return 1;
        }
        else {
            return 0;
        }
    }
}
#endif

#if AEC_PHASE1
void aec_get_tb_width_height_log2(int log2_w, int log2_h, PART_SIZE part, int* log2_tb_w, int* log2_tb_h)
{
#pragma HLS INLINE off
    switch (part) {
    case SIZE_2Nx2N:
        break;
    case SIZE_NxN:
        log2_w--;
        log2_h--;
        break;
    case SIZE_2NxhN:
        log2_h -= 2;
        break;
    case SIZE_hNx2N:
        log2_w -= 2;
        break;
    default:
        assert(0);
        break;
    }

    *log2_tb_w = log2_w;
    *log2_tb_h = log2_h;
}

int aec_is_tb_avaliable(int log2_w, int log2_h, PART_SIZE pb_part_size, int pred_mode,
    u8 position_based_transform_enable_flag)
{
    //intra: always infer TB part
    if (pred_mode == MODE_INTRA) {
        return 0;
    }

    //inter: signal for DT and PBT cases
    int avaliable = 0;
    if (position_based_transform_enable_flag && (pb_part_size == SIZE_2Nx2N && abs(log2_w - log2_h) <= 1 && log2_w <= 5
        && log2_w >= 3 && log2_h <= 5 && log2_h >= 3)) {
        avaliable = 0;
    }
    return avaliable;
}

int aec_is_cu_nz(int nz[MAX_NUM_TB][N_C])
{
    int cu_nz = 0;
    int i, j;

    for (i = 0; i < MAX_NUM_TB; i++) {
#pragma HLS LOOP_TRIPCOUNT max=4
        for (j = 0; j < N_C; j++) {
#pragma HLS LOOP_TRIPCOUNT max=3
            cu_nz |= nz[i][j];
        }
    }
    return cu_nz ? 1 : 0;
}

void aec_enc_sbac_finish(ENC_SBAC* sbac, COM_BSW* bs)
{
    //static int bin_cnt = 0; ++bin_cnt;
    //printf("finish %d\n", bin_cnt);

    int is_ipcm = 0;
    //ENC_SBAC *sbac = &AEC_DATA_input.sbac;
    if (sbac->code >> (32 - sbac->left_bits))
    {
        assert(sbac->pending_byte != 0xff);
        aec_com_bsw_write(bs, sbac->pending_byte + 1, 8);
        while (sbac->stacked_ff != 0)
        {
            aec_com_bsw_write(bs, 0x00, 8);
            sbac->stacked_ff--;
        }
        sbac->code -= 1 << (32 - sbac->left_bits);
    }
    else
    {
        if (sbac->is_pending_byte)
        {
            aec_com_bsw_write(bs, sbac->pending_byte, 8);
        }

        while (sbac->stacked_ff != 0)
        {
            aec_com_bsw_write(bs, 0xFF, 8);
            sbac->stacked_ff--;
        }
    }
    sbac->code |= (1 << 7);
    aec_com_bsw_write(bs, sbac->code >> 8, 24 - sbac->left_bits);

    //if ((23 - sbac->left_bits) % 8)
    if (is_ipcm || (24 - sbac->left_bits) % 8) // write the last byte of low in the end of CABAC, if the number of used bits (23 - left_bits) + 1 is not exactly bytes (Nx8), corresponding to bits_Needed != 0
    {
        aec_com_bsw_write(bs, sbac->code, 8);
    }

    if (!is_ipcm)
    {
        //add termination slice padding bits
        aec_com_bsw_write(bs, 1, 1);
    }
    while (!COM_BSR_IS_BYTE_ALIGN(bs))
    {
        aec_com_bsw_write(bs, 0, 1);
    }

    aec_com_bsw_flush(bs);
    bs->leftbits = 32;
    bs->code = 0;
}
#endif

int aec_com_get_split_mode(s8* split_mode, u8* cons_pred_mode, int cud, int cup, int cu_width, int cu_height, int lcu_s, U8(*split_mode_buf)[NUM_BLOCK_SHAPE][MAX_CU_CNT_IN_LCU])
{
    int ret = COM_OK;
    //cup = 0;
    int pos = cup + (((cu_height >> 1) >> MIN_CU_LOG2) * (lcu_s >> MIN_CU_LOG2) + ((cu_width >> 1) >> MIN_CU_LOG2));
    int shape = SQUARE + (CONV_LOG2(cu_width) - CONV_LOG2(cu_height));
    assert(shape >= 0 && shape < NUM_BLOCK_SHAPE);
    if (cu_width < 8 && cu_height < 8)
    {
        *split_mode = NO_SPLIT;
        *cons_pred_mode = NO_MODE_CONS;
        return ret;
    }

    *split_mode = split_mode_buf[cud][shape][pos] & 0x07;
    *cons_pred_mode = (split_mode_buf[cud][shape][pos] >> 3) & 0x03;

    return ret;
}

u8 aec_com_tree_split(int w, int h, SPLIT_MODE split)
{
    if (split == SPLIT_QUAD)
    {
        if (w == 8)
            return 1;
        else
            return 0;
    }
#if 0
    else if (split == SPLIT_EQT_HOR)
    {
        if (h == 16 || w == 8)
            return 1;
        else
            return 0;
    }
    else if (split == SPLIT_EQT_VER)
    {
        if (w == 16 || h == 8)
            return 1;
        else
            return 0;
    }
#endif
    else if (split == SPLIT_BI_HOR)
    {
        if (h == 8)
            return 1;
        else
            return 0;
    }
    else if (split == SPLIT_BI_VER)
    {
        if (w == 8)
            return 1;
        else
            return 0;
    }
    else
    {
        return 0;
    }
}

void get_sao_param(U12 fetch_output_pixel_x, U12 fetch_output_pixel_y, AEC_input* AEC_DATA_input, SAOBlkParam cur_saoPAram_local[3]) {
    //下面代码要移到firmware
    int i;

    int mb_x = fetch_output_pixel_x >> MIN_CU_LOG2;
    int mb_y = fetch_output_pixel_y >> MIN_CU_LOG2;
    //   SAOBlkParam merge_candidate[NUM_SAO_MERGE_TYPES][N_C];
    int merge_avail[NUM_SAO_MERGE_TYPES];
    int mergeup_avail;
    int mergeleft_avail;
    mergeup_avail = (mb_y == 0 ? 0 : 1);
    mergeleft_avail = (mb_x == 0 ? 0 : 1);
    merge_avail[SAO_MERGE_LEFT] = mergeleft_avail;
    merge_avail[SAO_MERGE_ABOVE] = mergeup_avail;
    SAOBlkParam* saoBlkParam;
    saoBlkParam = cur_saoPAram_local;

    AEC_DATA_input->MergeLeftAvail = merge_avail[SAO_MERGE_LEFT];

    AEC_DATA_input->MergeUpAvail = merge_avail[SAO_MERGE_ABOVE];

    AEC_DATA_input->modeIdc[0] = saoBlkParam[0].modeIdc;
    AEC_DATA_input->modeIdc[1] = saoBlkParam[1].modeIdc;
    AEC_DATA_input->modeIdc[2] = saoBlkParam[2].modeIdc;

    AEC_DATA_input->typeIdc[0] = saoBlkParam[0].typeIdc;
    AEC_DATA_input->typeIdc[1] = saoBlkParam[1].typeIdc;
    AEC_DATA_input->typeIdc[2] = saoBlkParam[2].typeIdc;

    AEC_DATA_input->startBand[0] = saoBlkParam[0].startBand;
    AEC_DATA_input->startBand[1] = saoBlkParam[1].startBand;
    AEC_DATA_input->startBand[2] = saoBlkParam[2].startBand;

    AEC_DATA_input->startBand2[0] = saoBlkParam[0].startBand2;
    AEC_DATA_input->startBand2[1] = saoBlkParam[1].startBand2;
    AEC_DATA_input->startBand2[2] = saoBlkParam[2].startBand2;

    AEC_DATA_input->deltaband[0] = saoBlkParam[0].deltaband;
    AEC_DATA_input->deltaband[1] = saoBlkParam[1].deltaband;
    AEC_DATA_input->deltaband[2] = saoBlkParam[2].deltaband;

    for (i = 0; i < 32; i++) {
        AEC_DATA_input->offset[0][i] = saoBlkParam[0].offset[i];
        AEC_DATA_input->offset[1][i] = saoBlkParam[1].offset[i];
        AEC_DATA_input->offset[2][i] = saoBlkParam[2].offset[i];
    }
}

#if AEC_PHASE1
void aec_enc_sbac_encode_binW(u32 bin, ENC_SBAC* sbac, SBAC_CTX_MODEL* model1, SBAC_CTX_MODEL* model2, COM_BSW* bs)
{
#if AEC_STAGE3_DEBUG
#if AEC_STAGE3_CTX_DEBUG
    //fprintf(fp_ctx, "method: 2, symbol: %d, model2_idx: %03d, model1_idx: %03d\n", bin, (u32)((model2 - aec_ctx.last2) + 1), (u32)((model1 - aec_ctx.delta_qp) + 1));//, model=0x%04x\n, (*model) & 0x1FFF);
    fprintf(fp_ctx, "2 %d %03d %03d\n", bin, (u32)((model2 - aec_ctx.last2) + 1), (u32)((model1 - aec_ctx.delta_qp) + 1));//, model=0x%04x\n, (*model) & 0x1FFF);
#endif
#if AEC_STAGE3_BINA_DEBUG
    fprintf(fp_bina, "encode bin:%d, range_in=%d, low_in=%d, model_in1=%03x, model_in2=%03x, ", bin, sbac->range, sbac->code & 0x1FF, (*model1) & PROB_MASK, (*model2) & PROB_MASK);
#endif
#endif

    //static int bin_cnt = 0; ++bin_cnt;
    //printf("wbac %d %d %d %d %d\n", bin_cnt, bin, sbac->range, *model1, *model2);

#if CABAC_MULTI_PROB
    if (g_compatible_back)
    {
        mCabac_ws = 6;
    }
    u8 cycno1 = (*model1) >> CYCNO_SHIFT_BITS;
    u8 cycno2 = (*model2) >> CYCNO_SHIFT_BITS;
    if (cycno1 < 0)
        cycno1 = 0;
    if (cycno2 < 0)
        cycno2 = 0;
    int is_LPS = 0;
    u16 p1_0 = ((*model1) >> PROB_BITS) & MCABAC_PROB_MASK;
    u16 p1_1 = ((*model1) >> 1) & MCABAC_PROB_MASK;
    u16 prob_lps1 = (u16)(p1_0 + p1_1 + 1) >> 1;
    prob_lps1 = prob_lps1 < 6 ? 6 : prob_lps1;
    u16 p2_0 = ((*model2) >> PROB_BITS) & MCABAC_PROB_MASK;
    u16 p2_1 = ((*model2) >> 1) & MCABAC_PROB_MASK;
    u16 prob_lps2 = (u16)(p2_0 + p2_1 + 1) >> 1;
    prob_lps2 = prob_lps2 < 6 ? 6 : prob_lps2;
    u8 cwr1 = 0;
    if (g_compatible_back)
    {
        cwr1 = (cycno1 <= 1) ? 3 : (cycno1 == 2) ? 4 : (mCabac_ws - 1);
    }
    else
    {
        cwr1 = (cycno1 < counter_thr1) ? (mCabac_ws - 2) : (mCabac_ws - 1);
    }
    cwr1 = COM_CLIP(cwr1, MIN_WINSIZE, MAX_WINSIZE);
    u8 mcabac_flag1 = (cycno1 == counter_thr2) ? 1 : 0;
    u16 LG_S1 = cwr2LGS[cwr1];
    u8 cwr2 = 0;
    if (g_compatible_back)
    {
        cwr2 = (cycno2 <= 1) ? 3 : (cycno2 == 2) ? 4 : (mCabac_ws - 1);
    }
    else
    {
        cwr2 = (cycno2 < counter_thr1) ? (mCabac_ws - 2) : (mCabac_ws - 1);
    }
    cwr2 = COM_CLIP(cwr2, MIN_WINSIZE, MAX_WINSIZE);
    u8 mcabac_flag2 = (cycno2 == counter_thr2) ? 1 : 0;
    u16 LG_S2 = cwr2LGS[cwr2];
#endif
    u16 prob_lps;
#if !CABAC_MULTI_PROB
    u16 prob_lps1 = ((*model1) & PROB_MASK) >> 1;
    u16 prob_lps2 = ((*model2) & PROB_MASK) >> 1;
#endif
    u16 cmps;
    u16 cmps1 = (*model1) & 1;
    u16 cmps2 = (*model2) & 1;
    u32 rLPS;
    u32 rMPS;
    int s_flag;

    if (cmps1 == cmps2)
    {
        cmps = cmps1;
        prob_lps = (prob_lps1 + prob_lps2) >> 1;
    }
    else
    {
        if (prob_lps1 < prob_lps2)
        {
            cmps = cmps1;
            prob_lps = (256 << LG_PMPS_SHIFTNO) - 1 - ((prob_lps2 - prob_lps1) >> 1);
        }
        else
        {
            cmps = cmps2;
            prob_lps = (256 << LG_PMPS_SHIFTNO) - 1 - ((prob_lps1 - prob_lps2) >> 1);
        }
    }

    rLPS = prob_lps >> LG_PMPS_SHIFTNO;

    assert(sbac->range >= rLPS); //! this maybe triggered, so it can be removed

    rMPS = sbac->range - rLPS;
    s_flag = rMPS < QUAR_HALF_PROB;
    rMPS |= 0x100;

    if (bin != cmps)
    {
        rLPS = (sbac->range << s_flag) - rMPS;
        int shift = ace_get_shift(rLPS);
        sbac->range = rLPS << shift;
        sbac->code = ((sbac->code << s_flag) + rMPS) << shift;
        sbac->left_bits -= (shift + s_flag);
        if (sbac->left_bits < 12)
        {
            aec_sbac_carry_propagate(sbac, bs);
        }

    }
    else //! MPS
    {
        if (s_flag)
        {
            sbac->code <<= 1;
            if (--sbac->left_bits < 12)
            {
                aec_sbac_carry_propagate(sbac, bs);
            }
        }
        sbac->range = rMPS;

    }
#if !CABAC_MULTI_PROB
    if (bin != cmps1)
    {
        *model1 = tab_cycno_lgpmps_mps[(*model1) | (1 << 13)];
    }
    else
    {
        *model1 = tab_cycno_lgpmps_mps[*model1];
    }
    if (bin != cmps2)
    {
        *model2 = tab_cycno_lgpmps_mps[(*model2) | (1 << 13)];
    }
    else
    {
        *model2 = tab_cycno_lgpmps_mps[*model2];
    }
#else
    // update model 1
    if (bin != cmps1) // LPS 
    {
        if (g_compatible_back)
        {
            cycno1 = (cycno1 <= 2) ? (cycno1 + 1) : 3;
        }
        else
        {
            if (mcabac_flag1)
            {
                cycno1 = counter_thr2;
            }
            else
            {
                cycno1 = cycno1 + 1;
            }
        }
        if (g_compatible_back)
        {
            p1_0 = p1_0 + LG_S1;
            p1_1 = p1_0;
        }
        else
        {
            if (mcabac_flag1)
            {
                p1_0 = p1_0 + LG_S1;
                p1_1 = p1_1 + cwr2LGS[mCabac_ws + 1];
            }
            else
            {
                p1_0 = p1_0 + LG_S1;
                p1_1 = p1_0;
            }
        }
        if ((p1_0 >= (256 << LG_PMPS_SHIFTNO)) || (p1_1 >= (256 << LG_PMPS_SHIFTNO)))
        {
            if (p1_0 >= (256 << LG_PMPS_SHIFTNO))
            {
                p1_0 = (u16)(512 << LG_PMPS_SHIFTNO) - 1 - p1_0;
            }
            if (p1_1 >= (256 << LG_PMPS_SHIFTNO))
            {
                p1_1 = (u16)(512 << LG_PMPS_SHIFTNO) - 1 - p1_1;
            }
            cmps1 = !cmps1;
        }
    }
    else // MPS
    {
        if (cycno1 == 0)
        {
            cycno1 = 1;
        }
        if (g_compatible_back)
        {
            p1_0 = p1_0 - (u16)(p1_0 >> cwr1) - (u16)(p1_0 >> (cwr1 + 2));
            p1_1 = p1_0;
        }
        else
        {
            if (mcabac_flag1)
            {
                p1_0 = p1_0 - (u16)(p1_0 >> cwr1) - (u16)(p1_0 >> (cwr1 + 2));
                p1_1 = p1_1 - (u16)(p1_1 >> (mCabac_ws + 1)) - (u16)(p1_1 >> (mCabac_ws + 3));
            }
            else
            {
                p1_0 = p1_0 - (u16)(p1_0 >> cwr1) - (u16)(p1_0 >> (cwr1 + 2));
                p1_1 = p1_0;
            }
        }
    }
    *model1 = (p1_1 << 1) + cmps1 + (cycno1 << CYCNO_SHIFT_BITS) + (p1_0 << PROB_BITS);

    // update model 2
    if (bin != cmps2) // LPS
    {
        if (g_compatible_back)
        {
            cycno2 = (cycno2 <= 2) ? (cycno2 + 1) : 3;
        }
        else
        {
            if (mcabac_flag2)
            {
                cycno2 = counter_thr2;
            }
            else
            {
                cycno2 = cycno2 + 1;
            }
        }
        if (g_compatible_back)
        {
            p2_0 = p2_0 + LG_S2;
            p2_1 = p2_0;
        }
        else
        {
            if (mcabac_flag2)
            {
                p2_0 = p2_0 + LG_S2;
                p2_1 = p2_1 + cwr2LGS[mCabac_ws + 1];
            }
            else
            {
                p2_0 = p2_0 + LG_S2;
                p2_1 = p2_0;
            }
        }

        if ((p2_0 >= (256 << LG_PMPS_SHIFTNO)) || (p2_1 >= (256 << LG_PMPS_SHIFTNO)))
        {
            if (p2_0 >= (256 << LG_PMPS_SHIFTNO))
            {
                p2_0 = (u16)(512 << LG_PMPS_SHIFTNO) - 1 - p2_0;
            }
            if (p2_1 >= (256 << LG_PMPS_SHIFTNO))
            {
                p2_1 = (u16)(512 << LG_PMPS_SHIFTNO) - 1 - p2_1;
            }
            cmps2 = !cmps2;
        }
    }
    else // MPS
    {
        if (cycno2 == 0)
        {
            cycno2 = 1;
        }
        if (g_compatible_back)
        {
            p2_0 = p2_0 - (u16)(p2_0 >> cwr2) - (u16)(p2_0 >> (cwr2 + 2));
            p2_1 = p2_0;
        }
        else
        {
            if (mcabac_flag2)
            {
                p2_0 = p2_0 - (u16)(p2_0 >> cwr2) - (u16)(p2_0 >> (cwr2 + 2));
                p2_1 = p2_1 - (u16)(p2_1 >> (mCabac_ws + 1)) - (u16)(p2_1 >> (mCabac_ws + 3));
            }
            else
            {
                p2_0 = p2_0 - (u16)(p2_0 >> cwr2) - (u16)(p2_0 >> (cwr2 + 2));
                p2_1 = p2_0;
            }
        }
    }
    *model2 = (p2_1 << 1) + cmps2 + (cycno2 << CYCNO_SHIFT_BITS) + (p2_0 << PROB_BITS);
#endif


#if AEC_STAGE3_DEBUG
#if AEC_STAGE3_BINA_DEBUG
    fprintf(fp_bina, "range_out=%d, low_out=%d, method=2\n", sbac->range, sbac->code & 0x1FF);
#endif
#endif

}
int aec_com_bsw_flush(COM_BSW* bs)
{
    int bytes = COM_BSW_GET_SINK_BYTE(bs);
#if defined AEC_TV_ACTIVE
    //aec_test_module.writeGoldenOutput<int>(bytes);
#endif//AEC_TV_ACTIVE
    while (bytes--)
    {
        AEC_DATA_output.bs_tmp[AEC_DATA_output.bs_cur] = (bs->code >> 24) & 0xFF;
        AEC_DATA_output.bs_cur++;

#if AEC_STAGE3_DEBUG
#if AEC_STAGE3_BS_DEBUG
        fprintf(fp_bs, "%02x\n", (bs->code >> 24) & 0xFF);
#endif
#endif
        bs->code <<= 8;
    }
    return 0;
}

int aec_com_bsw_write(COM_BSW* bs, u32 val, int len) /* len(1 ~ 32) */
{
#pragma HLS INLINE off
    int leftbits;
    com_assert(bs);
    leftbits = bs->leftbits;
    val <<= (32 - len);
    bs->code |= (val >> (32 - leftbits));
    if (len < leftbits)
    {
        bs->leftbits -= len;
    }
    else
    {
        bs->leftbits = 0;
        aec_com_bsw_flush(bs);
#if defined(X86F)
        /* on X86 machine, shift operation works properly when the value of the
        right operand is less than the number of bits of the left operand. */
        bs->code = (leftbits < 32 ? val << leftbits : 0);
#else
        bs->code = (val << leftbits);
#endif
        bs->leftbits = 32 - (len - leftbits);
    }
    return 0;
}

void aec_eco_sao_offset_AEC(int value1, int value2)
{
    int  act_sym;
    u32 signsymbol = value1 >= 0 ? 0 : 1;
    int temp, maxvalue;
    int offset_type = value2;
    if (offset_type == SAO_CLASS_EO_FULL_VALLEY)
    {
        act_sym = EO_OFFSET_MAP[value1 + 1];
    }
    else if (offset_type == SAO_CLASS_EO_FULL_PEAK)
    {
        act_sym = EO_OFFSET_MAP[-value1 + 1];
    }
    else
    {
        act_sym = abs(value1);
    }
    maxvalue = saoclip[offset_type][2];
    temp = act_sym;
#if AEC_STAGE3_ONE_PORT 
    if (temp == 0)
    {
        if (offset_type == SAO_CLASS_BO)
        {
            aec_stage3(1, 0, 1, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        else
        {
            aec_stage3(1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
    }
    else
    {
        while (temp != 0)
        {
            if (offset_type == SAO_CLASS_BO && temp == act_sym)
            {
                aec_stage3(1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            else
            {
                aec_stage3(1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            temp--;
        }
        if (act_sym < maxvalue)
        {
            aec_stage3(1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
    }
#else   
    int num;
    u8 method0, method1, method2, method3;
    u32 symbol0, symbol1, symbol2, symbol3;
    SBAC_CTX_MODEL model1_t0, model2_t0, model1_t1, model2_t1, model1_t2, model2_t2, model1_t3, model2_t3;
    switch (temp)
    {
    case 0:
        num = 1;
        if (offset_type == SAO_CLASS_BO)
        {
            method0 = 0;
            symbol0 = 1;
            model1_t0 = 9;
            model2_t0 = 0;
            method1 = 0;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;

        }
        else
        {
            method0 = 1;
            symbol0 = 1;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 0;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
        }
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
        break;
    case 1:
        if (offset_type == SAO_CLASS_BO)
        {
            method0 = 0;
            symbol0 = 0;
            model1_t0 = 9;
            model2_t0 = 0;
        }
        else
        {
            method0 = 1;
            symbol0 = 0;
            model1_t0 = 0;
            model2_t0 = 0;
        }
        if (act_sym < maxvalue)
        {
            num = 2;
            method1 = 1;
            symbol1 = 1;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
        }
        else
        {
            num = 1;
            method1 = 0;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
        }
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
        break;
    case 2:
        if (offset_type == SAO_CLASS_BO)
        {
            method0 = 0;
            symbol0 = 0;
            model1_t0 = 9;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
        }
        else
        {
            method0 = 1;
            symbol0 = 0;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
        }
        if (act_sym < maxvalue)
        {
            num = 3;
            method2 = 1;
            symbol2 = 1;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
        }
        else
        {
            num = 2;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
        }
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
        break;
    case 3:
        if (offset_type == SAO_CLASS_BO)
        {
            method0 = 0;
            symbol0 = 0;
            model1_t0 = 9;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 1;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
        }
        else
        {
            method0 = 1;
            symbol0 = 0;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 1;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
        }
        if (act_sym < maxvalue)
        {
            method3 = 1;
            symbol3 = 1;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 4;
        }
        else
        {
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 3;
        }
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
        break;
    case 4:
        if (offset_type == SAO_CLASS_BO)
        {
            method0 = 0;
            symbol0 = 0;
            model1_t0 = 9;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 1;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 1;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 4;
        }
        else
        {
            method0 = 1;
            symbol0 = 0;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 1;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 1;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 4;
        }
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
        if (act_sym < maxvalue)
        {
            method0 = 1;
            symbol0 = 1;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 0;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 1;
        }
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
        break;
    case 5:
        if (offset_type == SAO_CLASS_BO)
        {
            method0 = 0;
            symbol0 = 0;
            model1_t0 = 9;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 1;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 1;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 4;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);

            method0 = 1;
            symbol0 = 0;
            model1_t0 = 0;
            model2_t0 = 0;
            if (act_sym < maxvalue)
            {
                method1 = 1;
                symbol1 = 1;
                model1_t1 = 0;
                model2_t1 = 0;
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 2;
            }
            else
            {
                method1 = 0;
                symbol1 = 0;
                model1_t1 = 0;
                model2_t1 = 0;
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 1;
            }
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
        else
        {
            method0 = 1;
            symbol0 = 0;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 1;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 1;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 4;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);

            method0 = 1;
            symbol0 = 0;
            model1_t0 = 0;
            model2_t0 = 0;
            if (act_sym < maxvalue)
            {
                method1 = 1;
                symbol1 = 1;
                model1_t1 = 0;
                model2_t1 = 0;
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 2;
            }
            else
            {
                method1 = 0;
                symbol1 = 0;
                model1_t1 = 0;
                model2_t1 = 0;
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 1;
            }
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
    case 6:
        if (offset_type == SAO_CLASS_BO)
        {
            method0 = 0;
            symbol0 = 0;
            model1_t0 = 9;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 1;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 1;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 4;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);

            method0 = 1;
            symbol0 = 0;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            if (act_sym < maxvalue)
            {
                method2 = 1;
                symbol2 = 1;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 3;
            }
            else
            {
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 2;
            }
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
        else
        {
            method0 = 1;
            symbol0 = 0;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 1;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 1;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 4;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);

            method0 = 1;
            symbol0 = 0;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            if (act_sym < maxvalue)
            {
                method2 = 1;
                symbol2 = 1;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 3;
            }
            else
            {
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 2;
            }
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
    case 7:
        if (offset_type == SAO_CLASS_BO)
        {
            method0 = 0;
            symbol0 = 0;
            model1_t0 = 9;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 1;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 1;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 4;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);

            method0 = 1;
            symbol0 = 0;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 1;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            if (act_sym < maxvalue)
            {
                method3 = 1;
                symbol3 = 1;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 4;
            }
            else
            {
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 3;
            }
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
        else
        {
            method0 = 1;
            symbol0 = 0;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 1;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 1;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 4;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);

            method0 = 1;
            symbol0 = 0;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 1;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            if (act_sym < maxvalue)
            {
                method3 = 1;
                symbol3 = 1;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 4;
            }
            else
            {
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 3;
            }
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }

    }
#endif  
    if (offset_type == SAO_CLASS_BO && act_sym)
    {
        aec_stage3(1, 1, signsymbol, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}

void aec_eco_sao_type_AEC(int value1, int value2)
{
    int  act_sym = value1;
    int temp;
    int i, length;
    int exp_golomb_order;
    temp = act_sym;
    exp_golomb_order = 1;
    switch (value2)
    {
    case 0:
        length = NUM_SAO_EO_TYPES_LOG2;
        break;
    case 1:
        length = NUM_SAO_BO_CLASSES_LOG2;
        break;
    case 2:
        length = NUM_SAO_BO_CLASSES_LOG2 - 1;
        break;
    default:
        length = 0;
        break;
    }
    //    int num;
      //  u8 method0,/*method1,method2,*/method3;
     //   u32 symbol0,symbol1,symbol2,symbol3;
     //   SBAC_CTX_MODEL model1_t0, *model2_t0, model1_t1, model2_t1,model1_t2,model2_t2, model1_t3, model2_t3 ;
    if (value2 == 2)
    {
        while (1)
        {
#pragma HLS LOOP_TRIPCOUNT max=4            
            if ((unsigned int)temp >= (unsigned int)(1 << exp_golomb_order))
            {
                aec_stage3(1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

                temp = temp - (1 << exp_golomb_order);
                exp_golomb_order++;
            }
            else
            {
                if (exp_golomb_order == 4)
                {
                    exp_golomb_order = 0;
                }
#if AEC_STAGE3_ONE_PORT             
                else
                {
                    aec_stage3(1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                }
                while (exp_golomb_order--)     //next binary part
                {
#pragma HLS LOOP_TRIPCOUNT max=3                    
                    aec_stage3(1, 1, (unsigned char)((temp >> exp_golomb_order) & 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                }
                break;
#else               
                else
                {
                    switch (exp_golomb_order)
                    {
                    case 0:
                        method0 = 1;
                        symbol0 = 1;
                        model1_t0 = 0;
                        model2_t0 = 0;
                        method1 = 0;
                        symbol1 = 0;
                        model1_t1 = 0;
                        model2_t1 = 0;
                        method2 = 0;
                        symbol2 = 0;
                        model1_t2 = 0;
                        model2_t2 = 0;
                        method3 = 0;
                        symbol3 = 0;
                        model1_t3 = 0;
                        model2_t3 = 0;
                        num = 1;
                        break;
                    case 1:
                        method0 = 1;
                        symbol0 = 1;
                        model1_t0 = 0;
                        model2_t0 = 0;
                        method1 = 1;
                        symbol1 = (unsigned char)(temp & 1);
                        model1_t1 = 0;
                        model2_t1 = 0;
                        method2 = 0;
                        symbol2 = 0;
                        model1_t2 = 0;
                        model2_t2 = 0;
                        method3 = 0;
                        symbol3 = 0;
                        model1_t3 = 0;
                        model2_t3 = 0;
                        num = 2;
                        break;
                    case 2:
                        method0 = 1;
                        symbol0 = 1;
                        model1_t0 = 0;
                        model2_t0 = 0;
                        method1 = 1;
                        symbol1 = (unsigned char)((temp >> 1) & 1);
                        model1_t1 = 0;
                        model2_t1 = 0;
                        method2 = 1;
                        symbol2 = (unsigned char)(temp & 1);
                        model1_t2 = 0;
                        model2_t2 = 0;
                        method3 = 0;
                        symbol3 = 0;
                        model1_t3 = 0;
                        model2_t3 = 0;
                        num = 3;
                        break;
                    case 3:
                        method0 = 1;
                        symbol0 = 1;
                        model1_t0 = 0;
                        model2_t0 = 0;
                        method1 = 1;
                        symbol1 = (unsigned char)((temp >> 2) & 1);
                        model1_t1 = 0;
                        model2_t1 = 0;
                        method2 = 1;
                        symbol2 = (unsigned char)((temp >> 1) & 1);
                        model1_t2 = 0;
                        model2_t2 = 0;
                        method3 = 1;
                        symbol3 = (unsigned char)(temp & 1);
                        model1_t3 = 0;
                        model2_t3 = 0;
                        num = 4;
                        break;
                    }
                    aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                        method1, symbol1, model1_t1, model2_t1,
                        method2, symbol2, model1_t2, model2_t2,
                        method3, symbol3, model1_t3, model2_t3, OutStream);
                    break;
                }
#endif              
            }
        }
    }
    else
    {
#if AEC_STAGE3_ONE_PORT 
        for (i = 0; i < length; i++)
        {
            aec_stage3(1, 1, temp & 0x0001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            temp = temp >> 1;
        }
#else       
        switch (length)
        {
        case 0:
            break;
        case 1:
            method0 = 1;
            symbol0 = temp & 0x0001;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 0;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 1;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        case 2:
            method0 = 1;
            symbol0 = temp & 0x0001;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = (temp >> 1) & 0x0001;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 2;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        case 3:
            method0 = 1;
            symbol0 = temp & 0x0001;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = (temp >> 1) & 0x0001;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 1;
            symbol2 = (temp >> 2) & 0x0001;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 3;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        case 4:
            method0 = 1;
            symbol0 = temp & 0x0001;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = (temp >> 1) & 0x0001;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 1;
            symbol2 = (temp >> 2) & 0x0001;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 1;
            symbol3 = (temp >> 3) & 0x0001;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 4;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        case 5:
            method0 = 1;
            symbol0 = temp & 0x0001;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 1;
            symbol1 = (temp >> 1) & 0x0001;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 1;
            symbol2 = (temp >> 2) & 0x0001;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 1;
            symbol3 = (temp >> 3) & 0x0001;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 4;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            method0 = 1;
            symbol0 = (temp >> 4) & 0x0001;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 0;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 1;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
#endif  
    }
}

void aec_enc_eco_sao_type(int startBand, int deltaband, int typeIdc)
{
    int value1 = 0;
    int value2 = 0;
    if (typeIdc == SAO_TYPE_BO)
    {
        value1 = startBand;
        value2 = 1;
        aec_eco_sao_type_AEC(value1, value2);
        value1 = deltaband - 2;
        value2 = 2;
    }
    else
    {
        value1 = typeIdc;
        value2 = 0;
    }

    aec_eco_sao_type_AEC(value1, value2);
}

void aec_enc_eco_sao_offset(int offset[MAX_NUM_SAO_CLASSES], int startBand, int startBand2, int typeIdc)
{
    int value1 = 0;
    int value2 = 0;
    int i;
    int bandIdxBO[4];
    if (typeIdc == SAO_TYPE_BO)
    {
        bandIdxBO[0] = startBand;
        bandIdxBO[1] = bandIdxBO[0] + 1;
        bandIdxBO[2] = startBand2;
        bandIdxBO[3] = bandIdxBO[2] + 1;
        for (i = 0; i < 4; i++)
        {
            value1 = offset[bandIdxBO[i]];
            value2 = SAO_CLASS_BO;
            aec_eco_sao_offset_AEC(value1, value2);
        }
    }
    else
    {
        for (i = SAO_CLASS_EO_FULL_VALLEY; i < NUM_SAO_EO_CLASSES; i++)
        {
            if (i == SAO_CLASS_EO_PLAIN)
            {
                continue;
            }
            value1 = offset[i];
            value2 = i;

            aec_eco_sao_offset_AEC(value1, value2);
        }
    }
}

void aec_enc_eco_sao_mrg_flag(int mergeleft_avail, int mergeup_avail, int modeIdc, int typeIdc)
{
    int MergeLeft = 0;
    int MergeUp = 0;
    int value1 = 0;
    int value2 = 0;
    if (mergeleft_avail)
    {
        MergeLeft = ((modeIdc == SAO_MODE_MERGE) && (typeIdc == SAO_MERGE_LEFT));
        value1 = MergeLeft ? 1 : 0;
    }
    if (mergeup_avail && !MergeLeft)
    {
        MergeUp = ((modeIdc == SAO_MODE_MERGE) && (typeIdc == SAO_MERGE_ABOVE));
        value1 = MergeUp ? (1 + mergeleft_avail) : 0;
    }
    value2 = mergeleft_avail + mergeup_avail;
    if (value2 == 1)
    {
        aec_stage3(1, 0, value1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else if (value2 == 2)
    {
#if AEC_STAGE3_ONE_PORT     
        aec_stage3(1, 0, value1 & 0x01, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        if (value1 != 1)
        {
            aec_stage3(1, 0, (value1 >> 1) & 0x01, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
#else
        if (value1 != 1)
        {
            aec_stage3(2, 0, value1 & 0x01, 6, 0,
                0, (value1 >> 1) & 0x01, 7, 0,
                0, 0, 0, 0,
                0, 0, 0, 0, OutStream);
        }
        else
        {
            aec_stage3(1, 0, value1 & 0x01, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, OutStream);
        }
#endif      
    }
}

void aec_enc_eco_sao_mode(int modeIdc, int typeIdc)
{
    int value1 = 0;
    if (modeIdc == SAO_MODE_OFF)
    {
        value1 = 0;
    }
    else if (typeIdc == SAO_TYPE_BO)
    {
        value1 = 1;
    }
    else
    {
        value1 = 3;
    }

    if (value1 == 0)
    {
        aec_stage3(1, 0, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else
    {
#if AEC_STAGE3_ONE_PORT         
        aec_stage3(1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aec_stage3(1, 1, !((value1 >> 1) & 0x01), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else       
        aec_stage3(2, 0, 0, 8, 0,
            1, !((value1 >> 1) & 0x01), 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0, OutStream);
#endif                   
    }
}

void aec_write_sao_lcu(u8 slice_sao_enable[3], int MergeLeftAvail, int MergeUpAvail, int offset[3][32], int startBand[3], int startBand2[3], int deltaband[3], int modeIdc[3], int typeIdc[3])
{
    if (MergeLeftAvail + MergeUpAvail)
    {
        aec_enc_eco_sao_mrg_flag(MergeLeftAvail, MergeUpAvail, modeIdc[Y_C], typeIdc[Y_C]);
    }


    if (modeIdc[Y_C] != SAO_MODE_MERGE)
    {
        for (int compIdx = Y_C; compIdx < N_C; compIdx++)
        {
#pragma HLS LOOP_TRIPCOUNT max=3            
            if (slice_sao_enable[compIdx] == 1)
            {
                aec_enc_eco_sao_mode(modeIdc[compIdx], typeIdc[compIdx]);
                if (modeIdc[compIdx] == SAO_MODE_NEW)
                {
                    aec_enc_eco_sao_offset(offset[compIdx], startBand[compIdx], startBand2[compIdx], typeIdc[compIdx]);
                    aec_enc_eco_sao_type(startBand[compIdx], deltaband[compIdx], typeIdc[compIdx]);
                }
            }
        }
    }
}

void aec_writeParaSAO_one_LCU(u8 slice_sao_enable[3], int MergeLeftAvail, int MergeUpAvail, int offset[3][32], int startBand[3], int startBand2[3], int deltaband[3], int modeIdc[3], int typeIdc[3])     //zhaof
{
    if (!slice_sao_enable[Y_C] && !slice_sao_enable[U_C] && !slice_sao_enable[V_C])
    {
        return;
    }
    aec_write_sao_lcu(slice_sao_enable, MergeLeftAvail, MergeUpAvail, offset, startBand, startBand2, deltaband, modeIdc, typeIdc);
}

void aec_enc_sbac_encode_bin(u32 bin, ENC_SBAC* sbac, SBAC_CTX_MODEL* model, COM_BSW* bs)
{

#if AEC_STAGE3_DEBUG
#if AEC_STAGE3_CTX_DEBUG
    //fprintf(fp_ctx, "method: 0, symbol: %d, model2_idx: 000, model1_idx: %03d\n", bin, (u32)((model - aec_ctx.delta_qp) + 1));//, model=0x%04x\n, (*model) & 0x1FFF);
    fprintf(fp_ctx, "0 %d 000 %03d\n", bin, (u32)((model - aec_ctx.delta_qp) + 1));//, model=0x%04x\n, (*model) & 0x1FFF);
#endif
#if AEC_STAGE3_BINA_DEBUG
    fprintf(fp_bina, "encode bin:%d, range_in=%d, low_in=%d, model_in1=%03x, model_in2=0, ", bin, sbac->range, sbac->code & 0x1FF, (*model) & PROB_MASK);
#endif
#endif
#if CABAC_MULTI_PROB
    if (g_compatible_back)
    {
        mCabac_ws = 6;
    }
    u8 cycno = (*model) >> CYCNO_SHIFT_BITS;
    if (cycno < 0)
        cycno = 0;
    int is_LPS = 0;
    u16 p0 = ((*model) >> PROB_BITS) & MCABAC_PROB_MASK;
    u16 p1 = ((*model) >> 1) & MCABAC_PROB_MASK;
    u16 prob_lps = (u16)(p0 + p1 + 1) >> 1;
    prob_lps = prob_lps < 6 ? 6 : prob_lps;
    u8 cwr = 0;
    if (g_compatible_back)
    {
        cwr = (cycno <= 1) ? 3 : (cycno == 2) ? 4 : (mCabac_ws - 1);
    }
    else
    {
        cwr = (cycno < counter_thr1) ? (mCabac_ws - 2) : (mCabac_ws - 1);
    }
    cwr = COM_CLIP(cwr, MIN_WINSIZE, MAX_WINSIZE);
    u8 mcabac_flag = (cycno == counter_thr2) ? 1 : 0;
    u16 LG_S = cwr2LGS[cwr];
#endif
#if !CABAC_MULTI_PROB
    u16 prob_lps = ((*model) & PROB_MASK) >> 1;
#endif
    u16 cmps = (*model) & 1;
    u32 rLPS = prob_lps >> LG_PMPS_SHIFTNO;
    u32 rMPS = sbac->range - rLPS;
    int s_flag = rMPS < QUAR_HALF_PROB;
    rMPS |= 0x100;
    assert(sbac->range >= rLPS); //! this maybe triggered, so it can be removed
    if (bin != cmps)
    {
#if CABAC_MULTI_PROB
        if (g_compatible_back)
        {
            cycno = (cycno <= 2) ? (cycno + 1) : 3;
        }
        else
        {
            if (mcabac_flag)
            {
                cycno = counter_thr2;
            }
            else
            {
                cycno = cycno + 1;
            }
        }
        is_LPS = 1;
#endif
        rLPS = (sbac->range << s_flag) - rMPS;
        int shift = ace_get_shift(rLPS);
        sbac->range = rLPS << shift;
        sbac->code = ((sbac->code << s_flag) + rMPS) << shift;
        sbac->left_bits -= (shift + s_flag);
        if (sbac->left_bits < 12)
        {
            aec_sbac_carry_propagate(sbac, bs);
        }
#if !CABAC_MULTI_PROB
        * model = tab_cycno_lgpmps_mps[(*model) | (1 << 13)];
#endif
    }
    else //! MPS
    {
#if CABAC_MULTI_PROB
        if (cycno == 0)
        {
            cycno = 1;
        }
#endif
        if (s_flag)
        {
            sbac->code <<= 1;
            if (--sbac->left_bits < 12)
            {
                aec_sbac_carry_propagate(sbac, bs);
            }
        }
        sbac->range = rMPS;
#if !CABAC_MULTI_PROB
        * model = tab_cycno_lgpmps_mps[*model];
#endif
    }
#if CABAC_MULTI_PROB
    //update probability estimation
    if (is_LPS)
    {
        if (g_compatible_back)
        {
            p0 = p0 + LG_S;
            p1 = p0;
        }
        else
        {
            if (mcabac_flag)
            {
                p0 = p0 + LG_S;
                p1 = p1 + cwr2LGS[mCabac_ws + 1];
            }
            else
            {
                p0 = p0 + LG_S;
                p1 = p0;
            }
        }

        if ((p0 >= (256 << LG_PMPS_SHIFTNO)) || (p1 >= (256 << LG_PMPS_SHIFTNO)))
        {
            if (p0 >= (256 << LG_PMPS_SHIFTNO))
            {
                p0 = (u16)(512 << LG_PMPS_SHIFTNO) - 1 - p0;
            }
            if (p1 >= (256 << LG_PMPS_SHIFTNO))
            {
                p1 = (u16)(512 << LG_PMPS_SHIFTNO) - 1 - p1;
            }
            cmps = !cmps;
        }
    }
    else
    {
        if (g_compatible_back)
        {
            p0 = p0 - (u16)(p0 >> cwr) - (u16)(p0 >> (cwr + 2));
            p1 = p0;
        }
        else
        {
            if (mcabac_flag)
            {
                p0 = p0 - (u16)(p0 >> cwr) - (u16)(p0 >> (cwr + 2));
                p1 = p1 - (u16)(p1 >> (mCabac_ws + 1)) - (u16)(p1 >> (mCabac_ws + 3));
            }
            else
            {
                p0 = p0 - (u16)(p0 >> cwr) - (u16)(p0 >> (cwr + 2));
                p1 = p0;
            }
        }
    }
    *model = (p1 << 1) + cmps + (cycno << CYCNO_SHIFT_BITS) + (p0 << PROB_BITS);
#endif

#if TRACE_BIN
    COM_TRACE_COUNTER;
    COM_TRACE_STR("model ");
    COM_TRACE_INT(prev_model);
    COM_TRACE_STR("-->");
    COM_TRACE_INT(*model);
    COM_TRACE_STR("MPS Range ");
    COM_TRACE_INT(sbac->range);
    COM_TRACE_STR("LPS Range ");
    COM_TRACE_INT(rLPS);
    COM_TRACE_STR("\n");
#endif

#if AEC_STAGE3_DEBUG
#if AEC_STAGE3_BINA_DEBUG
    fprintf(fp_bina, "range_out=%d, low_out=%d, method=0\n", sbac->range, sbac->code & 0x1FF);
#endif
#endif
}
int get_exp(u32* sym)
{
    int res = 0;
    if (*sym == 0)
    {
        *sym = 0;
        res = 0;
    }
    else if ((*sym >= 1) && (*sym <= 2))
    {
        *sym = *sym - 1;
        res = 1;
    }
    else if ((*sym >= 3) && (*sym <= 6))
    {
        *sym = *sym - 3;
        res = 2;
    }
    else if ((*sym >= 7) && (*sym <= 14))
    {
        *sym = *sym - 7;
        res = 3;
    }
    else if ((*sym >= 15) && (*sym <= 30))
    {
        *sym = *sym - 15;
        res = 4;
    }
    else if ((*sym >= 31) && (*sym <= 62))
    {
        *sym = *sym - 31;
        res = 5;
    }
    else if ((*sym >= 63) && (*sym <= 126))
    {
        *sym = *sym - 63;
        res = 6;
    }
    else if ((*sym >= 127) && (*sym <= 254))
    {
        *sym = *sym - 127;
        res = 7;
    }
    else if ((*sym >= 255) && (*sym <= 510))
    {
        *sym = *sym - 255;
        res = 8;
    }
    else if ((*sym >= 511) && (*sym <= 1022))
    {
        *sym = *sym - 511;
        res = 9;
    }
    else if ((*sym >= 1023) && (*sym <= 2046))
    {
        *sym = *sym - 1023;
        res = 10;
    }
    else if ((*sym >= 2047) && (*sym <= 4094))
    {
        *sym = *sym - 2047;
        res = 11;
    }
    else if ((*sym >= 4095) && (*sym <= 8190))
    {
        *sym = *sym - 4095;
        res = 12;
    }
    else if ((*sym >= 8191) && (*sym <= 16382))
    {
        *sym = *sym - 8191;
        res = 13;
    }
    else if ((*sym >= 16383) && (*sym <= 32766))
    {
        *sym = *sym - 16383;
        res = 14;
    }
    else if ((*sym >= 32767) && (*sym <= 65534))
    {
        *sym = *sym - 32767;
        res = 15;
    }
    else if (*sym >= 65535)
    {
        *sym = *sym - 65535;
        res = 16;
    }
    return res;
}

void aec_com_check_split_mode(int* split_allow, int cu_width_log2, int cu_height_log2, int boundary, int boundary_b, int boundary_r
    , int qt_depth, int bet_depth)
{


    const int min_cu_size = 4;
    const int min_bt_size = 4;
    const int min_eqt_size = 4;
    const int max_split_depth = 6;
    const int max_aspect_ratio = 8;
    const int min_qt_size = 8;
    const int max_bt_size = 64;
    const int max_eqt_size = 64;

    int max_aspect_ratio_eqt = max_aspect_ratio >> 1;
    int cu_w = 1 << cu_width_log2;
    int cu_h = 1 << cu_height_log2;
    int i;

    for (i = NO_SPLIT; i <= SPLIT_QUAD; i++)
#pragma HLS LOOP_TRIPCOUNT max=5    
        split_allow[i] = 0;

    if (boundary)
    {
        if (!boundary_r && !boundary_b)
        {
            split_allow[SPLIT_QUAD] = 1;
        }
        else if (boundary_r)
        {
            split_allow[SPLIT_BI_VER] = 1;
        }
        else if (boundary_b)
        {
            split_allow[SPLIT_BI_HOR] = 1;
        }
    }
    else
    {

        if (qt_depth + bet_depth >= max_split_depth)
        {
            split_allow[NO_SPLIT] = 1;
        }
        else
        {
            //not split
            if (cu_w <= cu_h * max_aspect_ratio && cu_h <= cu_w * max_aspect_ratio)
                split_allow[NO_SPLIT] = 1;

            //qt
            if (cu_w > min_qt_size && bet_depth == 0)
                split_allow[SPLIT_QUAD] = 1;

            //hbt
            if ((cu_w <= max_bt_size && cu_h <= max_bt_size) && cu_h > min_bt_size && cu_w < cu_h * max_aspect_ratio)
                split_allow[SPLIT_BI_HOR] = 1;

            //vbt
            if ((cu_w <= max_bt_size && cu_h <= max_bt_size) && cu_w > min_bt_size && cu_h < cu_w * max_aspect_ratio)
                split_allow[SPLIT_BI_VER] = 1;

            //heqt
            if ((cu_w <= max_eqt_size && cu_h <= max_eqt_size) && cu_h > min_eqt_size * 2 && cu_w > min_eqt_size && cu_w < cu_h * max_aspect_ratio_eqt)
                split_allow[SPLIT_EQT_HOR] = 1;

            //veqt
            if ((cu_w <= max_eqt_size && cu_h <= max_eqt_size) && cu_w > min_eqt_size * 2 && cu_h > min_eqt_size && cu_h < cu_w * max_aspect_ratio_eqt)
                split_allow[SPLIT_EQT_VER] = 1;
        }
    }


}
/*
#if AEC_STAGE3_ONE_PORT
int aec_enc_eco_abs_mvd(u32 sym,SBAC_CTX_MODEL model)
{
    int exp_golomb_order = 0;

    if (sym < 3)   // 0, 1, 2
    {
        if (sym == 0)
        {
            aec_stage3(1,0,0,model,0,0,0,0,0,0,0,0,0,0,0,0,0);
        }
        else if (sym == 1)
        {
            aec_stage3(1,0,1,model,0,0,0,0,0,0,0,0,0,0,0,0,0);
            aec_stage3(1,0,0,model+1,0,0,0,0,0,0,0,0,0,0,0,0,0);
        }
        else if (sym == 2)
        {
            aec_stage3(1,0,1,model, 0,0,0,0,0,0,0,0,0,0,0,0,0);
            aec_stage3(1,0,1,model+1, 0,0,0,0,0,0,0,0,0,0,0,0,0);
            aec_stage3(1,0,0,model+2, 0,0,0,0,0,0,0,0,0,0,0,0,0);
        }
    }
    else
    {
        int offset;

        sym -= 3;
        offset = sym & 1;
        aec_stage3(1,0,1,model, 0,0,0,0,0,0,0,0,0,0,0,0,0);
        aec_stage3(1,0,1,model + 1, 0,0,0,0,0,0,0,0,0,0,0,0,0);
        aec_stage3(1,0,1,model + 2, 0,0,0,0,0,0,0,0,0,0,0,0,0);
        aec_stage3(1,1,offset,0,0,0,0,0,0,0,0,0,0,0,0,0,0);

        sym = (sym - offset) >> 1;

        // exp_golomb part
        while ((int)sym >= (1 << exp_golomb_order))
        {
#pragma HLS LOOP_TRIPCOUNT max=32
            sym = sym - (1 << exp_golomb_order);
            exp_golomb_order++;
        }

        aec_sbac_write_unary_sym_ep(exp_golomb_order);
        aec_sbac_encode_bins_ep_msb(sym, exp_golomb_order);

    }

    return COM_OK;
}
#else
int aec_enc_eco_abs_mvd(u32 sym,u32 t0, SBAC_CTX_MODEL model,hls::stream<u67> &OutStream)
{
    int exp_golomb_order = 0;
    int sym_bit[32];
    u32 sym_new;
    int num;
    u8 method0,method1,method2,method3;
    u32 symbol0,symbol1,symbol2,symbol3;
    SBAC_CTX_MODEL model1_t0, model2_t0, model1_t1, model2_t1, model1_t2, model2_t2, model1_t3, model2_t3 ;
    if (sym < 3)   // 0, 1, 2
    {
        if (sym == 0)
        {
            aec_stage3(1,0,0,model,0,0,0,0,0,0,0,0,0,0,0,0,0,OutStream);
        }
        else if (sym == 1)
        {
            method0   = 0 ;
            symbol0   = 1;
            model1_t0 = model;
            model2_t0 = 0;
            method1   = 0;
            symbol1   = 0;
            model1_t1 = model+1;
            model2_t1 = 0;
            method2   = 1;
            symbol2   = t0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3   = 0;
            symbol3   = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num       = 3;
            aec_stage3(num,method0,symbol0,model1_t0,model2_t0,
                           method1,symbol1,model1_t1,model2_t1,
                           method2,symbol2,model1_t2,model2_t2,
                           method3,symbol3,model1_t3,model2_t3,OutStream);
        }
        else if (sym == 2)
        {
            method0   = 0;
            symbol0   = 1;
            model1_t0 = model;
            model2_t0 = 0;
            method1   = 0;
            symbol1   = 1;
            model1_t1 = model+1;
            model2_t1 = 0;
            method2   = 0;
            symbol2   = 0;
            model1_t2 = model+2;
            model2_t2 = 0;
            method3   = 1;
            symbol3   = t0;
            model1_t3 = 0;
            model2_t3 = 0;
            num       = 4;

            aec_stage3(num,method0,symbol0,model1_t0,model2_t0,
                           method1,symbol1,model1_t1,model2_t1,
                           method2,symbol2,model1_t2,model2_t2,
                           method3,symbol3,model1_t3,model2_t3,OutStream);
        }
    }
    else
    {
        int offset;

        sym -= 3;
        offset = sym & 1;
        method0   = 0;
        symbol0   = 1;
        model1_t0 = model;
        model2_t0 = 0;
        method1   = 0;
        symbol1   = 1;
        model1_t1 = model+1;
        model2_t1 = 0;
        method2   = 0;
        symbol2   = 1;
        model1_t2 = model+2;
        model2_t2 = 0;
        method3   = 1;
        symbol3   = offset;
        model1_t3 = 0;
        model2_t3 = 0;
        num       = 4;
        aec_stage3(num,method0,symbol0,model1_t0,model2_t0,
                        method1,symbol1,model1_t1,model2_t1,
                        method2,symbol2,model1_t2,model2_t2,
                        method3,symbol3,model1_t3,model2_t3,OutStream);

        sym_new = (sym - offset) >> 1;

        // exp_golomb part
        exp_golomb_order = get_exp(&sym_new);
        get_sym_bit(sym_new,sym_bit);
        aec_sbac_write_unary_sym_ep(exp_golomb_order, OutStream);
        aec_sbac_encode_bins_ep_msb_sign(t0, exp_golomb_order,sym_bit,OutStream);

    }

    return COM_OK;
}
#endif
*/
void get_sym_bit(u32 sym, int sym_bit[32])
{
#pragma HLS ARRAY_PARTITION variable=sym_bit complete dim=1
    for (int i = 0; i < 32; ++i)
    {
#pragma HLS unroll factor=32    
#pragma HLS LOOP_TRIPCOUNT max=32
        sym_bit[i] = sym & (1 << i);
    }

}
#if !AEC_STAGE3_ONE_PORT
void aec_sbac_encode_bins_ep_msb_sign(u32 sign, int num_bin, int sym_bit[32], hls::stream<u67>& OutStream)
{
    int bin = 0;
    int num;
    u8 method0, method1, method2, method3;
    u32 symbol0, symbol1, symbol2, symbol3;
    SBAC_CTX_MODEL model1_t0, model2_t0, model1_t1, model2_t1, model1_t2, model2_t2, model1_t3, model2_t3;
    for (bin = num_bin - 1; bin >= 3; bin -= 4)
    {
#pragma HLS loop_tripcount max=4    
        method0 = 1;
        symbol0 = sym_bit[bin];
        model1_t0 = 0;
        model2_t0 = 0;
        method1 = 1;
        symbol1 = sym_bit[bin - 1];
        model1_t1 = 0;
        model2_t1 = 0;
        method2 = 1;
        symbol2 = sym_bit[bin - 2];
        model1_t2 = 0;
        model2_t2 = 0;
        method3 = 1;
        symbol3 = sym_bit[bin - 3];
        model1_t3 = 0;
        model2_t3 = 0;
        num = 4;
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
    }
    switch (bin)
    {
    case -1:
        method0 = 1;
        symbol0 = sign;
        model1_t0 = 0;
        model2_t0 = 0;
        method1 = 0;
        symbol1 = 0;
        model1_t1 = 0;
        model2_t1 = 0;
        method2 = 0;
        symbol2 = 0;
        model1_t2 = 0;
        model2_t2 = 0;
        method3 = 0;
        symbol3 = 0;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 1;
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
        break;
    case 0:
        method0 = 1;
        symbol0 = sym_bit[bin];
        model1_t0 = 0;
        model2_t0 = 0;
        method1 = 1;
        symbol1 = sign;
        model1_t1 = 0;
        model2_t1 = 0;
        method2 = 0;
        symbol2 = 0;
        model1_t2 = 0;
        model2_t2 = 0;
        method3 = 0;
        symbol3 = 0;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 2;
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
        break;
    case 1:
        method0 = 1;
        symbol0 = sym_bit[bin];
        model1_t0 = 0;
        model2_t0 = 0;
        method1 = 1;
        symbol1 = sym_bit[bin - 1];
        model1_t1 = 0;
        model2_t1 = 0;
        method2 = 1;
        symbol2 = sign;
        model1_t2 = 0;
        model2_t2 = 0;
        method3 = 0;
        symbol3 = 0;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 3;
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
        break;
    case 2:
        method0 = 1;
        symbol0 = sym_bit[bin];
        model1_t0 = 0;
        model2_t0 = 0;
        method1 = 1;
        symbol1 = sym_bit[bin - 1];
        model1_t1 = 0;
        model2_t1 = 0;
        method2 = 1;
        symbol2 = sym_bit[bin - 2];
        model1_t2 = 0;
        model2_t2 = 0;
        method3 = 1;
        symbol3 = sign;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 4;
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
        break;

    }
}
#endif

int aec_encode_ipf_flag(u8 ipf_flag)
{
    aec_stage3(1, 0, ipf_flag, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    return COM_OK;
}
void get_sym_index(u32 num_ctx, u32 max_num, int sym_index[32])
{
#pragma HLS ARRAY_PARTITION variable=sym_index complete dim=1
    //   u32 max_num_temp = max_num - ((unsigned int)1);
    u32 num_ctx_temp = num_ctx - ((unsigned int)1);
    for (int i = 0; i < 32; ++i)
    {
#pragma HLS unroll factor=32    
#pragma HLS LOOP_TRIPCOUNT max=32
        sym_index[i] = ((u32)i < num_ctx_temp) ? i : num_ctx_temp;
    }

}
#if AEC_STAGE3_ONE_PORT
int aec_enc_eco_run(u32 sym, SBAC_CTX_MODEL model)
{
    int exp_golomb_order = 0;


    if (sym < 16)
    {
        aec_sbac_write_truncate_unary_sym(sym, 2, 17, model);
    }
    else
    {
        sym -= 16;

        aec_sbac_write_truncate_unary_sym(16, 2, 17, model);

        // exp_golomb part
        while ((int)sym >= (1 << exp_golomb_order))
        {
#pragma HLS LOOP_TRIPCOUNT max=32           
            sym = sym - (1 << exp_golomb_order);
            exp_golomb_order++;
        }

        aec_sbac_write_unary_sym_ep(exp_golomb_order);
        aec_sbac_encode_bins_ep_msb(sym, exp_golomb_order);

    }

    return COM_OK;
}
#else
int aec_enc_eco_run(u32 sym, SBAC_CTX_MODEL model, hls::stream<u67>& OutStream)
{
    int exp_golomb_order = 0;
    int sym_bit[32];
    int sym_index[32];
#pragma HLS ARRAY_PARTITION variable=sym_index complete dim=1
    get_sym_index(2, 17, sym_index);

    if (sym < 4)
    {
        aec_sbac_write_truncate_unary_sym_index_spec(sym, sym_index, model, OutStream);
    }
    else if ((sym < 16) && (sym >= 4))
    {
        //aec_sbac_write_truncate_unary_sym(sym, 2, 17, model, OutStream);
        aec_sbac_write_truncate_unary_sym_index(sym, 2, 17, sym_index, model, OutStream);
    }
    else
    {
        sym -= 16;

        //aec_sbac_write_truncate_unary_sym(16, 2, 17,  model, OutStream);
        aec_sbac_write_truncate_unary_sym_spec_16(model, OutStream);
        exp_golomb_order = get_exp(&sym);
        get_sym_bit(sym, sym_bit);

        aec_sbac_write_unary_sym_ep(exp_golomb_order, OutStream);
        aec_sbac_encode_bins_ep_msb(exp_golomb_order, sym_bit, OutStream);

    }

    return COM_OK;
}
#endif
void aec_sbac_put_byte(u8 writing_byte, ENC_SBAC* sbac, COM_BSW* bs)
{
    if (sbac->is_pending_byte)
    {
        aec_com_bsw_write(bs, sbac->pending_byte, 8);
    }
    sbac->pending_byte = writing_byte;
    sbac->is_pending_byte = 1;
}
void aec_sbac_carry_propagate(ENC_SBAC* sbac, COM_BSW* bs)
{
    u32 leadByte = (sbac->code) >> (24 - sbac->left_bits);
    sbac->left_bits += 8;
    (sbac->code) &= (0xffffffffu >> sbac->left_bits);
    if (leadByte < 0xFF)
    {
        while (sbac->stacked_ff != 0)
        {
            aec_sbac_put_byte(0xFF, sbac, bs);
            sbac->stacked_ff--;
        }
        aec_sbac_put_byte((u8)leadByte, sbac, bs);
    }
    else if (leadByte > 0xFF)
    {
        sbac->pending_byte++; //! add carry bit to pending_byte
        while (sbac->stacked_ff != 0)
        {
            aec_sbac_put_byte(0x00, sbac, bs); //! write pending_tyte
            sbac->stacked_ff--;
        }
        aec_sbac_put_byte((u8)leadByte & 0xFF, sbac, bs);
    }
    else //! leadByte == 0xff
    {
        sbac->stacked_ff++;
    }
}

void aec_sbac_encode_bin_ep(u32 bin, ENC_SBAC* sbac, COM_BSW* bs)
{
#if AEC_STAGE3_DEBUG
#if AEC_STAGE3_CTX_DEBUG
    //fprintf(fp_ctx, "method: 1, symbol: %d, model2_idx: 000, model1_idx: 000\n", bin);//, model=0x%04x\n, (*model) & 0x1FFF);
    fprintf(fp_ctx, "1 %d 000 000\n", bin);//, model=0x%04x\n, (*model) & 0x1FFF);
#endif
#if AEC_STAGE3_BINA_DEBUG
    fprintf(fp_bina, "encode bin:%d, range_in=%d, low_in=%d, model_in1=0, model_in2=0, range_out=0, low_out=0, method=1\n", bin, sbac->range, sbac->code & 0x1FF);
#endif
#endif

    //static int bin_cnt = 0; ++bin_cnt;
    //printf("ep %d %d %d\n", bin_cnt, bin, sbac->range);

    (sbac->code) <<= 1;
    if (bin != 0)
    {
        (sbac->code) += (sbac->range);
    }
    if (--(sbac->left_bits) < 12)
    {
        aec_sbac_carry_propagate(sbac, bs);
    }
}
#if AEC_STAGE3_ONE_PORT
void aec_sbac_encode_bins_ep_msb(u32 value, int num_bin)
{
    int bin = 0;
    for (bin = num_bin - 1; bin >= 0; bin--)
    {
        aec_stage3(1, 1, value & (1 << (u32)bin), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}
#else
void aec_sbac_encode_bins_ep_msb(int num_bin, int sym_bit[32], hls::stream<u67>& OutStream)
{
    int bin = 0;
    int num;
    u8 method0, method1, method2, method3;
    u32 symbol0, symbol1, symbol2, symbol3;
    SBAC_CTX_MODEL model1_t0, model2_t0, model1_t1, model2_t1, model1_t2, model2_t2, model1_t3, model2_t3;
    //#pragma HLS dataflow
    for (bin = num_bin - 1; bin >= 3; bin -= 4)
    {
#pragma HLS loop_tripcount max=4
        method0 = 1;
        symbol0 = sym_bit[bin];
        model1_t0 = 0;
        model2_t0 = 0;
        method1 = 1;
        symbol1 = sym_bit[bin - 1];
        model1_t1 = 0;
        model2_t1 = 0;
        method2 = 1;
        symbol2 = sym_bit[bin - 2];
        model1_t2 = 0;
        model2_t2 = 0;
        method3 = 1;
        symbol3 = sym_bit[bin - 3];
        model1_t3 = 0;
        model2_t3 = 0;
        num = 4;
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
    }
    switch (bin)
    {
    case 0:
        method0 = 1;
        symbol0 = sym_bit[bin];
        model1_t0 = 0;
        model2_t0 = 0;
        method1 = 0;
        symbol1 = 0;
        model1_t1 = 0;
        model2_t1 = 0;
        method2 = 0;
        symbol2 = 0;
        model1_t2 = 0;
        model2_t2 = 0;
        method3 = 0;
        symbol3 = 0;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 1;
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
        break;
    case 1:
        method0 = 1;
        symbol0 = sym_bit[bin];
        model1_t0 = 0;
        model2_t0 = 0;
        method1 = 1;
        symbol1 = sym_bit[bin - 1];
        model1_t1 = 0;
        model2_t1 = 0;
        method2 = 0;
        symbol2 = 0;
        model1_t2 = 0;
        model2_t2 = 0;
        method3 = 0;
        symbol3 = 0;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 2;
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
        break;
    case 2:
        method0 = 1;
        symbol0 = sym_bit[bin];
        model1_t0 = 0;
        model2_t0 = 0;
        method1 = 1;
        symbol1 = sym_bit[bin - 1];
        model1_t1 = 0;
        model2_t1 = 0;
        method2 = 1;
        symbol2 = sym_bit[bin - 2];
        model1_t2 = 0;
        model2_t2 = 0;
        method3 = 0;
        symbol3 = 0;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 3;
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
        break;

    }
}
#endif

#if AEC_STAGE3_ONE_PORT
int aec_enc_eco_level(u32 sym, SBAC_CTX_MODEL model)
{
    int exp_golomb_order = 0;

    if (sym < 8)
    {
        aec_sbac_write_truncate_unary_sym(sym, 2, 9, model);
    }
    else
    {
        sym -= 8;

        aec_sbac_write_truncate_unary_sym(8, 2, 9, model);

        // exp_golomb part
        while ((int)sym >= (1 << exp_golomb_order))
        {
            sym = sym - (1 << exp_golomb_order);
            exp_golomb_order++;
        }

        aec_sbac_write_unary_sym_ep(exp_golomb_order);
        aec_sbac_encode_bins_ep_msb(sym, exp_golomb_order);

    }

    return COM_OK;
}
#else
int aec_enc_eco_level(u32 sym, u32 sign, SBAC_CTX_MODEL model, hls::stream<u67>& OutStream)
{
#pragma HLS INLINE off
    int exp_golomb_order = 0;
    int sym_bit[32];
    u67 tmp;
    if (sym < 3)
    {
        aec_sbac_write_truncate_unary_sym_sign_spec(sym, sign, model, OutStream);
    }
    else if ((sym < 8) && (sym >= 3))
    {
        //aec_stage3(1,1,1,256, 31,0,0,0,0,0,0,0,0,0,0,0,0,OutStream);
        aec_sbac_write_truncate_unary_sym_sign(sym, 2, 9, sign, model, OutStream);
        //aec_stage3(1,1,1,255, 30,0,0,0,0,0,0,0,0,0,0,0,0,OutStream);
    }
    else
    {
        sym -= 8;
        //aec_stage3(1,1,1,254, 29,0,0,0,0,0,0,0,0,0,0,0,0,OutStream);
        aec_sbac_write_truncate_unary_sym_spec_8(model, OutStream);
        exp_golomb_order = get_exp(&sym);
        get_sym_bit(sym, sym_bit);
        aec_sbac_write_unary_sym_ep(exp_golomb_order, OutStream);
        aec_sbac_encode_bins_ep_msb_sign(sign, exp_golomb_order, sym_bit, OutStream);
        //aec_stage3(1,1,1,253, 28,0,0,0,0,0,0,0,0,0,0,0,0,OutStream);
    }
    return COM_OK;
}
int aec_enc_eco_level_spec(u32 sym_run, u32 sym, u32 sign, SBAC_CTX_MODEL model_run, SBAC_CTX_MODEL model, hls::stream<u448>& OutStream)
{
#pragma HLS INLINE off
    int exp_golomb_order = 0;
    int sym_bit[32];
    u67 tmp;
    if (sym < 8)
    {
        aec_sbac_write_truncate_unary_sym_sign_spec_2(sym_run, sym, 2, 9, sign, model_run, model, OutStream);
    }
    else
    {
        sym -= 8;
        int num;
        u8 method0, method1, method2, method3;
        u32 symbol0, symbol1, symbol2, symbol3;
        SBAC_CTX_MODEL model1_t0, model2_t0, model1_t1, model2_t1, model1_t2, model2_t2, model1_t3, model2_t3;
        switch (sym_run)
        {
        case 0:
            method0 = 0;
            symbol0 = 1;
            model1_t0 = model_run;
            model2_t0 = 0;
            method1 = 0;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 1;
            break;
        case 1:
            method0 = 0;
            symbol0 = 0;
            model1_t0 = model_run;
            model2_t0 = 0;
            method1 = 0;
            symbol1 = 1;
            model1_t1 = model_run + 1;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 2;
            break;
        case 2:
            method0 = 0;
            symbol0 = 0;
            model1_t0 = model_run;
            model2_t0 = 0;
            method1 = 0;
            symbol1 = 0;
            model1_t1 = model_run + 1;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 1;
            model1_t2 = model_run + 1;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 3;
            break;
        }
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
        aec_sbac_write_truncate_unary_sym_spec_8(model, OutStream);
        exp_golomb_order = get_exp(&sym);
        get_sym_bit(sym, sym_bit);
        aec_sbac_write_unary_sym_ep(exp_golomb_order, OutStream);
        aec_sbac_encode_bins_ep_msb_sign(sign, exp_golomb_order, sym_bit, OutStream);
    }
    return COM_OK;
}
#endif
#if AEC_STAGE3_ONE_PORT
void aec_sbac_write_unary_sym_ep(u32 sym)
{
#pragma HLS INLINE off
    //   u32 ctx_idx = 0;
    int i = 0;
    for (i = sym; i >= 0; i--)
    {
#pragma HLS loop_tripcount max=17
        aec_stage3(1, 1, (u32)(sym ? 0 : 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        sym--;
    }
}
#else
void aec_sbac_write_unary_sym_ep(u32 sym, hls::stream<u67>& OutStream)
{
#pragma HLS INLINE off
    int i = 0;
    for (i = sym; i >= 3; i -= 4)
    {
#pragma HLS loop_tripcount max=4
        aec_stage3(4, 1, (u32)(sym ? 0 : 1), 0, 0,
            1, (u32)((sym - 1) ? 0 : 1), 0, 0,
            1, (u32)((sym - 2) ? 0 : 1), 0, 0,
            1, (u32)((sym - 3) ? 0 : 1), 0, 0, OutStream);
        sym -= 4;
    }
    switch (sym)
    {
    case 0:
        aec_stage3(1, 1, (u32)(sym ? 0 : 1), 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0, OutStream);
        break;
    case 1:
        aec_stage3(2, 1, (u32)(sym ? 0 : 1), 0, 0,
            1, (u32)((sym - 1) ? 0 : 1), 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0, OutStream);
        break;
    case 2:
        aec_stage3(3, 1, (u32)(sym ? 0 : 1), 0, 0,
            1, (u32)((sym - 1) ? 0 : 1), 0, 0,
            1, (u32)((sym - 2) ? 0 : 1), 0, 0,
            0, 0, 0, 0, OutStream);
        break;
    }
}
#endif
u16 zigzag_scan(int* col, int* row, int size_x, int size_y, ZIGZAG_CHOICE* choice)
{
    u16 res;
    res = (*col) + (*row) * size_x;

    if ((*col) != size_x - 1 || (*row) != size_y - 1)
    {
        switch (*choice)
        {
        case RIGHT_TOWARDS:
            (*col)++;
            if ((*row) == 0)
                (*choice) = LEFT_DOWN;
            else
                (*choice) = RIGHT_UP;
            break;
        case RIGHT_UP:
            (*row)--;
            (*col)++;
            if ((*row) == 0 && (*col) != size_x - 1)
                (*choice) = RIGHT_TOWARDS;
            else if ((*col) == size_x - 1)
                (*choice) = GO_DOWN;
            else
                (*choice) = RIGHT_UP;
            break;
        case GO_DOWN:
            (*row)++;
            if ((*col) == 0)
                (*choice) = RIGHT_UP;
            else
                (*choice) = LEFT_DOWN;
            break;
        case LEFT_DOWN:
            (*row)++;
            (*col)--;
            if ((*col) == 0 && (*row) != size_y - 1)
                (*choice) = GO_DOWN;
            else if ((*row) == size_y - 1)
                (*choice) = RIGHT_TOWARDS;
            else
                (*choice) = LEFT_DOWN;
            break;
        }
    }

    return res;
}
int get_offset1(u16 scan, int ch_type, int plane_width_log2)
{
#pragma HLS INLINE
    int offset = 0;
    if (ch_type == 0) {
        if (scan > ((1 << plane_width_log2) - 1)) {
            //offset = (scan / (1 << plane_width_log2)) * 64 + scan % (1 << plane_width_log2);
            switch (plane_width_log2)
            {
            case 0:
                offset = tab_offset_64_0[scan];
                break;
            case 1:
                offset = tab_offset_64_1[scan];
                break;
            case 2:
                offset = tab_offset_64_2[scan];
                break;
            case 3:
                offset = tab_offset_64_3[scan];
                break;
            case 4:
                offset = tab_offset_64_4[scan];
                break;
            case 5:
                offset = tab_offset_64_5[scan];
                break;
            case 6:
                offset = tab_offset_64_6[scan];
                break;
            }
        }
        else
            offset = scan;
    }
    else {
        if (scan > ((1 << plane_width_log2) - 1)) {
            //offset = (scan / (1 << plane_width_log2)) * 32 + scan % (1 << plane_width_log2);
            switch (plane_width_log2)
            {
            case 0:
                offset = tab_offset_32_0[scan];
                break;
            case 1:
                offset = tab_offset_32_1[scan];
                break;
            case 2:
                offset = tab_offset_32_2[scan];
                break;
            case 3:
                offset = tab_offset_32_3[scan];
                break;
            case 4:
                offset = tab_offset_32_4[scan];
                break;
            case 5:
                offset = tab_offset_32_5[scan];
                break;
            case 6:
                offset = tab_offset_32_6[scan];
                break;
            }
        }
        else
            offset = scan;
    }
    return offset;
}
void aec_enc_eco_run_length_cc(AEC_inner* AEC_DATA_inner_tmp, int i, int j, int tb_size, int log2_w, int log2_h, int num_sig, int ch_type,
    s16 coef[N_C][MAX_CU_DIM])
{
    u32            num_coeff, scan_pos;
    u32            sign, level, prev_level, run, last_flag, level_new;
    s32            t0, t0_1;
    s16            coef_cur;
    s32            index1, index2;
    num_coeff = 1 << (log2_w + log2_h);

    int size_x = 1 << log2_w;
    int size_y = 1 << log2_h;

    run = 0;
    prev_level = 6;

    int x = AEC_DATA_inner_tmp->x;
    int y = AEC_DATA_inner_tmp->y;

    int offset;
    if (ch_type == 0) {
        offset = (x & 63) + ((y & 63) << 6);
        offset += j * tb_size / (1 << AEC_DATA_inner_tmp->plane_width_log2) * 64;
    }
    else {

        x >>= 1;
        y >>= 1;
        offset = (x & 31) + ((y & 31) << 5);
        offset += j * tb_size / (1 << AEC_DATA_inner_tmp->plane_width_log2) * 32;
    }
    int col = 0;
    int row = 0;
    u16 scanp = 0;
    ZIGZAG_CHOICE choice = RIGHT_TOWARDS;
    int offset1;
    for (scan_pos = 0; scan_pos < num_coeff; scan_pos++)
    {
        //#pragma HLS LOOP_TRIPCOUNT max=1024
        //#pragma HLS LOOP_TRIPCOUNT max=2048//for stage 2
        scanp = zigzag_scan(&row, &col, size_x, size_y, &choice);
        offset1 = get_offset1(scanp, ch_type, AEC_DATA_inner_tmp->plane_width_log2);
        coef_cur = coef[i][offset1 + offset];
        index1 = tab_get_log2[scan_pos] + (ch_type == Y_C ? 0 : NUM_SBAC_CTX_LAST2);
        index2 = COM_MIN(prev_level - 1, 5) + (ch_type == Y_C ? 0 : NUM_SBAC_CTX_LAST1);
        t0 = ((COM_MIN(prev_level - 1, 5)) * 2) + (ch_type == Y_C ? 0 : 12);
        t0_1 = t0 + 1;
        level = COM_ABS16(coef_cur);
        level_new = level - 1;
        sign = (coef_cur > 0) ? 0 : 1;
        if (coef_cur)
        {
            /* Run coding */
#if AEC_STAGE3_ONE_PORT
            aec_enc_eco_run(run, 109 + t0);

            //aec_enc_eco_run_for_rdoq(run, 2, &run_rdoq[t0]);

            /* Level coding */
            aec_enc_eco_level(level - 1, 133 + t0);


            /* Sign coding */

            aec_stage3(1, 1, sign, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
            if ((run + level_new) == 0)
            {
                aec_sbac_write_truncate_unary_sym_spec_zero(sign, 109 + t0, 133 + t0, OutStream);
            }
            else if ((run + level_new) == 1)
            {
                aec_sbac_write_truncate_unary_sym_spec_one(run, level_new, sign, 109 + t0, 133 + t0, OutStream);
            }
            else
            {
                if (run < 3)
                {
                    aec_enc_eco_level_spec(run, level_new, sign, 109 + t0, 133 + t0, OutStream);
                }
                else
                {
                    aec_enc_eco_run(run, 109 + t0, OutStream);
                    aec_enc_eco_level(level_new, sign, 133 + t0, OutStream);
                }
            }

#endif
            if (scan_pos == num_coeff - 1)
            {
                break;
            }
            run = 0;
            num_sig--;
            /* Last flag coding */
            last_flag = (num_sig == 0) ? 1 : 0;

            aec_stage3(1, 2, last_flag,
                157 + index2,//157 + COM_MIN(prev_level - 1, 5) + (ch_type == Y_C ? 0 : NUM_SBAC_CTX_LAST1),
                1 + index1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            //1 + ace_get_log2(scan_pos + 1) + (ch_type == Y_C ? 0 : NUM_SBAC_CTX_LAST2),0,0,0,0,0,0,0,0,0,0,0,0);

            prev_level = level;

            if (last_flag)
            {
                break;
            }
        }
        else
        {
            run++;
        }
    }
}

void aec_enc_eco_xcoef(AEC_inner* AEC_DATA_inner_tmp, int i, int j, int tb_size, int log2_w, int log2_h, int num_sig, int ch_type, s16 coef[N_C][MAX_CU_DIM])
{
    aec_enc_eco_run_length_cc(AEC_DATA_inner_tmp, i, j, tb_size, log2_w, log2_h, num_sig, (ch_type == Y_C ? 0 : 1), coef);
}

void aec_sbac_write_truncate_unary_sym(u32 sym, u32 num_ctx, u32 max_num, SBAC_CTX_MODEL model)
{
#pragma HLS INLINE off
    u32 ctx_idx = 0;
    u32 ctx_idx_temp = (u32)0;
    aec_stage3(1, 0, (u32)(sym ? 0 : 1), model + ((ctx_idx < num_ctx - ((unsigned int)1) ? ctx_idx : num_ctx - ((unsigned int)1))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

    ctx_idx++;
#if AEC_STAGE3_ONE_PORT 
    for (ctx_idx_temp = ctx_idx; ctx_idx_temp < max_num - ((unsigned int)1) && sym--; ctx_idx_temp++)
    {
#pragma HLS loop_tripcount max=17
        aec_stage3(1, 0, (u32)(sym ? 0 : 1), model + ((ctx_idx_temp < num_ctx - ((unsigned int)1) ? ctx_idx_temp : num_ctx - ((unsigned int)1))), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
#else
    int num;
    u8 method0, method1, method2, method3;
    u32 symbol0, symbol1, symbol2, symbol3;
    SBAC_CTX_MODEL model1_t0, model2_t0, model1_t1, model2_t1, model1_t2, model2_t2, model1_t3, model2_t3;
    u32 max_num_temp = max_num - ((unsigned int)1);
    u32 num_ctx_temp = num_ctx - ((unsigned int)1);
    ctx_idx_temp = ctx_idx;
    for (; sym >= 4; sym -= 4)
    {
#pragma HLS loop_tripcount max=4
        if (ctx_idx_temp < max_num_temp)
        {
            method0 = 0;
            symbol0 = (u32)((sym - 1) ? 0 : 1);
            model1_t0 = model + (ctx_idx_temp < num_ctx_temp ? ctx_idx_temp : num_ctx_temp);
            model2_t0 = 0;
        }
        else
        {
            break;
        }
        if ((ctx_idx_temp + 1) < max_num_temp)
        {
            method1 = 0;
            symbol1 = (u32)((sym - 2) ? 0 : 1);
            model1_t1 = model + ((ctx_idx_temp + 1) < num_ctx_temp ? (ctx_idx_temp + 1) : num_ctx_temp);
            model2_t1 = 0;
        }
        else
        {
            ctx_idx_temp += 1;
            method1 = 0;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 1;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
        if ((ctx_idx_temp + 2) < max_num_temp)
        {
            method2 = 0;
            symbol2 = (u32)((sym - 3) ? 0 : 1);
            model1_t2 = model + ((ctx_idx_temp + 2) < num_ctx_temp ? (ctx_idx_temp + 2) : num_ctx_temp);
            model2_t2 = 0;
        }
        else
        {
            ctx_idx_temp += 2;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 2;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
        if ((ctx_idx_temp + 3) < max_num_temp)
        {
            method3 = 0;
            symbol3 = (u32)((sym - 4) ? 0 : 1);
            model1_t3 = model + ((ctx_idx_temp + 3) < num_ctx_temp ? (ctx_idx_temp + 3) : num_ctx_temp);
            model2_t3 = 0;
            num = 4;
            ctx_idx_temp += 4;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
        }
        else
        {
            ctx_idx_temp += 3;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 3;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
    }
    if (ctx_idx_temp < max_num_temp)
    {
        switch (sym)
        {
        case 0:
            break;
        case 1:
            method0 = 0;
            symbol0 = 1;
            model1_t0 = model + (ctx_idx_temp < num_ctx_temp ? ctx_idx_temp : num_ctx_temp);
            model2_t0 = 0;
            method1 = 0;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 1;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        case 2:
            method0 = 0;
            symbol0 = 0;
            model1_t0 = model + (ctx_idx_temp < num_ctx_temp ? ctx_idx_temp : num_ctx_temp);
            model2_t0 = 0;
            if ((ctx_idx_temp + 1) < max_num_temp)
            {
                method1 = 0;
                symbol1 = 1;
                model1_t1 = model + ((ctx_idx_temp + 1) < num_ctx_temp ? (ctx_idx_temp + 1) : num_ctx_temp);
                model2_t1 = 0;
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 2;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
            }
            else
            {
                method1 = 0;
                symbol1 = 0;
                model1_t1 = 0;
                model2_t1 = 0;
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 1;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
            }
            break;
        case 3:
            method0 = 0;
            symbol0 = 0;
            model1_t0 = model + (ctx_idx_temp < num_ctx_temp ? ctx_idx_temp : num_ctx_temp);
            model2_t0 = 0;

            if ((ctx_idx_temp + 1) < max_num_temp)
            {
                method1 = 0;
                symbol1 = 0;
                model1_t1 = model + ((ctx_idx_temp + 1) < num_ctx_temp ? (ctx_idx_temp + 1) : num_ctx_temp);
                model2_t1 = 0;
            }
            else
            {
                method1 = 0;
                symbol1 = 0;
                model1_t1 = 0;
                model2_t1 = 0;
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 1;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
                break;
            }
            if ((ctx_idx_temp + 2) < max_num_temp)
            {
                method2 = 0;
                symbol2 = 1;
                model1_t2 = model + ((ctx_idx_temp + 2) < num_ctx_temp ? (ctx_idx_temp + 2) : num_ctx_temp);
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 3;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
            }
            else
            {
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 2;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
                break;
            }
        }
    }
#endif
}
#endif

void aec_ctx_init()
{
    int i, j;


    /* aec_sbac_local.range = 0x1FF;
     aec_sbac_local.code = 0;
     aec_sbac_local.left_bits = 23;
     aec_sbac_local.pending_byte = 0;
     aec_sbac_local.is_pending_byte = 0;
     aec_sbac_local.stacked_ff = 0;*/

    aec_ctx.umve_flag = PROB_INIT;
    aec_ctx.umve_base_idx[0] = PROB_INIT;
    aec_ctx.umve_step_idx[0] = PROB_INIT;
    aec_ctx.cons_mode[0] = PROB_INIT;
    aec_ctx.ipf_flag[0] = PROB_INIT;                //slice level init
    aec_ctx.mvp_from_hmvp_flag[0] = PROB_INIT;
    aec_ctx.tb_split[0] = PROB_INIT;
    aec_ctx.affine_flag[0] = PROB_INIT;
    aec_ctx.smvd_flag[0] = PROB_INIT;
    aec_ctx.sao_mode[0] = PROB_INIT;                //slice level init
    aec_ctx.sao_offset[0] = PROB_INIT;          //slice level init
    aec_ctx.alf_lcu_enable[0] = PROB_INIT;

    for (i = 0; i < 2; i++)
    {
        aec_ctx.direct_flag[i] = PROB_INIT;
        aec_ctx.umve_dir_idx[i] = PROB_INIT;
        aec_ctx.affine_mvr_idx[i] = PROB_INIT;
        aec_ctx.ctp_zero_flag[i] = PROB_INIT;
        for (j = 0; j < 3; j++)
        {
            aec_ctx.mvd[i][j] = PROB_INIT;
        }
    }
    for (i = 0; i < 3; i++)
    {
        aec_ctx.inter_dir[i] = PROB_INIT;
        aec_ctx.cbf[i] = PROB_INIT;             //slice level init
        aec_ctx.split_mode[i] = PROB_INIT;      //slice level init
        aec_ctx.refi[i] = PROB_INIT;
        aec_ctx.sao_merge_flag[i] = PROB_INIT;  //slice level init
    }
    for (i = 0; i < 4; i++)
    {
        aec_ctx.skip_flag[i] = PROB_INIT;
        aec_ctx.mvr_idx[i] = PROB_INIT;
        aec_ctx.affine_mrg_idx[i] = PROB_INIT;
        aec_ctx.delta_qp[i] = PROB_INIT;
        aec_ctx.split_flag[i] = PROB_INIT;      //slice level init
    }
    for (i = 0; i < 5; i++)
    {
        aec_ctx.split_dir[i] = PROB_INIT;           //slice level init
    }
    for (i = 0; i < 6; i++)
    {
        aec_ctx.pred_mode[i] = PROB_INIT;
        aec_ctx.part_size[i] = PROB_INIT;           //slice level init
    }
    for (i = 0; i < 9; i++)
    {
        aec_ctx.bt_split_flag[i] = PROB_INIT;       //slice level init
    }
    for (i = 0; i < 10; i++)
    {
        aec_ctx.intra_dir[i] = PROB_INIT;           //slice level init
    }
    for (i = 0; i < 11; i++)
    {
        aec_ctx.skip_idx_ctx[i] = PROB_INIT;
    }
    for (i = 0; i < 12; i++)
    {
        aec_ctx.last1[i] = PROB_INIT;               //slice level init
    }
    for (i = 0; i < 22; i++)
    {
        aec_ctx.last2[i] = PROB_INIT;               //slice level init
    }
    for (i = 0; i < 24; i++)
    {
        aec_ctx.run[i] = PROB_INIT;             //slice level init
        aec_ctx.run_rdoq[i] = PROB_INIT;            //slice level init
        aec_ctx.level[i] = PROB_INIT;               //slice level init
    }
}
#if AEC_PHASE1
#if !AEC_STAGE3_ONE_PORT
void aec_sbac_write_truncate_unary_sym_index_spec(u32 sym, int index[32], SBAC_CTX_MODEL model, hls::stream<u448>& OutStream)
{
#pragma HLS INLINE 
    int num;
    u8 method0, method1, method2, method3;
    u32 symbol0, symbol1, symbol2, symbol3;
    SBAC_CTX_MODEL model1_t0, model2_t0, model1_t1, model2_t1, model1_t2, model2_t2, model1_t3, model2_t3;

    switch (sym)
    {
    case 0:
        method0 = 0;
        symbol0 = 1;
        model1_t0 = model + index[0];
        model2_t0 = 0;
        method1 = 0;
        symbol1 = 0;
        model1_t1 = 0;
        model2_t1 = 0;
        method2 = 0;
        symbol2 = 0;
        model1_t2 = 0;
        model2_t2 = 0;
        method3 = 0;
        symbol3 = 0;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 1;
        break;
    case 1:
        method0 = 0;
        symbol0 = 0;
        model1_t0 = model + index[0];
        model2_t0 = 0;
        method1 = 0;
        symbol1 = 1;
        model1_t1 = model + index[1];
        model2_t1 = 0;
        method2 = 0;
        symbol2 = 0;
        model1_t2 = 0;
        model2_t2 = 0;
        method3 = 0;
        symbol3 = 0;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 2;
        break;
    case 2:
        method0 = 0;
        symbol0 = 0;
        model1_t0 = model + index[0];
        model2_t0 = 0;
        method1 = 0;
        symbol1 = 0;
        model1_t1 = model + index[1];
        model2_t1 = 0;
        method2 = 0;
        symbol2 = 1;
        model1_t2 = model + index[2];
        model2_t2 = 0;
        method3 = 0;
        symbol3 = 0;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 3;
        break;
    case 3:
        method0 = 0;
        symbol0 = 0;
        model1_t0 = model + index[0];
        model2_t0 = 0;
        method1 = 0;
        symbol1 = 0;
        model1_t1 = model + index[1];
        model2_t1 = 0;
        method2 = 0;
        symbol2 = 0;
        model1_t2 = model + index[2];
        model2_t2 = 0;
        method3 = 0;
        symbol3 = 1;
        model1_t3 = model + index[3];
        model2_t3 = 0;
        num = 4;
        break;
    }

    aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
        method1, symbol1, model1_t1, model2_t1,
        method2, symbol2, model1_t2, model2_t2,
        method3, symbol3, model1_t3, model2_t3, OutStream);


}

void aec_sbac_write_truncate_unary_sym_index(u32 sym, u32 num_ctx, u32 max_num, int index[32], SBAC_CTX_MODEL model, hls::stream<u67>& OutStream)
{
#pragma HLS INLINE 
    u32 ctx_idx = 0;
    u32 ctx_idx_temp = (u32)0;
    u32 max_num_temp = max_num - ((unsigned int)1);
    u32 num_ctx_temp = num_ctx - ((unsigned int)1);
    int num;
    u8 method0, method1, method2, method3;
    u32 symbol0, symbol1, symbol2, symbol3;
    SBAC_CTX_MODEL model1_t0, model2_t0, model1_t1, model2_t1, model1_t2, model2_t2, model1_t3, model2_t3;
    //aec_stage3(0, (u32)(sym ? 0 : 1), (&MD2AEC_DATA_ARRAY->sbac), model + ((ctx_idx < num_ctx - ((unsigned int)1) ? ctx_idx : num_ctx - ((unsigned int)1))), 0, &MD2AEC_DATA_ARRAY->bs,OutStream);
    method0 = 0;
    symbol0 = (u32)(sym ? 0 : 1);
    model1_t0 = model + index[ctx_idx];
    model2_t0 = 0;
    method1 = 0;
    symbol1 = 0;
    model1_t1 = 0;
    model2_t1 = 0;
    method2 = 0;
    symbol2 = 0;
    model1_t2 = 0;
    model2_t2 = 0;
    method3 = 0;
    symbol3 = 0;
    model1_t3 = 0;
    model2_t3 = 0;
    num = 1;
    aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
        method1, symbol1, model1_t1, model2_t1,
        method2, symbol2, model1_t2, model2_t2,
        method3, symbol3, model1_t3, model2_t3, OutStream);
    ctx_idx++;

    ctx_idx_temp = ctx_idx;
    for (; sym >= 4; sym -= 4)
    {
#pragma HLS loop_tripcount max=4
        if (ctx_idx_temp < max_num_temp)
        {
            method0 = 0;
            symbol0 = (u32)((sym - 1) ? 0 : 1);
            model1_t0 = model + index[ctx_idx_temp];
            model2_t0 = 0;
        }
        else
        {
            break;
        }
        if ((ctx_idx_temp + 1) < max_num_temp)
        {
            method1 = 0;
            symbol1 = (u32)((sym - 2) ? 0 : 1);
            model1_t1 = model + index[ctx_idx_temp + 1];
            model2_t1 = 0;
        }
        else
        {
            ctx_idx_temp += 1;
            method1 = 0;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 1;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
        if ((ctx_idx_temp + 2) < max_num_temp)
        {
            method2 = 0;
            symbol2 = (u32)((sym - 3) ? 0 : 1);
            model1_t2 = model + index[ctx_idx_temp + 2];
            model2_t2 = 0;
        }
        else
        {
            ctx_idx_temp += 2;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 2;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
        if ((ctx_idx_temp + 3) < max_num_temp)
        {
            method3 = 0;
            symbol3 = (u32)((sym - 4) ? 0 : 1);
            model1_t3 = model + index[ctx_idx_temp + 3];
            model2_t3 = 0;
            num = 4;
            ctx_idx_temp += 4;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
        }
        else
        {
            ctx_idx_temp += 3;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 3;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
    }
    if (ctx_idx_temp < max_num_temp)
    {
        switch (sym)
        {
        case 0:
            break;
        case 1:
            method0 = 0;
            symbol0 = 1;
            model1_t0 = model + index[ctx_idx_temp];
            model2_t0 = 0;
            method1 = 0;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 1;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        case 2:
            method0 = 0;
            symbol0 = 0;
            model1_t0 = model + index[ctx_idx_temp];
            model2_t0 = 0;
            if ((ctx_idx_temp + 1) < max_num_temp)
            {
                method1 = 0;
                symbol1 = 1;
                model1_t1 = model + index[ctx_idx_temp + 1];
                model2_t1 = 0;
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 2;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
            }
            else
            {
                method1 = 0;
                symbol1 = 0;
                model1_t1 = 0;
                model2_t1 = 0;
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 1;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
            }
            break;
        case 3:
            method0 = 0;
            symbol0 = 0;
            model1_t0 = model + index[ctx_idx_temp];
            model2_t0 = 0;
            if ((ctx_idx_temp + 1) < max_num_temp)
            {
                method1 = 0;
                symbol1 = 0;
                model1_t1 = model + index[ctx_idx_temp + 1];
                model2_t1 = 0;
            }
            else
            {
                method1 = 0;
                symbol1 = 0;
                model1_t1 = 0;
                model2_t1 = 0;
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 1;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
                break;
            }
            if ((ctx_idx_temp + 2) < max_num_temp)
            {
                method2 = 0;
                symbol2 = 1;
                model1_t2 = model + index[ctx_idx_temp + 2];
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 3;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
            }
            else
            {
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 2;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
                break;
            }
        }
    }
}
void aec_sbac_write_truncate_unary_sym_spec_16(SBAC_CTX_MODEL model, hls::stream<u67>& OutStream)
{
#pragma HLS INLINE 

    aec_stage3(4, 0, 0, model, 0,
        0, 0, model + 1, 0,
        0, 0, model + 1, 0,
        0, 0, model + 1, 0, OutStream);

    aec_stage3(4, 0, 0, model + 1, 0,
        0, 0, model + 1, 0,
        0, 0, model + 1, 0,
        0, 0, model + 1, 0, OutStream);

    aec_stage3(4, 0, 0, model + 1, 0,
        0, 0, model + 1, 0,
        0, 0, model + 1, 0,
        0, 0, model + 1, 0, OutStream);

    aec_stage3(4, 0, 0, model + 1, 0,
        0, 0, model + 1, 0,
        0, 0, model + 1, 0,
        0, 0, model + 1, 0, OutStream);
}
void aec_sbac_write_truncate_unary_sym_spec_8(SBAC_CTX_MODEL model, hls::stream<u67>& OutStream)
{
#pragma HLS INLINE 
    aec_stage3(4, 0, 0, model, 0,
        0, 0, model + 1, 0,
        0, 0, model + 1, 0,
        0, 0, model + 1, 0, OutStream);

    aec_stage3(4, 0, 0, model + 1, 0,
        0, 0, model + 1, 0,
        0, 0, model + 1, 0,
        0, 0, model + 1, 0, OutStream);
}
void aec_sbac_write_truncate_unary_sym_sign(u32 sym, u32 num_ctx, u32 max_num, u32 sign, SBAC_CTX_MODEL model, hls::stream<u67>& OutStream)
{
#pragma HLS INLINE 
    u32 ctx_idx = 0;
    u32 ctx_idx_temp = (u32)0;
    u32 max_num_temp = max_num - ((unsigned int)1);
    u32 num_ctx_temp = num_ctx - ((unsigned int)1);
    int num;
    u8 method0, method1, method2, method3;
    u32 symbol0, symbol1, symbol2, symbol3;
    SBAC_CTX_MODEL model1_t0, model2_t0, model1_t1, model2_t1, model1_t2, model2_t2, model1_t3, model2_t3;
    //aec_stage3(0, (u32)(sym ? 0 : 1), (&MD2AEC_DATA_ARRAY->sbac), model + ((ctx_idx < num_ctx - ((unsigned int)1) ? ctx_idx : num_ctx - ((unsigned int)1))), 0, &MD2AEC_DATA_ARRAY->bs,OutStream);
    method0 = 0;
    symbol0 = (u32)(sym ? 0 : 1);
    model1_t0 = model + (ctx_idx < num_ctx_temp ? ctx_idx : num_ctx_temp);
    model2_t0 = 0;
    method1 = 0;
    symbol1 = 0;
    model1_t1 = 0;
    model2_t1 = 0;
    method2 = 0;
    symbol2 = 0;
    model1_t2 = 0;
    model2_t2 = 0;
    method3 = 0;
    symbol3 = 0;
    model1_t3 = 0;
    model2_t3 = 0;
    num = 1;
    aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
        method1, symbol1, model1_t1, model2_t1,
        method2, symbol2, model1_t2, model2_t2,
        method3, symbol3, model1_t3, model2_t3, OutStream);
    ctx_idx++;

    ctx_idx_temp = ctx_idx;
    for (; sym >= 4; sym -= 4)
    {
#pragma HLS loop_tripcount max=4
        if (ctx_idx_temp < max_num_temp)
        {
            method0 = 0;
            symbol0 = (u32)((sym - 1) ? 0 : 1);
            model1_t0 = model + (ctx_idx_temp < num_ctx_temp ? ctx_idx_temp : num_ctx_temp);
            model2_t0 = 0;
        }
        else
        {
            break;
        }
        if ((ctx_idx_temp + 1) < max_num_temp)
        {
            method1 = 0;
            symbol1 = (u32)((sym - 2) ? 0 : 1);
            model1_t1 = model + ((ctx_idx_temp + 1) < num_ctx_temp ? (ctx_idx_temp + 1) : num_ctx_temp);
            model2_t1 = 0;
        }
        else
        {
            ctx_idx_temp += 1;
            method1 = 0;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 1;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
        if ((ctx_idx_temp + 2) < max_num_temp)
        {
            method2 = 0;
            symbol2 = (u32)((sym - 3) ? 0 : 1);
            model1_t2 = model + ((ctx_idx_temp + 2) < num_ctx_temp ? (ctx_idx_temp + 2) : num_ctx_temp);
            model2_t2 = 0;
        }
        else
        {
            ctx_idx_temp += 2;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 2;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
        if ((ctx_idx_temp + 3) < max_num_temp)
        {
            method3 = 0;
            symbol3 = (u32)((sym - 4) ? 0 : 1);
            model1_t3 = model + ((ctx_idx_temp + 3) < num_ctx_temp ? (ctx_idx_temp + 3) : num_ctx_temp);
            model2_t3 = 0;
            num = 4;
            ctx_idx_temp += 4;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
        }
        else
        {
            ctx_idx_temp += 3;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 3;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
    }
    if (ctx_idx_temp < max_num_temp)
    {
        switch (sym)
        {
        case 0:
            method0 = 1;
            symbol0 = sign;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 0;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 1;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        case 1:
            method0 = 0;
            symbol0 = 1;
            model1_t0 = model + (ctx_idx_temp < num_ctx_temp ? ctx_idx_temp : num_ctx_temp);
            model2_t0 = 0;
            method1 = 1;
            symbol1 = sign;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 2;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        case 2:
            method0 = 0;
            symbol0 = 0;
            model1_t0 = model + (ctx_idx_temp < num_ctx_temp ? ctx_idx_temp : num_ctx_temp);
            model2_t0 = 0;
            if ((ctx_idx_temp + 1) < max_num_temp)
            {
                method1 = 0;
                symbol1 = 1;
                model1_t1 = model + ((ctx_idx_temp + 1) < num_ctx_temp ? (ctx_idx_temp + 1) : num_ctx_temp);
                model2_t1 = 0;
                method2 = 1;
                symbol2 = sign;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 3;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
            }
            else
            {
                method1 = 1;
                symbol1 = sign;
                model1_t1 = 0;
                model2_t1 = 0;
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 2;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
            }
            break;
        case 3:
            method0 = 0;
            symbol0 = 0;
            model1_t0 = model + (ctx_idx_temp < num_ctx_temp ? ctx_idx_temp : num_ctx_temp);
            model2_t0 = 0;
            if ((ctx_idx_temp + 1) < max_num_temp)
            {
                method1 = 0;
                symbol1 = 0;
                model1_t1 = model + ((ctx_idx_temp + 1) < num_ctx_temp ? (ctx_idx_temp + 1) : num_ctx_temp);
                model2_t1 = 0;
            }
            else
            {
                method1 = 1;
                symbol1 = sign;
                model1_t1 = 0;
                model2_t1 = 0;
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 2;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
                break;
            }
            if ((ctx_idx_temp + 2) < max_num_temp)
            {
                method2 = 0;
                symbol2 = 1;
                model1_t2 = model + ((ctx_idx_temp + 2) < num_ctx_temp ? (ctx_idx_temp + 2) : num_ctx_temp);
                model2_t2 = 0;
                method3 = 1;
                symbol3 = sign;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 4;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
                break;
            }
            else
            {
                method2 = 1;
                symbol2 = sign;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 3;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
                break;
            }
        }
    }
    else
    {
        method0 = 1;
        symbol0 = sign;
        model1_t0 = 0;
        model2_t0 = 0;
        method1 = 0;
        symbol1 = 0;
        model1_t1 = 0;
        model2_t1 = 0;
        method2 = 0;
        symbol2 = 0;
        model1_t2 = 0;
        model2_t2 = 0;
        method3 = 0;
        symbol3 = 0;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 1;
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
    }
}
void aec_sbac_write_truncate_unary_sym_sign_spec_2(u32 sym_run, u32 sym, u32 num_ctx, u32 max_num, u32 sign, SBAC_CTX_MODEL model_run, SBAC_CTX_MODEL model, hls::stream<u448>& OutStream)
{
#pragma HLS INLINE 
    u32 ctx_idx = 0;
    u32 ctx_idx_temp = (u32)0;
    u32 max_num_temp = max_num - ((unsigned int)1);
    u32 num_ctx_temp = num_ctx - ((unsigned int)1);
    int num;
    u8 method0, method1, method2, method3;
    u32 symbol0, symbol1, symbol2, symbol3;
    SBAC_CTX_MODEL model1_t0, model2_t0, model1_t1, model2_t1, model1_t2, model2_t2, model1_t3, model2_t3;
    switch (sym_run)
    {
    case 0:
        method0 = 0;
        symbol0 = 1;
        model1_t0 = model_run;
        model2_t0 = 0;
        method1 = 0;
        symbol1 = (u32)(sym ? 0 : 1);
        model1_t1 = model + (ctx_idx < num_ctx_temp ? ctx_idx : num_ctx_temp);
        model2_t1 = 0;
        method2 = 0;
        symbol2 = 0;
        model1_t2 = 0;
        model2_t2 = 0;
        method3 = 0;
        symbol3 = 0;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 2;
        break;
    case 1:
        method0 = 0;
        symbol0 = 0;
        model1_t0 = model_run;
        model2_t0 = 0;
        method1 = 0;
        symbol1 = 1;
        model1_t1 = model_run + 1;
        model2_t1 = 0;
        method2 = 0;
        symbol2 = (u32)(sym ? 0 : 1);
        model1_t2 = model + (ctx_idx < num_ctx_temp ? ctx_idx : num_ctx_temp);
        model2_t2 = 0;
        method3 = 0;
        symbol3 = 0;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 3;
        break;
    case 2:
        method0 = 0;
        symbol0 = 0;
        model1_t0 = model_run;
        model2_t0 = 0;
        method1 = 0;
        symbol1 = 0;
        model1_t1 = model_run + 1;
        model2_t1 = 0;
        method2 = 0;
        symbol2 = 1;
        model1_t2 = model_run + 1;
        model2_t2 = 0;
        method3 = 0;
        symbol3 = (u32)(sym ? 0 : 1);
        model1_t3 = model + (ctx_idx < num_ctx_temp ? ctx_idx : num_ctx_temp);
        model2_t3 = 0;
        num = 4;
        break;
    }
    aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
        method1, symbol1, model1_t1, model2_t1,
        method2, symbol2, model1_t2, model2_t2,
        method3, symbol3, model1_t3, model2_t3, OutStream);
    ctx_idx++;

    ctx_idx_temp = ctx_idx;
    for (; sym >= 4; sym -= 4)
    {
#pragma HLS loop_tripcount max=4
        if (ctx_idx_temp < max_num_temp)
        {
            method0 = 0;
            symbol0 = (u32)((sym - 1) ? 0 : 1);
            model1_t0 = model + (ctx_idx_temp < num_ctx_temp ? ctx_idx_temp : num_ctx_temp);
            model2_t0 = 0;
        }
        else
        {
            break;
        }
        if ((ctx_idx_temp + 1) < max_num_temp)
        {
            method1 = 0;
            symbol1 = (u32)((sym - 2) ? 0 : 1);
            model1_t1 = model + ((ctx_idx_temp + 1) < num_ctx_temp ? (ctx_idx_temp + 1) : num_ctx_temp);
            model2_t1 = 0;
        }
        else
        {
            ctx_idx_temp += 1;
            method1 = 0;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 1;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
        if ((ctx_idx_temp + 2) < max_num_temp)
        {
            method2 = 0;
            symbol2 = (u32)((sym - 3) ? 0 : 1);
            model1_t2 = model + ((ctx_idx_temp + 2) < num_ctx_temp ? (ctx_idx_temp + 2) : num_ctx_temp);
            model2_t2 = 0;
        }
        else
        {
            ctx_idx_temp += 2;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 2;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
        if ((ctx_idx_temp + 3) < max_num_temp)
        {
            method3 = 0;
            symbol3 = (u32)((sym - 4) ? 0 : 1);
            model1_t3 = model + ((ctx_idx_temp + 3) < num_ctx_temp ? (ctx_idx_temp + 3) : num_ctx_temp);
            model2_t3 = 0;
            num = 4;
            ctx_idx_temp += 4;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
        }
        else
        {
            ctx_idx_temp += 3;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 3;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        }
    }
    if (ctx_idx_temp < max_num_temp)
    {
        switch (sym)
        {
        case 0:
            method0 = 1;
            symbol0 = sign;
            model1_t0 = 0;
            model2_t0 = 0;
            method1 = 0;
            symbol1 = 0;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 1;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        case 1:
            method0 = 0;
            symbol0 = 1;
            model1_t0 = model + (ctx_idx_temp < num_ctx_temp ? ctx_idx_temp : num_ctx_temp);
            model2_t0 = 0;
            method1 = 1;
            symbol1 = sign;
            model1_t1 = 0;
            model2_t1 = 0;
            method2 = 0;
            symbol2 = 0;
            model1_t2 = 0;
            model2_t2 = 0;
            method3 = 0;
            symbol3 = 0;
            model1_t3 = 0;
            model2_t3 = 0;
            num = 2;
            aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                method1, symbol1, model1_t1, model2_t1,
                method2, symbol2, model1_t2, model2_t2,
                method3, symbol3, model1_t3, model2_t3, OutStream);
            break;
        case 2:
            method0 = 0;
            symbol0 = 0;
            model1_t0 = model + (ctx_idx_temp < num_ctx_temp ? ctx_idx_temp : num_ctx_temp);
            model2_t0 = 0;
            if ((ctx_idx_temp + 1) < max_num_temp)
            {
                method1 = 0;
                symbol1 = 1;
                model1_t1 = model + ((ctx_idx_temp + 1) < num_ctx_temp ? (ctx_idx_temp + 1) : num_ctx_temp);
                model2_t1 = 0;
                method2 = 1;
                symbol2 = sign;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 3;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
            }
            else
            {
                method1 = 1;
                symbol1 = sign;
                model1_t1 = 0;
                model2_t1 = 0;
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 2;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
            }
            break;
        case 3:
            method0 = 0;
            symbol0 = 0;
            model1_t0 = model + (ctx_idx_temp < num_ctx_temp ? ctx_idx_temp : num_ctx_temp);
            model2_t0 = 0;
            if ((ctx_idx_temp + 1) < max_num_temp)
            {
                method1 = 0;
                symbol1 = 0;
                model1_t1 = model + ((ctx_idx_temp + 1) < num_ctx_temp ? (ctx_idx_temp + 1) : num_ctx_temp);
                model2_t1 = 0;
            }
            else
            {
                method1 = 1;
                symbol1 = sign;
                model1_t1 = 0;
                model2_t1 = 0;
                method2 = 0;
                symbol2 = 0;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 2;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
                break;
            }
            if ((ctx_idx_temp + 2) < max_num_temp)
            {
                method2 = 0;
                symbol2 = 1;
                model1_t2 = model + ((ctx_idx_temp + 2) < num_ctx_temp ? (ctx_idx_temp + 2) : num_ctx_temp);
                model2_t2 = 0;
                method3 = 1;
                symbol3 = sign;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 4;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
                break;
            }
            else
            {
                method2 = 1;
                symbol2 = sign;
                model1_t2 = 0;
                model2_t2 = 0;
                method3 = 0;
                symbol3 = 0;
                model1_t3 = 0;
                model2_t3 = 0;
                num = 3;
                aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
                    method1, symbol1, model1_t1, model2_t1,
                    method2, symbol2, model1_t2, model2_t2,
                    method3, symbol3, model1_t3, model2_t3, OutStream);
                break;
            }
        }
    }
    else
    {
        method0 = 1;
        symbol0 = sign;
        model1_t0 = 0;
        model2_t0 = 0;
        method1 = 0;
        symbol1 = 0;
        model1_t1 = 0;
        model2_t1 = 0;
        method2 = 0;
        symbol2 = 0;
        model1_t2 = 0;
        model2_t2 = 0;
        method3 = 0;
        symbol3 = 0;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 1;
        aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
            method1, symbol1, model1_t1, model2_t1,
            method2, symbol2, model1_t2, model2_t2,
            method3, symbol3, model1_t3, model2_t3, OutStream);
    }
}
void aec_sbac_write_truncate_unary_sym_sign_spec(u32 sym, u32 sign, SBAC_CTX_MODEL model, hls::stream<u448>& OutStream)
{
    int num;
    u8 method0, method1, method2, method3;
    u32 symbol0, symbol1, symbol2, symbol3;
    SBAC_CTX_MODEL model1_t0, model2_t0, model1_t1, model2_t1, model1_t2, model2_t2, model1_t3, model2_t3;
    //aec_stage3(0, (u32)(sym ? 0 : 1), (&MD2AEC_DATA_ARRAY->sbac), model + ((ctx_idx < num_ctx - ((unsigned int)1) ? ctx_idx : num_ctx - ((unsigned int)1))), 0, &MD2AEC_DATA_ARRAY->bs,OutStream);
    switch (sym)
    {
    case 0:
        method0 = 0;
        symbol0 = 1;
        model1_t0 = model;
        model2_t0 = 0;
        method1 = 1;
        symbol1 = sign;
        model1_t1 = 0;
        model2_t1 = 0;
        method2 = 0;
        symbol2 = 0;
        model1_t2 = 0;
        model2_t2 = 0;
        method3 = 0;
        symbol3 = 0;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 2;
        break;
    case 1:
        method0 = 0;
        symbol0 = 0;
        model1_t0 = model;
        model2_t0 = 0;
        method1 = 0;
        symbol1 = 1;
        model1_t1 = model + 1;
        model2_t1 = 0;
        method2 = 1;
        symbol2 = sign;
        model1_t2 = 0;
        model2_t2 = 0;
        method3 = 0;
        symbol3 = 0;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 3;
        break;
    case 2:
        method0 = 0;
        symbol0 = 0;
        model1_t0 = model;
        model2_t0 = 0;
        method1 = 0;
        symbol1 = 0;
        model1_t1 = model + 1;
        model2_t1 = 0;
        method2 = 0;
        symbol2 = 1;
        model1_t2 = model + 1;
        model2_t2 = 0;
        method3 = 1;
        symbol3 = sign;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 4;
        break;
    }
    aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
        method1, symbol1, model1_t1, model2_t1,
        method2, symbol2, model1_t2, model2_t2,
        method3, symbol3, model1_t3, model2_t3, OutStream);

}
void aec_sbac_write_truncate_unary_sym_spec_zero(u32 sign, SBAC_CTX_MODEL model1, SBAC_CTX_MODEL model2, hls::stream<u448>& OutStream)
{
    int num;
    u8 method0, method1, method2, method3;
    u32 symbol0, symbol1, symbol2, symbol3;
    SBAC_CTX_MODEL model1_t0, model2_t0, model1_t1, model2_t1, model1_t2, model2_t2, model1_t3, model2_t3;
    method0 = 0;
    symbol0 = 1;
    model1_t0 = model1;
    model2_t0 = 0;
    method1 = 0;
    symbol1 = 1;
    model1_t1 = model2;
    model2_t1 = 0;
    method2 = 1;
    symbol2 = sign;
    model1_t2 = 0;
    model2_t2 = 0;
    method3 = 0;
    symbol3 = 0;
    model1_t3 = 0;
    model2_t3 = 0;
    num = 3;
    aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
        method1, symbol1, model1_t1, model2_t1,
        method2, symbol2, model1_t2, model2_t2,
        method3, symbol3, model1_t3, model2_t3, OutStream);
}
void aec_sbac_write_truncate_unary_sym_spec_one(u32 sym1, u32 sym2, u32 sign, SBAC_CTX_MODEL model1, SBAC_CTX_MODEL model2, hls::stream<u448>& OutStream)
{
    int num;
    u8 method0, method1, method2, method3;
    u32 symbol0, symbol1, symbol2, symbol3;
    SBAC_CTX_MODEL model1_t0, model2_t0, model1_t1, model2_t1, model1_t2, model2_t2, model1_t3, model2_t3;
    if (sym1)
    {
        method0 = 0;
        symbol0 = 0;
        model1_t0 = model1;
        model2_t0 = 0;
        method1 = 0;
        symbol1 = 1;
        model1_t1 = model1 + 1;
        model2_t1 = 0;
        method2 = 0;
        symbol2 = 1;
        model1_t2 = model2;
        model2_t2 = 0;
        method3 = 1;
        symbol3 = sign;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 4;
    }
    else
    {
        method0 = 0;
        symbol0 = 1;
        model1_t0 = model1;
        model2_t0 = 0;
        method1 = 0;
        symbol1 = 0;
        model1_t1 = model2;
        model2_t1 = 0;
        method2 = 0;
        symbol2 = 1;
        model1_t2 = model2 + 1;
        model2_t2 = 0;
        method3 = 1;
        symbol3 = sign;
        model1_t3 = 0;
        model2_t3 = 0;
        num = 4;
    }
    aec_stage3(num, method0, symbol0, model1_t0, model2_t0,
        method1, symbol1, model1_t1, model2_t1,
        method2, symbol2, model1_t2, model2_t2,
        method3, symbol3, model1_t3, model2_t3, OutStream);
}
#endif

void encode_inter_dir(s8 refi0, s8 refi1, int cu_width, int cu_height)
{
    u8 predDir;
    static constexpr ptrdiff_t mod = offsetof(AEC_COM_SBAC_CTX, inter_dir) / sizeof(SBAC_CTX_MODEL) + 1;
    if (REFI_IS_VALID(refi0) && REFI_IS_VALID(refi1)) /* PRED_BI */
    {
        aec_stage3(1, 0, 1, mod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //enc_sbac_encode_bin(1, &AEC_DATA_input.sbac, AEC_DATA_input.sbac.ctx.inter_dir, &AEC_DATA_output.bs);
        predDir = PRED_BI;
    }
    else
    {
#if SEP_CONTEXT
        if (cu_width * cu_height < 64) {
            aec_stage3(1, 0, 0, mod + 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            //enc_sbac_encode_bin(0, &AEC_DATA_input.sbac, AEC_DATA_input.sbac.ctx.inter_dir + 2, &AEC_DATA_output.bs);
        }
        else {
#endif
            aec_stage3(1, 0, 0, mod, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            //enc_sbac_encode_bin(0, &AEC_DATA_input.sbac, AEC_DATA_input.sbac.ctx.inter_dir, &AEC_DATA_output.bs);
        }
        if (REFI_IS_VALID(refi0)) /* PRED_L0 */
        {
            aec_stage3(1, 0, 0, mod + 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            //enc_sbac_encode_bin(0, &AEC_DATA_input.sbac, AEC_DATA_input.sbac.ctx.inter_dir + 1, &AEC_DATA_output.bs);
            predDir = PRED_L0;
        }
        else /* PRED_L1 */
        {
            aec_stage3(1, 0, 1, mod + 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            //enc_sbac_encode_bin(1, &AEC_DATA_input.sbac, AEC_DATA_input.sbac.ctx.inter_dir + 1, &AEC_DATA_output.bs);
            predDir = PRED_L1;
        }
    }
    assert(predDir >= PRED_L0);
    assert(predDir <= PRED_BI);
    COM_TRACE_COUNTER;
    COM_TRACE_STR("pred dir ");
    COM_TRACE_INT(predDir);
    COM_TRACE_STR("\n");
    return;
}
int aec_encode_coef(AEC_inner* AEC_DATA_inner_tmp, s16 coef[N_C][MAX_CU_DIM], int cu_width_log2, int cu_height_log2, u8 pred_mode, u8 tree_status)
{

    int tb_part_size = AEC_DATA_inner_tmp->tb_part;
    //  int pb_part_size = AEC_DATA_inner_tmp->pb_part;
    int tb_avaliable = AEC_DATA_inner_tmp->tb_avaliable;
    int i, j;

    if (tree_status != TREE_C)//TREE_L TREE_LC
        aec_enc_eco_cbf(tb_avaliable, tb_part_size, AEC_DATA_inner_tmp->num_nz, pred_mode, AEC_DATA_inner_tmp->curr_ipm, tree_status);
    else

        if (!(pred_mode == MODE_INTRA && AEC_DATA_inner_tmp->curr_ipm[0][0] == IPD_IPCM && AEC_DATA_inner_tmp->curr_ipm[0][1] == IPD_DM_C))
        {
            aec_enc_eco_cbf_uv(AEC_DATA_inner_tmp->num_nz);
        }


    if (tree_status == TREE_L || tree_status == TREE_LC) {
        i = 0;
        int log2_tb_w, log2_tb_h, tb_size, part_num;
        int plane_width_log2 = cu_width_log2 - (0 != Y_C);
        int plane_height_log2 = cu_height_log2 - (0 != Y_C);
        AEC_DATA_inner_tmp->plane_width_log2 = plane_width_log2;
        part_num = aec_get_part_num((PART_SIZE)tb_part_size);
        aec_get_tb_width_height_log2(plane_width_log2, plane_height_log2, (PART_SIZE)tb_part_size, &log2_tb_w, &log2_tb_h);
        tb_size = 1 << (log2_tb_w + log2_tb_h);

        for (j = 0; j < part_num; j++)
        {
            if (AEC_DATA_inner_tmp->num_nz[j][0])
            {
                aec_enc_eco_xcoef(AEC_DATA_inner_tmp, 0, j, tb_size, log2_tb_w, log2_tb_h, AEC_DATA_inner_tmp->num_nz[j][0], 0, coef);
            }
        }
    }

    if (tree_status == TREE_C || tree_status == TREE_LC) {
        i = 1;
        int tb_size;
        int plane_width_log2 = cu_width_log2 - (1 != Y_C);
        int plane_height_log2 = cu_height_log2 - (1 != Y_C);
        AEC_DATA_inner_tmp->plane_width_log2 = plane_width_log2;
        tb_size = 1 << (plane_width_log2 + plane_height_log2);
        if (AEC_DATA_inner_tmp->num_nz[0][1])
        {
            aec_enc_eco_xcoef(AEC_DATA_inner_tmp, 1, 0, tb_size, plane_width_log2, plane_height_log2, AEC_DATA_inner_tmp->num_nz[0][1], 1, coef);
        }
    }


    if (tree_status == TREE_C || tree_status == TREE_LC) {
        i = 2;
        int tb_size;
        int plane_width_log2 = cu_width_log2 - (2 != Y_C);
        int plane_height_log2 = cu_height_log2 - (2 != Y_C);
        AEC_DATA_inner_tmp->plane_width_log2 = plane_width_log2;

        tb_size = 1 << (plane_width_log2 + plane_height_log2);
        if (AEC_DATA_inner_tmp->num_nz[0][2])
        {
            aec_enc_eco_xcoef(AEC_DATA_inner_tmp, 2, 0, tb_size, plane_width_log2, plane_height_log2, AEC_DATA_inner_tmp->num_nz[0][2], 2, coef);
        }
    }

    return COM_OK;
}

void aec_enc_eco_cons_pred_mode_child(u8 cons_pred_mode_child)
{
    u8 flag = cons_pred_mode_child == ONLY_INTRA;
    aec_stage3(1, 0, flag, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

void aec_encode_part_size(int part_size, int cu_w, int cu_h, int pred_mode, u8 sqh_dt_intra_enable_flag)
{
    int allowDT = com_dt_allow(cu_w, cu_h, pred_mode, 64);
    int sym, dir, eq;

    if (!sqh_dt_intra_enable_flag && pred_mode == MODE_INTRA)
        return;
    if (!allowDT)
        return;

    sym = part_size != SIZE_2Nx2N;
    aec_stage3(1, 0, sym, 47 + 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

    if (sym == 1)
    {
        int hori_allow = (allowDT >> 0) & 0x01;
        int vert_allow = (allowDT >> 1) & 0x01;
        dir = part_size == SIZE_2NxhN || part_size == SIZE_2NxnD || part_size == SIZE_2NxnU;
        if (hori_allow && vert_allow)
        {
            aec_stage3(1, 0, dir, 47 + 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
#if AEC_STAGE3_ONE_PORT  
        if (dir)
        {
            //hori
            eq = part_size == SIZE_2NxhN;
            aec_stage3(1, 0, eq, 47 + 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

            if (!eq)
            {
                sym = part_size == SIZE_2NxnD;
                aec_stage3(1, 0, sym, 47 + 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
        }
        else
        {
            //vert
            eq = part_size == SIZE_hNx2N;
            aec_stage3(1, 0, eq, 47 + 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

            if (!eq)
            {
                sym = part_size == SIZE_nRx2N;
                aec_stage3(1, 0, sym, 47 + 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
        }
    }
#else
        if (dir)
        {
            eq = part_size == SIZE_2NxhN;

            if (!eq)
            {
                sym = part_size == SIZE_2NxnD;
                aec_stage3(2, 0, 0, 47 + 2, 0,
                    0, sym, 47 + 3, 0,
                    0, 0, 0, 0,
                    0, 0, 0, 0, OutStream);
            }
            else
            {
                aec_stage3(1, 0, 1, 47 + 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, OutStream);
            }
        }
        else
        {
            //vert
            eq = part_size == SIZE_hNx2N;

            if (!eq)
            {
                sym = part_size == SIZE_nRx2N;
                aec_stage3(2, 0, 0, 47 + 4, 0,
                    0, sym, 47 + 5, 0,
                    0, 0, 0, 0,
                    0, 0, 0, 0, OutStream);
            }
            else
            {
                aec_stage3(1, 0, eq, 47 + 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, OutStream);
            }
        }
}
#endif
}

int aec_encode_pred_mode(AEC_inner* AEC_DATA_inner_tmp, u8 pred_mode)
{
    u8  avail[2] = { 0, 0 };

    int ctx_inc = 0;

    if (AEC_DATA_inner_tmp->y_scu > 0)
        avail[0] = MCU_GET_CODED_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[0]); // up
    if (AEC_DATA_inner_tmp->x_scu > 0)
        avail[1] = MCU_GET_CODED_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[1]); // left
    if (avail[0])
        ctx_inc += MCU_GET_INTRA_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[0]);
    if (avail[1])
        ctx_inc += MCU_GET_INTRA_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[1]);

    if (ctx_inc == 0)
    {
        int sample = (1 << AEC_DATA_inner_tmp->cu_width_log2) * (1 << AEC_DATA_inner_tmp->cu_height_log2);
        ctx_inc = (sample > 256) ? 0 : (sample > 64 ? 3 : 4);
    }

    aec_stage3(1, 0, pred_mode == MODE_INTRA, 41 + ctx_inc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    return COM_OK;
}

int aec_encode_intra_dir_c(u8 ipm, u8 ipm_l, u8 tscpm_enable_flag)
{
    u8 chk_bypass;
    COM_IPRED_CONV_L2C_CHK(ipm_l, chk_bypass);
    aec_stage3(1, 0, !ipm, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    if (ipm)
    {
#if TSCPM
        if (tscpm_enable_flag)
        {
            if (ipm == IPD_TSCPM_C)
            {
#if EIPM
                aec_stage3(1, 0, 1, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
                aec_stage3(1, 0, 1, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#endif // EIPM
                return COM_OK;
            }
            else
            {
#if EIPM
                aec_stage3(1, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
                aec_stage3(1, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#endif // EIPM
            }
        }
#endif
        u8 symbol = (chk_bypass && ipm > ipm_l) ? ipm - 2 : ipm - 1;
        aec_sbac_write_truncate_unary_sym(symbol, 1, IPD_CHROMA_CNT - 1, 100);

    }
    return COM_OK;
}




int aec_encode_intra_dir(u8 ipm, u8 mpm_0, u8 mpm_1)
{
    int ipm_code = (ipm == mpm_0) ? -2 : ((mpm_1 == ipm) ? -1 : ((ipm < mpm_0) ? ipm : ((ipm < mpm_1) ? (ipm - 1) : (ipm - 2))));
    if (ipm_code < 0)
    {
#if AEC_STAGE3_ONE_PORT         
        aec_stage3(1, 0, 1, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aec_stage3(1, 0, ipm_code + 2, 92 + 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
        aec_stage3(2, 0, 1, 92, 0,
            0, ipm_code + 2, 92 + 6, 0,
            0, 0, 0, 0,
            0, 0, 0, 0, OutStream);
#endif
    }
    else
    {
#if AEC_STAGE3_ONE_PORT     
        aec_stage3(1, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aec_stage3(1, 0, (ipm_code & 0x10) >> 4, 92 + 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aec_stage3(1, 0, (ipm_code & 0x08) >> 3, 92 + 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aec_stage3(1, 0, (ipm_code & 0x04) >> 2, 92 + 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aec_stage3(1, 0, (ipm_code & 0x02) >> 1, 92 + 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aec_stage3(1, 0, (ipm_code & 0x01), 92 + 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
        aec_stage3(4, 0, 0, 92, 0,
            0, (ipm_code & 0x10) >> 4, 92 + 1, 0,
            0, (ipm_code & 0x08) >> 3, 92 + 2, 0,
            0, (ipm_code & 0x04) >> 2, 92 + 3, 0, OutStream);
        aec_stage3(2, 0, (ipm_code & 0x02) >> 1, 92 + 4, 0,
            0, (ipm_code & 0x01), 92 + 5, 0,
            0, 0, 0, 0,
            0, 0, 0, 0, OutStream);
#endif
#if EIPM
        aec_stage3(1, 0, (ipm_code & 0x20) >> 5, 92 + 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#endif
    }

    return COM_OK;
}

void aec_encode_skip_flag(AEC_inner* AEC_DATA_inner_tmp, int flag)
{
    u8  avail[2] = { 0, 0 };
    int ctx_inc = 0;

    if (AEC_DATA_inner_tmp->y_scu > 0)
        avail[0] = MCU_GET_CODED_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[0]);// nn
    if (AEC_DATA_inner_tmp->x_scu > 0)
        avail[1] = MCU_GET_CODED_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[1]);
    if (avail[0])
        ctx_inc += MCU_GET_SF(AEC_DATA_inner_tmp->map_scu_tmp1[0]);
    if (avail[1])
        ctx_inc += MCU_GET_SF(AEC_DATA_inner_tmp->map_scu_tmp1[1]);

#if SEP_CONTEXT
    if (AEC_DATA_inner_tmp->cu_width_log2 + AEC_DATA_inner_tmp->cu_height_log2 < 6)
    {
        ctx_inc = 3;
    }
#endif

    aec_stage3(1, 0, flag, 33 + ctx_inc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

void aec_encode_umve_flag(int flag)
{
    aec_stage3(1, 0, flag, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

void aec_encode_umve_idx(int umve_idx)
{
    int idx;
    int base_idx = umve_idx / UMVE_MAX_REFINE_NUM;
    int ref_step = (umve_idx - (base_idx * UMVE_MAX_REFINE_NUM)) / 4;
    int direction = umve_idx - base_idx * UMVE_MAX_REFINE_NUM - ref_step * 4;
    int val0 = 0;
    int val1 = 0;

    if (base_idx == 0)
    {
        aec_stage3(1, 0, 1, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else
    {
        aec_stage3(1, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

    }

    if (ref_step == 0)
    {
        aec_stage3(1, 0, 1, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else
    {
        aec_stage3(1, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        for (idx = 1; idx < 4; idx++)
        {
            {
                aec_stage3(1, 1, ref_step == idx ? 1 : 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            if (ref_step == idx)
            {
                break;
            }
        }
    }

    if (direction == 0)
    {
        val0 = 0;
        val1 = 0;
    }
    else if (direction == 1)
    {
        val0 = 0;
        val1 = 1;
    }
    else if (direction == 2)
    {
        val0 = 1;
        val1 = 0;
    }
    else if (direction == 3)
    {
        val0 = 1;
        val1 = 1;
    }
#if AEC_STAGE3_ONE_PORT
    aec_stage3(1, 0, val0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    aec_stage3(1, 0, val1, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
    aec_stage3(2, 0, val0, 55, 0,
        0, val1, 56, 0,
        0, 0, 0, 0,
        0, 0, 0, 0, OutStream);
#endif
}

void aec_encode_affine_flag(AEC_inner* AEC_DATA_inner_tmp, int flag, u8 sqh_affine_enable_flag)
{
    if (AEC_DATA_inner_tmp->cu_width >= AFF_SIZE && AEC_DATA_inner_tmp->cu_height >= AFF_SIZE && sqh_affine_enable_flag)
    {
        aec_stage3(1, 0, flag, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}

void aec_encode_affine_mrg_idx(s16 affine_mrg_idx)
{
    aec_sbac_write_truncate_unary_sym(affine_mrg_idx, NUM_SBAC_CTX_AFFINE_MRG, AFF_MAX_NUM_MRG, 57);

    //aec_stage3(1, 6, affine_mrg_idx, 57, (NUM_SBAC_CTX_AFFINE_MRG << 16) | (AFF_MAX_NUM_MRG), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

void aec_encode_skip_idx(int skip_idx, int num_hmvp_cands, u8 pic_header_slice_type)
{
    int ctx_idx = 0;
    if (pic_header_slice_type == SLICE_P && skip_idx > 0)
    {
        skip_idx -= 2;
    }

    int val = skip_idx;
    int max_skip_num = (pic_header_slice_type == SLICE_P ? 2 : TRADITIONAL_SKIP_NUM) + num_hmvp_cands;
    while (val-- > 0)
    {
#pragma HLS loop_tripcount max=10			
        ctx_idx = COM_MIN(ctx_idx, NUM_SBAC_CTX_SKIP_IDX - 1);
        aec_stage3(1, 0, 0, 61 + ctx_idx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        ctx_idx++;
    }
    if (skip_idx != max_skip_num - 1)
    {
        ctx_idx = COM_MIN(ctx_idx, NUM_SBAC_CTX_SKIP_IDX - 1);

        aec_stage3(1, 0, 1, 61 + ctx_idx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }

}

void aec_encode_mv_flag_idx(AEC_inner* AEC_DATA_inner_tmp, u8 cu_data_umve_flag, u8 cu_data_umve_idx, u8 cu_data_skip_idx, u8 core_mod_info_curr_affine_flag,
    int num_hmvp_cands, u8 pic_header_slice_type, int sqh_umve_enable_flag, u8 sqh_affine_enable_flag)
{
    if (sqh_umve_enable_flag)
        aec_encode_umve_flag(cu_data_umve_flag);

    if (cu_data_umve_flag)
    {
        aec_encode_umve_idx(cu_data_umve_idx);
    }
    else
    {
        aec_encode_affine_flag(AEC_DATA_inner_tmp, core_mod_info_curr_affine_flag != 0, sqh_affine_enable_flag);
        if (core_mod_info_curr_affine_flag)
        {
            aec_encode_affine_mrg_idx(cu_data_skip_idx);
        }
        else
        {
            aec_encode_skip_idx(cu_data_skip_idx, num_hmvp_cands, pic_header_slice_type);
        }
    }
}

void aec_encode_direct_flag(AEC_inner* AEC_DATA_inner_tmp, int direct_flag)
{
    int ctx_inc = 0;
    if ((AEC_DATA_inner_tmp->cu_width_log2 + AEC_DATA_inner_tmp->cu_height_log2 < 6) || AEC_DATA_inner_tmp->cu_width_log2 > 6 || AEC_DATA_inner_tmp->cu_height_log2 > 6)
    {
        ctx_inc = 1;
    }

    aec_stage3(1, 0, direct_flag, 39 + ctx_inc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

#if EXT_AMVR_HMVP
void aec_encode_extend_amvr_flag(u8 mvp_from_hmvp_flag)
{
    aec_stage3(1, 0, mvp_from_hmvp_flag, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}
#endif

/*already done*/
int aec_encode_mvr_idx(u8 mvr_idx, BOOL is_affine_mode)
{
    if (is_affine_mode)
    {
        aec_sbac_write_truncate_unary_sym(mvr_idx, NUM_AFFINE_MVR_IDX_CTX, MAX_NUM_AFFINE_MVR, 73);
        //aec_stage3(1, 6, mvr_idx, 73, (NUM_AFFINE_MVR_IDX_CTX << 16) | (MAX_NUM_AFFINE_MVR), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else
    {
        aec_sbac_write_truncate_unary_sym(mvr_idx, NUM_MVR_IDX_CTX, MAX_NUM_MVR, 75);
        //aec_stage3(1, 6, mvr_idx, 75, (NUM_MVR_IDX_CTX << 16) | (MAX_NUM_MVR), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }

    return COM_OK;
}

int aec_encode_inter_mvr(AEC_inner* AEC_DATA_inner_tmp, u8 mvr_idx, u8 mvp_from_hmvp_flag, u8 sqh_affine_enable_flag, u8 sqh_amvr_enable_flag, int sqh_emvr_enable_flag)
{
    aec_encode_affine_flag(AEC_DATA_inner_tmp, AEC_DATA_inner_tmp->affine_flag != 0, sqh_affine_enable_flag); /* inter affine_flag */

    if (sqh_amvr_enable_flag)
    {
#if EXT_AMVR_HMVP
        if (sqh_emvr_enable_flag && !AEC_DATA_inner_tmp->affine_flag) // 
        {
            aec_encode_extend_amvr_flag(mvp_from_hmvp_flag);
        }
#endif
        aec_encode_mvr_idx(mvr_idx, AEC_DATA_inner_tmp->affine_flag);
    }
    return 0;
}

int aec_encode_refidx(int num_refp, int refi)
{
    if (num_refp > 1)
    {
        //aec_sbac_write_truncate_unary_sym(refi, 3, num_refp, 83);

        aec_stage3(1, 6, refi, 83, (3 << 16) | num_refp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }

    return COM_OK;
}

int aec_enc_eco_abs_mvd(u32 sym, SBAC_CTX_MODEL model)
{
    int exp_golomb_order = 0;

    if (sym < 3)   // 0, 1, 2
    {
        if (sym == 0)
        {
            aec_stage3(1, 0, 0, model, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        else if (sym == 1)
        {
            aec_stage3(1, 0, 1, model, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3(1, 0, 0, model + 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        else if (sym == 2)
        {
            aec_stage3(1, 0, 1, model, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3(1, 0, 1, model + 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3(1, 0, 0, model + 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
    }
    else
    {
        int offset;

        sym -= 3;
        offset = sym & 1;
        aec_stage3(1, 0, 1, model, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aec_stage3(1, 0, 1, model + 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aec_stage3(1, 0, 1, model + 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aec_stage3(1, 1, offset, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        sym = (sym - offset) >> 1;

        // exp_golomb part
        while ((int)sym >= (1 << exp_golomb_order))
        {
#pragma HLS LOOP_TRIPCOUNT max=32
            sym = sym - (1 << exp_golomb_order);
            exp_golomb_order++;
        }

        aec_sbac_write_unary_sym_ep(exp_golomb_order);
        aec_sbac_encode_bins_ep_msb(sym, exp_golomb_order);

        //aec_stage3(1, 5, sym, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

    }

    return COM_OK;
}

int aec_encode_mvd(s16 mvd[MV_D])
{
    //ENC_SBAC    *sbac;

    int            t0;
    u32            mv;
    //sbac = GET_SBAC_ENC(bs);

    t0 = 0;
    s16 mvd_loc[MV_D];
    mvd_loc[MV_X] = mvd[MV_X];
    mvd_loc[MV_Y] = mvd[MV_Y];
    if (mvd_loc[MV_X] < 0)
    {
        t0 = 1;
        mv = -mvd_loc[MV_X];
    }
    else
    {
        t0 = 0;
        mv = mvd_loc[MV_X];
    }

    //aec_enc_eco_abs_mvd( mv, aec_ctx.mvd[0]);
#if AEC_STAGE3_ONE_PORT	
    aec_enc_eco_abs_mvd(mv, 86);

    if (mv)
    {
        aec_stage3(1, 1, t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
#else
    aec_enc_eco_abs_mvd(mv, t0, 86, OutStream);
#endif
    if (mvd_loc[MV_Y] < 0)
    {
        t0 = 1;
        mv = -mvd_loc[MV_Y];
    }
    else
    {
        t0 = 0;
        mv = mvd_loc[MV_Y];
    }
#if AEC_STAGE3_ONE_PORT	
    //aec_enc_eco_abs_mvd( mv, aec_ctx.mvd[1]);
    aec_enc_eco_abs_mvd(mv, 89);

    if (mv)
    {
        aec_stage3(1, 1, t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
#else
    aec_enc_eco_abs_mvd(mv, t0, 89, OutStream);
#endif
    return COM_OK;
}

void aec_enc_eco_unit_xu(AEC_inner* AEC_DATA_inner_tmp, int cup, u8 pred_mode, int cu_width, int cu_height, u8 affine_flag, int slice_type, int refi0, int refi1,
    u8 log2_culine, U3 rpm_num_refp[REFP_NUM], s16 cu_data_mvd[MAX_CU_CNT_IN_LCU][REFP_NUM][MV_D])
{
    if (pred_mode != MODE_DIR)
    {
        if (slice_type == SLICE_B)
        {
            encode_inter_dir(refi0, refi1, cu_width, cu_height);
        }
        if (affine_flag) // affine inter mode
        {
            int vertex;
            int vertex_num = affine_flag + 1;
            int aff_scup[VER_NUM];
            aff_scup[0] = cup;
            aff_scup[1] = cup + ((cu_width >> MIN_CU_LOG2) - 1);
            aff_scup[2] = cup + (((cu_height >> MIN_CU_LOG2) - 1) << log2_culine);
            if (IS_INTER_SLICE(slice_type) && REFI_IS_VALID(refi0))
            {
                aec_encode_refidx(rpm_num_refp[REFP_0], refi0);
                for (vertex = 0; vertex < vertex_num; vertex++)
                {
#if BD_AFFINE_AMVR
                    s16 mvd_tmp[MV_D];
                    u8 amvr_shift = Tab_Affine_AMVR(AEC_DATA_inner_tmp->mvr_idx);
                    mvd_tmp[MV_X] = cu_data_mvd[aff_scup[vertex]][REFP_0][MV_X] >> amvr_shift;
                    mvd_tmp[MV_Y] = cu_data_mvd[aff_scup[vertex]][REFP_0][MV_Y] >> amvr_shift;
                    aec_encode_mvd(mvd_tmp);
#endif
                }
            }
            if (slice_type == SLICE_B && REFI_IS_VALID(refi1))
            {
                aec_encode_refidx(rpm_num_refp[REFP_1], refi1);
                for (vertex = 0; vertex < vertex_num; vertex++)
                {
#if BD_AFFINE_AMVR
                    s16 mvd_tmp[MV_D];
                    u8 amvr_Shift = Tab_Affine_AMVR(AEC_DATA_inner_tmp->mvr_idx);
                    mvd_tmp[MV_X] = cu_data_mvd[aff_scup[vertex]][REFP_1][MV_X] >> amvr_Shift;
                    mvd_tmp[MV_Y] = cu_data_mvd[aff_scup[vertex]][REFP_1][MV_Y] >> amvr_Shift;
                    aec_encode_mvd(mvd_tmp);
#else
                    encode_mvd(bs, cu_data->mvd[aff_scup[vertex]][REFP_1]);
#endif
                }
            }
        }
        else
        {

            if (IS_INTER_SLICE(slice_type) && REFI_IS_VALID(refi0))
            {
                s16 mvd_tmp[MV_D];
                mvd_tmp[MV_Y] = cu_data_mvd[cup][REFP_0][MV_Y] >> AEC_DATA_inner_tmp->mvr_idx;
                mvd_tmp[MV_X] = cu_data_mvd[cup][REFP_0][MV_X] >> AEC_DATA_inner_tmp->mvr_idx;
                aec_encode_refidx(rpm_num_refp[REFP_0], refi0);
                aec_encode_mvd(mvd_tmp);
            }
        }
    }
}

int aec_enc_eco_unit(AEC_inner* AEC_DATA_inner_tmp, int type, int x, int y, int cup, int cu_width, int cu_height,
    u8 pic_header_slice_type, s16 coef[N_C][MAX_CU_DIM],
    u8 log2_culine, u8 sqh_dt_intra_enable_flag,
    int info_pic_width_in_scu, int info_max_cuwh, u8 cu_data_pred_mode[CU_SIZE], u8 sqh_position_based_transform_enable_flag,
    s8  cu_data_ipm[2][CU_SIZE], u8 cu_data_mpm[2][CU_SIZE], int cu_data_num_nz_coef[N_C][CU_SIZE], u8 sqh_tscpm_enable_flag,
    int  sqh_ipf_enable_flag, int num_hmvp_cands, int sqh_umve_enable_flag, int sqh_affine_enable_flag, u8 sqh_amvr_enable_flag, int sqh_emvr_enable_flag, U3 rpm_num_refp[REFP_NUM], s16 cu_data_mvd[MAX_CU_CNT_IN_LCU][REFP_NUM][MV_D])
{
    int j;

    //  int cu_cbf_flag = 0;
    u8 luma_pred_mode;
    int scu_stride;
    int x_scu_in_LCU;
    int y_scu_in_LCU;
    int cu_w_scu;
    int cu_h_scu;
    int luma_cup = 0;


    AEC_DATA_inner_tmp->cu_width = cu_width;
    AEC_DATA_inner_tmp->cu_height = cu_height;
    AEC_DATA_inner_tmp->cu_width_log2 = CONV_LOG2(cu_width);
    AEC_DATA_inner_tmp->cu_height_log2 = CONV_LOG2(cu_height);
    AEC_DATA_inner_tmp->x_scu = PEL2SCU(x);
    AEC_DATA_inner_tmp->y_scu = PEL2SCU(y);
    AEC_DATA_inner_tmp->scup = (AEC_DATA_inner_tmp->y_scu * info_pic_width_in_scu) + AEC_DATA_inner_tmp->x_scu;
    AEC_DATA_inner_tmp->skip_flag = 0;
#if TB_SPLIT_EXT    



    if (type == 1) {
        scu_stride = PEL2SCU(info_max_cuwh);
        x_scu_in_LCU = PEL2SCU(x % info_max_cuwh);
        y_scu_in_LCU = PEL2SCU(y % info_max_cuwh);
        cu_w_scu = PEL2SCU(cu_width);
        cu_h_scu = PEL2SCU(cu_height);
        luma_cup = (y_scu_in_LCU + (cu_h_scu - 1)) * scu_stride + (x_scu_in_LCU + (cu_w_scu - 1));
        luma_pred_mode = cu_data_pred_mode[luma_cup];
    }
    else {
        luma_pred_mode = cu_data_pred_mode[cup];
    }
    AEC_DATA_inner_tmp->tb_avaliable = aec_is_tb_avaliable(AEC_DATA_inner_tmp->cu_width_log2, AEC_DATA_inner_tmp->cu_height_log2, (PART_SIZE)AEC_DATA_inner_tmp->pb_part, luma_pred_mode, sqh_position_based_transform_enable_flag);

    get_part_info(info_max_cuwh >> 2, x % info_max_cuwh, y % info_max_cuwh, cu_width, cu_height, AEC_DATA_inner_tmp->pb_part, &AEC_DATA_inner_tmp->pb_info);
#endif

    u8 mpm[2][4];

    mpm[0][0] = 0;
    mpm[0][1] = 0;
    mpm[0][2] = 0;
    mpm[0][3] = 0;
    mpm[1][0] = 0;
    mpm[1][1] = 0;
    mpm[1][2] = 0;
    mpm[1][3] = 0;

    if (luma_pred_mode == MODE_INTRA)
    {
        if (type == 0)
        {
            int pb_scup[4];
            pb_scup[0] = AEC_DATA_inner_tmp->pb_info.sub_scup[0];
            pb_scup[1] = AEC_DATA_inner_tmp->pb_info.sub_scup[1];
            pb_scup[2] = AEC_DATA_inner_tmp->pb_info.sub_scup[2];
            pb_scup[3] = AEC_DATA_inner_tmp->pb_info.sub_scup[3];

            AEC_DATA_inner_tmp->ipm[0][0] = cu_data_ipm[0][pb_scup[0]];
            AEC_DATA_inner_tmp->ipm[1][0] = cu_data_ipm[0][pb_scup[1]];
            AEC_DATA_inner_tmp->ipm[2][0] = cu_data_ipm[0][pb_scup[2]];
            AEC_DATA_inner_tmp->ipm[3][0] = cu_data_ipm[0][pb_scup[3]];

            mpm[0][0] = cu_data_mpm[0][pb_scup[0]];
            mpm[1][0] = cu_data_mpm[1][pb_scup[0]];

            mpm[0][1] = cu_data_mpm[0][pb_scup[1]];
            mpm[1][1] = cu_data_mpm[1][pb_scup[1]];

            mpm[0][2] = cu_data_mpm[0][pb_scup[2]];
            mpm[1][2] = cu_data_mpm[1][pb_scup[2]];

            mpm[0][3] = cu_data_mpm[0][pb_scup[3]];
            mpm[1][3] = cu_data_mpm[1][pb_scup[3]];
        }

        if (type == 0)
        {
            AEC_DATA_inner_tmp->curr_ipm[0][0] = cu_data_ipm[0][cup];
            AEC_DATA_inner_tmp->curr_ipm[0][1] = IPD_INVALID;
            if (AEC_DATA_inner_tmp->tree_status != TREE_L)
            {
                AEC_DATA_inner_tmp->curr_ipm[0][1] = cu_data_ipm[1][cup];
            }
        }
        else
        {
            if (luma_pred_mode == MODE_INTRA)
            {
                AEC_DATA_inner_tmp->curr_ipm[0][0] = cu_data_ipm[0][luma_cup];
                AEC_DATA_inner_tmp->curr_ipm[0][1] = cu_data_ipm[1][cup];
            }
            else
            {
                AEC_DATA_inner_tmp->curr_ipm[0][0] = IPD_INVALID;
                AEC_DATA_inner_tmp->curr_ipm[0][1] = IPD_INVALID;
                luma_pred_mode = MODE_INTER;
            }
        }
    }


#if CHROMA_NOT_SPLIT //wrong for TREE_C
    if (AEC_DATA_inner_tmp->tree_status != TREE_C)
    {
#endif
        if (luma_pred_mode == MODE_SKIP)
        {
            AEC_DATA_inner_tmp->skip_flag = 1;
        }
#if CHROMA_NOT_SPLIT
    }
#endif

    if (!AEC_DATA_inner_tmp->skip_flag)
    {
        int part_num = aec_get_part_num((PART_SIZE)AEC_DATA_inner_tmp->tb_part);
        for (j = 0; j < 4; j++)
        {
            if (j < part_num) {
                int pos_x, pos_y, tbp;
                get_tb_start_pos(cu_width, cu_height, (PART_SIZE)AEC_DATA_inner_tmp->tb_part, j, &pos_x, &pos_y);
                pos_x >>= MIN_CU_LOG2;
                pos_y >>= MIN_CU_LOG2;
                tbp = cup + pos_y * (info_max_cuwh >> MIN_CU_LOG2) + pos_x;
                AEC_DATA_inner_tmp->num_nz[j][0] = cu_data_num_nz_coef[0][tbp];
            }
            else {
                AEC_DATA_inner_tmp->num_nz[j][0] = 0;
            }
        }

        {
            int pos_x, pos_y, tbp;
            get_tb_start_pos(cu_width, cu_height, SIZE_2Nx2N, 0, &pos_x, &pos_y);
            pos_x >>= MIN_CU_LOG2;
            pos_y >>= MIN_CU_LOG2;
            tbp = cup + pos_y * (info_max_cuwh >> MIN_CU_LOG2) + pos_x;
            AEC_DATA_inner_tmp->num_nz[0][1] = cu_data_num_nz_coef[1][tbp];
            AEC_DATA_inner_tmp->num_nz[1][1] = 0;
            AEC_DATA_inner_tmp->num_nz[2][1] = 0;
            AEC_DATA_inner_tmp->num_nz[3][1] = 0;
        }

        {
            int pos_x, pos_y, tbp;
            get_tb_start_pos(cu_width, cu_height, SIZE_2Nx2N, 0, &pos_x, &pos_y);
            pos_x >>= MIN_CU_LOG2;
            pos_y >>= MIN_CU_LOG2;
            tbp = cup + pos_y * (info_max_cuwh >> MIN_CU_LOG2) + pos_x;
            AEC_DATA_inner_tmp->num_nz[0][2] = cu_data_num_nz_coef[2][tbp];
            AEC_DATA_inner_tmp->num_nz[1][2] = 0;
            AEC_DATA_inner_tmp->num_nz[2][2] = 0;
            AEC_DATA_inner_tmp->num_nz[3][2] = 0;
        }
    }


    /* entropy coding a CU */
    if (type == 0) {
        if (pic_header_slice_type != SLICE_I)
        {
            if (AEC_DATA_inner_tmp->cons_pred_mode != ONLY_INTRA)
            {
                //
                aec_encode_skip_flag(AEC_DATA_inner_tmp, AEC_DATA_inner_tmp->skip_flag);
            }

            if (AEC_DATA_inner_tmp->skip_flag)
            {
                aec_encode_mv_flag_idx(AEC_DATA_inner_tmp, AEC_DATA_inner_tmp->umve_flag, AEC_DATA_inner_tmp->umve_idx, AEC_DATA_inner_tmp->skip_idx, AEC_DATA_inner_tmp->affine_flag,
                    num_hmvp_cands, pic_header_slice_type, sqh_umve_enable_flag, sqh_affine_enable_flag);
            }
            else
            {
                if (AEC_DATA_inner_tmp->cons_pred_mode != ONLY_INTRA)
                {
                    //
                    aec_encode_direct_flag(AEC_DATA_inner_tmp, luma_pred_mode == MODE_DIR);
                }

                if (luma_pred_mode == MODE_DIR)
                {
                    aec_encode_mv_flag_idx(AEC_DATA_inner_tmp, AEC_DATA_inner_tmp->umve_flag, AEC_DATA_inner_tmp->umve_idx, AEC_DATA_inner_tmp->skip_idx, AEC_DATA_inner_tmp->affine_flag,
                        num_hmvp_cands, pic_header_slice_type, sqh_umve_enable_flag, sqh_affine_enable_flag);
                }
                else
                {
                    if (AEC_DATA_inner_tmp->cons_pred_mode == NO_MODE_CONS)
                    {
                        //
                        aec_encode_pred_mode(AEC_DATA_inner_tmp, luma_pred_mode);
                    }

                    if (luma_pred_mode != MODE_INTRA)
                    {
                        aec_encode_inter_mvr(AEC_DATA_inner_tmp, AEC_DATA_inner_tmp->mvr_idx, AEC_DATA_inner_tmp->mvp_from_hmvp_flag, sqh_affine_enable_flag, sqh_amvr_enable_flag, sqh_emvr_enable_flag);

                        aec_enc_eco_unit_xu(AEC_DATA_inner_tmp, cup, luma_pred_mode, cu_width, cu_height, AEC_DATA_inner_tmp->affine_flag, pic_header_slice_type, AEC_DATA_inner_tmp->refi[0], AEC_DATA_inner_tmp->refi[1],
                            log2_culine, rpm_num_refp, cu_data_mvd);
                    }
                }
            }
        }
    }

    if (luma_pred_mode == MODE_INTRA)
    {
        if (type == 0)
        {
#if DT_SYNTAX //core    
            aec_encode_part_size(AEC_DATA_inner_tmp->pb_part, cu_width, cu_height, luma_pred_mode, sqh_dt_intra_enable_flag);
#endif

            if (0 < AEC_DATA_inner_tmp->pb_info.num_sub_part)
                aec_encode_intra_dir(AEC_DATA_inner_tmp->ipm[0][0], mpm[0][0], mpm[1][0]);
            if (1 < AEC_DATA_inner_tmp->pb_info.num_sub_part)
                aec_encode_intra_dir(AEC_DATA_inner_tmp->ipm[1][0], mpm[0][1], mpm[1][1]);
            if (2 < AEC_DATA_inner_tmp->pb_info.num_sub_part)
                aec_encode_intra_dir(AEC_DATA_inner_tmp->ipm[2][0], mpm[0][2], mpm[1][2]);
            if (3 < AEC_DATA_inner_tmp->pb_info.num_sub_part)
                aec_encode_intra_dir(AEC_DATA_inner_tmp->ipm[3][0], mpm[0][3], mpm[1][3]);
#if DT_SYNTAX
            //}
#endif
        }



        if (type == 0)
        {
            if (AEC_DATA_inner_tmp->tree_status != TREE_L)
            {
                aec_encode_intra_dir_c(cu_data_ipm[1][cup], cu_data_ipm[0][cup], sqh_tscpm_enable_flag);

            }
        }
        else
        {
            if (luma_pred_mode == MODE_INTRA)
            {
                aec_encode_intra_dir_c(cu_data_ipm[1][cup], cu_data_ipm[0][luma_cup], sqh_tscpm_enable_flag);
            }
            else
            {
                luma_pred_mode = MODE_INTER;
            }
        }

        if (type == 0)
        {
            if (!((AEC_DATA_inner_tmp->tree_status == TREE_C && cu_data_ipm[0][cup] == IPD_IPCM && cu_data_ipm[1][cup] == IPD_DM_C)
                || (AEC_DATA_inner_tmp->tree_status != TREE_C && cu_data_ipm[0][cup] == IPD_IPCM)))
            {

                //if (AEC_DATA_input.sqh_ipf_enable_flag && (cu_width < MAX_CU_SIZE) && (cu_height < MAX_CU_SIZE) && AEC_DATA_inner.pb_part == SIZE_2Nx2N)
                if (sqh_ipf_enable_flag && AEC_DATA_inner_tmp->pb_part == SIZE_2Nx2N)
                {
                    aec_encode_ipf_flag(AEC_DATA_inner_tmp->ipf_flag);
                }

            }
        }
    }

    //int cnt = 0;
    if (!AEC_DATA_inner_tmp->skip_flag)
    {
        aec_encode_coef(AEC_DATA_inner_tmp, coef, AEC_DATA_inner_tmp->cu_width_log2, AEC_DATA_inner_tmp->cu_height_log2, luma_pred_mode, AEC_DATA_inner_tmp->tree_status);
    }

    return COM_OK;
}



int aec_enc_eco_cbf_uv(int num_nz[MAX_NUM_TB][N_C])
{
#if AEC_STAGE3_ONE_PORT     
    aec_stage3(1, 0, !!num_nz[TBUV0][U_C], 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    aec_stage3(1, 0, !!num_nz[TBUV0][V_C], 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
    aec_stage3(2, 0, !!num_nz[TBUV0][U_C], 107, 0,
        0, !!num_nz[TBUV0][V_C], 108, 0,
        0, 0, 0, 0, 0, 0, 0, 0, OutStream);
#endif
    return COM_OK;
}



int aec_enc_eco_cbf(int tb_avaliable, int tb_part_size, int num_nz[MAX_NUM_TB][N_C], u8 pred_mode, s8 ipm[MAX_NUM_PB][2], u8 tree_status)
{
    int ctp_zero_flag = !aec_is_cu_nz(num_nz);

    /* code allcbf */
    if (pred_mode != MODE_INTRA)
    {
        if (!(pred_mode == MODE_DIR))
        {
            if (tree_status == TREE_LC)
            {
                aec_stage3(1, 0, ctp_zero_flag, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

                if (ctp_zero_flag)
                {
                    return COM_OK;
                }
            }
        }

        if (tb_avaliable)
        {
            aec_stage3(1, 0, tb_part_size != SIZE_2Nx2N, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }

        if (tree_status == TREE_LC)
        {
#if AEC_STAGE3_ONE_PORT         
            aec_stage3(1, 0, !!num_nz[TBUV0][U_C], 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3(1, 0, !!num_nz[TBUV0][V_C], 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
            aec_stage3(2, 0, !!num_nz[TBUV0][U_C], 107, 0,
                0, !!num_nz[TBUV0][V_C], 108, 0,
                0, 0, 0, 0, 0, 0, 0, 0, OutStream);
#endif
        }



        if (!(num_nz[TBUV0][U_C] + num_nz[TBUV0][V_C] == 0 && tb_part_size == SIZE_2Nx2N && tree_status == TREE_LC))
        {
            int i, part_num = aec_get_part_num((PART_SIZE)tb_part_size);
            for (i = 0; i < part_num; i++)
            {
                aec_stage3(1, 0, !!num_nz[i][Y_C], 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
        }

    }
    else
    {
        if (!(ipm[PB0][0] == IPD_IPCM))
        {
            int i, part_num = aec_get_part_num((PART_SIZE)tb_part_size);
            for (i = 0; i < part_num; i++)
            {
                aec_stage3(1, 0, !!num_nz[i][Y_C], 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
        }

        if (tree_status == TREE_LC)
        {
            if (!(ipm[PB0][0] == IPD_IPCM && ipm[PB0][1] == IPD_DM_C))
            {
#if AEC_STAGE3_ONE_PORT             
                aec_stage3(1, 0, !!num_nz[TBUV0][U_C], 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3(1, 0, !!num_nz[TBUV0][V_C], 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
                aec_stage3(2, 0, !!num_nz[TBUV0][U_C], 107, 0,
                    0, !!num_nz[TBUV0][V_C], 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, OutStream);
#endif
            }
        }
    }

    return COM_OK;
}


/*already done*/
int aec_enc_eco_split_mode(AEC_inner* AEC_DATA_inner_tmp, s8 split_mode, int cud, int cup, int cu_width, int cu_height, int lcu_s
    , const int parent_split, int qt_depth, int bet_depth, int x, int y,
    int info_pic_width, int info_pic_height, int x_lcu_idx,
    int fetch_output_me_line_map_ptr_min_scu_x, int fetch_output_me_line_map_ptr_min_scu_y,
    FEC_info* FEC_info_local)
{

    //ENC_SBAC *sbac;
    int ret = COM_OK;
    //s8 split_mode;
    int ctx = 0;
    int split_allow[SPLIT_CHECK_NUM];
    int i, non_QT_split_mode_num;
    int boundary = 0, boundary_b = 0, boundary_r = 0;

    ///////////
    int cu_width_log2 = CONV_LOG2(cu_width);
    int cu_height_log2 = CONV_LOG2(cu_height);
    int x_scu = x >> MIN_CU_LOG2;
    int y_scu = y >> MIN_CU_LOG2;
    // int pic_width_in_scu = info_pic_width >> MIN_CU_LOG2;
    u8  avail[2] = { 0, 0 };

#if MAP_SCU_N
    int scun[2];
    //int pic_width_in_scu = AEC_DATA_input.info_pic_width >> MIN_CU_LOG2;
    int scup = x_scu + y_scu * pic_width_in_scu;
    scun[0] = scup - pic_width_in_scu;
    scun[1] = scup - 1;

    AEC_DATA_inner_tmp->map_scu_tmp1[0] = MD2AEC_DATA_ARRAY_map_scu[scun[0]];
    AEC_DATA_inner_tmp->map_scu_tmp1[1] = MD2AEC_DATA_ARRAY_map_scu[scun[1]];

    AEC_DATA_inner_tmp->map_cu_mode_tmp1[0] = MD2AEC_DATA_ARRAY_map_cu_mode[scun[0]];
    AEC_DATA_inner_tmp->map_cu_mode_tmp1[1] = MD2AEC_DATA_ARRAY_map_cu_mode[scun[1]];
#else
    int pic_x_scu = x_scu - fetch_output_me_line_map_ptr_min_scu_x;
    int pic_y_scu = y_scu - fetch_output_me_line_map_ptr_min_scu_y;
    //u32 scu_tmp1[2];
   // u32 mode_tmp1[2];
    /*
    if (y_scu == fetch_output_me_line_map_ptr_min_scu_y) {
        //AEC_DATA_inner_tmp->map_scu_tmp1[0] = fetch_output_me_line_map_ptr_map_scu_above_line[fetch_output_me_line_map_ptr_above_line_idx * 960L + x_scu];
        scu_tmp1[0] = fetch_output_me_line_map_ptr_map_scu_above_line[fetch_output_me_line_map_ptr_above_line_idx * 960L + x_scu];
    }
    else {
        //AEC_DATA_inner_tmp->map_scu_tmp1[0] = fetch_output_me_line_map_ptr_map_scu_inner[fetch_output_me_line_map_ptr_curr_ctu_idx * 256L + pic_x_scu * 16L + (pic_y_scu - 1)];
        scu_tmp1[0] = fetch_output_me_line_map_ptr_map_scu_inner[fetch_output_me_line_map_ptr_curr_ctu_idx * 256L + pic_x_scu * 16L + (pic_y_scu - 1)];
    }

    if (x_scu == fetch_output_me_line_map_ptr_min_scu_x) {
        //AEC_DATA_inner_tmp->map_scu_tmp1[1] = fetch_output_me_line_map_ptr_map_scu_inner[(1 - fetch_output_me_line_map_ptr_curr_ctu_idx) * 256L + 15 * 16L + pic_y_scu];
        scu_tmp1[1] = fetch_output_me_line_map_ptr_map_scu_inner[(1 - fetch_output_me_line_map_ptr_curr_ctu_idx) * 256L + 15 * 16L + pic_y_scu];
    }
    else {
        //AEC_DATA_inner_tmp->map_scu_tmp1[1] = fetch_output_me_line_map_ptr_map_scu_inner[fetch_output_me_line_map_ptr_curr_ctu_idx * 256L + (pic_x_scu - 1) * 16L + pic_y_scu];
        scu_tmp1[1] = fetch_output_me_line_map_ptr_map_scu_inner[fetch_output_me_line_map_ptr_curr_ctu_idx * 256L + (pic_x_scu - 1) * 16L + pic_y_scu];
    }

    if (y_scu == fetch_output_me_line_map_ptr_min_scu_y) {
        //AEC_DATA_inner_tmp->map_cu_mode_tmp1[0] = fetch_output_me_line_map_ptr_map_cu_mode_above_line[fetch_output_me_line_map_ptr_above_line_idx * 960L + x_scu];
        mode_tmp1[0] = fetch_output_me_line_map_ptr_map_cu_mode_above_line[fetch_output_me_line_map_ptr_above_line_idx * 960L + x_scu];
    }
    else {
        //AEC_DATA_inner_tmp->map_cu_mode_tmp1[0] = fetch_output_me_line_map_ptr_map_cu_mode_inner[fetch_output_me_line_map_ptr_curr_ctu_idx * 256L + pic_x_scu * 16L + (pic_y_scu - 1)];
        mode_tmp1[0] = fetch_output_me_line_map_ptr_map_cu_mode_inner[fetch_output_me_line_map_ptr_curr_ctu_idx * 256L + pic_x_scu * 16L + (pic_y_scu - 1)];
    }

    if (x_scu == fetch_output_me_line_map_ptr_min_scu_x) {
        //AEC_DATA_inner_tmp->map_cu_mode_tmp1[1] = fetch_output_me_line_map_ptr_map_cu_mode_inner[(1 - fetch_output_me_line_map_ptr_curr_ctu_idx) * 256L + 15 * 16L + pic_y_scu];
        mode_tmp1[1] = fetch_output_me_line_map_ptr_map_cu_mode_inner[(1 - fetch_output_me_line_map_ptr_curr_ctu_idx) * 256L + 15 * 16L + pic_y_scu];
    }
    else {
        //AEC_DATA_inner_tmp->map_cu_mode_tmp1[1] = fetch_output_me_line_map_ptr_map_cu_mode_inner[fetch_output_me_line_map_ptr_curr_ctu_idx * 256L + (pic_x_scu - 1) * 16L + pic_y_scu];
        mode_tmp1[1] = fetch_output_me_line_map_ptr_map_cu_mode_inner[fetch_output_me_line_map_ptr_curr_ctu_idx * 256L + (pic_x_scu - 1) * 16L + pic_y_scu];
    }
   */
    if (y_scu == fetch_output_me_line_map_ptr_min_scu_y) {
        AEC_DATA_inner_tmp->map_scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_above_line[x_lcu_idx * 16 + pic_x_scu];
        //AEC_DATA_inner_tmp->map_scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_above_line_using[pic_x_scu];
       // scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_above_line_using[pic_x_scu];
    }
    else {
        AEC_DATA_inner_tmp->map_scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_inner[pic_x_scu * 16L + (pic_y_scu - 1)];
        //scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_inner[pic_x_scu * 16L + (pic_y_scu - 1)];
    }
    if (x_scu == fetch_output_me_line_map_ptr_min_scu_x) {
        AEC_DATA_inner_tmp->map_scu_tmp1[1] = FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu];
        //scu_tmp1[1] = FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu];
    }
    else {
        AEC_DATA_inner_tmp->map_scu_tmp1[1] = FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu];
        // scu_tmp1[1] = FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu];
    }

    if (y_scu == fetch_output_me_line_map_ptr_min_scu_y) {
        AEC_DATA_inner_tmp->map_cu_mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_above_line[x_lcu_idx * 16 + pic_x_scu];
        //AEC_DATA_inner_tmp->map_cu_mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_above_line_using[pic_x_scu];
        //mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_above_line_using[pic_x_scu];
    }
    else {
        AEC_DATA_inner_tmp->map_cu_mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_inner[pic_x_scu * 16L + (pic_y_scu - 1)];
        //mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_inner[pic_x_scu * 16L + (pic_y_scu - 1)];
    }

    if (x_scu == fetch_output_me_line_map_ptr_min_scu_x) {
        AEC_DATA_inner_tmp->map_cu_mode_tmp1[1] = FEC_info_local->map_ptr_map_cu_mode_inner_left[pic_y_scu];
        //mode_tmp1[1] = FEC_info_local->map_ptr_map_cu_mode_inner_left[pic_y_scu];
    }
    else {
        AEC_DATA_inner_tmp->map_cu_mode_tmp1[1] = FEC_info_local->map_ptr_map_cu_mode_inner[(pic_x_scu - 1) * 16L + pic_y_scu];
        //mode_tmp1[1] = FEC_info_local->map_ptr_map_cu_mode_inner[(pic_x_scu - 1) * 16L + pic_y_scu];
    }

#endif  

    if (y_scu > 0)
    {
#if PATCH_DEBUG
        //if (y > patch->up_pel)
#endif
        {
            avail[0] = MCU_GET_CODED_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[0]); //up
        }
    }
    if (x_scu > 0)
    {
#if PATCH_DEBUG
        //if (x > patch->left_pel)
#endif
        avail[1] = MCU_GET_CODED_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[1]); //left
    }
    if (avail[0])
        ctx += (1 << MCU_GET_LOGW(AEC_DATA_inner_tmp->map_cu_mode_tmp1[0])) < cu_width;
    if (avail[1])
        ctx += (1 << MCU_GET_LOGH(AEC_DATA_inner_tmp->map_cu_mode_tmp1[1])) < cu_height;
    ////////////////////
    if (cu_width == MIN_CU_SIZE && cu_height == MIN_CU_SIZE)
    {
        return ret;
    }

    boundary = !(x + cu_width <= info_pic_width && y + cu_height <= info_pic_height);
    boundary_b = boundary && (y + cu_height > info_pic_height) && !(x + cu_width > info_pic_width);
    boundary_r = boundary && (x + cu_width > info_pic_width) && !(y + cu_height > info_pic_height);

    aec_com_check_split_mode(split_allow, CONV_LOG2(cu_width), CONV_LOG2(cu_height), boundary, boundary_b, boundary_r, qt_depth, bet_depth);

    non_QT_split_mode_num = 0;
    for (i = 1; i < SPLIT_QUAD; i++)
    {
        non_QT_split_mode_num += split_allow[i];
    }

    if (split_allow[SPLIT_QUAD] && !(non_QT_split_mode_num || split_allow[NO_SPLIT])) //only QT is allowed
    {
        return ret;
    }
    else if (split_allow[SPLIT_QUAD])
    {
        aec_stage3(1, 0, split_mode == SPLIT_QUAD, 11 + ctx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        if (split_mode == SPLIT_QUAD)
        {
            return ret;
        }
    }

    if (non_QT_split_mode_num)
    {
#if NUM_SBAC_CTX_BT_SPLIT_FLAG == 9
        int sample = cu_width * cu_height;
        int ctx_set = (sample > 1024) ? 0 : (sample > 256 ? 1 : 2);
        int ctx_save = ctx;
        ctx += ctx_set * 3;
#endif

        if (split_allow[NO_SPLIT]) {
            aec_stage3(1, 0, split_mode != NO_SPLIT, 15 + ctx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }

#if NUM_SBAC_CTX_BT_SPLIT_FLAG == 9
        ctx = ctx_save;
#endif

        if (split_mode != NO_SPLIT)
        {
            int HBT = split_allow[SPLIT_BI_HOR];
            int VBT = split_allow[SPLIT_BI_VER];
            int EnableBT = HBT || VBT;
#if EQT
            int HEQT = split_allow[SPLIT_EQT_HOR];
            int VEQT = split_allow[SPLIT_EQT_VER];
            int EnableEQT = HEQT || VEQT;
#endif
            u8 ctx_dir = cu_width_log2 == cu_height_log2 ? 0 : (cu_width_log2 > cu_height_log2 ? 1 : 2);

            u8 split_dir = (split_mode == SPLIT_BI_VER) || (split_mode == SPLIT_EQT_VER);
            u8 split_typ = (split_mode == SPLIT_EQT_HOR) || (split_mode == SPLIT_EQT_VER);

#if EQT
            if (EnableEQT && EnableBT)
            {
                aec_stage3(1, 0, split_typ, 24 + ctx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
#endif
            if (split_typ == 0)
            {
                if (HBT && VBT)
                {
                    aec_stage3(1, 0, split_dir, 27 + ctx_dir, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                }
            }
#if EQT
            if (split_typ == 1)
            {
                if (HEQT && VEQT)
                {
                    aec_stage3(1, 0, split_dir, 27 + ctx_dir, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                }
            }
#endif
        }
    }

    return ret;
}

int aec_enc_eco_tree(AEC_inner* AEC_DATA_inner_tmp, int type, int x0, int y0, int cup, int cu_width, int cu_height, int cud, const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    u8 pic_header_slice_type, s16 coef[N_C][MAX_CU_DIM],
    u8 log2_culine, u8 sqh_dt_intra_enable_flag,
    int info_pic_width_in_scu, int info_max_cuwh, u8 cu_data_pred_mode[CU_SIZE], u8 sqh_position_based_transform_enable_flag,
    s8 cu_data_ipm[2][CU_SIZE], u8 cu_data_mpm[2][CU_SIZE], int cu_data_num_nz_coef[N_C][CU_SIZE], u8 sqh_tscpm_enable_flag,
    int  sqh_ipf_enable_flag, int num_hmvp_cands, int sqh_umve_enable_flag, int sqh_affine_enable_flag, u8 sqh_amvr_enable_flag, int sqh_emvr_enable_flag, U3 rpm_num_refp[REFP_NUM], s16 cu_data_mvd[MAX_CU_CNT_IN_LCU][REFP_NUM][MV_D])
{
    int ret;

    {
        ret = aec_enc_eco_unit(AEC_DATA_inner_tmp, type, x0, y0, cup, cu_width, cu_height, pic_header_slice_type, coef,
            log2_culine, sqh_dt_intra_enable_flag,
            info_pic_width_in_scu, info_max_cuwh, cu_data_pred_mode, sqh_position_based_transform_enable_flag,
            cu_data_ipm, cu_data_mpm, cu_data_num_nz_coef, sqh_tscpm_enable_flag, sqh_ipf_enable_flag, num_hmvp_cands, sqh_umve_enable_flag, sqh_affine_enable_flag, sqh_amvr_enable_flag, sqh_emvr_enable_flag, rpm_num_refp, cu_data_mvd);

    }

    return 0;
}

int aec_enc_eco_tree_4(AEC_FW_input* AEC_FW_data_in, int x0, int y0, int cup, int cu_width, int cu_height, int cud
    , const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status, AEC_input* AEC_DATA_input, FEC_info* FEC_info_local)
{
    {
        aec_stage2(AEC_FW_data_in, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
    }

    return 0;
}

int aec_enc_eco_tree_8x4(AEC_FW_input* AEC_FW_data_in, int x0, int y0, int cup, int cu_width, int cu_height, int cud
    , const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local)
{
    int ret;
    s8 split_mode;



#if CHROMA_NOT_SPLIT
    u8 tree_status_child = TREE_LC;
#endif
#if MODE_CONS
    u8 cons_pred_mode_child;
    u8 cons_pred_mode_child_tmp;
#endif

    aec_com_get_split_mode(&split_mode, &cons_pred_mode_child_tmp, cud, cup, cu_width, cu_height, AEC_FW_data_in->max_cuwh, AEC_DATA_input->cu_data_split_mode);
    aec_stage2(AEC_FW_data_in, 2, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, split_mode, 0, AEC_DATA_input, FEC_info_local);

    if (split_mode != NO_SPLIT)
    {
#if CHROMA_NOT_SPLIT
        tree_status_child = (tree_status == TREE_LC && aec_com_tree_split(cu_width, cu_height, (SPLIT_MODE)split_mode)) ? TREE_L : tree_status;
#endif
#if MODE_CONS
        if (cons_pred_mode == NO_MODE_CONS && aec_com_constrain_pred_mode(cu_width, cu_height, (SPLIT_MODE)split_mode, AEC_FW_data_in->slice_type))
        {
            cons_pred_mode_child = cons_pred_mode_child_tmp;
            aec_stage2(AEC_FW_data_in, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, cons_pred_mode_child, 0, AEC_DATA_input, FEC_info_local);
        }
        else
        {
            cons_pred_mode_child = cons_pred_mode;
        }
#endif
        COM_SPLIT_STRUCT split_struct;
        aec_com_split_get_part_structure(split_mode, x0, y0, cu_width, cu_height, cup, cud, AEC_FW_data_in->log2_culine, &split_struct);
        for (int part_num = 0; part_num < split_struct.part_count; ++part_num)
        {
            int cur_part_num = part_num;
            int sub_cuw = split_struct.width[cur_part_num];
            int sub_cuh = split_struct.height[cur_part_num];
            int x_pos = split_struct.x_pos[cur_part_num];
            int y_pos = split_struct.y_pos[cur_part_num];

            if (x_pos < AEC_FW_data_in->pic_width && y_pos < AEC_FW_data_in->pic_height)
            {
                ret = aec_enc_eco_tree_4(AEC_FW_data_in, x_pos, y_pos, split_struct.cup[cur_part_num], sub_cuw, sub_cuh, split_struct.cud
                    , split_mode, INC_QT_DEPTH(qt_depth, split_mode), INC_BET_DEPTH(bet_depth, split_mode), cons_pred_mode_child, tree_status_child, AEC_DATA_input, FEC_info_local);
            }
        }
#if CHROMA_NOT_SPLIT
        if (tree_status_child == TREE_L && tree_status == TREE_LC)
        {
            aec_stage2(AEC_FW_data_in, 1, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
        }
#endif
    }
    else
    {
        aec_stage2(AEC_FW_data_in, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
    }
    return COM_OK;
}

int aec_enc_eco_tree_8(AEC_FW_input* AEC_FW_data_in, int x0, int y0, int cup, int cu_width, int cu_height, int cud
    , const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local)
{
    int ret;
    s8 split_mode;

#if CHROMA_NOT_SPLIT
    u8 tree_status_child = TREE_LC;
#endif
#if MODE_CONS
    u8 cons_pred_mode_child;
    u8 cons_pred_mode_child_tmp;
#endif

    aec_com_get_split_mode(&split_mode, &cons_pred_mode_child_tmp, cud, cup, cu_width, cu_height, AEC_FW_data_in->max_cuwh, AEC_DATA_input->cu_data_split_mode);
    aec_stage2(AEC_FW_data_in, 2, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, split_mode, 0, AEC_DATA_input, FEC_info_local);
    if (split_mode != NO_SPLIT)
    {
#if CHROMA_NOT_SPLIT
        tree_status_child = (tree_status == TREE_LC && aec_com_tree_split(cu_width, cu_height, (SPLIT_MODE)split_mode)) ? TREE_L : tree_status;
#endif
#if MODE_CONS
        if (cons_pred_mode == NO_MODE_CONS && aec_com_constrain_pred_mode(cu_width, cu_height, (SPLIT_MODE)split_mode, AEC_FW_data_in->slice_type))
        {
            cons_pred_mode_child = cons_pred_mode_child_tmp;
            aec_stage2(AEC_FW_data_in, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, cons_pred_mode_child, 0, AEC_DATA_input, FEC_info_local);
        }
        else
        {
            cons_pred_mode_child = cons_pred_mode;
        }
#endif
        COM_SPLIT_STRUCT split_struct;
        aec_com_split_get_part_structure(split_mode, x0, y0, cu_width, cu_height, cup, cud, AEC_FW_data_in->log2_culine, &split_struct);
        for (int part_num = 0; part_num < split_struct.part_count; ++part_num)
        {
            int cur_part_num = part_num;
            int sub_cuw = split_struct.width[cur_part_num];
            int sub_cuh = split_struct.height[cur_part_num];
            int x_pos = split_struct.x_pos[cur_part_num];
            int y_pos = split_struct.y_pos[cur_part_num];

            if (x_pos < AEC_FW_data_in->pic_width && y_pos < AEC_FW_data_in->pic_height)
            {
                ret = aec_enc_eco_tree_8x4(AEC_FW_data_in, x_pos, y_pos, split_struct.cup[cur_part_num], sub_cuw, sub_cuh, split_struct.cud
                    , split_mode, INC_QT_DEPTH(qt_depth, split_mode), INC_BET_DEPTH(bet_depth, split_mode), cons_pred_mode_child, tree_status_child,
                    AEC_DATA_input, FEC_info_local);
            }
        }
#if CHROMA_NOT_SPLIT
        if (tree_status_child == TREE_L && tree_status == TREE_LC)
        {
            aec_stage2(AEC_FW_data_in, 1, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
        }
#endif
    }
    else
    {
        aec_stage2(AEC_FW_data_in, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
    }
    return COM_OK;
}

int aec_enc_eco_tree_16x8(AEC_FW_input* AEC_FW_data_in, int x0, int y0, int cup, int cu_width, int cu_height, int cud
    , const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local)
{
    int ret;
    s8 split_mode;

#if CHROMA_NOT_SPLIT
    u8 tree_status_child = TREE_LC;
#endif
#if MODE_CONS
    u8 cons_pred_mode_child;
    u8 cons_pred_mode_child_tmp;
#endif
    aec_com_get_split_mode(&split_mode, &cons_pred_mode_child_tmp, cud, cup, cu_width, cu_height, AEC_FW_data_in->max_cuwh, AEC_DATA_input->cu_data_split_mode);
    aec_stage2(AEC_FW_data_in, 2, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, split_mode, 0, AEC_DATA_input, FEC_info_local);

    if (split_mode != NO_SPLIT)
    {
#if CHROMA_NOT_SPLIT
        tree_status_child = (tree_status == TREE_LC && aec_com_tree_split(cu_width, cu_height, (SPLIT_MODE)split_mode)) ? TREE_L : tree_status;
#endif
#if MODE_CONS
        if (cons_pred_mode == NO_MODE_CONS && aec_com_constrain_pred_mode(cu_width, cu_height, (SPLIT_MODE)split_mode, AEC_FW_data_in->slice_type))
        {
            cons_pred_mode_child = cons_pred_mode_child_tmp;
            aec_stage2(AEC_FW_data_in, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, cons_pred_mode_child, 0, AEC_DATA_input, FEC_info_local);
        }
        else
        {
            cons_pred_mode_child = cons_pred_mode;
        }
#endif
        COM_SPLIT_STRUCT split_struct;
        aec_com_split_get_part_structure(split_mode, x0, y0, cu_width, cu_height, cup, cud, AEC_FW_data_in->log2_culine, &split_struct);
        for (int part_num = 0; part_num < split_struct.part_count; ++part_num)
        {
            int cur_part_num = part_num;
            int sub_cuw = split_struct.width[cur_part_num];
            int sub_cuh = split_struct.height[cur_part_num];
            int x_pos = split_struct.x_pos[cur_part_num];
            int y_pos = split_struct.y_pos[cur_part_num];

            if (x_pos < AEC_FW_data_in->pic_width && y_pos < AEC_FW_data_in->pic_height)
            {
                ret = aec_enc_eco_tree_8(AEC_FW_data_in, x_pos, y_pos, split_struct.cup[cur_part_num], sub_cuw, sub_cuh, split_struct.cud
                    , split_mode, INC_QT_DEPTH(qt_depth, split_mode), INC_BET_DEPTH(bet_depth, split_mode), cons_pred_mode_child, tree_status_child,
                    AEC_DATA_input, FEC_info_local);
            }
        }
#if CHROMA_NOT_SPLIT
        if (tree_status_child == TREE_L && tree_status == TREE_LC)
        {
            aec_stage2(AEC_FW_data_in, 1, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
        }
#endif
    }
    else
    {
        aec_stage2(AEC_FW_data_in, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
    }
    return COM_OK;

}

int aec_enc_eco_tree_16(AEC_FW_input* AEC_FW_data_in, int x0, int y0, int cup, int cu_width, int cu_height, int cud
    , const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local)
{
    int ret;
    s8 split_mode;
#if CHROMA_NOT_SPLIT
    u8 tree_status_child = TREE_LC;
#endif
#if MODE_CONS
    u8 cons_pred_mode_child;
    u8 cons_pred_mode_child_tmp;
#endif

    aec_com_get_split_mode(&split_mode, &cons_pred_mode_child_tmp, cud, cup, cu_width, cu_height, AEC_FW_data_in->max_cuwh, AEC_DATA_input->cu_data_split_mode);
    aec_stage2(AEC_FW_data_in, 2, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, split_mode, 0, AEC_DATA_input, FEC_info_local);
    if (split_mode != NO_SPLIT)
    {
#if CHROMA_NOT_SPLIT
        tree_status_child = (tree_status == TREE_LC && aec_com_tree_split(cu_width, cu_height, (SPLIT_MODE)split_mode)) ? TREE_L : tree_status;
#endif
#if MODE_CONS
        if (cons_pred_mode == NO_MODE_CONS && aec_com_constrain_pred_mode(cu_width, cu_height, (SPLIT_MODE)split_mode, AEC_FW_data_in->slice_type))
        {
            cons_pred_mode_child = cons_pred_mode_child_tmp;
            aec_stage2(AEC_FW_data_in, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, cons_pred_mode_child, 0, AEC_DATA_input, FEC_info_local);
        }
        else
        {
            cons_pred_mode_child = cons_pred_mode;
        }
#endif
        COM_SPLIT_STRUCT split_struct;
        aec_com_split_get_part_structure(split_mode, x0, y0, cu_width, cu_height, cup, cud, AEC_FW_data_in->log2_culine, &split_struct);
        for (int part_num = 0; part_num < split_struct.part_count; ++part_num)
        {
            int cur_part_num = part_num;
            int sub_cuw = split_struct.width[cur_part_num];
            int sub_cuh = split_struct.height[cur_part_num];
            int x_pos = split_struct.x_pos[cur_part_num];
            int y_pos = split_struct.y_pos[cur_part_num];

            if (x_pos < AEC_FW_data_in->pic_width && y_pos < AEC_FW_data_in->pic_height)
            {
                ret = aec_enc_eco_tree_16x8(AEC_FW_data_in, x_pos, y_pos, split_struct.cup[cur_part_num], sub_cuw, sub_cuh, split_struct.cud
                    , split_mode, INC_QT_DEPTH(qt_depth, split_mode), INC_BET_DEPTH(bet_depth, split_mode), cons_pred_mode_child, tree_status_child,
                    AEC_DATA_input, FEC_info_local);
            }
        }
#if CHROMA_NOT_SPLIT
        if (tree_status_child == TREE_L && tree_status == TREE_LC)
        {
            aec_stage2(AEC_FW_data_in, 1, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
        }
#endif
    }
    else
    {
        aec_stage2(AEC_FW_data_in, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
    }
    return COM_OK;

}

int aec_enc_eco_tree_32x16(AEC_FW_input* AEC_FW_data_in, int x0, int y0, int cup, int cu_width, int cu_height, int cud
    , const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local)
{
    int ret;
    s8 split_mode;



#if CHROMA_NOT_SPLIT
    u8 tree_status_child = TREE_LC;
#endif
#if MODE_CONS
    u8 cons_pred_mode_child;
    u8 cons_pred_mode_child_tmp;
#endif

    aec_com_get_split_mode(&split_mode, &cons_pred_mode_child_tmp, cud, cup, cu_width, cu_height, AEC_FW_data_in->max_cuwh, AEC_DATA_input->cu_data_split_mode);
    aec_stage2(AEC_FW_data_in, 2, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, split_mode, 0, AEC_DATA_input, FEC_info_local);
    if (split_mode != NO_SPLIT)
    {
#if CHROMA_NOT_SPLIT
        tree_status_child = (tree_status == TREE_LC && aec_com_tree_split(cu_width, cu_height, (SPLIT_MODE)split_mode)) ? TREE_L : tree_status;
#endif
#if MODE_CONS
        if (cons_pred_mode == NO_MODE_CONS && aec_com_constrain_pred_mode(cu_width, cu_height, (SPLIT_MODE)split_mode, AEC_FW_data_in->slice_type))
        {
            cons_pred_mode_child = cons_pred_mode_child_tmp;
            aec_stage2(AEC_FW_data_in, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, cons_pred_mode_child, 0, AEC_DATA_input, FEC_info_local);
        }
        else
        {
            cons_pred_mode_child = cons_pred_mode;
        }
#endif
        COM_SPLIT_STRUCT split_struct;
        aec_com_split_get_part_structure(split_mode, x0, y0, cu_width, cu_height, cup, cud, AEC_FW_data_in->log2_culine, &split_struct);
        for (int part_num = 0; part_num < split_struct.part_count; ++part_num)
        {
            int cur_part_num = part_num;
            int sub_cuw = split_struct.width[cur_part_num];
            int sub_cuh = split_struct.height[cur_part_num];
            int x_pos = split_struct.x_pos[cur_part_num];
            int y_pos = split_struct.y_pos[cur_part_num];

            if (x_pos < AEC_FW_data_in->pic_width && y_pos < AEC_FW_data_in->pic_height)
            {
                ret = aec_enc_eco_tree_16(AEC_FW_data_in, x_pos, y_pos, split_struct.cup[cur_part_num], sub_cuw, sub_cuh, split_struct.cud
                    , split_mode, INC_QT_DEPTH(qt_depth, split_mode), INC_BET_DEPTH(bet_depth, split_mode), cons_pred_mode_child, tree_status_child,
                    AEC_DATA_input, FEC_info_local);
            }
        }
#if CHROMA_NOT_SPLIT
        if (tree_status_child == TREE_L && tree_status == TREE_LC)
        {
            aec_stage2(AEC_FW_data_in, 1, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
        }
#endif
    }
    else
    {
        aec_stage2(AEC_FW_data_in, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
    }
    return COM_OK;

}


int aec_enc_eco_tree_32(AEC_FW_input* AEC_FW_data_in, int x0, int y0, int cup, int cu_width, int cu_height, int cud
    , const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local)
{
    int ret;
    s8 split_mode;

#if CHROMA_NOT_SPLIT
    u8 tree_status_child = TREE_LC;
#endif
#if MODE_CONS
    u8 cons_pred_mode_child;
    u8 cons_pred_mode_child_tmp;
#endif

    aec_com_get_split_mode(&split_mode, &cons_pred_mode_child_tmp, cud, cup, cu_width, cu_height, AEC_FW_data_in->max_cuwh, AEC_DATA_input->cu_data_split_mode);
    aec_stage2(AEC_FW_data_in, 2, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, split_mode, 0, AEC_DATA_input, FEC_info_local);
    if (split_mode != NO_SPLIT)
    {
#if CHROMA_NOT_SPLIT
        tree_status_child = (tree_status == TREE_LC && aec_com_tree_split(cu_width, cu_height, (SPLIT_MODE)split_mode)) ? TREE_L : tree_status;
#endif
#if MODE_CONS
        if (cons_pred_mode == NO_MODE_CONS && aec_com_constrain_pred_mode(cu_width, cu_height, (SPLIT_MODE)split_mode, AEC_FW_data_in->slice_type))
        {
            cons_pred_mode_child = cons_pred_mode_child_tmp;
            aec_stage2(AEC_FW_data_in, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, cons_pred_mode_child, 0, AEC_DATA_input, FEC_info_local);
        }
        else
        {
            cons_pred_mode_child = cons_pred_mode;
        }
#endif
        COM_SPLIT_STRUCT split_struct;
        aec_com_split_get_part_structure(split_mode, x0, y0, cu_width, cu_height, cup, cud, AEC_FW_data_in->log2_culine, &split_struct);
        for (int part_num = 0; part_num < split_struct.part_count; ++part_num)
        {
            int cur_part_num = part_num;
            int sub_cuw = split_struct.width[cur_part_num];
            int sub_cuh = split_struct.height[cur_part_num];
            int x_pos = split_struct.x_pos[cur_part_num];
            int y_pos = split_struct.y_pos[cur_part_num];

            if (x_pos < AEC_FW_data_in->pic_width && y_pos < AEC_FW_data_in->pic_height)
            {
                ret = aec_enc_eco_tree_32x16(AEC_FW_data_in, x_pos, y_pos, split_struct.cup[cur_part_num], sub_cuw, sub_cuh, split_struct.cud
                    , split_mode, INC_QT_DEPTH(qt_depth, split_mode), INC_BET_DEPTH(bet_depth, split_mode), cons_pred_mode_child, tree_status_child,
                    AEC_DATA_input, FEC_info_local);
            }
        }

#if CHROMA_NOT_SPLIT
        if (tree_status_child == TREE_L && tree_status == TREE_LC)
        {
            aec_stage2(AEC_FW_data_in, 1, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
        }
#endif
    }
    else
    {
        aec_stage2(AEC_FW_data_in, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
    }
    return COM_OK;

}


int aec_enc_eco_tree_64x32(AEC_FW_input* AEC_FW_data_in, int x0, int y0, int cup, int cu_width, int cu_height, int cud
    , const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local)
{
    int ret;
    s8 split_mode;
#if CHROMA_NOT_SPLIT
    u8 tree_status_child = TREE_LC;
#endif
#if MODE_CONS
    u8 cons_pred_mode_child;
    u8 cons_pred_mode_child_tmp;
#endif
    aec_com_get_split_mode(&split_mode, &cons_pred_mode_child_tmp, cud, cup, cu_width, cu_height, AEC_FW_data_in->max_cuwh, AEC_DATA_input->cu_data_split_mode);
    aec_stage2(AEC_FW_data_in, 2, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, split_mode, 0, AEC_DATA_input, FEC_info_local);
    if (split_mode != NO_SPLIT)
    {
#if CHROMA_NOT_SPLIT
        tree_status_child = (tree_status == TREE_LC && aec_com_tree_split(cu_width, cu_height, (SPLIT_MODE)split_mode)) ? TREE_L : tree_status;
#endif
#if MODE_CONS
        if (cons_pred_mode == NO_MODE_CONS && aec_com_constrain_pred_mode(cu_width, cu_height, (SPLIT_MODE)split_mode, AEC_FW_data_in->slice_type))
        {
            cons_pred_mode_child = cons_pred_mode_child_tmp;
            aec_stage2(AEC_FW_data_in, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, cons_pred_mode_child, 0, AEC_DATA_input, FEC_info_local);
        }
        else
        {
            cons_pred_mode_child = cons_pred_mode;
        }
#endif
        COM_SPLIT_STRUCT split_struct;
        aec_com_split_get_part_structure(split_mode, x0, y0, cu_width, cu_height, cup, cud, AEC_FW_data_in->log2_culine, &split_struct);
        for (int part_num = 0; part_num < split_struct.part_count; ++part_num)
        {
            int cur_part_num = part_num;
            int sub_cuw = split_struct.width[cur_part_num];
            int sub_cuh = split_struct.height[cur_part_num];
            int x_pos = split_struct.x_pos[cur_part_num];
            int y_pos = split_struct.y_pos[cur_part_num];

            if (x_pos < AEC_FW_data_in->pic_width && y_pos < AEC_FW_data_in->pic_height)
            {
                ret = aec_enc_eco_tree_32(AEC_FW_data_in, x_pos, y_pos, split_struct.cup[cur_part_num], sub_cuw, sub_cuh, split_struct.cud
                    , split_mode, INC_QT_DEPTH(qt_depth, split_mode), INC_BET_DEPTH(bet_depth, split_mode), cons_pred_mode_child, tree_status_child,
                    AEC_DATA_input, FEC_info_local);
            }
        }
#if CHROMA_NOT_SPLIT
        if (tree_status_child == TREE_L && tree_status == TREE_LC)
        {
            aec_stage2(AEC_FW_data_in, 1, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
        }
#endif
    }
    else
    {
        aec_stage2(AEC_FW_data_in, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
    }
    return COM_OK;

}
void aec_enc_sbac_encode_bin_trm(u32 bin, ENC_SBAC* sbac, COM_BSW* bs)
{
#if AEC_STAGE3_DEBUG
#if AEC_STAGE3_CTX_DEBUG
    //fprintf(fp_ctx, "method: 3, symbol: %d, model2_idx: 000, model1_idx: 000\n", bin);
    fprintf(fp_ctx, "3 %d 000 000\n", bin);
#endif
#if AEC_STAGE3_BINA_DEBUG
    fprintf(fp_bina, "encode bin:%d, range_in=%d, low_in=%d, model_in1=0, model_in2=0, range_out=0, low_out=0, method=3\n", bin, sbac->range, sbac->code & 0x1FF);
#endif
#endif

    //static int bin_cnt = 0; ++bin_cnt;
    //printf("trm %d %d %d\n", bin_cnt, bin, sbac->range);

    int s_flag = (sbac->range == QUAR_HALF_PROB);
    u32 rMPS = (sbac->range - 1) | 0x100;
    (sbac->range) -= 2;
    if (bin)
    {
        sbac->range = QUAR_HALF_PROB;
        sbac->code = ((sbac->code << s_flag) + rMPS) << 8;
        sbac->left_bits -= (8 + s_flag);
        if (sbac->left_bits < 12)
        {
            aec_sbac_carry_propagate(sbac, bs);
        }
    }
    else
    {
        if (s_flag)
        {
            sbac->code <<= 1;
            if (--sbac->left_bits < 12)
            {
                aec_sbac_carry_propagate(sbac, bs);
            }
        }
        sbac->range = rMPS;
    }
}

int aec_enc_eco_tree_64(AEC_FW_input* AEC_FW_data_in, int x0, int y0, int cup, int cu_width, int cu_height, int cud,
    const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local)
{
    /*
    cud = 0
    cup = 0
    parent_split = 0
    qt_depth = 0
    bet_depth = 0
    cons_pred_mode = 0
    */
    int ret;
    s8 split_mode;
#if AEC_STAGE1_2_DEBUG  
    stage12sim(x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, *AEC_DATA_input);
    //stage1sim(x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status);
#endif      
    if (AEC_DATA_input->lcu_idx == 0) {
        aec_stage2(AEC_FW_data_in, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, AEC_DATA_input, 0);
    }

    if (AEC_FW_data_in->sample_adaptive_offset_enable_flag)
    {
        aec_stage2(AEC_FW_data_in, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, AEC_DATA_input, 0);
    }

#if CHROMA_NOT_SPLIT
    //TREE_LC = 0
    u8 tree_status_child = TREE_LC;
#endif
#if MODE_CONS
    u8 cons_pred_mode_child;
    u8 cons_pred_mode_child_tmp;
#endif

    aec_com_get_split_mode(&split_mode, &cons_pred_mode_child_tmp, cud, cup, cu_width, cu_height, AEC_FW_data_in->max_cuwh, AEC_DATA_input->cu_data_split_mode);
    aec_stage2(AEC_FW_data_in, 2, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, split_mode, 0, AEC_DATA_input, FEC_info_local);

    if (split_mode != NO_SPLIT)//
    {

        tree_status_child = (tree_status == TREE_LC && aec_com_tree_split(cu_width, cu_height, (SPLIT_MODE)split_mode)) ? TREE_L : tree_status;

        if (cons_pred_mode == NO_MODE_CONS && aec_com_constrain_pred_mode(cu_width, cu_height, (SPLIT_MODE)split_mode, AEC_FW_data_in->slice_type))
        {
            cons_pred_mode_child = cons_pred_mode_child_tmp;
            aec_stage2(AEC_FW_data_in, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, cons_pred_mode_child, 0, AEC_DATA_input, FEC_info_local);
        }
        else
        {
            cons_pred_mode_child = cons_pred_mode;
        }

        COM_SPLIT_STRUCT split_struct;

        aec_com_split_get_part_structure(split_mode, x0, y0, cu_width, cu_height, cup, cud, AEC_FW_data_in->log2_culine, &split_struct);

        for (int part_num = 0; part_num < split_struct.part_count; ++part_num)
        {
            int cur_part_num = part_num;
            int sub_cuw = split_struct.width[cur_part_num];
            int sub_cuh = split_struct.height[cur_part_num];
            int x_pos = split_struct.x_pos[cur_part_num];
            int y_pos = split_struct.y_pos[cur_part_num];

            if (x_pos < AEC_FW_data_in->pic_width && y_pos < AEC_FW_data_in->pic_height) // check if inner the picture
            {
                ret = aec_enc_eco_tree_64x32(AEC_FW_data_in, x_pos, y_pos, split_struct.cup[cur_part_num], sub_cuw, sub_cuh, split_struct.cud
                    , split_mode, INC_QT_DEPTH(qt_depth, split_mode), INC_BET_DEPTH(bet_depth, split_mode), cons_pred_mode_child, tree_status_child,
                    AEC_DATA_input, FEC_info_local);
            }
        }

        if (tree_status_child == TREE_L && tree_status == TREE_LC)
        {
            aec_stage2(AEC_FW_data_in, 1, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
        }

    }
    else
    {
        aec_stage2(AEC_FW_data_in, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local);
    }

    //if ((AEC_DATA_input->lcu_cnt - 1) == 0){
    if (AEC_DATA_input->lcu_idx == (AEC_FW_data_in->lcu_cnt - 1)) {
        aec_stage2(AEC_FW_data_in, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, AEC_DATA_input, 0);
    }
    else
    {
#if PATCH_DEBUG
        //if (patch->patch_end == 0)
#endif
        {
            aec_stage2(AEC_FW_data_in, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, AEC_DATA_input, 0);
        }
    }

    return COM_OK;

}

void aec_stage2(AEC_FW_input* AEC_FW_data_in, int type, int x0, int y0, int cup, int cu_width, int cu_height, int cud, const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local)
{

    AEC_inner AEC_DATA_inner_tmp;
#if AEC_STAGE1_2_DEBUG  
    //stage2sim(type, x0, y0, cup, cu_width, cu_height, cud, parent_split,qt_depth, bet_depth, cons_pred_mode, tree_status);
#endif      
    if (type == 2)
    {
        aec_enc_eco_split_mode(&AEC_DATA_inner_tmp, cons_pred_mode, cud, cup, cu_width, cu_height, 64, parent_split, qt_depth, bet_depth, x0, y0,
            AEC_FW_data_in->pic_width, AEC_FW_data_in->pic_height, (x0 >> 6),
            AEC_DATA_input->fetch_output_me_line_map_ptr_min_scu_x, AEC_DATA_input->fetch_output_me_line_map_ptr_min_scu_y,
            FEC_info_local);
    }
    else if (type == 3)
    {
        aec_stage3(1, 3, tree_status, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else if (type == 4)
    {
        //for (int i = 0; i < 24; i++)
        //{
        //    run_rdoq[i] = PROB_INIT;            //slice level init
        //}
        aec_stage3(1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else if (type == 5)
    {
        aec_enc_eco_cons_pred_mode_child(cons_pred_mode);
    }
    else if (type == 6) {
        aec_writeParaSAO_one_LCU(AEC_DATA_input->slice_sao_enable, AEC_DATA_input->MergeLeftAvail, AEC_DATA_input->MergeUpAvail, AEC_DATA_input->offset, AEC_DATA_input->startBand, AEC_DATA_input->startBand2,
            AEC_DATA_input->deltaband, AEC_DATA_input->modeIdc, AEC_DATA_input->typeIdc);
    }
    else
    {
#if TB_SPLIT_EXT
        AEC_DATA_inner_tmp.pb_part = SIZE_2Nx2N;//AEC_DATA_input->cu_data_pb_part[cup];
        AEC_DATA_inner_tmp.tb_part = SIZE_2Nx2N; //AEC_DATA_input->cu_data_tb_part[cup];
        AEC_DATA_inner_tmp.ipf_flag = 0;// AEC_DATA_input->cu_data_ipf_flag[cup];
#endif      

        AEC_DATA_inner_tmp.affine_flag = AEC_DATA_input->cu_data_affine_flag[cup];
        AEC_DATA_inner_tmp.umve_flag = AEC_DATA_input->cu_data_umve_flag[cup];
        AEC_DATA_inner_tmp.umve_idx = AEC_DATA_input->cu_data_umve_idx[cup];
        AEC_DATA_inner_tmp.skip_idx = AEC_DATA_input->cu_data_skip_idx[cup];
        AEC_DATA_inner_tmp.mvr_idx = AEC_DATA_input->cu_data_mvr_idx[cup];
        AEC_DATA_inner_tmp.mvp_from_hmvp_flag = AEC_DATA_input->cu_data_mvp_from_hmvp_flag[cup];
        AEC_DATA_inner_tmp.refi[0] = AEC_DATA_input->cu_data_refi[cup][0];
        AEC_DATA_inner_tmp.refi[1] = AEC_DATA_input->cu_data_refi[cup][1];

        int x_scu = x0 >> MIN_CU_LOG2;
        int y_scu = y0 >> MIN_CU_LOG2;
        int pic_x_scu = x_scu - AEC_DATA_input->fetch_output_me_line_map_ptr_min_scu_x;
        int pic_y_scu = y_scu - AEC_DATA_input->fetch_output_me_line_map_ptr_min_scu_y;
        if (y_scu == AEC_DATA_input->fetch_output_me_line_map_ptr_min_scu_y) {
            AEC_DATA_inner_tmp.map_scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_above_line[(x0 >> 6) * 16 + pic_x_scu];
            //AEC_DATA_inner_tmp->map_scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_above_line_using[pic_x_scu];
           // scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_above_line_using[pic_x_scu];
        }
        else {
            AEC_DATA_inner_tmp.map_scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_inner[pic_x_scu * 16L + (pic_y_scu - 1)];
            //scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_inner[pic_x_scu * 16L + (pic_y_scu - 1)];
        }
        if (x_scu == AEC_DATA_input->fetch_output_me_line_map_ptr_min_scu_x) {
            AEC_DATA_inner_tmp.map_scu_tmp1[1] = FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu];
            //scu_tmp1[1] = FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu];
        }
        else {
            AEC_DATA_inner_tmp.map_scu_tmp1[1] = FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu];
            // scu_tmp1[1] = FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu];
        }

        if (y_scu == AEC_DATA_input->fetch_output_me_line_map_ptr_min_scu_y) {
            AEC_DATA_inner_tmp.map_cu_mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_above_line[(x0 >> 6) * 16 + pic_x_scu];
            //AEC_DATA_inner_tmp->map_cu_mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_above_line_using[pic_x_scu];
            //mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_above_line_using[pic_x_scu];
        }
        else {
            AEC_DATA_inner_tmp.map_cu_mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_inner[pic_x_scu * 16L + (pic_y_scu - 1)];
            //mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_inner[pic_x_scu * 16L + (pic_y_scu - 1)];
        }

        if (x_scu == AEC_DATA_input->fetch_output_me_line_map_ptr_min_scu_x) {
            AEC_DATA_inner_tmp.map_cu_mode_tmp1[1] = FEC_info_local->map_ptr_map_cu_mode_inner_left[pic_y_scu];
            //mode_tmp1[1] = FEC_info_local->map_ptr_map_cu_mode_inner_left[pic_y_scu];
        }
        else {
            AEC_DATA_inner_tmp.map_cu_mode_tmp1[1] = FEC_info_local->map_ptr_map_cu_mode_inner[(pic_x_scu - 1) * 16L + pic_y_scu];
            //mode_tmp1[1] = FEC_info_local->map_ptr_map_cu_mode_inner[(pic_x_scu - 1) * 16L + pic_y_scu];
        }

        if (type == 0)
        {
            AEC_DATA_inner_tmp.tree_status = tree_status;
            AEC_DATA_inner_tmp.cons_pred_mode = cons_pred_mode;
            AEC_DATA_inner_tmp.x = x0;
            AEC_DATA_inner_tmp.y = y0;
        }
        else //type ==1
        {
            AEC_DATA_inner_tmp.tree_status = TREE_C;
            AEC_DATA_inner_tmp.cons_pred_mode = NO_MODE_CONS;
            AEC_DATA_inner_tmp.x = x0;
            AEC_DATA_inner_tmp.y = y0;
        }
        aec_enc_eco_tree(&AEC_DATA_inner_tmp, type, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status,
            AEC_FW_data_in->slice_type,
            AEC_DATA_input->coef, AEC_FW_data_in->log2_culine,
            AEC_FW_data_in->dt_intra_enable_flag,
            AEC_FW_data_in->pic_width_in_scu, AEC_FW_data_in->max_cuwh, AEC_DATA_input->cu_data_pred_mode, AEC_FW_data_in->position_based_transform_enable_flag,
            AEC_DATA_input->cu_data_ipm, AEC_DATA_input->cu_data_mpm, AEC_DATA_input->cu_data_num_nz_coef, AEC_FW_data_in->tscpm_enable_flag,
            AEC_FW_data_in->ipf_enable_flag, AEC_FW_data_in->sqh_num_of_hmvp_cand, AEC_FW_data_in->sqh_umve_enable_flag, AEC_FW_data_in->sqh_affine_enable_flag, AEC_FW_data_in->sqh_amvr_enable_flag, AEC_FW_data_in->sqh_emvr_enable_flag, AEC_FW_data_in->rpm_num_refp, AEC_DATA_input->mvd);
        //AEC_DATA_input->fetch_output_me_line_map_ptr_map_scu_above_line,
        //AEC_DATA_input->fetch_output_me_line_map_ptr_map_cu_mode_above_line);
    }
}
#endif


#if USE_ENH
void enc_sbac_encode_bin_trm(u32 bin, ENC_SBAC* sbac, COM_BSW* bs);
static void enc_sbac_encode_binW(u32 bin, ENC_SBAC* sbac, SBAC_CTX_MODEL* model1, SBAC_CTX_MODEL* model2, COM_BSW* bs);
static void sbac_encode_bin_ep(u32 bin, ENC_SBAC* sbac, COM_BSW* bs);
static void enc_sbac_encode_bin(u32 bin, ENC_SBAC* sbac, SBAC_CTX_MODEL* model, COM_BSW* bs);
#endif
#if AEC_PHASE1
void aec_stage3(int num, u8 method0, u32 symbol0, SBAC_CTX_MODEL model1_t0, SBAC_CTX_MODEL model2_t0,
    u8 method1, u32 symbol1, SBAC_CTX_MODEL model1_t1, SBAC_CTX_MODEL model2_t1,
    u8 method2, u32 symbol2, SBAC_CTX_MODEL model1_t2, SBAC_CTX_MODEL model2_t2,
    u8 method3, u32 symbol3, SBAC_CTX_MODEL model1_t3, SBAC_CTX_MODEL model2_t3)
{

    assert(method0 <= 4 && method0 >= 0);

    SBAC_CTX_MODEL* model1;
    SBAC_CTX_MODEL* model2;
    u32 symbol;

    symbol = symbol0;
    model2 = model2_t0 + aec_ctx.last2 - 1;
    model1 = model1_t0 + aec_ctx.delta_qp - 1;
#if AEC_STAGE1_2_DEBUG  
    stage3sim(num, method0, symbol0, model1_t0, model2_t0,
        method1, symbol1, model1_t1, model2_t1,
        method2, symbol2, model1_t2, model2_t2,
        method3, symbol3, model1_t3, model2_t3);
#endif      
#if USE_ENH
    if (method0 == 0) {
        enc_sbac_encode_bin(symbol, &aec_sbac_local, model1, &AEC_DATA_output.bs);
    }
    else if (method0 == 1) {
        sbac_encode_bin_ep(symbol, &aec_sbac_local, &AEC_DATA_output.bs);
    }
    else if (method0 == 2) {
        enc_sbac_encode_binW(symbol, &aec_sbac_local, model1, model2, &AEC_DATA_output.bs);
    }
    else if (method0 == 3) {
        enc_sbac_encode_bin_trm(symbol, &aec_sbac_local, &AEC_DATA_output.bs);
        if (symbol == 1) {
            aec_enc_sbac_finish(&aec_sbac_local, &AEC_DATA_output.bs);
        }
    }
    else {
        aec_ctx_init();
    }
#else
    if (method0 == 0) {
        aec_enc_sbac_encode_bin(symbol, &aec_sbac_local, model1, &AEC_DATA_output.bs);
    }
    else if (method0 == 1) {
        aec_sbac_encode_bin_ep(symbol, &aec_sbac_local, &AEC_DATA_output.bs);
    }
    else if (method0 == 2) {
        aec_enc_sbac_encode_binW(symbol, &aec_sbac_local, model1, model2, &AEC_DATA_output.bs);
    }
    else if (method0 == 3) {
        aec_enc_sbac_encode_bin_trm(symbol, &aec_sbac_local, &AEC_DATA_output.bs);
        if (symbol == 1) {
            aec_enc_sbac_finish(&aec_sbac_local, &AEC_DATA_output.bs);
        }
    }
    else {
        aec_ctx_init();
    }

#endif

}
#endif
void Demulate_aec(COM_BSW* bs, COM_BSW* ctx_bs)
{

    unsigned int current_bytes_size = AEC_DATA_output.bs_cur - bs->uiStartPos;
    unsigned int uiWriteOffset = 0;
#if PATCH_DEBUG1
    static u8 aec_buftmp[2] = { 0 };

    aec_buftmp[1] = aec_buftmp[0];
    aec_buftmp[0] = bs->beg[AEC_DATA_output.bs_cur - 1];
#endif
    for (unsigned int uiReadOffset = bs->uiStartPos; uiReadOffset < bs->uiStartPos + current_bytes_size; uiReadOffset++) {
        unsigned char ucCurByte;
        if (uiReadOffset != 0)
        {
#if PATCH_DEBUG1
            u8 tmp = 0;
            if (uiReadOffset == bs->uiStartPos)
            {
                tmp = aec_buftmp[1];
            }
            else
            {
                tmp = AEC_DATA_output.bs_tmp[uiReadOffset - 1];
            }
            ucCurByte = (tmp << (8 - bs->uiBitsWriteOffset)) | (AEC_DATA_output.bs_tmp[uiReadOffset] >>
                bs->uiBitsWriteOffset);
#else
            ucCurByte = (AEC_DATA_output.bs_tmp[uiReadOffset - 1] << (8 - bs->uiBitsWriteOffset)) | (AEC_DATA_output.bs_tmp[uiReadOffset] >>
                bs->uiBitsWriteOffset);
#endif
        }
        else
        {
            ucCurByte = AEC_DATA_output.bs_tmp[uiReadOffset];
        }
        if (2 <= bs->uiZeroCount && 0 == (ucCurByte & 0xfc)) {
            bs->aec_buftmp[uiWriteOffset++] = 0x02;
            bs->uiBitsWriteOffset += 2;
            bs->uiZeroCount = 0;
            if (bs->uiBitsWriteOffset >= 8) {
                bs->uiBitsWriteOffset = 0;
                uiReadOffset--;
            }
            continue;
        }
        bs->aec_buftmp[uiWriteOffset++] = ucCurByte;

        if (0 == ucCurByte) {
            bs->uiZeroCount++;
        }
        else {
            bs->uiZeroCount = 0;
        }
    }
#if PATCH_DEBUG1
    assert(uiWriteOffset == current_bytes_size);
#endif
    for (unsigned int i = 0; i < uiWriteOffset; i++) {
#if PATCH_DEBUG1
        bs->beg[bs->uiStartPos + i] = bs->aec_buftmp[i];
#else
        ctx_bs->cur[bs->CurAddress + i] = bs->aec_buftmp[i];
#endif
    }

    bs->uiStartPos = bs->uiStartPos + current_bytes_size;
    bs->CurAddress = bs->CurAddress + uiWriteOffset;

    bs->byte_cnt_frame= bs->byte_cnt_frame + uiWriteOffset;
    AEC_DATA_output.byte_cnt = uiWriteOffset;
}

//#pragma optimize("", off)
#if AEC_PHASE1
void aec_run(ENC_CU_DATA* ctu_map_cu_data, SAOBlkParam* cur_saoPAram, int lcu_num, int lcu_cnt, AEC_FW* frame_level_fw_in,
    const U32 map_scu_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], const u32 map_cu_mode_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], COM_BSW* bs, ENC_ME_LINE_MAP* me_line_map_ptr, SAO2AEC* sao2aec)
{
    int  ret;
    int i, j, k;
    static FEC_info FEC_info_local;
    static AEC_input  AEC_DATA_input;
    //AEC_DATA_output.bs_cur = 0;
    //com_bsw_init(&AEC_DATA_output.bs,AEC_DATA_output.bs_tmp, NULL, 3 * 1024 * 1024, NULL);
#if AEC_STAGE1_2_DEBUG  
    fpStage1 = fopen("dataS1.txt", "a+");
    fpInfoS1 = fopen("dataInfoS1.txt", "a+b");
    fpSplitM = fopen("dataSplitM.txt", "a+b");
    fpStream = fopen("dataS.txt", "a+");
    fpMvd = fopen("dataMvd.txt", "a+b");
    fpPb = fopen("dataPb.txt", "a+b");
    fpTb = fopen("dataTb.txt", "a+b");
    fpPm = fopen("dataPm.txt", "a+b");
    fpMvr = fopen("dataMvr.txt", "a+b");
    fpUmvF = fopen("dataUmvF.txt", "a+b");
    fpUmvI = fopen("dataUmvI.txt", "a+b");
    fpSkipI = fopen("dataSkipI.txt", "a+b");
    fpAff = fopen("dataAff.txt", "a+b");
    fpIpf = fopen("dataIpf.txt", "a+b");
    fpMvp = fopen("dataMvp.txt", "a+b");
    fpMpm = fopen("dataMpm.txt", "a+b");
    fpIpm = fopen("dataIpm.txt", "a+b");
    fpRefi = fopen("dataRefi.txt", "a+b");
    fpNumC = fopen("dataNumC.txt", "a+b");
    fpSqh = fopen("dataSqh.txt", "a+b");
    fpInfo = fopen("dataInfo.txt", "a+b");
    fpRpm = fopen("dataRpm.txt", "a+b");
    fpCoef = fopen("dataCoef.txt", "a+b");
    fpRes = fopen("dataS2.txt", "a+");
    fpFoutI = fopen("dataFoutI.txt", "a+");
    fpMapIn = fopen("dataMapIn.txt", "a+b");
    fpModIn = fopen("dataModIn.txt", "a+b");
    fpScuAb = fopen("dataScuAb.txt", "a+b");
    fpCuAb = fopen("dataCuAb.txt", "a+b");
    fpTest = fopen("datTest.txt", "a+");
#endif  
    AEC_FW_input AEC_FW_data_in;
    //AEC_input  AEC_DATA_input;
    //AEC_DATA_input.lcu_num =lcu_num;
    if (lcu_num == 0)//look as frame start
    {
        AEC_DATA_input.lcu_idx = 0;
        //AEC_DATA_input.x_lcu_idx = 1;
        AEC_DATA_input.x_lcu_idx = 0;
        AEC_DATA_input.y_lcu_idx = 0;
        AEC_DATA_input.x_pel = 0;
        AEC_DATA_input.y_pel = 0;
        AEC_DATA_input.fetch_output_me_line_map_ptr_min_scu_x = 0;
        AEC_DATA_input.fetch_output_me_line_map_ptr_min_scu_y = 0;
        AEC_DATA_output.bs.uiStartPos = AEC_DATA_output.bs_cur;
        AEC_DATA_output.bs.uiBitsWriteOffset = 0;
        AEC_DATA_output.bs.uiZeroCount = 0;
        AEC_DATA_output.bs.CurAddress = AEC_DATA_output.bs_cur;
    }
    else
    {
        AEC_DATA_input.lcu_idx += 1;
        AEC_DATA_input.x_pel = AEC_DATA_input.x_lcu_idx * 64;
        AEC_DATA_input.y_pel = AEC_DATA_input.y_lcu_idx * 64;
        AEC_DATA_input.fetch_output_me_line_map_ptr_min_scu_x = AEC_DATA_input.x_pel >> 2;
        AEC_DATA_input.fetch_output_me_line_map_ptr_min_scu_y = AEC_DATA_input.y_pel >> 2;

        //if (AEC_DATA_input.x_lcu_idx < (frame_level_fw_in->pic_width_in_lcu-1))
        //{
        //    AEC_DATA_input.x_lcu_idx += 1;
        //}
        //else
        //{
        //    AEC_DATA_input.x_lcu_idx = 0;
        //    AEC_DATA_input.y_lcu_idx += 1;
        //}
    }

    if (AEC_DATA_input.x_lcu_idx == 0)
    {
        for (int i = 0; i < 16; ++i)
        {
            FEC_info_local.map_ptr_map_cu_mode_inner_left[i] = 0x0;
            FEC_info_local.map_ptr_map_scu_inner_left[i] = 0;
        }
    }
    else
    {
        for (int i = 0; i < 16; ++i)
        {
            FEC_info_local.map_ptr_map_cu_mode_inner_left[i] = FEC_info_local.map_ptr_map_cu_mode_inner[15 * 16 + i];// FEC_info_local.map_ptr_map_cu_mode_inner[(i + 1) * 16 - 1];
            FEC_info_local.map_ptr_map_scu_inner_left[i] = FEC_info_local.map_ptr_map_scu_inner[15 * 16 + i];
        }
    }

    for (int j = 0; j < 16; ++j) {
        for (int idx = 0; idx < 16; ++idx) {
            FEC_info_local.map_ptr_map_cu_mode_inner[j * 16 + idx] = map_cu_mode_inner[j][idx];
            FEC_info_local.map_ptr_map_scu_inner[j * 16 + idx] = map_scu_inner[j][idx];
        }
    }

    if (lcu_num == 0)
    {
        for (int i = 0; i < (max_buffer_width >> 2); ++i)
        {
            FEC_info_local.map_ptr_map_cu_mode_above_line[i] = 0xcccccccc;
            FEC_info_local.map_ptr_map_scu_above_line[i] = 0;
        }
    }
    //for (int i = 0; i < 16; ++i)
    //{
    //    FEC_info_local.map_ptr_map_scu_above_line_using[i] = FEC_info_local.map_ptr_map_scu_above_line[AEC_DATA_input.x_lcu_idx * 16 + i];
    //    FEC_info_local.map_ptr_map_cu_mode_above_line_using[i] = FEC_info_local.map_ptr_map_cu_mode_above_line[AEC_DATA_input.x_lcu_idx * 16 + i];
    //}
    //for (int i = 0; i < 16; ++i)
    //{
    //    FEC_info_local.map_ptr_map_cu_mode_above_line[AEC_DATA_input.x_lcu_idx * 16 + i] = FEC_info_local.map_ptr_map_cu_mode_inner[15+i*16];
    //    FEC_info_local.map_ptr_map_scu_above_line[AEC_DATA_input.x_lcu_idx * 16 + i] = FEC_info_local.map_ptr_map_scu_inner[15 + i * 16];
    //}

    for (i = 0; i < N_C; ++i)
    {
        AEC_DATA_input.slice_sao_enable[i] = frame_level_fw_in->slice_sao_enable[i];
    }


    for (i = 0; i < MAX_CU_DEPTH; i++) {
        for (j = 0; j < NUM_BLOCK_SHAPE; j++) {
            for (k = 0; k < MAX_CU_CNT_IN_LCU; k++) {
                AEC_DATA_input.cu_data_split_mode[i][j][k] = ctu_map_cu_data->split_mode[i][j][k];
            }
        }
    }

    //for (i = 0; i < CU_SIZE; i++)AEC_DATA_input.cu_data_pb_part[i] = ctu_map_cu_data->pb_part[i];
    //for (i = 0; i < CU_SIZE; i++)AEC_DATA_input.cu_data_tb_part[i] = ctu_map_cu_data->tb_part[i];
    for (i = 0; i < CU_SIZE; i++)AEC_DATA_input.cu_data_pred_mode[i] = ctu_map_cu_data->pred_mode[i];
    //for (i = 0; i < CU_SIZE; i++)AEC_DATA_input.cu_data_ipf_flag[i] = ctu_map_cu_data->ipf_flag[i];

    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 256; j++) {
            AEC_DATA_input.cu_data_mpm[i][j] = ctu_map_cu_data->mpm[i][j];
            AEC_DATA_input.cu_data_ipm[i][j] = ctu_map_cu_data->ipm[i][j];
        }
    }

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 256; j++) {
            AEC_DATA_input.cu_data_num_nz_coef[i][j] = ctu_map_cu_data->num_nz_coef[i][j];
        }
    }

    for (int i = 0; i < 256; ++i) {
        AEC_DATA_input.cu_data_affine_flag[i] = ctu_map_cu_data->affine_flag[i];
        AEC_DATA_input.cu_data_umve_flag[i] = ctu_map_cu_data->umve_flag[i];
        AEC_DATA_input.cu_data_umve_idx[i] = ctu_map_cu_data->umve_idx[i];
        AEC_DATA_input.cu_data_skip_idx[i] = ctu_map_cu_data->skip_idx[i];
        AEC_DATA_input.cu_data_mvr_idx[i] = ctu_map_cu_data->mvr_idx[i];
        AEC_DATA_input.cu_data_mvp_from_hmvp_flag[i] = ctu_map_cu_data->mvp_from_hmvp_flag[i];
        for (int j = 0; j < 2; ++j) {
            AEC_DATA_input.cu_data_refi[i][j] = ctu_map_cu_data->refi[i][j];
        }
    }
    for (int i = 0; i < MAX_CU_CNT_IN_LCU; ++i) {
        for (int j = 0; j < REFP_NUM; ++j) {
            for (int k = 0; k < MV_D; ++k) {
                AEC_DATA_input.mvd[i][j][k] = ctu_map_cu_data->mvd[i][j][k];
            }
        }
    }

#if defined AEC_TV_ACTIVE
    s16 coef_y[64][64];
    s16 coef_u[1024];
    s16 coef_v[1024];
#endif//AEC_TV_ACTIVE	
    for (int j = 0; j < 64; j++) {
        for (int i = 0; i < 64; i++) {
            AEC_DATA_input.coef[0][j * 64 + i] = ctu_map_cu_data->coef_y[j][i];
#if defined AEC_TV_ACTIVE
            coef_y[j][i] = ctu_map_cu_data->coef_y[j][i];
#endif//AEC_TV_ACTIVE
        }
    }
    for (int j = 0; j < ((CU_SIZE << 4) >> 2); j++) {
        AEC_DATA_input.coef[1][j] = ctu_map_cu_data->coef_u[j];
#if defined AEC_TV_ACTIVE
        coef_u[j] = ctu_map_cu_data->coef_u[j];
#endif//AEC_TV_ACTIVE		
    }
    for (int j = 0; j < ((CU_SIZE << 4) >> 2); j++) {
        AEC_DATA_input.coef[2][j] = ctu_map_cu_data->coef_v[j];
#if defined AEC_TV_ACTIVE
        coef_v[j] = ctu_map_cu_data->coef_v[j];
#endif//AEC_TV_ACTIVE		
    }

    //AEC_DATA_input.fetch_output_me_line_map_ptr_min_scu_x = line_map_ptr->min_scu_x;
    //AEC_DATA_input.fetch_output_me_line_map_ptr_min_scu_y = line_map_ptr->min_scu_y;
    //AEC_DATA_input.fetch_output_me_line_map_ptr_above_line_idx = line_map_ptr->above_line_idx;
    //AEC_DATA_input.fetch_output_me_line_map_ptr_curr_ctu_idx = line_map_ptr->curr_ctu_idx;

    //for (int i = 0; i < 2; ++i) {
    //  for (int j = 0; j < 16; ++j) {
    //      for (int idx = 0; idx < 16; ++idx) {
    //          AEC_DATA_input.fetch_output_me_line_map_ptr_map_scu_inner[256*i+j*16+idx] = line_map_ptr->map_scu_inner[i][j][idx];
    //          AEC_DATA_input.fetch_output_me_line_map_ptr_map_cu_mode_inner[256*i+j*16+idx] = line_map_ptr->map_cu_mode_inner[i][j][idx];
    //      }
    //  }
    //}
    //for (int i = 0; i < 2; ++i) {
    //  for (int j = 0; j < 960; ++j) {
    //      //AEC_DATA_input.fetch_output_me_line_map_ptr_map_scu_above_line[960*i+j]
    //      fetch_output_me_line_map_ptr_map_scu_above_line[960 * i + j]
    //                          = line_map_ptr->map_scu_above_line[i][j];
    //      //AEC_DATA_input.fetch_output_me_line_map_ptr_map_cu_mode_above_line[960*i+j]
    //      fetch_output_me_line_map_ptr_map_cu_mode_above_line[960 * i + j]
    //                          = line_map_ptr->map_cu_mode_above_line[i][j];
    //  }
    //}
    //AEC_DATA_input.lcu_cnt = lcu_cnt;

    get_sao_param(&AEC_DATA_input, cur_saoPAram);

#if AEC_STAGE1_DEBUG

    if (!fp_stage1_InParam)
    {
        fp_stage1_InParam = fopen("aec_tv.txt", "a+b");
    }

    //if(fp_cu_data_split_mode == NULL)
    //  fp_cu_data_split_mode = fopen("cu_data_split_mode.txt","w");
    for (int k = 0; k < 5; k++)
    {
        for (int j = 0; j < 7; j++)
        {
            for (int i = 0; i < 256; i++)
            {
                //fprintf(fp_cu_data_split_mode,"%x\n",AEC_DATA_input.cu_data_split_mode[k][j][i]);
                fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.cu_data_split_mode[k][j][i]);
            }
        }
    }

    //if(fp_cu_data_mvd == NULL)
    //  fp_cu_data_mvd = fopen("cu_data_mvd.txt","w");
    for (int k = 0; k < 256; k++)
    {
        for (int j = 0; j < 2; j++)
        {
            for (int i = 0; i < 2; i++)
            {
                //fprintf(fp_cu_data_mvd,"%x\n",AEC_DATA_input.cu_data_mvd[k][j][i]);
                fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.mvd[k][j][i]);
            }
        }
    }

    //if(fp_cu_data_pb_part == NULL)
    //  fp_cu_data_pb_part = fopen("cu_data_pb_part.txt","w");
    for (int i = 0; i < 256; i++)
    {
        //fprintf(fp_cu_data_pb_part,"%x\n",AEC_DATA_input.cu_data_pb_part[i]);
        fprintf(fp_stage1_InParam, "%x\n", ctu_map_cu_data->pb_part[i]);
    }

    //if(fp_cu_data_tb_part == NULL)
    //  fp_cu_data_tb_part = fopen("cu_data_tb_part.txt","w");
    for (int i = 0; i < 256; i++)
    {
        //fprintf(fp_cu_data_tb_part,"%x\n",AEC_DATA_input.cu_data_tb_part[i]);
        fprintf(fp_stage1_InParam, "%x\n", ctu_map_cu_data->tb_part[i]);
    }

    //if(fp_cu_data_pred_mode == NULL)
    //  fp_cu_data_pred_mode = fopen("cu_data_pred_mode.txt","w");
    for (int i = 0; i < 256; i++)
    {
        //fprintf(fp_cu_data_pred_mode,"%x\n",AEC_DATA_input.cu_data_pred_mode[i]);
        fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.cu_data_pred_mode[i]);
    }

    //if(fp_cu_data_mvr_idx == NULL)
    //  fp_cu_data_mvr_idx = fopen("cu_data_mvr_idx.txt","w");
    for (int i = 0; i < 256; i++)
    {
        //fprintf(fp_cu_data_mvr_idx,"%x\n",AEC_DATA_input.cu_data_mvr_idx[i]);
        fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.cu_data_mvr_idx[i]);
    }

    //if(fp_cu_data_umve_flag == NULL)
    //  fp_cu_data_umve_flag = fopen("cu_data_umve_flag.txt","w");
    for (int i = 0; i < 256; i++)
    {
        //fprintf(fp_cu_data_umve_flag,"%x\n",AEC_DATA_input.cu_data_umve_flag[i]);
        fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.cu_data_umve_flag[i]);
    }

    //if(fp_cu_data_umve_idx == NULL)
    //  fp_cu_data_umve_idx = fopen("cu_data_umve_idx.txt","w");
    for (int i = 0; i < 256; i++)
    {
        //fprintf(fp_cu_data_umve_idx,"%x\n",AEC_DATA_input.cu_data_umve_idx[i]);
        fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.cu_data_umve_idx[i]);
    }

    //if(fp_cu_data_skip_idx == NULL)
    //  fp_cu_data_skip_idx = fopen("cu_data_skip_idx.txt","w");
    for (int i = 0; i < 256; i++)
    {
        //fprintf(fp_cu_data_skip_idx,"%x\n",AEC_DATA_input.cu_data_skip_idx[i]);
        fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.cu_data_skip_idx[i]);
    }

    //if(fp_cu_data_affine_flag == NULL)
    //  fp_cu_data_affine_flag = fopen("cu_data_affine_flag.txt","w");
    for (int i = 0; i < 256; i++)
    {
        //fprintf(fp_cu_data_affine_flag,"%x\n",AEC_DATA_input.cu_data_affine_flag[i]);
        fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.cu_data_affine_flag[i]);
    }

    //if(fp_cu_data_ipf_flag == NULL)
    //  fp_cu_data_ipf_flag = fopen("cu_data_ipf_flag.txt","w");
    for (int i = 0; i < 256; i++)
    {
        //fprintf(fp_cu_data_ipf_flag,"%x\n",AEC_DATA_input.cu_data_ipf_flag[i]);
        fprintf(fp_stage1_InParam, "%x\n", ctu_map_cu_data->ipf_flag[i]);
    }

    //if(fp_cu_data_mvp_from_hmvp_flag == NULL)
    //  fp_cu_data_mvp_from_hmvp_flag = fopen("cu_data_mvp_from_hmvp_flag.txt","w");
    for (int i = 0; i < 256; i++)
    {
        //fprintf(fp_cu_data_mvp_from_hmvp_flag,"%x\n",AEC_DATA_input.cu_data_mvp_from_hmvp_flag[i]);
        fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.cu_data_mvp_from_hmvp_flag[i]);
    }

    //if(fp_cu_data_mpm == NULL)
    //  fp_cu_data_mpm = fopen("cu_data_mpm.txt","w");
    for (int j = 0; j < 2; j++)
    {
        for (int i = 0; i < 256; i++)
        {
            //fprintf(fp_cu_data_mpm,"%x\n",AEC_DATA_input.cu_data_mpm[j][i]);
            fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.cu_data_mpm[j][i]);
        }
    }

    //if(fp_cu_data_ipm == NULL)
    //  fp_cu_data_ipm = fopen("cu_data_ipm.txt","w");
    for (int j = 0; j < 2; j++)
    {
        for (int i = 0; i < 256; i++)
        {
            //fprintf(fp_cu_data_ipm,"%x\n",AEC_DATA_input.cu_data_ipm[j][i]);
            fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.cu_data_ipm[j][i]);
        }
    }

    //if(fp_cu_data_refi == NULL)
    //  fp_cu_data_refi = fopen("cu_data_refi.txt","w");
    for (int j = 0; j < 256; j++)
    {
        for (int i = 0; i < 2; i++)
        {
            //fprintf(fp_cu_data_refi,"%x\n",AEC_DATA_input.cu_data_refi[j][i]);
            fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.cu_data_refi[j][i]);
        }
    }

    //if(fp_cu_data_num_nz_coef == NULL)
    //  fp_cu_data_num_nz_coef = fopen("cu_data_num_nz_coef.txt","w");
    for (int j = 0; j < 3; j++)
    {
        for (int i = 0; i < 256; i++)
        {
            //fprintf(fp_cu_data_num_nz_coef,"%x\n",AEC_DATA_input.cu_data_num_nz_coef[j][i]);
            fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.cu_data_num_nz_coef[j][i]);
        }
    }

    //if(fp_rpm_num_refp == NULL)
    //  fp_rpm_num_refp = fopen("rpm_num_refp.txt","w");
    for (int i = 0; i < 2; i++)
    {
        //fprintf(fp_rpm_num_refp,"%x\n",AEC_DATA_input.rpm_num_refp[i]);
        fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.rpm_num_refp[i]);
    }

    //if(fp_coef == NULL)
    //  fp_coef = fopen("coef.txt","w");
    for (int j = 0; j < 3; j++)
    {
        for (int i = 0; i < 4096; i++)
        {
            //fprintf(fp_coef,"%x\n",AEC_DATA_input.coef[j][i]);
            fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.coef[j][i]);
        }
    }


    //if(fp_modeIdc == NULL)
    //  fp_modeIdc = fopen("modeIdc.txt","w");
    for (int i = 0; i < 3; i++)
    {
        //fprintf(fp_modeIdc,"%x\n",AEC_DATA_input.modeIdc[i]);
        fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.modeIdc[i]);
    }

    //if(fp_typeIdc == NULL)
    //  fp_typeIdc = fopen("typeIdc.txt","w");
    for (int i = 0; i < 3; i++)
    {
        //fprintf(fp_typeIdc,"%x\n",AEC_DATA_input.typeIdc[i]);
        fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.typeIdc[i]);
    }

    //if(fp_startBand == NULL)
    //  fp_startBand = fopen("startBand.txt","w");
    for (int i = 0; i < 3; i++)
    {
        //fprintf(fp_startBand,"%x\n",AEC_DATA_input.startBand[i]);
        fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.startBand[i]);
    }

    //if(fp_startBand2 == NULL)
    //  fp_startBand2 = fopen("startBand2.txt","w");
    for (int i = 0; i < 3; i++)
    {
        //fprintf(fp_startBand2,"%x\n",AEC_DATA_input.startBand2[i]);
        fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.startBand2[i]);
    }

    //if(fp_deltaband == NULL)
    //  fp_deltaband = fopen("deltaband.txt","w");
    for (int i = 0; i < 3; i++)
    {
        //fprintf(fp_deltaband,"%x\n",AEC_DATA_input.deltaband[i]);
        fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.deltaband[i]);
    }

    //if(fp_slice_sao_enable == NULL)
    //  fp_slice_sao_enable = fopen("slice_sao_enable.txt","w");
    for (int i = 0; i < 3; i++)
    {
        //fprintf(fp_slice_sao_enable,"%x\n",AEC_DATA_input.slice_sao_enable[i]);
        fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.slice_sao_enable[i]);
    }

    //if(fp_offset == NULL)
    //  fp_offset = fopen("offset.txt","w");
    for (int j = 0; j < 3; j++)
    {
        for (int i = 0; i < 32; i++)
        {
            //fprintf(fp_offset,"%x\n",AEC_DATA_input.offset[j][i]);
            fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.offset[j][i]);
        }
    }

    //if(fp_map_scu_inner == NULL)
    //  fp_map_scu_inner = fopen("map_scu_inner.txt","w");
    for (int k = 0; k < 2; k++)
    {
        for (int j = 0; j < 16; j++)
        {
            for (int i = 0; i < 16; i++)
            {
                //fprintf(fp_map_scu_inner,"%x\n",fetch_output.me_line_map_ptr->map_scu_inner[k][j][i]);
                fprintf(fp_stage1_InParam, "%x\n", me_line_map_ptr->map_scu_inner[k][j][i]);
            }
        }
    }

    //if(fp_map_cu_mode_inner == NULL)
    //  fp_map_cu_mode_inner = fopen("map_cu_mode_inner.txt","w");
    for (int k = 0; k < 2; k++)
    {
        for (int j = 0; j < 16; j++)
        {
            for (int i = 0; i < 16; i++)
            {
                //fprintf(fp_map_cu_mode_inner,"%x\n",fetch_output.me_line_map_ptr->map_cu_mode_inner[k][j][i]);
                fprintf(fp_stage1_InParam, "%x\n", me_line_map_ptr->map_cu_mode_inner[k][j][i]);
            }
        }
    }

    //if(fp_map_scu_above_line == NULL)
    //  fp_map_scu_above_line = fopen("map_scu_above_line.txt","w");
    for (int j = 0; j < 2; j++)
    {
        for (int i = 0; i < 960; i++)
        {
            //fprintf(fp_map_scu_above_line,"%x\n",fetch_output.me_line_map_ptr->map_scu_above_line[j][i]);
            if (j == me_line_map_ptr->above_line_idx && i >= me_line_map_ptr->min_scu_x - SCUX_OFFSET && i < me_line_map_ptr->min_scu_x - SCUX_OFFSET + ABOVE_LINE_LEN)
                fprintf(fp_stage1_InParam, "%x\n", me_line_map_ptr->new_map_scu_above_line[i - me_line_map_ptr->min_scu_x + SCUX_OFFSET]);
            else

                fprintf(fp_stage1_InParam, "%x\n", 0);
        }
    }

    //if(fp_map_cu_mode_above_line == NULL)
    //  fp_map_cu_mode_above_line = fopen("map_cu_mode_above_line.txt","w");
    for (int j = 0; j < 2; j++)
    {
        for (int i = 0; i < 960; i++)
        {
            //fprintf(fp_map_cu_mode_above_line,"%x\n",fetch_output.me_line_map_ptr->map_cu_mode_above_line[j][i]);
            if (j == me_line_map_ptr->above_line_idx && i >= me_line_map_ptr->min_scu_x - SCUX_OFFSET && i < me_line_map_ptr->min_scu_x - SCUX_OFFSET + ABOVE_LINE_LEN)
                fprintf(fp_stage1_InParam, "%x\n", me_line_map_ptr->new_map_cu_mode_above_line[i - me_line_map_ptr->min_scu_x + SCUX_OFFSET]);
            else

                fprintf(fp_stage1_InParam, "%x\n", 0);
        }
    }


    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->log2_culine);

    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->slice_type);

    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->max_cuwh);

    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->pic_width);

    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->pic_height);

    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->sample_adaptive_offset_enable_flag);

    fprintf(fp_stage1_InParam, "%x\n", lcu_cnt);

    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->umve_enable_flag);

    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->num_of_hmvp_cand);

    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->affine_enable_flag);

    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->amvr_enable_flag);

    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->emvr_enable_flag);

    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->dt_intra_enable_flag);

    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->position_based_transform_enable_flag);

    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->tscpm_enable_flag);

    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->ipf_enable_flag);

    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->pic_width_in_scu);

    fprintf(fp_stage1_InParam, "%x\n", frame_level_fw_in->pic_width_in_lcu);

    fprintf(fp_stage1_InParam, "%x\n", sao2aec->x_lcu);

    fprintf(fp_stage1_InParam, "%x\n", sao2aec->y_lcu);

    fprintf(fp_stage1_InParam, "%x\n", sao2aec->x_pel);
    ///
    fprintf(fp_stage1_InParam, "%x\n", sao2aec->y_pel);

    fprintf(fp_stage1_InParam, "%x\n", lcu_num);

    fprintf(fp_stage1_InParam, "%x\n", sao2aec->ptr);

    fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.MergeLeftAvail);

    fprintf(fp_stage1_InParam, "%x\n", AEC_DATA_input.MergeUpAvail);

    fprintf(fp_stage1_InParam, "%x\n", me_line_map_ptr->min_scu_x);

    fprintf(fp_stage1_InParam, "%x\n", me_line_map_ptr->min_scu_y);

    fprintf(fp_stage1_InParam, "%x\n", me_line_map_ptr->above_line_idx);

    fprintf(fp_stage1_InParam, "%x\n", me_line_map_ptr->curr_ctu_idx);

#endif

#if DT_PARTITION
    AEC_FW_data_in.dt_intra_enable_flag = frame_level_fw_in->dt_intra_enable_flag;
#endif
    AEC_FW_data_in.position_based_transform_enable_flag = frame_level_fw_in->position_based_transform_enable_flag;
#if TSCPM
    AEC_FW_data_in.tscpm_enable_flag = frame_level_fw_in->tscpm_enable_flag;
#endif  
    AEC_FW_data_in.ipf_enable_flag = frame_level_fw_in->ipf_enable_flag;
    AEC_FW_data_in.sample_adaptive_offset_enable_flag = frame_level_fw_in->sample_adaptive_offset_enable_flag;
    AEC_FW_data_in.pic_width_in_scu = frame_level_fw_in->pic_width_in_scu;
    AEC_FW_data_in.max_cuwh = frame_level_fw_in->max_cuwh;
    AEC_FW_data_in.pic_width = frame_level_fw_in->pic_width;
    AEC_FW_data_in.pic_height = frame_level_fw_in->pic_height;
    AEC_FW_data_in.slice_type = frame_level_fw_in->slice_type;
    AEC_FW_data_in.log2_culine = frame_level_fw_in->log2_culine;
    AEC_FW_data_in.lcu_cnt = frame_level_fw_in->lcu_total_cnt;

    AEC_FW_data_in.sqh_num_of_hmvp_cand = frame_level_fw_in->num_of_hmvp_cand;
    AEC_FW_data_in.sqh_umve_enable_flag = frame_level_fw_in->umve_enable_flag;
    AEC_FW_data_in.sqh_affine_enable_flag = frame_level_fw_in->affine_enable_flag;
    AEC_FW_data_in.sqh_amvr_enable_flag = frame_level_fw_in->amvr_enable_flag;
#if EXT_AMVR_HMVP
    AEC_FW_data_in.sqh_emvr_enable_flag = frame_level_fw_in->emvr_enable_flag;
#endif
    AEC_FW_data_in.rpm_num_refp[0] = frame_level_fw_in->rpm_num_refp[0];
    AEC_FW_data_in.rpm_num_refp[1] = frame_level_fw_in->rpm_num_refp[1];


    ret = aec_enc_eco_tree_64(&AEC_FW_data_in, AEC_DATA_input.x_pel, AEC_DATA_input.y_pel, 0, AEC_FW_data_in.max_cuwh, AEC_FW_data_in.max_cuwh, 0
        , NO_SPLIT, 0, 0, NO_MODE_CONS, TREE_LC, &AEC_DATA_input, &FEC_info_local);


#if PATCH_DEBUG1 == 0
    Demulate_aec(&AEC_DATA_output.bs, bs);
    if (lcu_cnt - 1 == 0)
    {
        bs->cur = bs->cur + AEC_DATA_output.bs.CurAddress;
    }
#else
    Demulate_aec(&AEC_DATA_output.bs, bs);
#endif

    for (int i = 0; i < 16; ++i)
    {
        FEC_info_local.map_ptr_map_cu_mode_above_line[AEC_DATA_input.x_lcu_idx * 16 + i] = FEC_info_local.map_ptr_map_cu_mode_inner[15 + i * 16];
        FEC_info_local.map_ptr_map_scu_above_line[AEC_DATA_input.x_lcu_idx * 16 + i] = FEC_info_local.map_ptr_map_scu_inner[15 + i * 16];
    }

    if (AEC_DATA_input.x_lcu_idx < (frame_level_fw_in->pic_width_in_lcu - 1))
    {
        AEC_DATA_input.x_lcu_idx += 1;
    }
    else
    {
        AEC_DATA_input.x_lcu_idx = 0;
        AEC_DATA_input.y_lcu_idx += 1;
    }

    //aec_com_bsw_flush(&AEC_DATA_output.bs);
    //AEC_DATA_output.bs.leftbits = 32;
    //AEC_DATA_output.bs.code = 0;
    //for (i = 0; i < AEC_DATA_output.bs_cur; i++)  bs->cur[i] = AEC_DATA_output.bs_tmp[i];
    //bs->cur = bs->cur + AEC_DATA_output.bs_cur;
    //bs->code = 0;
    //bs->leftbits = 32;

#if AEC_STAGE1_2_DEBUG  
    fclose(fpStage1);
    fclose(fpInfoS1);
    fclose(fpStream);
    fclose(fpMvd);
    fclose(fpPb);
    fclose(fpTb);
    fclose(fpPm);
    fclose(fpMvr);
    fclose(fpUmvF);
    fclose(fpUmvI);
    fclose(fpSkipI);
    fclose(fpAff);
    fclose(fpIpf);
    fclose(fpMvp);
    fclose(fpMpm);
    fclose(fpIpm);
    fclose(fpRefi);
    fclose(fpNumC);
    fclose(fpSqh);
    fclose(fpInfo);
    fclose(fpRpm);
    fclose(fpCoef);
    fclose(fpRes);
    fclose(fpFoutI);
    fclose(fpMapIn);
    fclose(fpModIn);
    fclose(fpScuAb);
    fclose(fpCuAb);
    fclose(fpTest);
    fclose(fpSplitM);
#endif  
}
#pragma optimize("", on)
#if AEC_STAGE1_2_DEBUG
void stage12sim(int x0, int y0, int cup, int cu_width, int cu_height, int cud, const int parent_split,
    int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status, AEC_input AEC_DATA_input)
{
    fprintf(fpStage1, "%8d %8d %8d %8d %8d %8d %8d %8d %8d %c %c \n", x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status);
    fwrite(&(AEC_DATA_input.lcu_cnt), sizeof(AEC_DATA_input.lcu_cnt), 1, fpInfoS1);
    fwrite(AEC_DATA_input.cu_data_split_mode, sizeof(AEC_DATA_input.cu_data_split_mode), 1, fpSplitM);
    fwrite(AEC_DATA_input.cu_data_mvd, sizeof(AEC_DATA_input.cu_data_mvd), 1, fpMvd);
    fwrite(AEC_DATA_input.cu_data_pb_part, sizeof(AEC_DATA_input.cu_data_pb_part), 1, fpPb);
    fwrite(AEC_DATA_input.cu_data_tb_part, sizeof(AEC_DATA_input.cu_data_tb_part), 1, fpTb);
    fwrite(AEC_DATA_input.cu_data_pred_mode, sizeof(AEC_DATA_input.cu_data_pred_mode), 1, fpPm);
    fwrite(AEC_DATA_input.cu_data_mvr_idx, sizeof(AEC_DATA_input.cu_data_mvr_idx), 1, fpMvr);
    fwrite(AEC_DATA_input.cu_data_umve_flag, sizeof(AEC_DATA_input.cu_data_umve_flag), 1, fpUmvF);
    fwrite(AEC_DATA_input.cu_data_umve_idx, sizeof(AEC_DATA_input.cu_data_umve_idx), 1, fpUmvI);
    fwrite(AEC_DATA_input.cu_data_skip_idx, sizeof(AEC_DATA_input.cu_data_skip_idx), 1, fpSkipI);
    fwrite(AEC_DATA_input.cu_data_affine_flag, sizeof(AEC_DATA_input.cu_data_affine_flag), 1, fpAff);
    fwrite(AEC_DATA_input.cu_data_ipf_flag, sizeof(AEC_DATA_input.cu_data_ipf_flag), 1, fpIpf);
    fwrite(AEC_DATA_input.cu_data_mvp_from_hmvp_flag, sizeof(AEC_DATA_input.cu_data_mvp_from_hmvp_flag), 1, fpMvp);
    fwrite(AEC_DATA_input.cu_data_mpm, sizeof(AEC_DATA_input.cu_data_mpm), 1, fpMpm);
    fwrite(AEC_DATA_input.cu_data_ipm, sizeof(AEC_DATA_input.cu_data_ipm), 1, fpIpm);
    fwrite(AEC_DATA_input.cu_data_refi, sizeof(AEC_DATA_input.cu_data_refi), 1, fpRefi);
    fwrite(AEC_DATA_input.cu_data_num_nz_coef, sizeof(AEC_DATA_input.cu_data_num_nz_coef), 1, fpNumC);

    fwrite(&(AEC_DATA_input.sqh_umve_enable_flag), sizeof(AEC_DATA_input.sqh_umve_enable_flag), 1, fpSqh);
    fwrite(&(AEC_DATA_input.sqh_num_of_hmvp_cand), sizeof(AEC_DATA_input.sqh_num_of_hmvp_cand), 1, fpSqh);
    fwrite(&(AEC_DATA_input.sqh_affine_enable_flag), sizeof(AEC_DATA_input.sqh_affine_enable_flag), 1, fpSqh);
    fwrite(&(AEC_DATA_input.sqh_amvr_enable_flag), sizeof(AEC_DATA_input.sqh_amvr_enable_flag), 1, fpSqh);
#if EXT_AMVR_HMVP
    fwrite(&(AEC_DATA_input.sqh_emvr_enable_flag), sizeof(AEC_DATA_input.sqh_emvr_enable_flag), 1, fpSqh);
#endif  
#if DT_PARTITION
    fwrite(&(AEC_DATA_input.sqh_dt_intra_enable_flag), sizeof(AEC_DATA_input.sqh_dt_intra_enable_flag), 1, fpSqh);
#endif
    fwrite(&(AEC_DATA_input.sqh_position_based_transform_enable_flag), sizeof(AEC_DATA_input.sqh_position_based_transform_enable_flag), 1, fpSqh);
#if TSCPM
    fwrite(&(AEC_DATA_input.sqh_tscpm_enable_flag), sizeof(AEC_DATA_input.sqh_tscpm_enable_flag), 1, fpSqh);
#endif
    fwrite(&(AEC_DATA_input.sqh_ipf_enable_flag), sizeof(AEC_DATA_input.sqh_ipf_enable_flag), 1, fpSqh);
    fwrite(&(AEC_DATA_input.sqh_sample_adaptive_offset_enable_flag), sizeof(AEC_DATA_input.sqh_sample_adaptive_offset_enable_flag), 1, fpSqh);
    fwrite(&(AEC_DATA_input.info_pic_width_in_scu), sizeof(AEC_DATA_input.info_pic_width_in_scu), 1, fpInfo);
    fwrite(&(AEC_DATA_input.info_pic_width_in_lcu), sizeof(AEC_DATA_input.info_pic_width_in_lcu), 1, fpInfo);
    fwrite(&(AEC_DATA_input.info_max_cuwh), sizeof(AEC_DATA_input.info_max_cuwh), 1, fpInfo);
    fwrite(&(AEC_DATA_input.info_pic_width), sizeof(AEC_DATA_input.info_pic_width), 1, fpInfo);
    fwrite(&(AEC_DATA_input.info_pic_height), sizeof(AEC_DATA_input.info_pic_height), 1, fpInfo);
    fwrite(&(AEC_DATA_input.pic_header_slice_type), sizeof(AEC_DATA_input.pic_header_slice_type), 1, fpInfo);
    fwrite(&(AEC_DATA_input.rpm_num_refp), sizeof(AEC_DATA_input.rpm_num_refp), 1, fpRpm);
    fwrite(AEC_DATA_input.coef, sizeof(AEC_DATA_input.coef), 1, fpCoef);
    fwrite(&(AEC_DATA_input.x_lcu), sizeof(AEC_DATA_input.x_lcu), 1, fpInfo);
    fwrite(&(AEC_DATA_input.y_lcu), sizeof(AEC_DATA_input.y_lcu), 1, fpInfo);
    fwrite(&(AEC_DATA_input.x_pel), sizeof(AEC_DATA_input.x_pel), 1, fpInfo);
    fwrite(&(AEC_DATA_input.y_pel), sizeof(AEC_DATA_input.y_pel), 1, fpInfo);
    fwrite(&(AEC_DATA_input.lcu_num), sizeof(AEC_DATA_input.lcu_num), 1, fpInfo);
    fwrite(&(AEC_DATA_input.ptr), sizeof(AEC_DATA_input.ptr), 1, fpInfo);
    fwrite(&(AEC_DATA_input.log2_culine), sizeof(AEC_DATA_input.log2_culine), 1, fpInfo);
    fwrite(AEC_DATA_input.modeIdc, sizeof(AEC_DATA_input.modeIdc), 1, fpInfo);
    fwrite(AEC_DATA_input.typeIdc, sizeof(AEC_DATA_input.typeIdc), 1, fpInfo);
    fwrite(AEC_DATA_input.startBand, sizeof(AEC_DATA_input.startBand), 1, fpInfo);
    fwrite(AEC_DATA_input.startBand2, sizeof(AEC_DATA_input.startBand2), 1, fpInfo);
    fwrite(AEC_DATA_input.deltaband, sizeof(AEC_DATA_input.deltaband), 1, fpInfo);
    fwrite(AEC_DATA_input.slice_sao_enable, sizeof(AEC_DATA_input.slice_sao_enable), 1, fpInfo);
    fwrite(&(AEC_DATA_input.MergeLeftAvail), sizeof(AEC_DATA_input.MergeLeftAvail), 1, fpInfo);
    fwrite(&(AEC_DATA_input.MergeUpAvail), sizeof(AEC_DATA_input.MergeUpAvail), 1, fpInfo);
    fwrite(AEC_DATA_input.offset, sizeof(AEC_DATA_input.offset), 1, fpInfo);
    //fwrite(&(AEC_DATA_input.lcu_cnt), sizeof(AEC_DATA_input.lcu_cnt), 1, fpInfo);
    char fetch_x_c[8];
    char fetch_y_c[8];
    char fetch_abo_i_c[8];
    char fetch_curr_i_c[8];
    sprintf(fetch_x_c, "%d", AEC_DATA_input.fetch_output_me_line_map_ptr_min_scu_x);
    sprintf(fetch_y_c, "%d", AEC_DATA_input.fetch_output_me_line_map_ptr_min_scu_y);
    sprintf(fetch_abo_i_c, "%d", AEC_DATA_input.fetch_output_me_line_map_ptr_above_line_idx);
    sprintf(fetch_curr_i_c, "%d", AEC_DATA_input.fetch_output_me_line_map_ptr_curr_ctu_idx);
    fprintf(fpFoutI, "%8s %8s %8s %8s \n", fetch_x_c, fetch_y_c, fetch_abo_i_c, fetch_curr_i_c);
    fwrite(AEC_DATA_input.fetch_output_me_line_map_ptr_map_scu_inner, sizeof(AEC_DATA_input.fetch_output_me_line_map_ptr_map_scu_inner), 1, fpMapIn);
    fwrite(AEC_DATA_input.fetch_output_me_line_map_ptr_map_cu_mode_inner, sizeof(AEC_DATA_input.fetch_output_me_line_map_ptr_map_cu_mode_inner), 1, fpModIn);
    fwrite(AEC_DATA_input.fetch_output_me_line_map_ptr_map_scu_above_line, sizeof(AEC_DATA_input.fetch_output_me_line_map_ptr_map_scu_above_line), 1, fpScuAb);
    fwrite(AEC_DATA_input.fetch_output_me_line_map_ptr_map_cu_mode_above_line, sizeof(AEC_DATA_input.fetch_output_me_line_map_ptr_map_cu_mode_above_line), 1, fpCuAb);


}
void stage1sim(int x0, int y0, int cup, int cu_width, int cu_height, int cud, const int parent_split,
    int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status)
{
    fprintf(fpStage1, "%8d %8d %8d %8d %8d %8d %8d %8d %8d %c %c \n", x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status);
    fwrite(&(AEC_DATA_input.lcu_num), sizeof(AEC_DATA_input.lcu_num), 1, fpInfoS1);
    fwrite(&(AEC_DATA_input.sqh_sample_adaptive_offset_enable_flag), sizeof(AEC_DATA_input.sqh_sample_adaptive_offset_enable_flag), 1, fpInfoS1);
    fwrite(&(AEC_DATA_input.info_max_cuwh), sizeof(AEC_DATA_input.info_max_cuwh), 1, fpInfoS1);
    fwrite(&(AEC_DATA_input.pic_header_slice_type), sizeof(AEC_DATA_input.pic_header_slice_type), 1, fpInfoS1);
    fwrite(&(AEC_DATA_input.log2_culine), sizeof(AEC_DATA_input.log2_culine), 1, fpInfoS1);
    fwrite(&(AEC_DATA_input.info_pic_width), sizeof(AEC_DATA_input.info_pic_width), 1, fpInfoS1);
    fwrite(&(AEC_DATA_input.info_pic_height), sizeof(AEC_DATA_input.info_pic_height), 1, fpInfoS1);
    fwrite(&(AEC_DATA_input.lcu_cnt), sizeof(AEC_DATA_input.lcu_cnt), 1, fpInfoS1);
    fwrite(AEC_DATA_input.cu_data_split_mode, sizeof(AEC_DATA_input.cu_data_split_mode), 1, fpSplitM);
}
void stage2sim(int type, int x0, int y0, int cup, int cu_width, int cu_height, int cud, const int parent_split,
    int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status)
{
    fprintf(fpStream, "%8d %8d %8d %8d %8d %8d %8d %8d %8d %8d %c %c \n", type, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status);
    fprintf(fpTest, "cons_pred_mode = %d \n", cons_pred_mode);
    fwrite(AEC_DATA_input.cu_data_mvd, sizeof(AEC_DATA_input.cu_data_mvd), 1, fpMvd);
    fwrite(AEC_DATA_input.cu_data_pb_part, sizeof(AEC_DATA_input.cu_data_pb_part), 1, fpPb);
    fwrite(AEC_DATA_input.cu_data_tb_part, sizeof(AEC_DATA_input.cu_data_tb_part), 1, fpTb);
    fwrite(AEC_DATA_input.cu_data_pred_mode, sizeof(AEC_DATA_input.cu_data_pred_mode), 1, fpPm);
    fwrite(AEC_DATA_input.cu_data_mvr_idx, sizeof(AEC_DATA_input.cu_data_mvr_idx), 1, fpMvr);
    fwrite(AEC_DATA_input.cu_data_umve_flag, sizeof(AEC_DATA_input.cu_data_umve_flag), 1, fpUmvF);
    fwrite(AEC_DATA_input.cu_data_umve_idx, sizeof(AEC_DATA_input.cu_data_umve_idx), 1, fpUmvI);
    fwrite(AEC_DATA_input.cu_data_skip_idx, sizeof(AEC_DATA_input.cu_data_skip_idx), 1, fpSkipI);
    fwrite(AEC_DATA_input.cu_data_affine_flag, sizeof(AEC_DATA_input.cu_data_affine_flag), 1, fpAff);
    fwrite(AEC_DATA_input.cu_data_ipf_flag, sizeof(AEC_DATA_input.cu_data_ipf_flag), 1, fpIpf);
    fwrite(AEC_DATA_input.cu_data_mvp_from_hmvp_flag, sizeof(AEC_DATA_input.cu_data_mvp_from_hmvp_flag), 1, fpMvp);
    fwrite(AEC_DATA_input.cu_data_mpm, sizeof(AEC_DATA_input.cu_data_mpm), 1, fpMpm);
    fwrite(AEC_DATA_input.cu_data_ipm, sizeof(AEC_DATA_input.cu_data_ipm), 1, fpIpm);
    fwrite(AEC_DATA_input.cu_data_refi, sizeof(AEC_DATA_input.cu_data_refi), 1, fpRefi);
    fwrite(AEC_DATA_input.cu_data_num_nz_coef, sizeof(AEC_DATA_input.cu_data_num_nz_coef), 1, fpNumC);

    fwrite(&(AEC_DATA_input.sqh_umve_enable_flag), sizeof(AEC_DATA_input.sqh_umve_enable_flag), 1, fpSqh);
    fwrite(&(AEC_DATA_input.sqh_num_of_hmvp_cand), sizeof(AEC_DATA_input.sqh_num_of_hmvp_cand), 1, fpSqh);
    fwrite(&(AEC_DATA_input.sqh_affine_enable_flag), sizeof(AEC_DATA_input.sqh_affine_enable_flag), 1, fpSqh);
    fwrite(&(AEC_DATA_input.sqh_amvr_enable_flag), sizeof(AEC_DATA_input.sqh_amvr_enable_flag), 1, fpSqh);
#if EXT_AMVR_HMVP
    fwrite(&(AEC_DATA_input.sqh_emvr_enable_flag), sizeof(AEC_DATA_input.sqh_emvr_enable_flag), 1, fpSqh);
#endif  
#if DT_PARTITION
    fwrite(&(AEC_DATA_input.sqh_dt_intra_enable_flag), sizeof(AEC_DATA_input.sqh_dt_intra_enable_flag), 1, fpSqh);
#endif
    fwrite(&(AEC_DATA_input.sqh_position_based_transform_enable_flag), sizeof(AEC_DATA_input.sqh_position_based_transform_enable_flag), 1, fpSqh);
#if TSCPM
    fwrite(&(AEC_DATA_input.sqh_tscpm_enable_flag), sizeof(AEC_DATA_input.sqh_tscpm_enable_flag), 1, fpSqh);
#endif
    fwrite(&(AEC_DATA_input.sqh_ipf_enable_flag), sizeof(AEC_DATA_input.sqh_ipf_enable_flag), 1, fpSqh);
    fwrite(&(AEC_DATA_input.sqh_sample_adaptive_offset_enable_flag), sizeof(AEC_DATA_input.sqh_sample_adaptive_offset_enable_flag), 1, fpSqh);
    fwrite(&(AEC_DATA_input.info_pic_width_in_scu), sizeof(AEC_DATA_input.info_pic_width_in_scu), 1, fpInfo);
    fwrite(&(AEC_DATA_input.info_pic_width_in_lcu), sizeof(AEC_DATA_input.info_pic_width_in_lcu), 1, fpInfo);
    fwrite(&(AEC_DATA_input.info_max_cuwh), sizeof(AEC_DATA_input.info_max_cuwh), 1, fpInfo);
    fwrite(&(AEC_DATA_input.info_pic_width), sizeof(AEC_DATA_input.info_pic_width), 1, fpInfo);
    fwrite(&(AEC_DATA_input.info_pic_height), sizeof(AEC_DATA_input.info_pic_height), 1, fpInfo);
    fwrite(&(AEC_DATA_input.pic_header_slice_type), sizeof(AEC_DATA_input.pic_header_slice_type), 1, fpInfo);
    fwrite(&(AEC_DATA_input.rpm_num_refp), sizeof(AEC_DATA_input.rpm_num_refp), 1, fpRpm);
    fwrite(AEC_DATA_input.coef, sizeof(AEC_DATA_input.coef), 1, fpCoef);
    fwrite(&(AEC_DATA_input.x_lcu), sizeof(AEC_DATA_input.x_lcu), 1, fpInfo);
    fwrite(&(AEC_DATA_input.y_lcu), sizeof(AEC_DATA_input.y_lcu), 1, fpInfo);
    fwrite(&(AEC_DATA_input.x_pel), sizeof(AEC_DATA_input.x_pel), 1, fpInfo);
    fwrite(&(AEC_DATA_input.y_pel), sizeof(AEC_DATA_input.y_pel), 1, fpInfo);
    fwrite(&(AEC_DATA_input.lcu_num), sizeof(AEC_DATA_input.lcu_num), 1, fpInfo);
    fwrite(&(AEC_DATA_input.ptr), sizeof(AEC_DATA_input.ptr), 1, fpInfo);
    fwrite(&(AEC_DATA_input.log2_culine), sizeof(AEC_DATA_input.log2_culine), 1, fpInfo);
    fwrite(AEC_DATA_input.modeIdc, sizeof(AEC_DATA_input.modeIdc), 1, fpInfo);
    fwrite(AEC_DATA_input.typeIdc, sizeof(AEC_DATA_input.typeIdc), 1, fpInfo);
    fwrite(AEC_DATA_input.startBand, sizeof(AEC_DATA_input.startBand), 1, fpInfo);
    fwrite(AEC_DATA_input.startBand2, sizeof(AEC_DATA_input.startBand2), 1, fpInfo);
    fwrite(AEC_DATA_input.deltaband, sizeof(AEC_DATA_input.deltaband), 1, fpInfo);
    fwrite(AEC_DATA_input.slice_sao_enable, sizeof(AEC_DATA_input.slice_sao_enable), 1, fpInfo);
    fwrite(&(AEC_DATA_input.MergeLeftAvail), sizeof(AEC_DATA_input.MergeLeftAvail), 1, fpInfo);
    fwrite(&(AEC_DATA_input.MergeUpAvail), sizeof(AEC_DATA_input.MergeUpAvail), 1, fpInfo);
    fwrite(AEC_DATA_input.offset, sizeof(AEC_DATA_input.offset), 1, fpInfo);
    //fwrite(&(AEC_DATA_input.lcu_cnt), sizeof(AEC_DATA_input.lcu_cnt), 1, fpInfo);
    char fetch_x_c[8];
    char fetch_y_c[8];
    char fetch_abo_i_c[8];
    char fetch_curr_i_c[8];
    sprintf(fetch_x_c, "%d", fetch_output.me_line_map_ptr->min_scu_x);
    sprintf(fetch_y_c, "%d", fetch_output.me_line_map_ptr->min_scu_y);
    sprintf(fetch_abo_i_c, "%d", fetch_output.me_line_map_ptr->above_line_idx);
    sprintf(fetch_curr_i_c, "%d", fetch_output.me_line_map_ptr->curr_ctu_idx);
    fprintf(fpFoutI, "%8s %8s %8s %8s \n", fetch_x_c, fetch_y_c, fetch_abo_i_c, fetch_curr_i_c);
    for (int i = 0; i < 2; ++i) {
        for (int j = 0; j < 16; ++j) {
            for (int idx = 0; idx < 16; ++idx) {
                //char map_in_c[16];
                //sprintf(map_in_c, "%u", fetch_output.me_line_map_ptr->map_scu_inner[i][j][idx]);
                //fprintf(fpMapIn, "%16s ", map_in_c);
                fwrite(&(fetch_output.me_line_map_ptr->map_scu_inner[i][j][idx]), sizeof(fetch_output.me_line_map_ptr->map_scu_inner[i][j][idx]), 1, fpMapIn);
            }
            //fprintf(fpMapIn, "\n");
        }
    }
    //fwrite(fetch_output.me_line_map_ptr->map_scu_inner, sizeof(fetch_output.me_line_map_ptr->map_scu_inner), 1, fpMapIn);
    for (int i = 0; i < 2; ++i) {
        for (int j = 0; j < 16; ++j) {
            for (int idx = 0; idx < 16; ++idx) {
                //char mod_in_c[16];
                //sprintf(mod_in_c, "%u", fetch_output.me_line_map_ptr->map_cu_mode_inner[i][j][idx]);
                //fprintf(fpModIn, "%16s ", mod_in_c);
                fwrite(&(fetch_output.me_line_map_ptr->map_cu_mode_inner[i][j][idx]), sizeof(fetch_output.me_line_map_ptr->map_cu_mode_inner[i][j][idx]), 1, fpModIn);
            }
            //fprintf(fpModIn, "\n");
        }
    }
    //fwrite(fetch_output.me_line_map_ptr->map_cu_mode_inner, sizeof(fetch_output.me_line_map_ptr->map_cu_mode_inner), 1, fpModIn);
    for (int i = 0; i < 2; ++i) {
        for (int j = 0; j < 960; ++j) {
            fwrite(&(fetch_output.me_line_map_ptr->map_scu_above_line[i][j]), sizeof(fetch_output.me_line_map_ptr->map_scu_above_line[i][j]), 1, fpScuAb);
            fwrite(&(fetch_output.me_line_map_ptr->map_cu_mode_above_line[i][j]), sizeof(fetch_output.me_line_map_ptr->map_cu_mode_above_line[i][j]), 1, fpCuAb);
            //char scu_ab_c[16];
            //char cu_ab_c[16];
            //sprintf(scu_ab_c, "%u", fetch_output.me_line_map_ptr->map_scu_above_line[i][j]);
            //sprintf(cu_ab_c, "%u", fetch_output.me_line_map_ptr->map_cu_mode_above_line[i][j]);
            //fprintf(fpScuAb, "%16s", scu_ab_c);
            //fprintf(fpCuAb, "%16s", cu_ab_c);

        }
        //fprintf(fpScuAb, "\n");
        //fprintf(fpCuAb, "\n");
    }
    //fwrite(fetch_output.me_line_map_ptr->map_scu_above_line, sizeof(fetch_output.me_line_map_ptr->map_scu_above_line), 1, fpScuAb);
    //fwrite(fetch_output.me_line_map_ptr->map_cu_mode_above_line, sizeof(fetch_output.me_line_map_ptr->map_cu_mode_above_line), 1, fpCuAb);
}
void stage3sim(int num, u8 method0, u32 symbol0, SBAC_CTX_MODEL model1_t0, SBAC_CTX_MODEL model2_t0,
    u8 method1, u32 symbol1, SBAC_CTX_MODEL model1_t1, SBAC_CTX_MODEL model2_t1,
    u8 method2, u32 symbol2, SBAC_CTX_MODEL model1_t2, SBAC_CTX_MODEL model2_t2,
    u8 method3, u32 symbol3, SBAC_CTX_MODEL model1_t3, SBAC_CTX_MODEL model2_t3)
{
    char method0_c[8];
    char symbol0_c[32];
    char m01_c[8];
    char m02_c[8];
    sprintf(method0_c, "%d", method0);
    //sprintf(symbol0_c, "%d", symbol0 & 0x0001);
    sprintf(symbol0_c, "%d", symbol0);
    sprintf(m01_c, "%d", model1_t0);
    sprintf(m02_c, "%d", model2_t0);

    char method1_c[8];
    char symbol1_c[32];
    char m11_c[8];
    char m12_c[8];
    sprintf(method1_c, "%d", method1);
    //sprintf(symbol1_c, "%d", symbol1 & 0x0001);
    sprintf(symbol1_c, "%d", symbol1);
    sprintf(m11_c, "%d", model1_t1);
    sprintf(m12_c, "%d", model2_t1);

    char method2_c[8];
    char symbol2_c[32];
    char m21_c[8];
    char m22_c[8];
    sprintf(method2_c, "%d", method2);
    //sprintf(symbol2_c, "%d", symbol2 & 0x0001);
    sprintf(symbol2_c, "%d", symbol2);
    sprintf(m21_c, "%d", model1_t2);
    sprintf(m22_c, "%d", model2_t2);

    char method3_c[8];
    char symbol3_c[32];
    char m31_c[8];
    char m32_c[8];
    sprintf(method3_c, "%d", method3);
    //sprintf(symbol3_c, "%d", symbol3 & 0x0001);
    sprintf(symbol3_c, "%d", symbol3);
    sprintf(m31_c, "%d", model1_t3);
    sprintf(m32_c, "%d", model2_t3);
    if (num != 0)
    {
        fprintf(fpRes, "%8s %8s %8s %8s\n", m02_c,
            m01_c,
            symbol0_c,
            method0_c
        );
    }
    if (num > 1)
    {
        fprintf(fpRes, "%8s %8s %8s %8s\n", m12_c,
            m11_c,
            symbol1_c,
            method1_c
        );
    }
    if (num > 2)
    {
        fprintf(fpRes, "%8s %8s %8s %8s\n", m22_c,
            m21_c,
            symbol2_c,
            method2_c
        );
    }

    if (num > 3)
    {
        fprintf(fpRes, "%8s %8s %8s %8s\n", m32_c,
            m31_c,
            symbol3_c,
            method3_c
        );
    }

}
#endif
#endif

//PROFILE_PHASE2
static int is_cu_nz(int nz[MAX_NUM_TB][N_C])
{
    int cu_nz = 0;
    int i, j;

    for (i = 0; i < MAX_NUM_TB; i++)
    {
        for (j = 0; j < N_C; j++)
        {
            cu_nz |= nz[i][j];
        }
    }
    return cu_nz ? 1 : 0;
}

static int is_cu_plane_nz(int nz[MAX_NUM_TB][N_C], int plane)
{
    int cu_nz = 0;
    int i;

    for (i = 0; i < MAX_NUM_TB; i++)
    {
        cu_nz |= nz[i][plane];
    }
    return cu_nz ? 1 : 0;
}

static void cu_nz_cln(int dst[MAX_NUM_TB][N_C])
{
    memset(dst, 0, sizeof(int) * MAX_NUM_TB * N_C);
}
#if PMC_TEMP
int com_is_mcpm(s8 ipm_c)
{
#if ENHANCE_LT_MODE
    int bMcpm = ipm_c == IPD_MCPM_C || ipm_c == IPD_MCPM_L_C || ipm_c == IPD_MCPM_T_C || ipm_c == IPD_MCPM_LT_C;
#else
    int bMcpm = ipm_c == IPD_MCPM_C || ipm_c == IPD_MCPM_L_C || ipm_c == IPD_MCPM_T_C;
#endif
    return bMcpm;
}
#endif
#if EPMC_TEMP
int com_is_emcpm(s8 ipm_c)
{
#if ENHANCE_LT_MODE
    int bEmcpm = (ipm_c == IPD_EMCPM_C || ipm_c == IPD_EMCPM_L_C || ipm_c == IPD_EMCPM_T_C || ipm_c == IPD_EMCPM2_C || ipm_c == IPD_EMCPM2_L_C || ipm_c == IPD_EMCPM2_T_C || ipm_c == IPD_EMCPM_LT_C || ipm_c == IPD_EMCPM2_LT_C);
#else
    int bEmcpm = (ipm_c == IPD_EMCPM_C || ipm_c == IPD_EMCPM_L_C || ipm_c == IPD_EMCPM_T_C || ipm_c == IPD_EMCPM2_C || ipm_c == IPD_EMCPM2_L_C || ipm_c == IPD_EMCPM2_T_C);
#endif
    return bEmcpm;
}
#endif
#if SBT_TEMP
u8 com_sbt_allow(COM_MODE* mod_info_curr, int tool_sbt, int tree_status)
{
    int cuw = 1 << mod_info_curr->cu_width_log2;
    int cuh = 1 << mod_info_curr->cu_height_log2;
    int pred_mode = mod_info_curr->cu_mode;
    int min_size = 8;
    int max_size = 1 << MAX_TR_LOG2;
    u8  mode_hori, mode_vert, mode_hori_quad, mode_vert_quad;

    if (!tool_sbt || (pred_mode == MODE_INTRA || pred_mode == MODE_IBC) || (cuw > max_size || cuh > max_size) || tree_status == TREE_C)
    {
        mode_hori = mode_vert = mode_hori_quad = mode_vert_quad = 0;
    }
#if INTERPF
    else if (mod_info_curr->inter_filter_flag)
    {
        mode_hori = mode_vert = mode_hori_quad = mode_vert_quad = 0;
    }
#endif
#if IPC_TEMP
    else if (mod_info_curr->ipc_flag)
    {
        mode_hori = mode_vert = mode_hori_quad = mode_vert_quad = 0;
    }
#endif
    else
    {
        mode_vert = cuw >= min_size ? 1 : 0;
        mode_vert_quad = cuw >= min_size * 2 ? 1 : 0;
        mode_hori = cuh >= min_size ? 1 : 0;
        mode_hori_quad = cuh >= min_size * 2 ? 1 : 0;
    }

#if SBT_RESTRICT
    int cuw_log2 = mod_info_curr->cu_width_log2;
    int cuh_log2 = mod_info_curr->cu_height_log2;
    if (abs(cuw_log2 - cuh_log2) >= 2)
    {
        if (cuw_log2 > cuh_log2)
        {
            mode_hori_quad = 0;
        }
        else
        {
            mode_vert_quad = 0;
        }
    }
    if (abs(cuw_log2 - cuh_log2) >= 3)
    {
        if (cuw_log2 > cuh_log2)
        {
            mode_hori = 0;
        }
        else
        {
            mode_vert = 0;
        }
    }
#endif

    return (mode_vert << 0) + (mode_hori << 1) + (mode_vert_quad << 2) + (mode_hori_quad << 3);
}
void get_sbt_tb_size(u8 sbt_info, int comp, int log2_cuw, int log2_cuh, int* log2_tuw, int* log2_tuh)
{
    u8 sbt_idx = get_sbt_idx(sbt_info);
    if (sbt_info == 0 || comp != Y_C)
    {
        *log2_tuw = log2_cuw;
        *log2_tuh = log2_cuh;
        return;
    }
    assert(sbt_idx <= 4);
    if (is_sbt_horizontal(sbt_idx))
    {
        *log2_tuw = log2_cuw;
        *log2_tuh = is_sbt_quad_size(sbt_idx) ? log2_cuh - 2 : log2_cuh - 1;
    }
    else
    {
        *log2_tuw = is_sbt_quad_size(sbt_idx) ? log2_cuw - 2 : log2_cuw - 1;
        *log2_tuh = log2_cuh;
    }
}

#endif
#if USE_SP_TEMP
void copy_fap_unpred_pix_motion_table(pel* motion_dst, u8* cnt_cands_dst, const pel* motion_src, const u8 cnt_cands_src)
{
    *cnt_cands_dst = cnt_cands_src;
    memcpy(motion_dst, motion_src, sizeof(pel) * cnt_cands_src);
}
#endif
const int com_tbl_qp_chroma_adjust[64] =
{
    //this table aligned with spec
    0,  1,  2,  3,  4,  5,  6,  7,  8,  9,
    10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
    20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
    30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
    40, 41, 42, 42, 43, 43, 44, 44, 45, 45,
    46, 46, 47, 47, 48, 48, 48, 49, 49, 49,
    50, 50, 50, 51
};

#if AWP_TEMP || SAWP_TEMP
const u8 com_tbl_logmap[257] = { 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                                 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                                 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
                                 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
                                 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7,
                                 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                                 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                                 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                                 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                                 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8 };
#if BAWP
u8 com_tbl_bawp_num[MAX_AWP_SIZE_LOG2 - MIN_AWP_SIZE_LOG2 + 1][MAX_AWP_SIZE_LOG2 - MIN_AWP_SIZE_LOG2 + 1] =
{
   {  6, 12, 22, 22, },
   { 12, 18, 24, 24, },
   { 21, 25, 27, 27, },
   { 22, 24, 27, 28, },
};
u8 com_tbl_bawp_mode[MAX_AWP_SIZE_LOG2 - MIN_AWP_SIZE_LOG2 + 1][MAX_AWP_SIZE_LOG2 - MIN_AWP_SIZE_LOG2 + 1][28] =
{
    { { 8, 13, 14, 15, 16, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, },
      { 4,  5,  6, 12, 13, 14, 15, 18, 20, 21, 22, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, },
      { 0,  1,  2,  4,  5,  6,  8,  9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26,  0,  0,  0,  0,  0,  0, },
      { 0,  1,  2,  4,  5,  6,  8,  9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26,  0,  0,  0,  0,  0,  0, }, },
    { { 3,  4,  6, 12, 13, 14, 15, 18, 20, 24, 26, 27,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, },
      { 2,  3,  4,  5,  6,  8, 12, 13, 14, 15, 16, 18, 20, 21, 22, 24, 26, 27,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, },
      { 0,  1,  2,  3,  4,  5,  6,  8,  9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27,  0,  0,  0,  0, },
      { 0,  1,  2,  3,  4,  5,  6,  8,  9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27,  0,  0,  0,  0, }, },
    { { 0,  2,  3,  4,  6,  7,  8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 24, 26, 27,  0,  0,  0,  0,  0,  0,  0, },
      { 0,  1,  2,  3,  4,  6,  7,  8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27,  0,  0,  0, },
      { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27,  0, },
      { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27,  0, }, },
    { { 0,  2,  3,  4,  6,  7,  8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 26, 27,  0,  0,  0,  0,  0,  0, },
      { 0,  1,  2,  3,  4,  6,  7,  8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27,  0,  0,  0,  0, },
      { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27,  0, },
      { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, }, },
};
#endif
#endif
// #if CUDQP
// int com_is_cu_dqp(COM_INFO_HLS* info)
// {
//     return !info->shext.fixed_slice_qp_flag && info->pic_header.cu_delta_qp_flag;
// }
// #endif
static int cu_init(ENC_CU_DATA* ctu_map_cu_data, u8 pred_mode, int tb_part, ENC_CTX_HLS* ctx, AEC_inner* AEC_DATA_inner_tmp, COM_MODE* mod_info_curr, int x, int y, int cup, int cu_width, int cu_height, u32 map_scu_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], int min_scu_x, int min_scu_y)
{
    ENC_CU_DATA* cu_data = ctu_map_cu_data;
    //COM_MODE* mod_info_curr = &ctx->core->mod_info_curr;
    mod_info_curr->cu_width = cu_width;
    mod_info_curr->cu_height = cu_height;
    mod_info_curr->cu_width_log2 = CONV_LOG2(cu_width);
    mod_info_curr->cu_height_log2 = CONV_LOG2(cu_height);
    mod_info_curr->x_scu = PEL2SCU(x);
    mod_info_curr->y_scu = PEL2SCU(y);
    mod_info_curr->scup = (mod_info_curr->y_scu * ctx->info.pic_width_in_scu) + mod_info_curr->x_scu;
#if SBT_TEMP //platform fix
    mod_info_curr->cu_mode = pred_mode;
#endif
    AEC_DATA_inner_tmp->skip_flag = 0;
    mod_info_curr->cu_mode = pred_mode;
#if USE_IBC_TEMP
    // cu_data->ibc_flag[cup] = 0;
    // mod_info_curr->ibc_flag = cu_data->ibc_flag[cup];
    mod_info_curr->ibc_flag = 0;
#endif

    mod_info_curr->affine_flag = cu_data->affine_flag[cup];
#if AFFINE_UMVE_TEMP
    mod_info_curr->affine_umve_flag = cu_data->affine_umve_flag[cup];
#endif
#if SMVD
    // cu_data->smvd_flag[cup] = 0;
    // mod_info_curr->smvd_flag = cu_data->smvd_flag[cup];
    mod_info_curr->smvd_flag = 0;
#endif
#if ETMVP_TEMP
    // cu_data->etmvp_flag[cup] = 0;
    // mod_info_curr->etmvp_flag = cu_data->etmvp_flag[cup];
    mod_info_curr->etmvp_flag = 0;
#endif
#if AWP_TEMP
    // cu_data->awp_flag[cup] = 0;
    // mod_info_curr->awp_flag = cu_data->awp_flag[cup];
    mod_info_curr->awp_flag = 0;
#endif
#if SAWP_TEMP
    // cu_data->sawp_flag[cup] = 0;
    // mod_info_curr->sawp_flag = cu_data->sawp_flag[cup];
    mod_info_curr->sawp_flag = 0;
#endif
#if TB_SPLIT_EXT
    mod_info_curr->pb_part = cu_data->pb_part[cup];
    mod_info_curr->tb_part = tb_part;
#endif
#if SBT_TEMP
    mod_info_curr->sbt_info = 0;// ctx->tree_status == TREE_C ? 0 : MCU_GET_SBT_INFO(cu_data->map_pb_tb_part[cup]);
#endif
// #if CUDQP
//     if (com_is_cu_dqp(&ctx->info))
//     {
//         if (AEC_DATA_inner_tmp->tree_status == TREE_C)
//         {
//             int cu_w_scu = PEL2SCU(1 << mod_info_curr->cu_width_log2);
//             int cu_h_scu = PEL2SCU(1 << mod_info_curr->cu_height_log2);
//             int luma_scup = mod_info_curr->x_scu + (cu_w_scu - 1) + (mod_info_curr->y_scu + (cu_h_scu - 1)) * ctx->info.pic_width_in_scu;
//             AEC_DATA_inner_tmp->qp_y = MCU_GET_QP(map_scu_inner[mod_info_curr->x_scu - min_scu_x + cu_w_scu - 1][mod_info_curr->y_scu - min_scu_y + cu_h_scu - 1]);
//         }
//         else
//         {
//             assert(cup < 256);
//             //AEC_DATA_inner_tmp->qp_y = MCU_GET_QP(/*cu_data->map_scu[cup]*/ctx->ctu_map_cu_data_luma.map_scu[cup]);
//             AEC_DATA_inner_tmp->qp_y = MCU_GET_QP(/*cu_data->map_scu[cup]*/ctu_map_cu_data->map_scu[cup]);
//         }
//         assert(AEC_DATA_inner_tmp->qp_y >= 0 && AEC_DATA_inner_tmp->qp_y <= MAX_QUANT_BASE + ctx->info.qp_offset_bit_depth);

//         //adjust chroma qp
//         COM_PIC_HEADER* pic_header = &ctx->info.pic_header;
//         int adj_qp_cb = AEC_DATA_inner_tmp->qp_y + pic_header->chroma_quant_param_delta_cb - ctx->info.qp_offset_bit_depth;
//         int adj_qp_cr = AEC_DATA_inner_tmp->qp_y + pic_header->chroma_quant_param_delta_cr - ctx->info.qp_offset_bit_depth;
// #if PMC_TEMP || EPMC_TEMP
//         int adj_qp_cr_pmc = adj_qp_cr + V_QP_OFFSET;
//         adj_qp_cr_pmc = COM_CLIP(adj_qp_cr_pmc, MIN_QUANT - 16, MAX_QUANT_BASE);
//         if (adj_qp_cr_pmc >= 0)
//         {
//             adj_qp_cr_pmc = com_tbl_qp_chroma_adjust[COM_MIN(MAX_QUANT_BASE, adj_qp_cr_pmc)];
//         }
//         AEC_DATA_inner_tmp->qp_v_pmc = COM_CLIP(adj_qp_cr_pmc + ctx->info.qp_offset_bit_depth, MIN_QUANT, MAX_QUANT_BASE + ctx->info.qp_offset_bit_depth);
// #endif
//         adj_qp_cb = COM_CLIP(adj_qp_cb, MIN_QUANT - 16, MAX_QUANT_BASE);
//         adj_qp_cr = COM_CLIP(adj_qp_cr, MIN_QUANT - 16, MAX_QUANT_BASE);
//         if (adj_qp_cb >= 0)
//         {
//             adj_qp_cb = com_tbl_qp_chroma_adjust[COM_MIN(MAX_QUANT_BASE, adj_qp_cb)];
//         }
//         if (adj_qp_cr >= 0)
//         {
//             adj_qp_cr = com_tbl_qp_chroma_adjust[COM_MIN(MAX_QUANT_BASE, adj_qp_cr)];
//         }
//         AEC_DATA_inner_tmp->qp_u = COM_CLIP(adj_qp_cb + ctx->info.qp_offset_bit_depth, MIN_QUANT, MAX_QUANT_BASE + ctx->info.qp_offset_bit_depth);
//         AEC_DATA_inner_tmp->qp_v = COM_CLIP(adj_qp_cr + ctx->info.qp_offset_bit_depth, MIN_QUANT, MAX_QUANT_BASE + ctx->info.qp_offset_bit_depth);
//     }
// #endif

#if TB_SPLIT_EXT == 1
    for(int i = 0; i < MAX_NUM_TB; i++) {
        for(int j = 0; j < N_C; j++) {
            mod_info_curr->num_nz[i][j] = 0;
        }
    }
#elif TB_SPLIT_EXT == 0
    for(int i = 0; i < N_C; i++) {
        mod_info_curr->num_nz[i];
    }
#endif

#if CHROMA_NOT_SPLIT //wrong for TREE_C
    if (AEC_DATA_inner_tmp->tree_status != TREE_C)
    {
#endif
        if (pred_mode == MODE_SKIP)
        {
            AEC_DATA_inner_tmp->skip_flag = 1;
        }
#if CHROMA_NOT_SPLIT
    }
#endif
    return COM_OK;
}

int  com_split_is_EQT(SPLIT_MODE mode)
{
    return (mode == SPLIT_EQT_HOR) || (mode == SPLIT_EQT_VER) ? 1 : 0;
}

int  com_split_is_BT(SPLIT_MODE mode)
{
    return (mode == SPLIT_BI_HOR) || (mode == SPLIT_BI_VER) ? 1 : 0;
}

u8 com_get_cons_pred_mode(int cud, int cup, int cu_width, int cu_height, int lcu_s, U8(*split_mode_buf)[NUM_BLOCK_SHAPE][MAX_CU_CNT_IN_LCU])
{
    int pos = cup + (((cu_height >> 1) >> MIN_CU_LOG2) * (lcu_s >> MIN_CU_LOG2) + ((cu_width >> 1) >> MIN_CU_LOG2));
    int shape = SQUARE + (CONV_LOG2(cu_width) - CONV_LOG2(cu_height));
    int cons_pred_mode = NO_MODE_CONS;
    assert(shape >= 0 && shape < NUM_BLOCK_SHAPE);
    if (cu_width < 8 && cu_height < 8)
    {
        assert(0);
    }
    cons_pred_mode = (split_mode_buf[cud][shape][pos] >> 3) & 0x03;
    assert(cons_pred_mode == ONLY_INTRA || cons_pred_mode == ONLY_INTER);
    return cons_pred_mode;
}

u8 com_constrain_pred_mode(int w, int h, SPLIT_MODE split, u8 slice_type)
{
    if (slice_type == SLICE_I)
    {
        return 0;
    }
    else
    {
        int s = w * h;
        if ((com_split_is_EQT(split) && s == 128) || ((com_split_is_BT(split) || split == SPLIT_QUAD) && s == 64))
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
}

u8 com_tree_split(int w, int h, SPLIT_MODE split, u8 slice_type)
{
    if (split == SPLIT_QUAD)
    {
        if (w == 8)
            return 1;
        else
            return 0;
    }
    else if (split == SPLIT_EQT_HOR)
    {
        if (h == 16 || w == 8)
            return 1;
        else
            return 0;
    }
    else if (split == SPLIT_EQT_VER)
    {
        if (w == 16 || h == 8)
            return 1;
        else
            return 0;
    }
    else if (split == SPLIT_BI_HOR)
    {
        if (h == 8)
            return 1;
        else
            return 0;
    }
    else if (split == SPLIT_BI_VER)
    {
        if (w == 8)
            return 1;
        else
            return 0;
    }
    else
    {
        return 0;
    }
}

int com_get_split_mode(s8* split_mode, int cud, int cup, int cu_width, int cu_height, int lcu_s

    , U8(*split_mode_buf)[NUM_BLOCK_SHAPE][MAX_CU_CNT_IN_LCU]

)
{
    int ret = COM_OK;
    int pos = cup + (((cu_height >> 1) >> MIN_CU_LOG2) * (lcu_s >> MIN_CU_LOG2) + ((cu_width >> 1) >> MIN_CU_LOG2));
    int shape = SQUARE + (CONV_LOG2(cu_width) - CONV_LOG2(cu_height));
    assert(shape >= 0 && shape < NUM_BLOCK_SHAPE);
    if (cu_width < 8 && cu_height < 8)
    {
        *split_mode = NO_SPLIT;
        return ret;
    }
    *split_mode = split_mode_buf[cud][shape][pos] & 0x07;
    return ret;
}

void com_check_split_mode(COM_SQH* sqh, int* split_allow, int cu_width_log2, int cu_height_log2, int boundary, int boundary_b, int boundary_r, int log2_max_cuwh, int id
    , const int parent_split, int qt_depth, int bet_depth, int slice_type)
{
    //constraints parameters
    const int min_cu_size = sqh->min_cu_size;
    const int min_bt_size = sqh->min_cu_size;
    const int min_eqt_size = sqh->min_cu_size;
    const int max_split_depth = sqh->max_split_times;
    const int max_aspect_ratio = sqh->max_part_ratio;
    const int min_qt_size = sqh->min_qt_size;
    const int max_bt_size = sqh->max_bt_size;
    const int max_eqt_size = sqh->max_eqt_size;
    int max_aspect_ratio_eqt = max_aspect_ratio >> 1;
    int cu_w = 1 << cu_width_log2;
    int cu_h = 1 << cu_height_log2;
    int i;

    for (i = NO_SPLIT; i <= SPLIT_QUAD; i++)
        split_allow[i] = 0;

    if (boundary)
    {
        // VPDU previous than boundary
        if ((cu_w == 64 && cu_h == 128) || (cu_h == 64 && cu_w == 128))
        {
            split_allow[SPLIT_BI_HOR] = 1;
            split_allow[SPLIT_BI_VER] = 1;
        }
        // large block previous than boundary
        else if (slice_type == SLICE_I && cu_w == 128 && cu_h == 128)
        {
            split_allow[SPLIT_QUAD] = 1;
            split_allow[NO_SPLIT] = 1;
        }
        else if (!boundary_r && !boundary_b)
        {
            split_allow[SPLIT_QUAD] = 1;
        }
        else if (boundary_r)
        {
            split_allow[SPLIT_BI_VER] = 1;
        }
        else if (boundary_b)
        {
            split_allow[SPLIT_BI_HOR] = 1;
        }
        assert(qt_depth + bet_depth < max_split_depth);
    }
    else
    {
        // VPDU
        if ((cu_w == 64 && cu_h == 128) || (cu_h == 64 && cu_w == 128))
        {
            split_allow[SPLIT_BI_HOR] = 1;
            split_allow[SPLIT_BI_VER] = 1;
            split_allow[NO_SPLIT] = 1;
        }
        //max qt-bt depth constraint
        else if (qt_depth + bet_depth >= max_split_depth)
        {
            split_allow[NO_SPLIT] = 1; //no further split allowed
        }
        else if (slice_type == SLICE_I && cu_w == 128 && cu_h == 128)
        {
            split_allow[SPLIT_QUAD] = 1;
            split_allow[NO_SPLIT] = 1;
        }
        else
        {
            //not split
            if (cu_w <= cu_h * max_aspect_ratio && cu_h <= cu_w * max_aspect_ratio)
                split_allow[NO_SPLIT] = 1;

            //qt
            if (cu_w > min_qt_size && bet_depth == 0)
                split_allow[SPLIT_QUAD] = 1;

            //hbt
            if ((cu_w <= max_bt_size && cu_h <= max_bt_size) && cu_h > min_bt_size && cu_w < cu_h * max_aspect_ratio)
                split_allow[SPLIT_BI_HOR] = 1;

            //vbt
            if ((cu_w <= max_bt_size && cu_h <= max_bt_size) && cu_w > min_bt_size && cu_h < cu_w * max_aspect_ratio)
                split_allow[SPLIT_BI_VER] = 1;

            //heqt
            if ((cu_w <= max_eqt_size && cu_h <= max_eqt_size) && cu_h > min_eqt_size * 2 && cu_w > min_eqt_size && cu_w < cu_h * max_aspect_ratio_eqt)
                split_allow[SPLIT_EQT_HOR] = 1;

            //veqt
            if ((cu_w <= max_eqt_size && cu_h <= max_eqt_size) && cu_w > min_eqt_size * 2 && cu_h > min_eqt_size && cu_h < cu_w * max_aspect_ratio_eqt)
                split_allow[SPLIT_EQT_VER] = 1;
        }
    }

#if SPLIT_DEBUG
    int num_allowed = 0;
    for (i = NO_SPLIT; i <= SPLIT_QUAD; i++)
        num_allowed += split_allow[i] == 1;
    assert(num_allowed);
#endif

    COM_TRACE_STR("allow split mode: ");
    COM_TRACE_INT(split_allow[NO_SPLIT]);
    COM_TRACE_INT(split_allow[SPLIT_BI_VER]);
    COM_TRACE_INT(split_allow[SPLIT_BI_HOR]);
    COM_TRACE_INT(split_allow[SPLIT_EQT_VER]);
    COM_TRACE_INT(split_allow[SPLIT_EQT_HOR]);
    COM_TRACE_INT(split_allow[SPLIT_QUAD]);
    COM_TRACE_STR("\n");
}
static int get_part_num(PART_SIZE size)
{
    switch (size)
    {
    case SIZE_2Nx2N:
        return 1;
    case SIZE_NxN:
        return 4;
    case SIZE_2NxnU:
        return 2;
    case SIZE_2NxnD:
        return 2;
    case SIZE_2NxhN:
        return 4;
    case SIZE_nLx2N:
        return 2;
    case SIZE_nRx2N:
        return 2;
    case SIZE_hNx2N:
        return 4;
    default:
        assert(0);
        return -1;
    }
}
#if AEC_STAGE3_PHASE2_DEBUG
int enc_flag;
#endif
static int com_bsw_flush_phase2(COM_BSW * bs)
{
#pragma HLS INLINE off
	int bytes = COM_BSW_GET_SINK_BYTE(bs);
	static u8 tmp[6];
	while (bytes--) {
#pragma HLS LOOP_TRIPCOUNT max=1024
		//* bs->cur++ = (bs->code >> 24) & 0xFF;
		AEC_DATA_output.bs_tmp[AEC_DATA_output.bs_cur] = (bs->code >> 24) & 0xFF;
		AEC_DATA_output.bs_cur++;
#if AEC_STAGE3_PHASE2_DEBUG
#if AEC_STAGE3_BS_PHASE2_DEBUG
        //if (enc_flag) {
        tmp[0] = tmp[1];
        tmp[1] = tmp[2];
        tmp[2] = tmp[3];
        tmp[3] = tmp[4];
        tmp[4] = tmp[5];
        tmp[5] = (bs->code >> 24) & 0xFF;
        //if (tmp[0] == 0xa8 && tmp[1] == 0x12 && tmp[2] == 0xcf && tmp[3] == 0x90 && tmp[4] == 0x8b && tmp[5] == 0x70) {
        if (tmp[0] == 0x22 && tmp[1] == 0xf5 && tmp[2] == 0xa8 && tmp[3] == 0x12 && tmp[4] == 0xcf && tmp[5] == 0x90) {
            int n = 0;
        }
		fprintf(fp_bs, "%02x\n", (bs->code >> 24) & 0xFF);
		//}
#endif
#endif
		bs->code <<= 8;
	}
	return 0;
}

static int com_bsw_write_phase2(COM_BSW * bs, u32 val, int len) /* len(1 ~ 32) */
{
#pragma HLS INLINE off
	int leftbits;
	com_assert(bs);
	leftbits = bs->leftbits;
	val <<= (32 - len);
	bs->code |= (val >> (32 - leftbits));
	if (len < leftbits) {
		bs->leftbits -= len;
	}
	else {
		bs->leftbits = 0;
		//bs->fn_flush(bs);
		com_bsw_flush_phase2(bs);
#if defined(X86F)
		/* on X86 machine, shift operation works properly when the value of the
		   right operand is less than the number of bits of the left operand. */
		bs->code = (leftbits < 32 ? val << leftbits : 0);
#else
		bs->code = (val << leftbits);
#endif
		bs->leftbits = 32 - (len - leftbits);
	}
	return 0;
}

static void enc_sbac_finish_phase2(COM_BSW * bs)
{
#if AEC_STAGE3_PHASE2_DEBUG
	enc_flag = 1;
#endif
	ENC_SBAC* sbac = &aec_sbac_local;
	if (sbac->code >> (32 - sbac->left_bits)) {
		assert(sbac->pending_byte != 0xff);
		com_bsw_write_phase2(bs, sbac->pending_byte + 1, 8);
		while (sbac->stacked_ff != 0) {
			com_bsw_write_phase2(bs, 0x00, 8);
			sbac->stacked_ff--;
		}
		sbac->code -= 1 << (32 - sbac->left_bits);
	}
	else {
		if (sbac->is_pending_byte) {
			com_bsw_write_phase2(bs, sbac->pending_byte, 8);
		}

		while (sbac->stacked_ff != 0) {
			com_bsw_write_phase2(bs, 0xFF, 8);
			sbac->stacked_ff--;
		}
	}
	sbac->code |= (1 << 7);
	com_bsw_write_phase2(bs, sbac->code >> 8, 24 - sbac->left_bits);

	//if ((23 - sbac->left_bits) % 8)
	if (is_ipcm
		|| (24 - sbac->left_bits) %
		8) { // write the last byte of low in the end of CABAC, if the number of used bits (23 - left_bits) + 1 is not exactly bytes (Nx8), corresponding to bits_Needed != 0
		com_bsw_write_phase2(bs, sbac->code, 8);
	}

	if (!is_ipcm) {
		//add termination slice padding bits
		com_bsw_write_phase2(bs, 1, 1);
	}
	while (!COM_BSR_IS_BYTE_ALIGN(bs)) {
		com_bsw_write_phase2(bs, 0, 1);
	}
#if AEC_STAGE3_PHASE2_DEBUG
	enc_flag = 0;
#endif
	com_bsw_flush_phase2(bs);
	bs->leftbits = 32;
	bs->code = 0;
}
void com_bsw_write_est(ENC_SBAC* sbac, int len)
{
#pragma HLS INLINE off
    sbac->bitcounter += len;
}

void sbac_put_byte(u8 writing_byte, ENC_SBAC* sbac, COM_BSW* bs)
{
    if (sbac->is_pending_byte)
    {
        //if (sbac->is_bitcount)
        //    com_bsw_write_est(sbac, 8);
        //else
#if AEC_STAGE3_PHASE2_DEBUG
        enc_flag = 1;
#endif
		com_bsw_write_phase2(bs, sbac->pending_byte, 8);
#if AEC_STAGE3_PHASE2_DEBUG
        enc_flag = 0;
#endif
    }
    sbac->pending_byte = writing_byte;
    sbac->is_pending_byte = 1;
}
static void sbac_carry_propagate(ENC_SBAC* sbac, COM_BSW* bs)
{
    u32 leadByte = (sbac->code) >> (24 - sbac->left_bits);
    sbac->left_bits += 8;
    (sbac->code) &= (0xffffffffu >> sbac->left_bits);
    if (leadByte < 0xFF)
    {
        while (sbac->stacked_ff != 0)
        {
            sbac_put_byte(0xFF, sbac, bs);
            sbac->stacked_ff--;
        }
        sbac_put_byte((u8)leadByte, sbac, bs);
    }
    else if (leadByte > 0xFF)
    {
        sbac->pending_byte++; //! add carry bit to pending_byte
        while (sbac->stacked_ff != 0)
        {
            sbac_put_byte(0x00, sbac, bs); //! write pending_tyte
            sbac->stacked_ff--;
        }
        sbac_put_byte((u8)leadByte & 0xFF, sbac, bs);
    }
    else //! leadByte == 0xff
    {
        sbac->stacked_ff++;
    }
}
static void enc_sbac_encode_bin(u32 bin, ENC_SBAC* sbac, SBAC_CTX_MODEL* model, COM_BSW* bs)
{
#if TRACE_BIN
    SBAC_CTX_MODEL prev_model = *model;
#endif
#if AEC_STAGE3_PHASE2_DEBUG
#if AEC_STAGE3_CTX_PHASE2_DEBUG
    //fprintf(fp_ctx, "method: 0, symbol: %d, model2_idx: 000, model1_idx: %03d\n", bin, (u32)((model - aec_ctx.delta_qp) + 1));//, model=0x%04x\n, (*model) & 0x1FFF);
    fprintf(fp_ctx, "0 %d 000 %03d\n", bin, (u32)((model - (&aec_ctx_phase2)->skip_flag) + 1));//, model=0x%04x\n, (*model) & 0x1FFF);
#endif
#if AEC_STAGE3_BINA_PHASE2_DEBUG
    fprintf(fp_bina, "encode bin:%d, range_in=%d, low_in=%d, model_in1=%x, model_in2=0, ", bin, sbac->range, sbac->code & 0x1FF, (*model));
#endif
#endif
#if CABAC_MULTI_PROB
    if (g_compatible_back)
    {
        mCabac_ws = 6;
    }
    u8 cycno = (*model) >> CYCNO_SHIFT_BITS;
    if (cycno < 0)
        cycno = 0;
    int is_LPS = 0;
    u16 p0 = ((*model) >> PROB_BITS) & MCABAC_PROB_MASK;
    u16 p1 = ((*model) >> 1) & MCABAC_PROB_MASK;
    u16 prob_lps = (u16)(p0 + p1 + 1) >> 1;
    prob_lps = prob_lps < 6 ? 6 : prob_lps;
    u8 cwr = 0;
    if (g_compatible_back)
    {
        cwr = (cycno <= 1) ? 3 : (cycno == 2) ? 4 : (mCabac_ws - 1);
    }
    else
    {
        cwr = (cycno < counter_thr1) ? (mCabac_ws - 2) : (mCabac_ws - 1);
    }
    cwr = COM_CLIP(cwr, MIN_WINSIZE, MAX_WINSIZE);
    u8 mcabac_flag = (cycno == counter_thr2) ? 1 : 0;
    u16 LG_S = cwr2LGS[cwr];
#endif
#if !CABAC_MULTI_PROB
    u16 prob_lps = ((*model) & PROB_MASK) >> 1;
#endif
    u16 cmps = (*model) & 1;
    u32 rLPS = prob_lps >> LG_PMPS_SHIFTNO;

#if AEC_STAGE3_PHASE2_DEBUG
#if AEC_STAGE3_RLPS_PHASE2_DEBUG
    fprintf(fp_rLPS, "rLPS_o = %03d, emb_o = %d\n", (int)rLPS, bin == cmps);
#endif
#endif

    u32 rMPS = sbac->range - rLPS;
    int s_flag = rMPS < QUAR_HALF_PROB;
    rMPS |= 0x100;
    assert(sbac->range >= rLPS); //! this maybe triggered, so it can be removed
    if (bin != cmps)
    {
#if CABAC_MULTI_PROB
        if (g_compatible_back)
        {
            cycno = (cycno <= 2) ? (cycno + 1) : 3;
        }
        else
        {
            if (mcabac_flag)
            {
                cycno = counter_thr2;
            }
            else
            {
                cycno = cycno + 1;
            }
        }
        is_LPS = 1;
#endif
        rLPS = (sbac->range << s_flag) - rMPS;
        int shift = ace_get_shift_phase2(rLPS);
        sbac->range = rLPS << shift;
        sbac->code = ((sbac->code << s_flag) + rMPS) << shift;
        sbac->left_bits -= (shift + s_flag);
        if (sbac->left_bits < 12)
        {
            sbac_carry_propagate(sbac, bs);
        }
#if !CABAC_MULTI_PROB
        * model = tab_cycno_lgpmps_mps[(*model) | (1 << 13)];
#endif
    }
    else //! MPS
    {
#if CABAC_MULTI_PROB
        if (cycno == 0)
        {
            cycno = 1;
        }
#endif
        if (s_flag)
        {
            sbac->code <<= 1;
            if (--sbac->left_bits < 12)
            {
                sbac_carry_propagate(sbac, bs);
            }
        }
        sbac->range = rMPS;
#if !CABAC_MULTI_PROB
        * model = tab_cycno_lgpmps_mps[*model];
#endif
    }
#if CABAC_MULTI_PROB
    //update probability estimation
    if (is_LPS)
    {
        if (g_compatible_back)
        {
            p0 = p0 + LG_S;
            p1 = p0;
        }
        else
        {
            if (mcabac_flag)
            {
                p0 = p0 + LG_S;
                p1 = p1 + cwr2LGS[mCabac_ws + 1];
            }
            else
            {
                p0 = p0 + LG_S;
                p1 = p0;
            }
        }

        if ((p0 >= (256 << LG_PMPS_SHIFTNO)) || (p1 >= (256 << LG_PMPS_SHIFTNO)))
        {
            if (p0 >= (256 << LG_PMPS_SHIFTNO))
            {
                p0 = (u16)(512 << LG_PMPS_SHIFTNO) - 1 - p0;
            }
            if (p1 >= (256 << LG_PMPS_SHIFTNO))
            {
                p1 = (u16)(512 << LG_PMPS_SHIFTNO) - 1 - p1;
            }
            cmps = !cmps;
        }
    }
    else
    {
        if (g_compatible_back)
        {
            p0 = p0 - (u16)(p0 >> cwr) - (u16)(p0 >> (cwr + 2));
            p1 = p0;
        }
        else
        {
            if (mcabac_flag)
            {
                p0 = p0 - (u16)(p0 >> cwr) - (u16)(p0 >> (cwr + 2));
                p1 = p1 - (u16)(p1 >> (mCabac_ws + 1)) - (u16)(p1 >> (mCabac_ws + 3));
            }
            else
            {
                p0 = p0 - (u16)(p0 >> cwr) - (u16)(p0 >> (cwr + 2));
                p1 = p0;
            }
        }
    }
    *model = (p1 << 1) + cmps + (cycno << CYCNO_SHIFT_BITS) + (p0 << PROB_BITS);
#endif

#if TRACE_BIN
    COM_TRACE_COUNTER;
    COM_TRACE_STR("model ");
    COM_TRACE_INT(prev_model);
    COM_TRACE_STR("-->");
    COM_TRACE_INT(*model);
    COM_TRACE_STR("MPS Range ");
    COM_TRACE_INT(sbac->range);
    COM_TRACE_STR("LPS Range ");
    COM_TRACE_INT(rLPS);
    COM_TRACE_STR("\n");
#endif
#if AEC_STAGE3_PHASE2_DEBUG
#if AEC_STAGE3_BINA_PHASE2_DEBUG
    fprintf(fp_bina, "range_out=%d, low_out=%d, method=0\n", sbac->range, sbac->code & 0x1FF);
#endif
#endif
}
void encode_inter_dir_org(COM_MODE* mod_info_curr, s8 refi[REFP_NUM], int part_size, ENC_CTX_HLS* ctx)
{
    assert(ctx->info.pic_header.slice_type == SLICE_B);

    u8 predDir;
    if (REFI_IS_VALID(refi[REFP_0]) && REFI_IS_VALID(refi[REFP_1])) /* PRED_BI */
    {
        //enc_sbac_encode_bin(1, sbac, sbac->ctx.inter_dir, bs);
        aec_stage3_phase2( 1, 0, 1, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        predDir = PRED_BI;
    }
    else
    {
#if SEP_CONTEXT
        int symbol[2];
        int context[2];
        //COM_MODE* mod_info_curr = &ctx->core->mod_info_curr;
        if (mod_info_curr->cu_width_log2 + mod_info_curr->cu_height_log2 < 6) {
            //enc_sbac_encode_bin(0, sbac, sbac->ctx.inter_dir + 2, bs);
            // aec_stage3_phase2(1, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            symbol[0] = 0;
            context[0] = 67;
        }
        else {
#endif
            //enc_sbac_encode_bin(0, sbac, sbac->ctx.inter_dir, bs);
            // aec_stage3_phase2( 1, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            symbol[0] = 0;
            context[0] = 65;
        }
        if (REFI_IS_VALID(refi[REFP_0])) /* PRED_L0 */
        {
            //enc_sbac_encode_bin(0, sbac, sbac->ctx.inter_dir + 1, bs);
            // aec_stage3_phase2( 1, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            symbol[1] = 0;
            context[1] = 66;
            predDir = PRED_L0;
        }
        else /* PRED_L1 */
        {
            //enc_sbac_encode_bin(1, sbac, sbac->ctx.inter_dir + 1, bs);
            // aec_stage3_phase2( 1, 0, 1, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            symbol[1] = 1;
            context[1] = 66;
            predDir = PRED_L1;
        }
        aec_stage3_phase2(2, 
            0, symbol[0], context[0], 0,
            0, symbol[1], context[1], 0,
            0, 0, 0, 0, 
            0, 0, 0, 0);
    }

    assert(predDir >= PRED_L0);
    assert(predDir <= PRED_BI);
    COM_TRACE_COUNTER;
    COM_TRACE_STR("pred dir ");
    COM_TRACE_INT(predDir);
    COM_TRACE_STR("\n");
    return;
}
void enc_eco_lcu_delta_qp(COM_BSW* bs, int val, int last_dqp)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    COM_SBAC_CTX* sbac_ctx = &sbac->ctx;
    int act_sym;
    int act_ctx = ((last_dqp != 0) ? 1 : 0);

    if (val > 0) {
        act_sym = 2 * val - 1;
    }
    else {
        act_sym = -2 * val;
    }

    if (act_sym == 0) {
        //enc_sbac_encode_bin(1, sbac, sbac_ctx->delta_qp + act_ctx, bs);
        aec_stage3_phase2(1, 0, 1, 462 + act_ctx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else {
        int symbol[4] = {0, 0, 0, 0};
        int context[4] = { 0, 0, 0, 0 };
        int bin_num = 0;
        
        //enc_sbac_encode_bin(0, sbac, sbac_ctx->delta_qp + act_ctx, bs);
        aec_stage3_phase2(1, 0, 0, 462 + act_ctx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        
        // TODO: what is the maximum while (act_sym > 2) ?
        symbol[bin_num] = 0;
        context[bin_num] = 462 + act_ctx;
        bin_num++;
        
        act_ctx = 2;
        if (act_sym == 1) {
            //enc_sbac_encode_bin(1, sbac, sbac_ctx->delta_qp + act_ctx, bs);
            aec_stage3_phase2(1, 0, 1, 462 + act_ctx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            
            symbol[bin_num] = 1;
            context[bin_num] = 462 + act_ctx;
            bin_num++;
        }
        else {
            //enc_sbac_encode_bin(0, sbac, sbac_ctx->delta_qp + act_ctx, bs);
            aec_stage3_phase2(1, 0, 0, 462 + act_ctx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            
            symbol[bin_num] = 0;
            context[bin_num] = 462 + act_ctx;
            bin_num++;
            
            act_ctx++;
            while (act_sym > 2) {
                //enc_sbac_encode_bin(0, sbac, sbac_ctx->delta_qp + act_ctx, bs);
                aec_stage3_phase2(1, 0, 0, 462 + act_ctx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                act_sym--;
            }
            //enc_sbac_encode_bin(1, sbac, sbac_ctx->delta_qp + act_ctx, bs);
            aec_stage3_phase2(1, 0, 1, 462 + act_ctx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
    }
}
void enc_eco_split_flag(AEC_inner* AEC_DATA_inner_tmp, ENC_CTX_HLS* c, int cu_width, int cu_height, int x, int y, int flag)
{
    //split flag
    int ctx = 0;
    int x_scu = x >> MIN_CU_LOG2;
    int y_scu = y >> MIN_CU_LOG2;
    int pic_width_in_scu = c->info.pic_width >> MIN_CU_LOG2;
    u8  avail[2] = { 0, 0 };
    int scun[2];
    int scup = x_scu + y_scu * pic_width_in_scu;

    scun[0] = scup - pic_width_in_scu;
    scun[1] = scup - 1;
    if (y_scu > 0)
        avail[0] = MCU_GET_CODED_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[0]); //up
    if (x_scu > 0)
        avail[1] = MCU_GET_CODED_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[1]); //left
    
    // if (y_scu > 0)
    //     avail[0] = MCU_GET_CODED_FLAG(c->map.map_scu[scun[0]]); //up
    // if (x_scu > 0)
    //     avail[1] = MCU_GET_CODED_FLAG(c->map.map_scu[scun[1]]); //left

    if (avail[0])
        ctx += (1 << MCU_GET_LOGW(AEC_DATA_inner_tmp->map_cu_mode_tmp1[0])) < cu_width;
    if (avail[1])
        ctx += (1 << MCU_GET_LOGH(AEC_DATA_inner_tmp->map_cu_mode_tmp1[1])) < cu_height;

#if SEP_CONTEXT
    if (c->info.pic_header.slice_type == SLICE_I && cu_width == 128 && cu_height == 128)
    {
        ctx = 3;
        assert(flag == 1);
    }
#endif

    //enc_sbac_encode_bin(flag, sbac, sbac->ctx.split_flag + ctx, bs);
    aec_stage3_phase2( 1, 0, flag, 405 + ctx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    COM_TRACE_COUNTER;
    COM_TRACE_STR("split flag ");
    COM_TRACE_INT(flag);
    COM_TRACE_STR("\n");
}

int enc_eco_split_mode(AEC_inner* AEC_DATA_inner_tmp, u8 split_mode, ENC_CTX_HLS* c, int cud, int cup, int cu_width, int cu_height, int lcu_s
    , const int parent_split, int qt_depth, int bet_depth, int x, int y, int x_lcu_idx, int min_scu_x, int min_scu_y, FEC_info* FEC_info_local)
{
   
    int ret = COM_OK;
    //s8 split_mode;
    int ctx = 0;
    int split_allow[SPLIT_CHECK_NUM];
    int i, non_QT_split_mode_num;
    int boundary = 0, boundary_b = 0, boundary_r = 0;

    int cu_width_log2 = CONV_LOG2(cu_width);
    int cu_height_log2 = CONV_LOG2(cu_height);
    int x_scu = x >> MIN_CU_LOG2;
    int y_scu = y >> MIN_CU_LOG2;

    if (cu_width == MIN_CU_SIZE && cu_height == MIN_CU_SIZE)
    {
        return ret;
    }
    int pic_x_scu = x_scu - min_scu_x;
    int pic_y_scu = y_scu - min_scu_y;

    if (y_scu == min_scu_y) {
        AEC_DATA_inner_tmp->map_scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_above_line[x_lcu_idx * 16 + pic_x_scu];
        //AEC_DATA_inner_tmp->map_scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_above_line_using[pic_x_scu];
       // scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_above_line_using[pic_x_scu];
    }
    else {
        AEC_DATA_inner_tmp->map_scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_inner[pic_x_scu * 16L + (pic_y_scu - 1)];
        //scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_inner[pic_x_scu * 16L + (pic_y_scu - 1)];
    }
    if (x_scu == min_scu_x) {
        AEC_DATA_inner_tmp->map_scu_tmp1[1] = FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu];
        //scu_tmp1[1] = FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu];
    }
    else {
        AEC_DATA_inner_tmp->map_scu_tmp1[1] = FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu];
        // scu_tmp1[1] = FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu];
    }

    if (y_scu == min_scu_y) {
        AEC_DATA_inner_tmp->map_cu_mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_above_line[x_lcu_idx * 16 + pic_x_scu];
        //AEC_DATA_inner_tmp->map_cu_mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_above_line_using[pic_x_scu];
        //mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_above_line_using[pic_x_scu];
    }
    else {
        AEC_DATA_inner_tmp->map_cu_mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_inner[pic_x_scu * 16L + (pic_y_scu - 1)];
        //mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_inner[pic_x_scu * 16L + (pic_y_scu - 1)];
    }

    if (x_scu == min_scu_x) {
        AEC_DATA_inner_tmp->map_cu_mode_tmp1[1] = FEC_info_local->map_ptr_map_cu_mode_inner_left[pic_y_scu];
        //mode_tmp1[1] = FEC_info_local->map_ptr_map_cu_mode_inner_left[pic_y_scu];
    }
    else {
        AEC_DATA_inner_tmp->map_cu_mode_tmp1[1] = FEC_info_local->map_ptr_map_cu_mode_inner[(pic_x_scu - 1) * 16L + pic_y_scu];
        //mode_tmp1[1] = FEC_info_local->map_ptr_map_cu_mode_inner[(pic_x_scu - 1) * 16L + pic_y_scu];
    }


    //com_get_split_mode(&split_mode, cud, cup, cu_width, cu_height, lcu_s, c->ctu_map_cu_data.split_mode);


    boundary = !(x + cu_width <= c->info.pic_width && y + cu_height <= c->info.pic_height);
    boundary_b = boundary && (y + cu_height > c->info.pic_height) && !(x + cu_width > c->info.pic_width);
    boundary_r = boundary && (x + cu_width > c->info.pic_width) && !(y + cu_height > c->info.pic_height);

    com_check_split_mode(&c->info.sqh, split_allow, CONV_LOG2(cu_width), CONV_LOG2(cu_height), boundary, boundary_b, boundary_r, c->info.log2_max_cuwh, c->temporal_id
        , parent_split, qt_depth, bet_depth, c->info.pic_header.slice_type);
    non_QT_split_mode_num = 0;
    for (i = 1; i < SPLIT_QUAD; i++)
    {
        non_QT_split_mode_num += split_allow[i];
    }

    if (split_allow[SPLIT_QUAD] && !(non_QT_split_mode_num || split_allow[NO_SPLIT])) //only QT is allowed
    {
        assert(split_mode == SPLIT_QUAD);
        return ret;
    }
    else if (split_allow[SPLIT_QUAD])
    {
        enc_eco_split_flag(AEC_DATA_inner_tmp, c, cu_width, cu_height, x, y, split_mode == SPLIT_QUAD);
        if (split_mode == SPLIT_QUAD)
        {
            return ret;
        }
    }

    if (non_QT_split_mode_num)
    {
        int cu_width_log2 = CONV_LOG2(cu_width);
        int cu_height_log2 = CONV_LOG2(cu_height);
        //split flag
        int x_scu = x >> MIN_CU_LOG2;
        int y_scu = y >> MIN_CU_LOG2;
        int pic_width_in_scu = c->info.pic_width >> MIN_CU_LOG2;
        u8  avail[2] = { 0, 0 };
        int scun[2];
        int scup = x_scu + y_scu * pic_width_in_scu;

        scun[0] = scup - pic_width_in_scu;
        scun[1] = scup - 1;
        if (y_scu > 0)
            avail[0] = MCU_GET_CODED_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[0]);  //up
        if (x_scu > 0)
            avail[1] = MCU_GET_CODED_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[1]); //left
        
        // if (y_scu > 0)
        //     avail[0] = MCU_GET_CODED_FLAG(c->map.map_scu[scun[0]]);  //up
        // if (x_scu > 0)
        //     avail[1] = MCU_GET_CODED_FLAG(c->map.map_scu[scun[1]]); //left

        if (avail[0])
            ctx += (1 << MCU_GET_LOGW(AEC_DATA_inner_tmp->map_cu_mode_tmp1[0])) < cu_width;
        if (avail[1])
            ctx += (1 << MCU_GET_LOGH(AEC_DATA_inner_tmp->map_cu_mode_tmp1[1])) < cu_height;

        int tmp_w = (1 << MCU_GET_LOGW(AEC_DATA_inner_tmp->map_cu_mode_tmp1[0]));
        int tmp_h = (1 << MCU_GET_LOGH(AEC_DATA_inner_tmp->map_cu_mode_tmp1[1]));

#if NUM_SBAC_CTX_BT_SPLIT_FLAG == 9
        int sample = cu_width * cu_height;
        int ctx_set = (sample > 1024) ? 0 : (sample > 256 ? 1 : 2);
        int ctx_save = ctx;
        ctx += ctx_set * 3;
#endif

        if (split_allow[NO_SPLIT])
            //enc_sbac_encode_bin(split_mode != NO_SPLIT, sbac, sbac->ctx.bt_split_flag + ctx, bs);
            aec_stage3_phase2( 1, 0, split_mode != NO_SPLIT, 409 + ctx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        else
            assert(split_mode != NO_SPLIT);

#if NUM_SBAC_CTX_BT_SPLIT_FLAG == 9
        ctx = ctx_save;
#endif

        if (split_mode != NO_SPLIT)
        {
            int HBT = split_allow[SPLIT_BI_HOR];
            int VBT = split_allow[SPLIT_BI_VER];
            int EnableBT = HBT || VBT;
#if EQT
            int HEQT = split_allow[SPLIT_EQT_HOR];
            int VEQT = split_allow[SPLIT_EQT_VER];
            int EnableEQT = HEQT || VEQT;
#endif
            u8 ctx_dir = cu_width_log2 == cu_height_log2 ? 0 : (cu_width_log2 > cu_height_log2 ? 1 : 2);

#if EQT_TEMP
            u8 split_dir = (split_mode == SPLIT_BI_VER) || (split_mode == SPLIT_EQT_VER);
            u8 split_typ = (split_mode == SPLIT_EQT_HOR) || (split_mode == SPLIT_EQT_VER);
#else
            u8 split_dir = (split_mode == SPLIT_BI_VER);
            u8 split_typ = 0;
#endif

#if EQT
            if (EnableEQT && EnableBT)
            {
                //enc_sbac_encode_bin(split_typ, sbac, sbac->ctx.split_mode + ctx, bs);
                aec_stage3_phase2( 1, 0, split_typ, 423 + ctx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
#endif
            if (split_typ == 0)
            {
                if (HBT && VBT)
                {
#if SEP_CONTEXT
                    if (cu_width == 64 && cu_height == 128)
                        ctx_dir = 3;
                    if (cu_width == 128 && cu_height == 64)
                        ctx_dir = 4;
#endif
                    //enc_sbac_encode_bin(split_dir, sbac, sbac->ctx.split_dir + ctx_dir, bs);
                    aec_stage3_phase2( 1, 0, split_dir, 418 + ctx_dir, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                    if (cu_width == 64 && cu_height == 128)
                        assert(split_dir == 0);
                    if (cu_width == 128 && cu_height == 64)
                        assert(split_dir == 1);
                }
            }
#if EQT_TEMP
            if (split_typ == 1)
            {
                if (HEQT && VEQT)
                {
                    //enc_sbac_encode_bin(split_dir, sbac, sbac->ctx.split_dir + ctx_dir, bs);
                    aec_stage3_phase2( 1, 0, split_dir, 418 + ctx_dir, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                }
            }
#endif
        }
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("split mode ");
    COM_TRACE_INT(split_mode);
    COM_TRACE_STR("\n");
    return ret;
}
void enc_eco_cons_pred_mode_child(u8 cons_pred_mode_child)
{
    assert(cons_pred_mode_child == ONLY_INTER || cons_pred_mode_child == ONLY_INTRA);
    u8 flag = cons_pred_mode_child == ONLY_INTRA;
    //enc_sbac_encode_bin(flag, sbac, sbac->ctx.cons_mode, bs);
    aec_stage3_phase2( 1, 0, flag, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

    COM_TRACE_COUNTER;
    COM_TRACE_STR("cons mode ");
    COM_TRACE_INT(cons_pred_mode_child);
    COM_TRACE_STR("\n");
}

void com_split_get_part_structure(int split_mode, int x0, int y0, int cu_width, int cu_height, int cup, int cud, int log2_culine, COM_SPLIT_STRUCT* split_struct)
{
    int i;
    int log_cuw, log_cuh;
    int cup_w, cup_h;
    split_struct->part_count = com_split_part_count(split_mode);
    log_cuw = CONV_LOG2(cu_width);
    log_cuh = CONV_LOG2(cu_height);
    split_struct->x_pos[0] = x0;
    split_struct->y_pos[0] = y0;
    split_struct->cup[0] = cup;
    switch (split_mode)
    {
    case NO_SPLIT:
    {
        split_struct->width[0] = cu_width;
        split_struct->height[0] = cu_height;
        split_struct->log_cuw[0] = log_cuw;
        split_struct->log_cuh[0] = log_cuh;
    }
    break;
    case SPLIT_QUAD:
    {
        split_struct->width[0] = cu_width >> 1;
        split_struct->height[0] = cu_height >> 1;
        split_struct->log_cuw[0] = log_cuw - 1;
        split_struct->log_cuh[0] = log_cuh - 1;
        for (i = 1; i < split_struct->part_count; ++i)
        {
            split_struct->width[i] = split_struct->width[0];
            split_struct->height[i] = split_struct->height[0];
            split_struct->log_cuw[i] = split_struct->log_cuw[0];
            split_struct->log_cuh[i] = split_struct->log_cuh[0];
        }
        split_struct->x_pos[1] = x0 + split_struct->width[0];
        split_struct->y_pos[1] = y0;
        split_struct->x_pos[2] = x0;
        split_struct->y_pos[2] = y0 + split_struct->height[0];
        split_struct->x_pos[3] = split_struct->x_pos[1];
        split_struct->y_pos[3] = split_struct->y_pos[2];
        cup_w = (split_struct->width[0] >> MIN_CU_LOG2);
        cup_h = ((split_struct->height[0] >> MIN_CU_LOG2) << log2_culine);
        split_struct->cup[1] = cup + cup_w;
        split_struct->cup[2] = cup + cup_h;
        split_struct->cup[3] = split_struct->cup[1] + cup_h;
        split_struct->cud = cud + 1;
    }
    break;
    default:
    {
        if (com_split_is_vertical(split_mode))
        {
            for (i = 0; i < split_struct->part_count; ++i)
            {
                split_struct->width[i] = com_split_get_part_size(split_mode, i, cu_width);
                split_struct->log_cuw[i] = com_split_get_part_size_idx(split_mode, i, log_cuw);
#if EQT
                if (split_mode == SPLIT_EQT_VER)
                {
                    if (i == 0 || i == 3)
                    {
                        split_struct->height[i] = cu_height;
                        split_struct->log_cuh[i] = log_cuh;
                    }
                    else
                    {
                        split_struct->height[i] = cu_height >> 1;
                        split_struct->log_cuh[i] = log_cuh - 1;
                    }
                }
                else
                {
                    split_struct->height[i] = cu_height;
                    split_struct->log_cuh[i] = log_cuh;
                    if (i)
                    {
                        split_struct->x_pos[i] = split_struct->x_pos[i - 1] + split_struct->width[i - 1];
                        split_struct->y_pos[i] = split_struct->y_pos[i - 1];
                        split_struct->cup[i] = split_struct->cup[i - 1] + (split_struct->width[i - 1] >> MIN_CU_LOG2);
                    }
                }
#else
                split_struct->height[i] = cu_height;
                split_struct->log_cuh[i] = log_cuh;
                if (i)
                {
                    split_struct->x_pos[i] = split_struct->x_pos[i - 1] + split_struct->width[i - 1];
                    split_struct->y_pos[i] = split_struct->y_pos[i - 1];
                    split_struct->cup[i] = split_struct->cup[i - 1] + (split_struct->width[i - 1] >> MIN_CU_LOG2);
                }
#endif
            }
#if EQT
            if (split_mode == SPLIT_EQT_VER)
            {
                split_struct->x_pos[1] = split_struct->x_pos[0] + split_struct->width[0];
                split_struct->y_pos[1] = split_struct->y_pos[0];
                split_struct->cup[1] = split_struct->cup[0] + (split_struct->width[0] >> MIN_CU_LOG2);
                cup_h = ((split_struct->height[1] >> MIN_CU_LOG2) << log2_culine);
                split_struct->x_pos[2] = split_struct->x_pos[1];
                split_struct->y_pos[2] = split_struct->y_pos[1] + split_struct->height[1];
                split_struct->cup[2] = split_struct->cup[1] + cup_h;
                split_struct->x_pos[3] = split_struct->x_pos[1] + split_struct->width[1];
                split_struct->y_pos[3] = split_struct->y_pos[1];
                split_struct->cup[3] = split_struct->cup[1] + (split_struct->width[1] >> MIN_CU_LOG2);
            }
#endif
        }
        else
        {
            for (i = 0; i < split_struct->part_count; ++i)
            {
#if EQT
                if (split_mode == SPLIT_EQT_HOR)
                {
                    if (i == 0 || i == 3)
                    {
                        split_struct->width[i] = cu_width;
                        split_struct->log_cuw[i] = log_cuw;
                    }
                    else
                    {
                        split_struct->width[i] = cu_width >> 1;
                        split_struct->log_cuw[i] = log_cuw - 1;
                    }
                }
                else
                {
                    split_struct->width[i] = cu_width;
                    split_struct->log_cuw[i] = log_cuw;
                    if (i)
                    {
                        split_struct->y_pos[i] = split_struct->y_pos[i - 1] + split_struct->height[i - 1];
                        split_struct->x_pos[i] = split_struct->x_pos[i - 1];
                        split_struct->cup[i] = split_struct->cup[i - 1] + ((split_struct->height[i - 1] >> MIN_CU_LOG2) << log2_culine);
                    }
                }
#else
                split_struct->width[i] = cu_width;
                split_struct->log_cuw[i] = log_cuw;
                if (i)
                {
                    split_struct->y_pos[i] = split_struct->y_pos[i - 1] + split_struct->height[i - 1];
                    split_struct->x_pos[i] = split_struct->x_pos[i - 1];
                    split_struct->cup[i] = split_struct->cup[i - 1] + ((split_struct->height[i - 1] >> MIN_CU_LOG2) << log2_culine);
                }
#endif
                split_struct->height[i] = com_split_get_part_size(split_mode, i, cu_height);
                split_struct->log_cuh[i] = com_split_get_part_size_idx(split_mode, i, log_cuh);
            }
#if EQT
            if (split_mode == SPLIT_EQT_HOR)
            {
                split_struct->y_pos[1] = split_struct->y_pos[0] + split_struct->height[0];
                split_struct->x_pos[1] = split_struct->x_pos[0];
                split_struct->cup[1] = split_struct->cup[0] + ((split_struct->height[0] >> MIN_CU_LOG2) << log2_culine);
                split_struct->y_pos[2] = split_struct->y_pos[1];
                split_struct->x_pos[2] = split_struct->x_pos[1] + split_struct->width[1];
                split_struct->cup[2] = split_struct->cup[1] + (split_struct->width[1] >> MIN_CU_LOG2);
                split_struct->y_pos[3] = split_struct->y_pos[1] + split_struct->height[1];
                split_struct->x_pos[3] = split_struct->x_pos[1];
                split_struct->cup[3] = split_struct->cup[1] + ((split_struct->height[1] >> MIN_CU_LOG2) << log2_culine);
            }
#endif
        }
        switch (split_mode)
        {
        case SPLIT_BI_VER:
            split_struct->cud = cud + ((cu_width == cu_height || cu_width < cu_height) ? 0 : 1);
            break;
        case SPLIT_BI_HOR:
            split_struct->cud = cud + ((cu_width == cu_height || cu_width > cu_height) ? 0 : 1);
            break;
        default:
            // Triple tree case
            split_struct->cud = cud + (cu_width == cu_height ? 0 : 1);
            break;
        }
    }
    break;
    }
}
static void coef_rect_to_series(ENC_CTX_HLS* ctx,
    s16 coef_y[64][64], s16 coef_u[4096], s16 coef_v[4096],
    int x, int y, int cu_width, int cu_height, s16 coef_dst[N_C][MAX_CU_DIM]

)
{
	
    int i, j, sidx, didx;
    sidx = (x & (ctx->info.max_cuwh - 1)) + ((y & (ctx->info.max_cuwh - 1)) << ctx->info.log2_max_cuwh);
    didx = 0;
    for (j = 0; j < cu_height; j++)
    {
        for (i = 0; i < cu_width; i++)
        {
            coef_dst[Y_C][didx++] = coef_y[(y & (ctx->info.max_cuwh - 1)) + j][(x & (ctx->info.max_cuwh - 1)) + i];
        }
        sidx += ctx->info.max_cuwh;
    }
    x >>= 1;
    y >>= 1;
    cu_width >>= 1;
    cu_height >>= 1;
    sidx = (x & ((ctx->info.max_cuwh >> 1) - 1)) + ((y & ((ctx->info.max_cuwh >> 1) - 1)) << (ctx->info.log2_max_cuwh - 1));
    didx = 0;
    for (j = 0; j < cu_height; j++)
    {
        for (i = 0; i < cu_width; i++)
        {
            coef_dst[U_C][didx] = coef_u[sidx + i];
            coef_dst[V_C][didx] = coef_v[sidx + i];
            didx++;
        }
        sidx += (ctx->info.max_cuwh >> 1);
    }
}

void enc_sbac_encode_bin_trm(u32 bin, ENC_SBAC* sbac, COM_BSW* bs)
{
#if AEC_STAGE3_PHASE2_DEBUG
#if AEC_STAGE3_CTX_PHASE2_DEBUG
    //fprintf(fp_ctx, "method: 3, symbol: %d, model2_idx: 000, model1_idx: 000\n", bin);
    fprintf(fp_ctx, "3 %d 000 000\n", bin);
#endif
#if AEC_STAGE3_RLPS_PHASE2_DEBUG
    fprintf(fp_rLPS, "rLPS_o = %03d, emb_o = %d\n", 1, !bin);
#endif
#if AEC_STAGE3_BINA_PHASE2_DEBUG
    fprintf(fp_bina, "encode bin:%d, range_in=%d, low_in=%d, model_in1=0, model_in2=0, range_out=0, low_out=0, method=3\n", bin, sbac->range, sbac->code & 0x1FF);
#endif
#endif
    int s_flag = (sbac->range == QUAR_HALF_PROB);
    u32 rMPS = (sbac->range - 1) | 0x100;
    (sbac->range) -= 2;
    if (bin)
    {
        sbac->range = QUAR_HALF_PROB;
        sbac->code = ((sbac->code << s_flag) + rMPS) << 8;
        sbac->left_bits -= (8 + s_flag);
        if (sbac->left_bits < 12)
        {
            sbac_carry_propagate(sbac, bs);
        }
    }
    else
    {
        if (s_flag)
        {
            sbac->code <<= 1;
            if (--sbac->left_bits < 12)
            {
                sbac_carry_propagate(sbac, bs);
            }
        }
        sbac->range = rMPS;
    }
}

int is_tb_avaliable(COM_INFO_HLS info, COM_MODE* mod_info_curr)
{
    int log2_w = mod_info_curr->cu_width_log2;
    int log2_h = mod_info_curr->cu_height_log2;
    PART_SIZE pb_part_size = (PART_SIZE)mod_info_curr->pb_part;
    int pred_mode = mod_info_curr->cu_mode;

    //common intra: always infer TB part
    if (pred_mode == MODE_INTRA)
        return 0;

#if INTERPF
    if (mod_info_curr->inter_filter_flag)
    {
        return 0;
    }
#endif
#if IPC_TEMP
    if (mod_info_curr->ipc_flag)
    {
        return 0;
    }
#endif

    //inter or IBC: signal for DT and PBT cases
    int avaliable = 0;
    if (info.sqh.position_based_transform_enable_flag && (pb_part_size == SIZE_2Nx2N && abs(log2_w - log2_h) <= 1 && log2_w <= 5 && log2_w >= 3 && log2_h <= 5 && log2_h >= 3))
    {
        avaliable = 1;
    }
    return avaliable;
}
static void sbac_write_unary_sym(u32 sym, u32 num_ctx, SBAC_CTX_MODEL model)
{
    u32 ctx_idx = 0;
    // TODO: check num?
    do
    {
        //enc_sbac_encode_bin(sym ? 0 : 1, sbac, model + aec_min(ctx_idx, num_ctx - 1), bs);
        aec_stage3_phase2( 1, 0, sym ? 0 : 1, (model + aec_min(ctx_idx, num_ctx - 1) + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        ctx_idx++;
    } while (sym--);
}
static void sbac_encode_bin_ep(u32 bin, ENC_SBAC* sbac, COM_BSW* bs)
{
#if AEC_STAGE3_PHASE2_DEBUG
#if AEC_STAGE3_CTX_PHASE2_DEBUG
    //fprintf(fp_ctx, "method: 1, symbol: %d, model2_idx: 000, model1_idx: 000\n", bin);//, model=0x%04x\n, (*model) & 0x1FFF);
    fprintf(fp_ctx, "1 %d 000 000\n", (bin != 0));//, model=0x%04x\n, (*model) & 0x1FFF);
#endif
#if AEC_STAGE3_RLPS_PHASE2_DEBUG
    fprintf(fp_rLPS, "rLPS_o = %03d, emb_o = %d\n", 256, !(bin != 0));
#endif
#if AEC_STAGE3_BINA_PHASE2_DEBUG
    fprintf(fp_bina, "encode bin:%d, range_in=%d, low_in=%d, model_in1=0, model_in2=0, range_out=0, low_out=0, method=1\n", (bin != 0), sbac->range, sbac->code & 0x1FF);
#endif
#endif
#if TRACE_BIN
    COM_TRACE_COUNTER;
    COM_TRACE_STR("range ");
    COM_TRACE_INT(sbac->range);
    COM_TRACE_STR("\n");
#endif
    (sbac->code) <<= 1;
    if (bin != 0)
    {
        (sbac->code) += (sbac->range);
    }
    if (--(sbac->left_bits) < 12)
    {
        sbac_carry_propagate(sbac, bs);
    }
}
// #if CUDQP

// int enc_eco_cu_delta_qp(int num_delta_qp, int qp_delta)
// {
//     int cu_qp_delta_abs = qp_delta < 0 ? -qp_delta : qp_delta;
//     int cu_qp_delta_sign = qp_delta < 0 ? 1 : 0;
//     int bin0 = cu_qp_delta_abs == 0;
//     int ctx_bin0 = aec_min(num_delta_qp, 2);
//     //enc_sbac_encode_bin(bin0, sbac, sbac_ctx->cu_qp_delta_abs + ctx_bin0, bs);
//     aec_stage3_phase2( 1, 0, bin0, 149 + ctx_bin0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
//     if (!bin0)
//     {
//         sbac_write_unary_sym(cu_qp_delta_abs - 1, 1, 151);
//         //sbac_encode_bin_ep(cu_qp_delta_sign, sbac, bs);
//         aec_stage3_phase2( 1, 1, cu_qp_delta_sign, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
//     }
//     COM_TRACE_COUNTER;
//     COM_TRACE_STR("cu qp delta abs:");
//     COM_TRACE_INT(cu_qp_delta_abs);
//     COM_TRACE_STR("ctx bin0:");
//     COM_TRACE_INT(ctx_bin0);
//     COM_TRACE_STR("cu qp delta sign:");
//     COM_TRACE_INT(cu_qp_delta_sign);
//     COM_TRACE_STR("\n");
//     return COM_OK;
// }
// #endif

#if SBT_TEMP
int enc_eco_sbt_info(int log2_cuw, int log2_cuh, int sbt_info, u8 sbt_avail)
{
    u8 mode_vert = (sbt_avail >> 0) & 0x1;
    u8 mode_hori = (sbt_avail >> 1) & 0x1;
    u8 mode_vert_quad = (sbt_avail >> 2) & 0x1;
    u8 mode_hori_quad = (sbt_avail >> 3) & 0x1;
    u8 num_sbt_mode_avail = mode_vert + mode_hori + mode_vert_quad + mode_hori_quad;

    if (num_sbt_mode_avail == 0)
    {
        assert(sbt_info == 0);
        return COM_OK;
    }
    else
    {
        u8 sbt_idx = get_sbt_idx(sbt_info);
        u8 sbt_flag = sbt_idx != 0;
        u8 sbt_dir = is_sbt_horizontal(sbt_idx);
        u8 sbt_quad = is_sbt_quad_size(sbt_idx);
        u8 sbt_pos = get_sbt_pos(sbt_info);
        int size = 1 << (log2_cuw + log2_cuh);
        u8 ctx_sbt_flag = size >= 256 ? 0 : 1;
        u8 ctx_sbt_quad = 2;
        u8 ctx_sbt_dir = ((log2_cuw == log2_cuh) ? 0 : (log2_cuw < log2_cuh ? 1 : 2)) + 3;
        u8 ctx_sbt_pos = 6;

       

        if (sbt_idx == 0)
            assert(sbt_pos == 0);

        //enc_sbac_encode_bin(sbt_flag, sbac, sbac_ctx->sbt_info + ctx_sbt_flag, bs);
        aec_stage3_phase2( 1, 0, sbt_flag, 154 + ctx_sbt_flag, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        COM_TRACE_STR("sbt_flag ");
        COM_TRACE_INT(sbt_flag);
        COM_TRACE_STR("\n");

        if (sbt_flag)
        {
            if ((mode_vert_quad || mode_hori_quad) && (mode_vert || mode_hori))
            {
                //enc_sbac_encode_bin(sbt_quad, sbac, sbac_ctx->sbt_info + ctx_sbt_quad, bs);
                aec_stage3_phase2( 1, 0, sbt_quad, 154 + ctx_sbt_quad, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                COM_TRACE_STR("sbt_quad ");
                COM_TRACE_INT(sbt_quad);
                COM_TRACE_STR("\n");
            }
            else
            {
                assert(sbt_quad == 0);
            }

            if ((sbt_quad && mode_vert_quad && mode_hori_quad) || (!sbt_quad && mode_vert && mode_hori))
            {
                //enc_sbac_encode_bin(sbt_dir, sbac, sbac_ctx->sbt_info + ctx_sbt_dir, bs);
                aec_stage3_phase2( 1, 0, sbt_dir, 154 + ctx_sbt_dir, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                COM_TRACE_STR("sbt_dir ");
                COM_TRACE_INT(sbt_dir);
                COM_TRACE_STR("\n");
            }
            else
            {
                assert(sbt_dir == ((sbt_quad && mode_hori_quad) || (!sbt_quad && mode_hori)));
            }

#if !ISBT
            //enc_sbac_encode_bin(sbt_pos, sbac, sbac_ctx->sbt_info + ctx_sbt_pos, bs);
            aec_stage3_phase2(sbac, bs, 1, 0, sbt_pos, 154 + ctx_sbt_dir, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#endif
            COM_TRACE_STR("sbt_pos ");
            COM_TRACE_INT(sbt_pos);
            COM_TRACE_STR("\n");
        }

        return COM_OK;
    }
}
#endif

#if ETS_TEMP
void enc_eco_ets_flag(int flag)
{
   
    //enc_sbac_encode_bin(flag, sbac, sbac->ctx.ets_flag, bs);
    aec_stage3_phase2( 1, 0, flag, 452, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}
#endif
#if IPCM
int enc_eco_cbf(COM_MODE* mod_info_curr, int tb_avaliable, int pb_part_size, int tb_part_size, int num_nz[MAX_NUM_TB][N_C], u8 pred_mode, s8 ipm[MAX_NUM_PB][2], u8 tree_status, ENC_CTX_HLS* ctx)
#else
int enc_eco_cbf(COM_MODE* mod_info_curr, COM_BSW* bs, int tb_avaliable, int pb_part_size, int tb_part_size, int num_nz[MAX_NUM_TB][N_C], u8 pred_mode, u8 tree_status, ENC_CTX_HLS* ctx)
#endif
{
    //COM_MODE* mod_info_curr = &ctx->core->mod_info_curr;
   
    int ctp_zero_flag = !is_cu_nz(num_nz);

    /* code allcbf */
    if (pred_mode != MODE_INTRA)
    {
        if (pred_mode == MODE_DIR)
        {
            assert(ctp_zero_flag == 0);
        }
        else
        {
#if CHROMA_NOT_SPLIT
            if (tree_status == TREE_LC)
            {
#endif
#if SEP_CONTEXT
                if (mod_info_curr->cu_width_log2 > 6 || mod_info_curr->cu_height_log2 > 6)
                {
                    //enc_sbac_encode_bin(ctp_zero_flag, sbac, sbac_ctx->ctp_zero_flag + 1, bs);
                    aec_stage3_phase2( 1, 0, ctp_zero_flag, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                    assert(ctp_zero_flag == 1);
                }
                else
#endif
                    //enc_sbac_encode_bin(ctp_zero_flag, sbac, sbac_ctx->ctp_zero_flag, bs);
                    aec_stage3_phase2( 1, 0, ctp_zero_flag, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                COM_TRACE_COUNTER;
                COM_TRACE_STR("ctp zero flag ");
                COM_TRACE_INT(ctp_zero_flag);
                COM_TRACE_STR("\n");

                if (ctp_zero_flag)
                {
                    for (int i = 0; i < MAX_NUM_TB; i++)
                    {
                        assert(num_nz[i][Y_C] == 0 && num_nz[i][U_C] == 0 && num_nz[i][V_C] == 0);
                    }
                    assert(tb_part_size == SIZE_2Nx2N);
                    return COM_OK;
                }
#if CHROMA_NOT_SPLIT
            }
#endif
        }

        if (tb_avaliable)
        {
            //enc_sbac_encode_bin(tb_part_size != SIZE_2Nx2N, sbac, sbac_ctx->tb_split, bs);
            aec_stage3_phase2( 1, 0, tb_part_size != SIZE_2Nx2N, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        else
        {
            assert(tb_part_size == SIZE_2Nx2N);
        }
        COM_TRACE_COUNTER;
        COM_TRACE_STR("tb_split ");
        COM_TRACE_INT(tb_part_size != SIZE_2Nx2N);
        COM_TRACE_STR("\n");

        if (tree_status == TREE_LC)
        {
            //enc_sbac_encode_bin(!!num_nz[TBUV0][U_C], sbac, sbac_ctx->cbf + 1, bs);
            // aec_stage3_phase2( 1, 0, !!num_nz[TBUV0][U_C], 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            //enc_sbac_encode_bin(!!num_nz[TBUV0][V_C], sbac, sbac_ctx->cbf + 2, bs);
            // aec_stage3_phase2( 1, 0, !!num_nz[TBUV0][V_C], 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

            aec_stage3_phase2(2, 
                0, !!num_nz[TBUV0][U_C], 147, 0,
                0, !!num_nz[TBUV0][V_C], 148, 0,
                0, 0, 0, 0, 
                0, 0, 0, 0
            );

            COM_TRACE_STR("cbf U ");
            COM_TRACE_INT(!!num_nz[TBUV0][U_C]);
            COM_TRACE_STR("cbf V ");
            COM_TRACE_INT(!!num_nz[TBUV0][V_C]);
            COM_TRACE_STR("\n");
        }
        else
        {
            assert(tree_status == TREE_L);
            COM_TRACE_STR("[cbf uv at tree L]\n");
        }

        COM_TRACE_STR("cbf Y ");
#if CHROMA_NOT_SPLIT
        if (num_nz[TBUV0][U_C] + num_nz[TBUV0][V_C] == 0 && tb_part_size == SIZE_2Nx2N && tree_status == TREE_LC)
#else
        if (num_nz[TBUV0][U_C] + num_nz[TBUV0][V_C] == 0 && tb_part_size == SIZE_2Nx2N)
#endif
        {
            assert(num_nz[TB0][Y_C] > 0);
            COM_TRACE_INT(1);
        }
        else
        {
            int i, part_num = get_part_num((PART_SIZE)tb_part_size);
            aec_stage3_phase2(part_num, 
                0, !!num_nz[0][Y_C], 146, 0, 
                0, !!num_nz[1][Y_C], 146, 0,
                0, !!num_nz[2][Y_C], 146, 0,
                0, !!num_nz[3][Y_C], 146, 0
            );
            // for (i = 0; i < part_num; i++)
            // {
            //     //enc_sbac_encode_bin(!!num_nz[i][Y_C], sbac, sbac_ctx->cbf, bs);
            //     aec_stage3_phase2( 1, 0, !!num_nz[i][Y_C], 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            //     COM_TRACE_INT(!!num_nz[i][Y_C]);
            // }
        }
        COM_TRACE_STR("\n");

#if SBT_TEMP
        u8 sbt_avail = com_sbt_allow(mod_info_curr, ctx->info.sqh.sbt_enable_flag, tree_status);
        if (sbt_avail && tb_part_size == SIZE_2Nx2N && num_nz[TB0][Y_C])
        {
            enc_eco_sbt_info(mod_info_curr->cu_width_log2, mod_info_curr->cu_height_log2, mod_info_curr->sbt_info, sbt_avail);
        }
        else
        {
            assert(mod_info_curr->sbt_info == 0);
        }
#endif
    }
    else
    {
#if IPCM
        if (!(ipm[PB0][0] == IPD_IPCM))
        {
#endif
            int i, part_num = get_part_num((PART_SIZE)tb_part_size);
            //assert(tb_part_size == get_tb_part_size_by_pb(pb_part_size, pred_mode));

            COM_TRACE_STR("cbf Y ");
            aec_stage3_phase2(part_num,
                0, !!num_nz[0][Y_C], 146, 0,
                0, !!num_nz[1][Y_C], 146, 0,
                0, !!num_nz[2][Y_C], 146, 0,
                0, !!num_nz[3][Y_C], 146, 0
            );
            // for (i = 0; i < part_num; i++)
            // {
            //     //enc_sbac_encode_bin(!!num_nz[i][Y_C], sbac, sbac_ctx->cbf, bs);
            //     aec_stage3_phase2( 1, 0, !!num_nz[i][Y_C], 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            //     COM_TRACE_INT(!!num_nz[i][Y_C]);
            // }
            COM_TRACE_STR("\n");
#if ETS_TEMP
            if (tb_part_size == SIZE_2Nx2N && num_nz[TB0][Y_C] && mod_info_curr->cu_width_log2 < 6 && mod_info_curr->cu_height_log2 < 6
                && pred_mode == MODE_INTRA && ctx->info.pic_header.ph_ists_enable_flag
#if FIX_334
                && ctx->info.sqh.ists_enable_flag
#endif
                )
            {
                enc_eco_ets_flag(mod_info_curr->ist_tu_flag != 0);
            }
#endif
#if IPCM
        }
#endif
        if (tree_status == TREE_LC)
        {
#if IPCM
            if (!(ipm[PB0][0] == IPD_IPCM && ipm[PB0][1] == IPD_DM_C))
            {
#endif
#if PMC_TEMP
                s8 ipm_c = ipm[PB0][1];
                int bMcpm = com_is_mcpm(ipm_c);
                if (bMcpm)
                {
                    assert(IS_RIGHT_CBF_U(num_nz[TBUV0][U_C]));
                }
                else
                {
#endif
#if EPMC_TEMP
                    s8 ipm_c_t = ipm[PB0][1];
                    int bEmcpm = com_is_emcpm(ipm_c_t);
                    if (bEmcpm)
                    {
                        assert(IS_RIGHT_CBF_U(num_nz[TBUV0][U_C]));
                    }
                    else
                    {
#endif
                        //enc_sbac_encode_bin(!!num_nz[TBUV0][U_C], sbac, sbac_ctx->cbf + 1, bs);
                        aec_stage3_phase2( 1, 0, !!num_nz[TBUV0][U_C], 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#if EPMC_TEMP
                    }
#endif
#if PMC_TEMP
                }
#endif
                //enc_sbac_encode_bin(!!num_nz[TBUV0][V_C], sbac, sbac_ctx->cbf + 2, bs);
                aec_stage3_phase2( 1, 0, !!num_nz[TBUV0][V_C], 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                COM_TRACE_STR("cbf U ");
                COM_TRACE_INT(!!num_nz[TBUV0][U_C]);
                COM_TRACE_STR("cbf V ");
                COM_TRACE_INT(!!num_nz[TBUV0][V_C]);
                COM_TRACE_STR("\n");
#if IPCM
            }
#endif
        }
        else
        {
            assert(tree_status == TREE_L);
            COM_TRACE_STR("[cbf uv at tree L]\n");
        }
    }

    return COM_OK;
}
#if CHROMA_NOT_SPLIT
int enc_eco_cbf_uv(int num_nz[MAX_NUM_TB][N_C]
#if PMC_TEMP || EPMC_TEMP
    , s8 ipm_c
#endif
)
{

    assert(num_nz[TBUV0][Y_C] == 0);
#if PMC_TEMP
    int bMcpm = com_is_mcpm(ipm_c);
    if (bMcpm)
    {
        assert(IS_RIGHT_CBF_U(num_nz[TBUV0][U_C]));
    }
    else
    {
#endif
#if EPMC_TEMP
        int bEmcpm = com_is_emcpm(ipm_c);
        if (bEmcpm)
        {
            assert(IS_RIGHT_CBF_U(num_nz[TBUV0][U_C]));
        }
        else
        {
#endif
            //enc_sbac_encode_bin(!!num_nz[TBUV0][U_C], sbac, sbac_ctx->cbf + 1, bs);
            aec_stage3_phase2( 1, 0, !!num_nz[TBUV0][U_C], 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#if EPMC_TEMP
        }
#endif
#if PMC_TEMP
    }
#endif
    //enc_sbac_encode_bin(!!num_nz[TBUV0][V_C], sbac, sbac_ctx->cbf + 2, bs);
    aec_stage3_phase2( 1, 0, !!num_nz[TBUV0][V_C], 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

    COM_TRACE_STR("cbf U ");
    COM_TRACE_INT(!!num_nz[TBUV0][U_C]);
    COM_TRACE_STR("cbf V ");
    COM_TRACE_INT(!!num_nz[TBUV0][V_C]);
    COM_TRACE_STR("\n");
    return COM_OK;
}
#endif



#if IPCM
void encode_ipcm(s16 pcm[MAX_CU_DIM], int tb_width, int tb_height, int cu_width, int bit_depth, int ch_type)
{
    int i, j;
#if ENC_DEC_TRACE
    COM_TRACE_STR("pcm_");
    COM_TRACE_INT(ch_type);
    COM_TRACE_STR(":\n");
#endif
    for (i = 0; i < tb_height; i++)
    {
        for (j = 0; j < tb_width; j++)
        {
            if ((& aec_sbac_local)->is_bitcount)
            {
                com_bsw_write_est(&aec_sbac_local, bit_depth);
            }
            else
            {
                com_bsw_write_phase2(&AEC_DATA_output.bs, pcm[i * cu_width + j], bit_depth);
            }
#if ENC_DEC_TRACE
            COM_TRACE_INT(pcm[i * cu_width + j]);
#endif
        }
#if ENC_DEC_TRACE
        COM_TRACE_STR("\n");
#endif
    }
}
#endif

void enc_sbac_init(COM_BSW* bs)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    sbac->range = 0x1FF;
    sbac->code = 0;
    sbac->left_bits = 23;
    sbac->pending_byte = 0;
    sbac->is_pending_byte = 0;
    sbac->stacked_ff = 0;
}

static void get_tb_width_height_log2(int log2_w, int log2_h, PART_SIZE part, int* log2_tb_w, int* log2_tb_h)
{
    switch (part)
    {
    case SIZE_2Nx2N:
        break;
    case SIZE_NxN:
        log2_w--;
        log2_h--;
        break;
    case SIZE_2NxhN:
        log2_h -= 2;
        break;
    case SIZE_hNx2N:
        log2_w -= 2;
        break;
    default:
        assert(0);
        break;
    }

    *log2_tb_w = log2_w;
    *log2_tb_h = log2_h;
}


#if 0
static void sbac_write_truncate_unary_sym(u32 sym, u32 num_ctx, u32 max_num, SBAC_CTX_MODEL model)
{
    u32 ctx_idx = 0;
    // TODO: this function not called? remove it?
    do
    {
        //enc_sbac_encode_bin(sym ? 0 : 1, sbac, model + aec_min(ctx_idx, num_ctx - 1), bs);
        aec_stage3_phase2( 1, 0, (sym ? 0 : 1), (model + aec_min(ctx_idx, num_ctx - 1) + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        ctx_idx++;
    } while (ctx_idx < max_num - 1 && sym--);
}
#endif
static void sbac_write_truncate_unary_sym1(u32 sym, u32 num_ctx, u32 max_num, SBAC_CTX_MODEL model)
{
#pragma HLS INLINE off
    u32 ctx_idx = 0;
    int bin_num = 0;
    int symbol[16] = {0,};
    int context[16] = {0, };
    assert(max_num <= 15); // max_num should be smaller than 16.
    //    do
    //    {
    //#pragma HLS loop_tripcount max=1
    //        enc_sbac_encode_bin(sym ? 0 : 1, sbac, model + avs3_min(ctx_idx, num_ctx - 1), bs);
    //        ctx_idx++;
    //    }
    //    while (ctx_idx < max_num - 1 && sym--);
    u32 ctx_idx_temp = (u32)0;
    //enc_sbac_encode_bin((u32)(sym ? 0 : 1), sbac,
    //    model + ((ctx_idx < num_ctx - ((unsigned int)1) ? ctx_idx : num_ctx - ((unsigned int)1))), bs);
    symbol[bin_num] = (u32)(sym ? 0 : 1);
    context[bin_num] = (model + ((ctx_idx < num_ctx - ((unsigned int)1) ? ctx_idx : num_ctx - ((unsigned int)1))) + 1);
    bin_num++;

    // aec_stage3_phase2( 1, 0, (u32)(sym ? 0 : 1),
    //     (model + ((ctx_idx < num_ctx - ((unsigned int)1) ? ctx_idx : num_ctx - ((unsigned int)1))) + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    ctx_idx++;

    for (ctx_idx_temp = ctx_idx; ctx_idx_temp < max_num - ((unsigned int)1) && sym--; ctx_idx_temp++) {
#pragma HLS loop_tripcount max=4096
        //enc_sbac_encode_bin((u32)(sym ? 0 : 1), sbac,
        //    model + ((ctx_idx_temp < num_ctx - ((unsigned int)1) ? ctx_idx_temp : num_ctx - ((unsigned int)1))), bs);
        // aec_stage3_phase2( 1, 0, (u32)(sym ? 0 : 1),
        //     (model + ((ctx_idx_temp < num_ctx - ((unsigned int)1) ? ctx_idx_temp : num_ctx - ((unsigned int)1))) + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        symbol[bin_num] = (u32)(sym ? 0 : 1);
        context[bin_num] = (model + ((ctx_idx_temp < num_ctx - ((unsigned int)1) ? ctx_idx_temp : num_ctx - ((unsigned int)1))) + 1);
        bin_num++;
    }
    int left_bin = bin_num;
    for (int i = 0; i < (bin_num-1)/4 + 1; i++)
    {
        int coded_bin = left_bin >= 4 ? 4 : left_bin;
        aec_stage3_phase2(coded_bin,
            0, symbol[i * 4 + 0], context[i * 4 + 0], 0,
            0, symbol[i * 4 + 1], context[i * 4 + 1], 0,
            0, symbol[i * 4 + 2], context[i * 4 + 2], 0,
            0, symbol[i * 4 + 3], context[i * 4 + 3], 0
        );
        left_bin = left_bin - 4;
    }
}

static void sbac_encode_bins_ep_msb(u32 value, int num_bin)
{
#pragma HLS inline
    int bin = num_bin - 1;
    // aec_stage3_phase2(1, 1, value & (1 << (u32)bin), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    int total_cnt = num_bin == 0 ? 0 : (num_bin - 1) / 4 + 1;
    for (int m = 0; m < total_cnt; m++)
    {
        int cnt = ((bin + 1) >= 4) ? 4 : bin + 1;
        aec_stage3_phase2(cnt,
            1, value & (1 << (u32)bin), 0, 0,
            1, value & (1 << (u32)bin - 1), 0, 0,
            1, value & (1 << (u32)bin - 2), 0, 0,
            1, value & (1 << (u32)bin - 3), 0, 0);
        bin = bin - 4;
    }
    // for (int m = 0; m < num_bin / 4; m++)
    // {
    //     aec_stage3_phase2(4,
    //         1, value & (1 << (u32)bin), 0, 0,
    //         1, value & (1 << (u32)bin-1), 0, 0,
    //         1, value & (1 << (u32)bin-2), 0, 0,
    //         1, value & (1 << (u32)bin-3), 0, 0);
    //     bin = bin - 4;
    // }
    // if (num_bin % 4 == 1) {
    //     aec_stage3_phase2(1, 1, value & (1 << (u32)bin), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    // }
    // else if (num_bin % 4 == 2) {
    //     aec_stage3_phase2(2,
    //         1, value & (1 << (u32)bin), 0, 0,
    //         1, value & (1 << (u32)bin - 1), 0, 0,
    //         0, 0, 0, 0,
    //         0, 0, 0, 0);
    // }
    // else if (num_bin % 4 == 3) {
    //     aec_stage3_phase2(3,
    //         1, value & (1 << (u32)bin), 0, 0,
    //         1, value & (1 << (u32)bin - 1), 0, 0,
    //         1, value & (1 << (u32)bin - 2), 0, 0,
    //         0, 0, 0, 0);
    // }

    // for (bin = num_bin - 1; bin >= 0; bin--)
    // {
    //     //sbac_encode_bin_ep(value & (1 << (u32)bin), sbac, bs);
    //     aec_stage3_phase2( 1, 1, value & (1 << (u32)bin), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    // }
}

static void sbac_encode_bins_ep_msb1(u32 value, int num_bin)
{
#pragma HLS INLINE off
    int left_bin = num_bin;
    if (num_bin <= 0)
    {
        return;
    }
    // TODO: not check right?
    // int bin_shift = num_bin - 1;
    for (int i = 0; i < (num_bin - 1) / 4 + 1; i++)
    {
        int code_bin = left_bin >= 4 ? 4 : left_bin;
        aec_stage3_phase2(code_bin,
            1, value & (1 << (u32)((left_bin - 1) >= 0 ? (left_bin - 1) : 0)), 0, 0,
            1, value & (1 << (u32)((left_bin - 2) >= 0 ? (left_bin - 2) : 0)), 0, 0,
            1, value & (1 << (u32)((left_bin - 3) >= 0 ? (left_bin - 3) : 0)), 0, 0,
            1, value & (1 << (u32)((left_bin - 4) >= 0 ? (left_bin - 4) : 0)), 0, 0
        );
        left_bin = left_bin - 4;
    }

//     int bin = 0;
//     for (bin = num_bin - 1; bin >= 0; bin--) {
// #pragma HLS LOOP_TRIPCOUNT max=4096
//         //sbac_encode_bin_ep(value & (1 << (u32)bin), sbac, bs);
//         aec_stage3_phase2( 1, 1, value & (1 << (u32)bin), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
// 
//     }
}

static void sbac_write_unary_sym_ep(u32 sym)
{
#pragma HLS inline
    u32 ctx_idx = 0;
    int sym_tmp = sym;

    int total_cnt = (sym / 4) + 1;
    int symbol_num = sym + 1;
    int cnt = symbol_num;
    for (int i = 0; i < total_cnt; i++)
    {
        cnt = symbol_num >= 4 ? 4 : symbol_num;
        aec_stage3_phase2(cnt,
            1, sym_tmp ? 0 : 1, 0, 0,
            1, sym_tmp - 1 ? 0 : 1, 0, 0,
            1, sym_tmp - 2 ? 0 : 1, 0, 0,
            1, sym_tmp - 3 ? 0 : 1, 0, 0
        );
        symbol_num = symbol_num - 4;
        sym_tmp = sym_tmp - 4;
    }

    /*u32 ctx_idx = 0;
    int sym_tmp = sym;
    for (int i = 0; i < (sym+1)/4; i++)
    {
        aec_stage3_phase2(4, 
            1, sym_tmp ? 0 : 1, 0, 0,
            1, sym_tmp-1 ? 0 : 1, 0, 0,
            1, sym_tmp-2 ? 0 : 1, 0, 0,
            1, sym_tmp-3 ? 0 : 1, 0, 0
        );
        sym_tmp = sym_tmp - 4;
    }
    if (sym % 4 == 0)
    {
        aec_stage3_phase2(1,
            1, sym_tmp ? 0 : 1, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0
        );
    }
    else if (sym % 4 == 1)
    {
        aec_stage3_phase2(2,
            1, sym_tmp ? 0 : 1, 0, 0,
            1, sym_tmp - 1 ? 0 : 1, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0
        );
    }
    else if (sym % 4 == 2)
    {
        aec_stage3_phase2(3,
            1, sym_tmp ? 0 : 1, 0, 0,
            1, sym_tmp - 1 ? 0 : 1, 0, 0,
            1, sym_tmp - 2 ? 0 : 1, 0, 0,
            0, 0, 0, 0
        );
    }*/
    
    // do
    // {
    //     //sbac_encode_bin_ep(sym ? 0 : 1, sbac, bs);
    //     // aec_stage3_phase2( 1, 1, sym ? 0 : 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    //     ctx_idx++;
    // } while (sym--);
}

static void sbac_write_unary_sym_ep1(u32 sym)
{
#pragma HLS INLINE off
    u32 ctx_idx = 0;

    //    {
    //#pragma HLS loop_tripcount max=17
    //        sbac_encode_bin_ep(sym ? 0 : 1, sbac, bs);
    //        ctx_idx++;
    //    }
    //    while (sym--);
    int coded_sym = sym;
    u32 left_bin = sym + 1;
    for (int i = 0; i < (sym + 1) / 4 + 1; i++)
    {
        int code_bin = left_bin >= 4 ? 4 : left_bin;
        aec_stage3_phase2(code_bin,
            1, (u32)(left_bin - 1 ? 0 : 1), 0, 0,
            1, (u32)(left_bin - 2 ? 0 : 1), 0, 0,
            1, (u32)(left_bin - 3 ? 0 : 1), 0, 0,
            1, (u32)(left_bin - 4 ? 0 : 1), 0, 0
        );
        left_bin = left_bin - 4;
    }

//     for (int i = sym; i >= 0; i--) {
// #pragma HLS loop_tripcount max=4096
//         //sbac_encode_bin_ep((u32)(sym ? 0 : 1), sbac, bs);
//         aec_stage3_phase2( 1, 1, (u32)(sym ? 0 : 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
//         sym--;
//         ctx_idx++;
//     }
}
#if 0
static int enc_eco_run(u32 sym, SBAC_CTX_MODEL model)
{
    int exp_golomb_order = 0;

    COM_TRACE_COUNTER;
    COM_TRACE_STR("run:");
    COM_TRACE_INT(sym);
    COM_TRACE_STR("\n");

    if (sym < 16)
    {
        sbac_write_truncate_unary_sym(sym, 2, 17, model);
    }
    else
    {
        sym -= 16;

        sbac_write_truncate_unary_sym(16, 2, 17, model);

        // exp_golomb part
        while ((int)sym >= (1 << exp_golomb_order))
        {
            sym = sym - (1 << exp_golomb_order);
            exp_golomb_order++;
        }

        sbac_write_unary_sym_ep(exp_golomb_order);
        sbac_encode_bins_ep_msb(sym, exp_golomb_order);

    }

    return COM_OK;
}
static void enc_sbac_encode_bin_for_rdoq(u32 bin, SBAC_CTX_MODEL* model)
{
    u16 cmps = (*model) & 1;
#if CABAC_MULTI_PROB
    if (g_compatible_back)
    {
        mCabac_ws = 6;
    }
    u8 cycno = (*model) >> CYCNO_SHIFT_BITS;
    if (cycno < 0)
        cycno = 0;
    int is_LPS = 0;
    u16 p0 = ((*model) >> PROB_BITS) & MCABAC_PROB_MASK;
    u16 p1 = ((*model) >> 1) & MCABAC_PROB_MASK;
    u16 prob_lps = (u16)(p0 + p1 + 1) >> 1;
    prob_lps = prob_lps < 6 ? 6 : prob_lps;
    u8 cwr = 0;
    if (g_compatible_back)
    {
        cwr = (cycno <= 1) ? 3 : (cycno == 2) ? 4 : (mCabac_ws - 1);
    }
    else
    {
        cwr = (cycno < counter_thr1) ? (mCabac_ws - 2) : (mCabac_ws - 1);
    }
    cwr = COM_CLIP(cwr, MIN_WINSIZE, MAX_WINSIZE);
    u8 mcabac_flag = (cycno == counter_thr2) ? 1 : 0;
    u16 LG_S = cwr2LGS[cwr];
    if (bin != cmps) // LPS
    {
        if (g_compatible_back)
        {
            cycno = (cycno <= 2) ? (cycno + 1) : 3;
        }
        else
        {
            if (mcabac_flag)
            {
                cycno = counter_thr2;
            }
            else
            {
                cycno = cycno + 1;
            }
        }
        is_LPS = 1;
    }
    else
    {
        if (cycno == 0)
        {
            cycno = 1;
        }
    }

    //update probability estimation
    if (is_LPS)
    {
        if (g_compatible_back)
        {
            p0 = p0 + LG_S;
            p1 = p0;
        }
        else
        {
            if (mcabac_flag)
            {
                p0 = p0 + LG_S;
                p1 = p1 + cwr2LGS[mCabac_ws + 1];
            }
            else
            {
                p0 = p0 + LG_S;
                p1 = p0;
            }
        }

        if ((p0 >= (256 << LG_PMPS_SHIFTNO)) || (p1 >= (256 << LG_PMPS_SHIFTNO)))
        {
            if (p0 >= (256 << LG_PMPS_SHIFTNO))
            {
                p0 = (u16)(512 << LG_PMPS_SHIFTNO) - 1 - p0;
            }
            if (p1 >= (256 << LG_PMPS_SHIFTNO))
            {
                p1 = (u16)(512 << LG_PMPS_SHIFTNO) - 1 - p1;
            }
            cmps = !cmps;
        }
    }
    else
    {
        if (g_compatible_back)
        {
            p0 = p0 - (u16)(p0 >> cwr) - (u16)(p0 >> (cwr + 2));
            p1 = p0;
        }
        else
        {
            if (mcabac_flag)
            {
                p0 = p0 - (u16)(p0 >> cwr) - (u16)(p0 >> (cwr + 2));
                p1 = p1 - (u16)(p1 >> (mCabac_ws + 1)) - (u16)(p1 >> (mCabac_ws + 3));
            }
            else
            {
                p0 = p0 - (u16)(p0 >> cwr) - (u16)(p0 >> (cwr + 2));
                p1 = p0;
            }
        }
    }
    *model = (p1 << 1) + cmps + (cycno << CYCNO_SHIFT_BITS) + (p0 << PROB_BITS);
#else
    if (bin != cmps)
    {
        *model = tab_cycno_lgpmps_mps[(*model) | (1 << 13)];
    }
    else
    {
        *model = tab_cycno_lgpmps_mps[*model];
    }
#endif
}
static void enc_eco_run_for_rdoq(u32 sym, u32 num_ctx, SBAC_CTX_MODEL* model)
{
    u32 ctx_idx = 0;

    do
    {
        enc_sbac_encode_bin_for_rdoq(sym ? 0 : 1, model + aec_min(ctx_idx, num_ctx - 1));
        ctx_idx++;
    } while (sym--);
}

static int enc_eco_level(u32 sym, SBAC_CTX_MODEL model)
{
    int exp_golomb_order = 0;

    COM_TRACE_COUNTER;
    COM_TRACE_STR("level:");
    COM_TRACE_INT(sym);
    COM_TRACE_STR("\n");

    if (sym < 8)
    {
        sbac_write_truncate_unary_sym(sym, 2, 9, model);
    }
    else
    {
        sym -= 8;

        sbac_write_truncate_unary_sym(8, 2, 9, model);

        // exp_golomb part
        while ((int)sym >= (1 << exp_golomb_order))
        {
            sym = sym - (1 << exp_golomb_order);
            exp_golomb_order++;
        }

        sbac_write_unary_sym_ep(exp_golomb_order);
        sbac_encode_bins_ep_msb(sym, exp_golomb_order);

    }

    return COM_OK;
}
#endif
static void enc_sbac_encode_binW(u32 bin, ENC_SBAC* sbac, SBAC_CTX_MODEL* model1, SBAC_CTX_MODEL* model2, COM_BSW* bs)
{
#if AEC_STAGE3_PHASE2_DEBUG
#if AEC_STAGE3_CTX_PHASE2_DEBUG
    //fprintf(fp_ctx, "method: 2, symbol: %d, model2_idx: %03d, model1_idx: %03d\n", bin, (u32)((model2 - aec_ctx.last2) + 1), (u32)((model1 - aec_ctx.delta_qp) + 1));//, model=0x%04x\n, (*model) & 0x1FFF);
    fprintf(fp_ctx, "2 %d %03d %03d\n", bin, (u32)((model2 - (&aec_ctx_phase2)->last2) + 1), (u32)((model1 - (&aec_ctx_phase2)->skip_flag) + 1));//, model=0x%04x\n, (*model) & 0x1FFF);
#endif
#if AEC_STAGE3_BINA_PHASE2_DEBUG
    fprintf(fp_bina, "encode bin:%d, range_in=%d, low_in=%d, model_in1=%x, model_in2=%x, ", bin, sbac->range, sbac->code & 0x1FF, (*model1), (*model2));
#endif
#endif
#if CABAC_MULTI_PROB
    if (g_compatible_back)
    {
        mCabac_ws = 6;
    }
    u8 cycno1 = (*model1) >> CYCNO_SHIFT_BITS;
    u8 cycno2 = (*model2) >> CYCNO_SHIFT_BITS;
    if (cycno1 < 0)
        cycno1 = 0;
    if (cycno2 < 0)
        cycno2 = 0;
    int is_LPS = 0;
    u16 p1_0 = ((*model1) >> PROB_BITS) & MCABAC_PROB_MASK;
    u16 p1_1 = ((*model1) >> 1) & MCABAC_PROB_MASK;
    u16 prob_lps1 = (u16)(p1_0 + p1_1 + 1) >> 1;
    prob_lps1 = prob_lps1 < 6 ? 6 : prob_lps1;
    u16 p2_0 = ((*model2) >> PROB_BITS) & MCABAC_PROB_MASK;
    u16 p2_1 = ((*model2) >> 1) & MCABAC_PROB_MASK;
    u16 prob_lps2 = (u16)(p2_0 + p2_1 + 1) >> 1;
    prob_lps2 = prob_lps2 < 6 ? 6 : prob_lps2;
    u8 cwr1 = 0;
    if (g_compatible_back)
    {
        cwr1 = (cycno1 <= 1) ? 3 : (cycno1 == 2) ? 4 : (mCabac_ws - 1);
    }
    else
    {
        cwr1 = (cycno1 < counter_thr1) ? (mCabac_ws - 2) : (mCabac_ws - 1);
    }
    cwr1 = COM_CLIP(cwr1, MIN_WINSIZE, MAX_WINSIZE);
    u8 mcabac_flag1 = (cycno1 == counter_thr2) ? 1 : 0;
    u16 LG_S1 = cwr2LGS[cwr1];
    u8 cwr2 = 0;
    if (g_compatible_back)
    {
        cwr2 = (cycno2 <= 1) ? 3 : (cycno2 == 2) ? 4 : (mCabac_ws - 1);
    }
    else
    {
        cwr2 = (cycno2 < counter_thr1) ? (mCabac_ws - 2) : (mCabac_ws - 1);
    }
    cwr2 = COM_CLIP(cwr2, MIN_WINSIZE, MAX_WINSIZE);
    u8 mcabac_flag2 = (cycno2 == counter_thr2) ? 1 : 0;
    u16 LG_S2 = cwr2LGS[cwr2];
#endif
    u16 prob_lps;
#if !CABAC_MULTI_PROB
    u16 prob_lps1 = ((*model1) & PROB_MASK) >> 1;
    u16 prob_lps2 = ((*model2) & PROB_MASK) >> 1;
#endif
    u16 cmps;
    u16 cmps1 = (*model1) & 1;
    u16 cmps2 = (*model2) & 1;
    u32 rLPS;
    u32 rMPS;
    int s_flag;

    if (cmps1 == cmps2)
    {
        cmps = cmps1;
        prob_lps = (prob_lps1 + prob_lps2) >> 1;
    }
    else
    {
        if (prob_lps1 < prob_lps2)
        {
            cmps = cmps1;
            prob_lps = (256 << LG_PMPS_SHIFTNO) - 1 - ((prob_lps2 - prob_lps1) >> 1);
        }
        else
        {
            cmps = cmps2;
            prob_lps = (256 << LG_PMPS_SHIFTNO) - 1 - ((prob_lps1 - prob_lps2) >> 1);
        }
    }

    rLPS = prob_lps >> LG_PMPS_SHIFTNO;

#if AEC_STAGE3_PHASE2_DEBUG
#if AEC_STAGE3_RLPS_PHASE2_DEBUG
    fprintf(fp_rLPS, "rLPS_o = %03d, emb = %d\n", (int)rLPS, bin == cmps);
#endif
#endif

    assert(sbac->range >= rLPS); //! this maybe triggered, so it can be removed

    rMPS = sbac->range - rLPS;
    s_flag = rMPS < QUAR_HALF_PROB;
    rMPS |= 0x100;

    if (bin != cmps)
    {
        rLPS = (sbac->range << s_flag) - rMPS;
        int shift = ace_get_shift_phase2(rLPS);
        sbac->range = rLPS << shift;
        sbac->code = ((sbac->code << s_flag) + rMPS) << shift;
        sbac->left_bits -= (shift + s_flag);
        if (sbac->left_bits < 12)
        {
            sbac_carry_propagate(sbac, bs);
        }

    }
    else //! MPS
    {
        if (s_flag)
        {
            sbac->code <<= 1;
            if (--sbac->left_bits < 12)
            {
                sbac_carry_propagate(sbac, bs);
            }
        }
        sbac->range = rMPS;

    }
#if !CABAC_MULTI_PROB
    if (bin != cmps1)
    {
        *model1 = tab_cycno_lgpmps_mps[(*model1) | (1 << 13)];
    }
    else
    {
        *model1 = tab_cycno_lgpmps_mps[*model1];
    }
    if (bin != cmps2)
    {
        *model2 = tab_cycno_lgpmps_mps[(*model2) | (1 << 13)];
    }
    else
    {
        *model2 = tab_cycno_lgpmps_mps[*model2];
    }
#else
    // update model 1
    if (bin != cmps1) // LPS 
    {
        if (g_compatible_back)
        {
            cycno1 = (cycno1 <= 2) ? (cycno1 + 1) : 3;
        }
        else
        {
            if (mcabac_flag1)
            {
                cycno1 = counter_thr2;
            }
            else
            {
                cycno1 = cycno1 + 1;
            }
        }
        if (g_compatible_back)
        {
            p1_0 = p1_0 + LG_S1;
            p1_1 = p1_0;
        }
        else
        {
            if (mcabac_flag1)
            {
                p1_0 = p1_0 + LG_S1;
                p1_1 = p1_1 + cwr2LGS[mCabac_ws + 1];
            }
            else
            {
                p1_0 = p1_0 + LG_S1;
                p1_1 = p1_0;
            }
        }
        if ((p1_0 >= (256 << LG_PMPS_SHIFTNO)) || (p1_1 >= (256 << LG_PMPS_SHIFTNO)))
        {
            if (p1_0 >= (256 << LG_PMPS_SHIFTNO))
            {
                p1_0 = (u16)(512 << LG_PMPS_SHIFTNO) - 1 - p1_0;
            }
            if (p1_1 >= (256 << LG_PMPS_SHIFTNO))
            {
                p1_1 = (u16)(512 << LG_PMPS_SHIFTNO) - 1 - p1_1;
            }
            cmps1 = !cmps1;
        }
    }
    else // MPS
    {
        if (cycno1 == 0)
        {
            cycno1 = 1;
        }
        if (g_compatible_back)
        {
            p1_0 = p1_0 - (u16)(p1_0 >> cwr1) - (u16)(p1_0 >> (cwr1 + 2));
            p1_1 = p1_0;
        }
        else
        {
            if (mcabac_flag1)
            {
                p1_0 = p1_0 - (u16)(p1_0 >> cwr1) - (u16)(p1_0 >> (cwr1 + 2));
                p1_1 = p1_1 - (u16)(p1_1 >> (mCabac_ws + 1)) - (u16)(p1_1 >> (mCabac_ws + 3));
            }
            else
            {
                p1_0 = p1_0 - (u16)(p1_0 >> cwr1) - (u16)(p1_0 >> (cwr1 + 2));
                p1_1 = p1_0;
            }
        }
    }
    *model1 = (p1_1 << 1) + cmps1 + (cycno1 << CYCNO_SHIFT_BITS) + (p1_0 << PROB_BITS);

    // update model 2
    if (bin != cmps2) // LPS
    {
        if (g_compatible_back)
        {
            cycno2 = (cycno2 <= 2) ? (cycno2 + 1) : 3;
        }
        else
        {
            if (mcabac_flag2)
            {
                cycno2 = counter_thr2;
            }
            else
            {
                cycno2 = cycno2 + 1;
            }
        }
        if (g_compatible_back)
        {
            p2_0 = p2_0 + LG_S2;
            p2_1 = p2_0;
        }
        else
        {
            if (mcabac_flag2)
            {
                p2_0 = p2_0 + LG_S2;
                p2_1 = p2_1 + cwr2LGS[mCabac_ws + 1];
            }
            else
            {
                p2_0 = p2_0 + LG_S2;
                p2_1 = p2_0;
            }
        }

        if ((p2_0 >= (256 << LG_PMPS_SHIFTNO)) || (p2_1 >= (256 << LG_PMPS_SHIFTNO)))
        {
            if (p2_0 >= (256 << LG_PMPS_SHIFTNO))
            {
                p2_0 = (u16)(512 << LG_PMPS_SHIFTNO) - 1 - p2_0;
            }
            if (p2_1 >= (256 << LG_PMPS_SHIFTNO))
            {
                p2_1 = (u16)(512 << LG_PMPS_SHIFTNO) - 1 - p2_1;
            }
            cmps2 = !cmps2;
        }
    }
    else // MPS
    {
        if (cycno2 == 0)
        {
            cycno2 = 1;
        }
        if (g_compatible_back)
        {
            p2_0 = p2_0 - (u16)(p2_0 >> cwr2) - (u16)(p2_0 >> (cwr2 + 2));
            p2_1 = p2_0;
        }
        else
        {
            if (mcabac_flag2)
            {
                p2_0 = p2_0 - (u16)(p2_0 >> cwr2) - (u16)(p2_0 >> (cwr2 + 2));
                p2_1 = p2_1 - (u16)(p2_1 >> (mCabac_ws + 1)) - (u16)(p2_1 >> (mCabac_ws + 3));
            }
            else
            {
                p2_0 = p2_0 - (u16)(p2_0 >> cwr2) - (u16)(p2_0 >> (cwr2 + 2));
                p2_1 = p2_0;
            }
        }
    }
    *model2 = (p2_1 << 1) + cmps2 + (cycno2 << CYCNO_SHIFT_BITS) + (p2_0 << PROB_BITS);
#endif
#if AEC_STAGE3_PHASE2_DEBUG
#if AEC_STAGE3_BINA_PHASE2_DEBUG
    fprintf(fp_bina, "range_out=%d, low_out=%d, method=2\n", sbac->range, sbac->code & 0x1FF);
#endif
#endif
}

int encode_intra_dir(u8 ipm,
#if EIPM
    u8 eipm_flag,
#endif
    u8 mpm[2]
)
{
    int ipm_code = (ipm == mpm[0]) ? -2 : ((mpm[1] == ipm) ? -1 : ((ipm < mpm[0]) ? ipm : ((ipm < mpm[1]) ? (ipm - 1) : (ipm - 2))));
    if (ipm_code < 0)
    {
        //enc_sbac_encode_bin(1, sbac, sbac->ctx.intra_dir, bs);
        //enc_sbac_encode_bin(ipm_code + 2, sbac, sbac->ctx.intra_dir + 6, bs);
        // aec_stage3_phase2( 1, 0, 1, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        // aec_stage3_phase2( 1, 0, ipm_code + 2, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        aec_stage3_phase2(2, 
            0, 1, 68, 0, 
            0, ipm_code + 2, 74, 0, 
            0, 0, 0, 0, 
            0, 0, 0, 0
        );
    }
    else
    {
        //enc_sbac_encode_bin(0, sbac, sbac->ctx.intra_dir, bs);
        //enc_sbac_encode_bin((ipm_code & 0x10) >> 4, sbac, sbac->ctx.intra_dir + 1, bs);
        //enc_sbac_encode_bin((ipm_code & 0x08) >> 3, sbac, sbac->ctx.intra_dir + 2, bs);
        //enc_sbac_encode_bin((ipm_code & 0x04) >> 2, sbac, sbac->ctx.intra_dir + 3, bs);
        //enc_sbac_encode_bin((ipm_code & 0x02) >> 1, sbac, sbac->ctx.intra_dir + 4, bs);
        //enc_sbac_encode_bin((ipm_code & 0x01), sbac, sbac->ctx.intra_dir + 5, bs);
        // aec_stage3_phase2( 1, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        // aec_stage3_phase2( 1, 0, (ipm_code & 0x10) >> 4, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        // aec_stage3_phase2( 1, 0, (ipm_code & 0x08) >> 3, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        // aec_stage3_phase2( 1, 0, (ipm_code & 0x04) >> 2, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        aec_stage3_phase2(4, 
            0, 0, 68, 0, 
            0, (ipm_code & 0x10) >> 4, 69, 0,
            0, (ipm_code & 0x08) >> 3, 70, 0, 
            0, (ipm_code & 0x04) >> 2, 71, 0
        );

        // aec_stage3_phase2( 1, 0, (ipm_code & 0x02) >> 1, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        // aec_stage3_phase2( 1, 0, (ipm_code & 0x01), 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        aec_stage3_phase2(2, 
            0, (ipm_code & 0x02) >> 1, 72, 0,
            0, (ipm_code & 0x01), 73, 0,
            0, 0, 0, 0, 
            0, 0, 0, 0
        );
#if EIPM
        // TODO: if eipm_flag is true, merge below aec_stage3_phase2 to the above operation.
        if (eipm_flag)
        {
            //enc_sbac_encode_bin((ipm_code & 0x20) >> 5, sbac, sbac->ctx.intra_dir + 10, bs);
            aec_stage3_phase2( 1, 0, (ipm_code & 0x20) >> 5, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
#endif
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("ipm Y ");
    COM_TRACE_INT(ipm);
    COM_TRACE_STR(" mpm_0 ");
    COM_TRACE_INT(mpm[0]);
    COM_TRACE_STR(" mpm_1 ");
    COM_TRACE_INT(mpm[1]);
    COM_TRACE_STR("\n");
    return COM_OK;
}

int encode_intra_dir_c(u8 ipm, u8 ipm_l
#if TSCPM
    , u8 tscpm_enable_flag
#endif
#if ENHANCE_TSPCM
    , u8 enhance_tscpm_enable_flag
#endif
#if PMC_TEMP || EPMC_TEMP
    , u8 pmc_enable_flag
#endif
#if SAWP_TEMP
    , u8 sawp_flag
#endif // SAWP
)
{
    // TODO: this function should be merged.
    u8 chk_bypass;
  
    COM_IPRED_CONV_L2C_CHK(ipm_l, chk_bypass);
#if SAWP_TEMP
    if (sawp_flag)
    {
        chk_bypass = 0;
    }
#endif // SAWP


    //enc_sbac_encode_bin(!ipm, sbac, sbac->ctx.intra_dir + 7, bs);
    aec_stage3_phase2( 1, 0, (!ipm), 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

    if (ipm)
    {
#if TSCPM || PMC_TEMP || EPMC_TEMP
        int cpm_enable = 0;
#if TSCPM
        cpm_enable |= tscpm_enable_flag;
#endif
#if PMC_TEMP || EPMC_TEMP
        cpm_enable |= pmc_enable_flag;
#endif
        if (cpm_enable)
        {
#if PMC_TEMP
#if ENHANCE_LT_MODE
            int mcpm_flag = ipm == IPD_MCPM_C || ipm == IPD_MCPM_LT_C || ipm == IPD_MCPM_L_C || ipm == IPD_MCPM_T_C;
#else
            int mcpm_flag = ipm == IPD_MCPM_C || ipm == IPD_MCPM_L_C || ipm == IPD_MCPM_T_C;
#endif
            if (pmc_enable_flag && mcpm_flag)
            {
#if ENHANCE_LT_MODE
                ipm = ipm - 4;
                assert(ipm == IPD_TSCPM_C || ipm == IPD_TSCPM_LT_C || ipm == IPD_TSCPM_L_C || ipm == IPD_TSCPM_T_C);
#else
                ipm = ipm - 3;
                assert(ipm == IPD_TSCPM_C || ipm == IPD_TSCPM_L_C || ipm == IPD_TSCPM_T_C);
#endif
            }
#endif
#if EPMC_TEMP
#if ENHANCE_LT_MODE
            int emcpm_flag = ipm == IPD_EMCPM_C || ipm == IPD_EMCPM_LT_C || ipm == IPD_EMCPM_L_C || ipm == IPD_EMCPM_T_C;
#else
            int emcpm_flag = ipm == IPD_EMCPM_C || ipm == IPD_EMCPM_L_C || ipm == IPD_EMCPM_T_C;
#endif
            if (pmc_enable_flag && emcpm_flag)
            {
#if PMC_TEMP
                assert(mcpm_flag == 0);
#endif
#if EPMC && PMC
#if ENHANCE_LT_MODE
                ipm = ipm - 8;
#else
                ipm = ipm - 6;
#endif
#elif EPMC
#if ENHANCE_LT_MODE
                ipm = ipm - 4;
#else
                ipm = ipm - 3;
#endif
#endif
#if ENHANCE_LT_MODE
                assert(ipm == IPD_TSCPM_C || ipm == IPD_TSCPM_LT_C || ipm == IPD_TSCPM_L_C || ipm == IPD_TSCPM_T_C);
#else
                assert(ipm == IPD_TSCPM_C || ipm == IPD_TSCPM_L_C || ipm == IPD_TSCPM_T_C);
#endif
            }
#if EPMC
#if ENHANCE_LT_MODE
            int emcpm2_flag = ipm == IPD_EMCPM2_C || ipm == IPD_EMCPM2_LT_C || ipm == IPD_EMCPM2_L_C || ipm == IPD_EMCPM2_T_C;
#else
            int emcpm2_flag = ipm == IPD_EMCPM2_C || ipm == IPD_EMCPM2_L_C || ipm == IPD_EMCPM2_T_C;
#endif
            emcpm_flag = emcpm_flag || emcpm2_flag;
            if (pmc_enable_flag && emcpm2_flag)
            {
                assert(mcpm_flag == 0);
#if ENHANCE_LT_MODE
                ipm = ipm - 12;
                assert(ipm == IPD_TSCPM_C || ipm == IPD_TSCPM_LT_C || ipm == IPD_TSCPM_L_C || ipm == IPD_TSCPM_T_C);
#else
                ipm = ipm - 9;
                assert(ipm == IPD_TSCPM_C || ipm == IPD_TSCPM_L_C || ipm == IPD_TSCPM_T_C);
#endif              
            }
#endif
#endif
#if ENHANCE_TSPCM || PMC_TEMP || EPMC_TEMP
#if ENHANCE_LT_MODE
            if (ipm == IPD_TSCPM_C || ipm == IPD_TSCPM_LT_C || ipm == IPD_TSCPM_L_C || ipm == IPD_TSCPM_T_C)
#else
            if (ipm == IPD_TSCPM_C || ipm == IPD_TSCPM_L_C || ipm == IPD_TSCPM_T_C)
#endif
#else
            if (ipm == IPD_TSCPM_C)
#endif
            {
                //enc_sbac_encode_bin(1, sbac, sbac->ctx.intra_dir + 9, bs);
                aec_stage3_phase2( 1, 0, 1, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#if ENHANCE_TSPCM || PMC_TEMP || EPMC_TEMP
                int mCpm_enable = 0;
#if ENHANCE_TSPCM
                mCpm_enable |= enhance_tscpm_enable_flag;
#endif
#if PMC_TEMP || EPMC_TEMP
                mCpm_enable |= pmc_enable_flag;
#endif
                if (mCpm_enable)
                {
                    if (ipm == IPD_TSCPM_C)
                    {
#if EIPM
                        //enc_sbac_encode_bin(1, sbac, sbac->ctx.intra_dir + 11, bs);
                        aec_stage3_phase2( 1, 0, 1, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
                        //enc_sbac_encode_bin(1, sbac, sbac->ctx.intra_dir + 10, bs);
                        aec_stage3_phase2(sbac, bs, 1, 0, 1, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#endif
                    }
                    else
                    {
#if EIPM
                        //enc_sbac_encode_bin(0, sbac, sbac->ctx.intra_dir + 11, bs);
                        aec_stage3_phase2( 1, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
                        //enc_sbac_encode_bin(0, sbac, sbac->ctx.intra_dir + 10, bs);
                        aec_stage3_phase2(sbac, bs, 1, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#endif
#if ENHANCE_LT_MODE
                        if (ipm == IPD_TSCPM_LT_C)
                        {
                            //sbac_encode_bin_ep(1, sbac, bs);
                            aec_stage3_phase2( 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                        }
                        else
                        {
                            //sbac_encode_bin_ep(0, sbac, bs);
                            aec_stage3_phase2( 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                            if (ipm == IPD_TSCPM_L_C)
                            {
                                //sbac_encode_bin_ep(1, sbac, bs);
                                aec_stage3_phase2( 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                            }
                            else
                            {
                                assert(ipm == IPD_TSCPM_T_C);
                                //sbac_encode_bin_ep(0, sbac, bs);
                                aec_stage3_phase2( 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                            }
                        }
#else
                        if (ipm == IPD_TSCPM_L_C)
                        {
                            //sbac_encode_bin_ep(1, sbac, bs);
                            aec_stage3_phase2(sbac, bs, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                        }
                        else
                        {
                            //sbac_encode_bin_ep(0, sbac, bs);
                            aec_stage3_phase2(sbac, bs, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                        }
#endif
                    }
                }
                else
                {
                    assert(ipm == IPD_TSCPM_C);
                }
#endif
#if TSCPM && PMC_TEMP && EPMC_TEMP
                if (tscpm_enable_flag && pmc_enable_flag)
                {
#if ENHANCE_TSPCM
                    if (!(!enhance_tscpm_enable_flag && ipm != IPD_TSCPM_C))
#else
                    if (ipm == IPD_TSCPM_C)
#endif
                    {
                        //enc_sbac_encode_bin(emcpm_flag || mcpm_flag, sbac, sbac->ctx.intra_dir + 12, bs);
                        aec_stage3_phase2( 1, 0, emcpm_flag || mcpm_flag, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                        if (emcpm_flag || mcpm_flag)
                        {
                            //enc_sbac_encode_bin(emcpm_flag, sbac, sbac->ctx.intra_dir + 13, bs);
                            aec_stage3_phase2( 1, 0, emcpm_flag, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                        }

                    }
                    else
                    {
                        //enc_sbac_encode_bin(emcpm_flag, sbac, sbac->ctx.intra_dir + 13, bs);
                        aec_stage3_phase2( 1, 0, emcpm_flag, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                    }

                }
                else if (pmc_enable_flag)
                {
                    //enc_sbac_encode_bin(emcpm_flag, sbac, sbac->ctx.intra_dir + 13, bs);
                    aec_stage3_phase2( 1, 0, emcpm_flag, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                }

#elif TSCPM && PMC_TEMP 
                if (tscpm_enable_flag && pmc_enable_flag)
                {
#if ENHANCE_TSPCM
                    if (!(!enhance_tscpm_enable_flag && ipm != IPD_TSCPM_C))
#else
                    if (ipm == IPD_TSCPM_C)
#endif
                    {
                        //enc_sbac_encode_bin(mcpm_flag, sbac, sbac->ctx.intra_dir + 12, bs);
                        aec_stage3_phase2(sbac, bs, 1, 0, mcpm_flag, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                    }
                }
#elif TSCPM && EPMC_TEMP
                if (tscpm_enable_flag && pmc_enable_flag)
                {
#if ENHANCE_TSPCM
                    if (!(!enhance_tscpm_enable_flag && ipm != IPD_TSCPM_C))
#else
                    if (ipm == IPD_TSCPM_C)
#endif
                    {
                        //enc_sbac_encode_bin(emcpm_flag, sbac, sbac->ctx.intra_dir + 12, bs);
                        aec_stage3_phase2(sbac, bs, 1, 0, emcpm_flag, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                    }
                }
#elif PMC_TEMP && EPMC_TEMP
                if (pmc_enable_flag)
                {
                    assert(mcpm_flag == !emcpm_flag);
                    //enc_sbac_encode_bin(emcpm_flag, sbac, sbac->ctx.intra_dir + 13, bs);
                    aec_stage3_phase2(sbac, bs, 1, 0, emcpm_flag, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                }
#endif

#if PMC_TEMP && EPMC_TEMP
                if (pmc_enable_flag && mcpm_flag)
                {
#if ENHANCE_LT_MODE
                    ipm = ipm + 4;
#else
                    ipm = ipm + 3;
#endif
                }

                else if (pmc_enable_flag && emcpm2_flag)
                {
#if ENHANCE_LT_MODE
                    ipm = ipm + 12;
#else
                    ipm = ipm + 9;
#endif
                }
                else if (pmc_enable_flag && emcpm_flag)
                {
#if ENHANCE_LT_MODE
                    ipm = ipm + 8;
#else
                    ipm = ipm + 6;
#endif
                }


#elif EPMC_TEMP
                if (pmc_enable_flag && emcpm_flag)
                {
#if ENHANCE_LT_MODE
                    ipm = ipm + 4;
#else
                    ipm = ipm + 3;
#endif
                }
#elif PMC_TEMP
                if (pmc_enable_flag && mcpm_flag)
                {
#if ENHANCE_LT_MODE
                    ipm = ipm + 4;
#else
                    ipm = ipm + 3;
#endif
                }
#endif
                COM_TRACE_COUNTER;
                COM_TRACE_STR("ipm UV ");
                COM_TRACE_INT(ipm);
                COM_TRACE_STR("\n");
                return COM_OK;
            }
            else
            {
                //enc_sbac_encode_bin(0, sbac, sbac->ctx.intra_dir + 9, bs);
                aec_stage3_phase2( 1, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
        }
#endif
        u8 symbol = (chk_bypass && ipm > ipm_l) ? ipm - 2 : ipm - 1;

        sbac_write_truncate_unary_sym1(symbol, 1, IPD_CHROMA_CNT - 1, 75);

    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("ipm UV ");
    COM_TRACE_INT(ipm);
    COM_TRACE_STR("\n");
    return COM_OK;
}

int encode_refidx(int num_refp, int refi)
{
    if (num_refp > 1) {
        sbac_write_truncate_unary_sym1(refi, 3, num_refp, 90);
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("refi ");
    COM_TRACE_INT(refi);
    COM_TRACE_STR(" ctx ");
    COM_TRACE_INT(0);
    COM_TRACE_STR("\n");
    return COM_OK;
}

static int enc_eco_abs_mvd(u32 sym, SBAC_CTX_MODEL model)
{
    int exp_golomb_order = 0;

    if (sym < 3) { // 0, 1, 2
        if (sym == 0) {
            //enc_sbac_encode_bin(0, sbac, model, bs);
            aec_stage3_phase2( 1, 0, 0, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        else if (sym == 1) {
            // enc_sbac_encode_bin(1, sbac, model, bs);
            // aec_stage3_phase2( 1, 0, 1, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            // enc_sbac_encode_bin(0, sbac, model + 1, bs);
            // aec_stage3_phase2( 1, 0, 0, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

            aec_stage3_phase2(2, 
                0, 1, (model + 1), 0, 
                0, 0, (model + 1 + 1), 0, 
                0, 0, 0, 0, 
                0, 0, 0, 0
            );
        }
        else if (sym == 2) {
            // enc_sbac_encode_bin(1, sbac, model, bs);
            // aec_stage3_phase2( 1, 0, 1, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            // enc_sbac_encode_bin(1, sbac, model + 1, bs);
            // aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            // enc_sbac_encode_bin(0, sbac, model + 2, bs);
            // aec_stage3_phase2( 1, 0, 0, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

            aec_stage3_phase2(3, 
                0, 1, (model + 1), 0,
                0, 1, (model + 1 + 1), 0,
                0, 0, (model + 2 + 1), 0,
                0, 0, (model + 2 + 1), 0
            );
        }
    }
    else {
        int offset;

        sym -= 3;
        offset = sym & 1;
        // enc_sbac_encode_bin(1, sbac, model, bs);
        // aec_stage3_phase2( 1, 0, 1, (model  + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        // enc_sbac_encode_bin(1, sbac, model + 1, bs);
        // aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        // enc_sbac_encode_bin(1, sbac, model + 2, bs);
        // aec_stage3_phase2( 1, 0, 1, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        //sbac_encode_bin_ep(offset, sbac, bs);
        // aec_stage3_phase2( 1, 1, offset, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        aec_stage3_phase2(4,
            0, 1, (model + 1), 0,
            0, 1, (model + 1 + 1), 0,
            0, 1, (model + 2 + 1), 0,
            1, offset, 0, 0
        );

        sym = (sym - offset) >> 1;

        // exp_golomb part
        while ((int)sym >= (1 << exp_golomb_order)) {
#pragma HLS LOOP_TRIPCOUNT max=11
            sym = sym - (1 << exp_golomb_order);
            exp_golomb_order++;
        }

        sbac_write_unary_sym_ep1(exp_golomb_order);
        sbac_encode_bins_ep_msb1(sym, exp_golomb_order);

    }

    return COM_OK;
}


int encode_mvd(s16 mvd[MV_D])
{

    int            t0;
    u32            mv;

    t0 = 0;
    mv = mvd[MV_X];
    if (mvd[MV_X] < 0) {
        t0 = 1;
        mv = -mvd[MV_X];
    }
    enc_eco_abs_mvd(mv, 137);
    if (mv) {
        //sbac_encode_bin_ep(t0, sbac, bs);
        aec_stage3_phase2( 1, 1, t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    t0 = 0;
    mv = mvd[MV_Y];
    if (mvd[MV_Y] < 0) {
        t0 = 1;
        mv = -mvd[MV_Y];
    }
    enc_eco_abs_mvd(mv, 140);
    if (mv) {
        //sbac_encode_bin_ep(t0, sbac, bs);
        aec_stage3_phase2( 1, 1, t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("mvd x ");
    COM_TRACE_INT(mvd[MV_X]);
    COM_TRACE_STR("mvd y ");
    COM_TRACE_INT(mvd[MV_Y]);
    COM_TRACE_STR("\n");
    return COM_OK;
}

#if IBC_TS
void enc_eco_ts_flag(int flag)
{
    //enc_sbac_encode_bin(flag, sbac, sbac->ctx.ts_flag, bs);
    aec_stage3_phase2( 1, 0, flag, 453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}
#endif

#if EST_TEMP
void enc_eco_est_flag(int flag)
{
    //enc_sbac_encode_bin(flag, sbac, sbac->ctx.est_flag, bs);
    aec_stage3_phase2( 1, 0, flag, 454, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}
#endif
// void enc_eco_run_length_cc(s16* coef, int log2_w, int log2_h, int num_sig, int ch_type)
// {
    
//     u32            num_coeff, scan_pos;
//     u32            sign, level, prev_level, run, last_flag;
//     s32            t0;
//     const u16* scanp;
//     s16            coef_cur;
   
//     scanp = com_scan_tbl[COEF_SCAN_ZIGZAG][log2_w - 1][log2_h - 1];
//     num_coeff = 1 << (log2_w + log2_h);
//     run = 0;
//     prev_level = 6;
//     for (scan_pos = 0; scan_pos < num_coeff; scan_pos++)
//     {
//         coef_cur = coef[scanp[scan_pos]];
//         if (coef_cur)
//         {
//             level = COM_ABS16(coef_cur);
//             sign = (coef_cur > 0) ? 0 : 1;
//             t0 = ((COM_MIN(prev_level - 1, 5)) * 2) + (ch_type == Y_C ? 0 : 12);
//             /* Run coding */
//             enc_eco_run(run, 298 + t0);
//             enc_eco_run_for_rdoq(run, 2, &(&aec_ctx_phase2)->run_rdoq[t0]);

//             /* Level coding */
//             enc_eco_level(level - 1, 380 + t0);

//             /* Sign coding */
//             //sbac_encode_bin_ep(sign, sbac, bs);
//             aec_stage3_phase2( 1, 1, sign, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
//             if (scan_pos == num_coeff - 1)
//             {
//                 break;
//             }
//             run = 0;
//             num_sig--;
//             /* Last flag coding */
//             last_flag = (num_sig == 0) ? 1 : 0;
//             //enc_sbac_encode_binW(last_flag, sbac,
//                 //&sbac_ctx->last1[COM_MIN(prev_level - 1, 5) + (ch_type == Y_C ? 0 : NUM_SBAC_CTX_LAST1)],
//                 //&sbac_ctx->last2[ace_get_log2(scan_pos + 1) + (ch_type == Y_C ? 0 : NUM_SBAC_CTX_LAST2)], bs);
//             aec_stage3_phase2( 1, 2, last_flag,
// 				347 + (COM_MIN(prev_level - 1, 5) + (ch_type == Y_C ? 0 : NUM_SBAC_CTX_LAST1)),
// 				359 + (ace_get_log2(scan_pos + 1) + (ch_type == Y_C ? 0 : NUM_SBAC_CTX_LAST2)),
//                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
//             prev_level = level;

//             if (last_flag)
//             {
//                 break;
//             }
//         }
//         else
//         {
//             run++;
//         }
//     }
// #if ENC_DEC_TRACE
//     COM_TRACE_STR("coef");
//     COM_TRACE_INT(ch_type);
//     for (scan_pos = 0; scan_pos < num_coeff; scan_pos++)
//     {
//         COM_TRACE_INT(coef[scan_pos]);
//     }
//     COM_TRACE_STR("\n");
// #endif
// }
void com_init_scan_sr(int* scan, int size_x, int size_y, int width, int scan_type)
{
    int x, y, l, pos, num_line;

    pos = 0;
    num_line = size_x + size_y - 1;
    if (scan_type == COEF_SCAN_ZIGZAG)
    {
        /* starting point */
        scan[pos] = 0;
        pos++;

        /* loop */
        for (l = 1; l < num_line; l++)
        {
            if (l % 2) /* decreasing loop */
            {
                x = COM_MIN(l, size_x - 1);
                y = COM_MAX(0, l - (size_x - 1));

                while (x >= 0 && y < size_y)
                {
                    scan[pos] = y * width + x;
                    pos++;
                    x--;
                    y++;
                }
            }
            else /* increasing loop */
            {
                y = COM_MIN(l, size_y - 1);
                x = COM_MAX(0, l - (size_y - 1));
                while (y >= 0 && x < size_x)
                {
                    scan[pos] = y * width + x;
                    pos++;
                    x++;
                    y--;
                }
            }
        }
    }
}
void com_init_pos_info(COM_POS_INFO* pos_info, int sr_x, int sr_y)
{
    COM_POS_INFO* pos = pos_info;
    int ax, bx, cx, ay, by, cy;

    ax = sr_x; bx = ax << 1; cx = ax + bx;
    ay = sr_y; by = ay << 1; cy = ay + by;
    pos->x.a = ax >> 2; pos->x.b = bx >> 2; pos->x.c = cx >> 2;
    pos->y.a = ay >> 2; pos->y.b = by >> 2; pos->y.c = cy >> 2;
}

#if SRCC
int com_scan_sr[MAX_TR_SIZE * MAX_TR_SIZE];
// const int g_min_in_group[SCAN_REGION_GROUP] = { 0,1,2,3,4,6,8,12,16,24,32,48,64,96 };

u8 get_min_in_group(u8 val)
{
#pragma HLS inline
    u8 index = 0;
    switch (val)
    {
        case 0: index = 0; break;
        case 1: index = 1; break;
        case 2: index = 2; break;
        case 3: index = 3; break;
        case 4: index = 4; break;
        case 5: index = 6; break;
        case 6: index = 8; break;
        case 7: index = 12; break;
        case 8: index = 16; break;
        case 9: index = 24; break;
        case 10: index = 32; break;
        case 11: index = 48; break;
        case 12: index = 64; break;
        case 13: index = 96; break;
        default: index = 0;
            break;
    }
    return index;
}

u8 get_prefix_ctx(u8 w)
{
#pragma HLS inline
    u8 index = 0;
    switch (w)
    {
    case 3: index = 3;  break;
    case 4: index = 6;  break;
    case 5: index = 10; break;
    case 6: index = 15; break;
    case 7: index = 21; break;
    default:
        index = 0;
        break;
    }
    // if (w >= 0 && w <= 2) index = 0;
    // else if (w == 3) index = 3;
    // else if (w == 4) index = 6;
    // else if (w == 5) index = 10;
    // else if (w == 6) index = 15;
    // else if (w == 7) index = 21;
    // else {
    //     index = 0;
    //     assert(0);
    // }
    return index;
}

void com_get_ctx_srxy_para(int ch_type, int width, int height, int* result_offset_x, int* result_offset_y, int* result_shift_x, int* result_shift_y)
{
#pragma HLS inline
    // const int g_prefix_ctx[8] = { 0, 0, 0, 3, 6, 10, 15, 21 }; //for 1, 2, 4, 8, 16, 32,64,128 side length
    const int log2_w = CONV_LOG2(width);
    const int log2_h = CONV_LOG2(height);

    int get_ctx_w = get_prefix_ctx(log2_w);
    int get_ctx_h = get_prefix_ctx(log2_h);

    *result_offset_x = (ch_type != Y_C) ? 0 : get_ctx_w;
    *result_offset_y = (ch_type != Y_C) ? 0 : get_ctx_h;
    *result_shift_x = (ch_type != Y_C) ? COM_CLIP3(0, 2, (width >> 3)) : ((log2_w + 1) >> 2);
    *result_shift_y = (ch_type != Y_C) ? COM_CLIP3(0, 2, (height >> 3)) : ((log2_h + 1) >> 2);
}

void com_get_ctx_sr_para(int ch_type, int width, int* result_offset_x, int* result_shift_x)
{
#pragma HLS inline
    // const int g_prefix_ctx[8] = { 0, 0, 0, 3, 6, 10, 15, 21 }; //for 1, 2, 4, 8, 16, 32,64,128 side length
    const int log2_w = CONV_LOG2(width);
    // const int log2_h = CONV_LOG2(height);

    int get_ctx_w = get_prefix_ctx(log2_w);
    // int get_ctx_h = get_prefix_ctx(log2_h);

    *result_offset_x = (ch_type != Y_C) ? 0 : get_ctx_w;
    // *result_offset_y = (ch_type != Y_C) ? 0 : get_ctx_h;
    *result_shift_x = (ch_type != Y_C) ? COM_CLIP3(0, 2, (width >> 3)) : ((log2_w + 1) >> 2);
    // *result_shift_y = (ch_type != Y_C) ? COM_CLIP3(0, 2, (height >> 3)) : ((log2_h + 1) >> 2);
}

u8 get_group_index(int sr_x)
{
#pragma HLS inline
    u8 idx = 0;
    bool bit0 = sr_x & 0b1;
    bool bit1 = (sr_x & 0b10)>>1;
    bool bit2 = (sr_x & 0b100) >> 2;
    bool bit3 = (sr_x & 0b1000) >> 3;
    bool bit4 = (sr_x & 0b10000) >> 4;
    bool bit5 = (sr_x & 0b100000) >> 5;

    if (bit5 && bit4) idx = 11;
    else if (bit5)    idx = 10;
    else if (bit4 && bit3) idx = 9;
    else if (bit4)         idx = 8;
    else if (bit3 && bit2) idx = 7;
    else if (bit3)         idx = 6;
    else if (bit2 && bit1) idx = 5;
    else if (bit2)         idx = 4;
    else if (bit1 && bit0) idx = 3;
    else if (bit1)         idx = 2;
    else if (bit0)         idx = 1;
    else                   idx = 0;
    // {
    // 
    // }
    // 
    // if (sr_x == 0) idx = 0;
    // else if (sr_x == 1) idx = 1;
    // else if (sr_x == 2) idx = 2;
    // else if (sr_x == 3) idx = 3;
    // else if (sr_x >= 4 && sr_x <= 5) idx = 4;
    // else if (sr_x >= 6 && sr_x <= 7) idx = 5;
    // else if (sr_x >= 8 && sr_x <= 11) idx = 6;
    // else if (sr_x >= 12 && sr_x <= 15) idx = 7;
    // else if (sr_x >= 16 && sr_x <= 23) idx = 8;
    // else if (sr_x >= 24 && sr_x <= 31) idx = 9;
    // else if (sr_x >= 32 && sr_x <= 47) idx = 10;
    // else if (sr_x >= 48 && sr_x <= 63) idx = 11;
    // else
    // {
    //     idx = 0;
    //     assert(0);
    // }
    return idx;
}

static void code_scanregion(int sr_x, int sr_y, int width, int height, int ch_type)
{
#pragma HLS inline
    SBAC_CTX_MODEL cm_x = 242 + (ch_type == Y_C ? 0 : NUM_CTX_SCANR_LUMA);
    SBAC_CTX_MODEL cm_y = 270 + (ch_type == Y_C ? 0 : NUM_CTX_SCANR_LUMA);
    int bin;
    u8 group_idx_x;
    u8 group_idx_y;
    int blk_offset_x, blk_offset_y, shift_x, shift_y;
    int blk_offset, shift;
    int i, cnt;

    group_idx_x = get_group_index(sr_x); 
    group_idx_y = get_group_index(sr_y); 

    com_get_ctx_srxy_para(ch_type, width, height, &blk_offset_x, &blk_offset_y, &shift_x, &shift_y);
    
    // posX
    int width_group_index = get_group_index(aec_min(width, 32) - 1);
    u8 last_code = group_idx_x < width_group_index;
    int total_code = group_idx_x + last_code;
    int bin_count = total_code;

    int count_2 = 0;
    if (group_idx_x > 3)
    {
        count_2 = (group_idx_x - 2) >> 1;
        sr_x = sr_x - get_min_in_group(group_idx_x);
    }

    u8 loop_cnt0 = (total_code == 0) ? 0 : ((total_code - 1) / 4 + 1);
    u8 loop_cnt1 = (count_2 == 0) ? 0 : ((count_2 - 1) / 4 + 1);

    int height_group_idx = get_group_index(aec_min(height, 32) - 1);
    int last_code_y = group_idx_y < height_group_idx;
    int total_code_y = group_idx_y + last_code_y;
    int bin_count_y = total_code_y;
    int ctx_y_count = 0;
    u8 loop_cnt2 = (total_code_y == 0) ? 0 : (total_code_y - 1) / 4 + 1;

    cnt = 0;
    if (group_idx_y > 3) {
        cnt = (group_idx_y - 2) >> 1;
        sr_y = sr_y - get_min_in_group(group_idx_y);
    }
    u8 loop_cnt3 = (cnt == 0) ? 0 : (cnt - 1) / 4 + 1;
    int bin_count_x_tmp = count_2;
    for (u8 i = 0; i < loop_cnt0 + loop_cnt1 + loop_cnt2 + loop_cnt3; i++)
    {
        if ( i < loop_cnt0)
        {
            int code_bin = bin_count >= 4 ? 4 : bin_count;
            u8 sym0 = ((i * 4 + 1) == total_code && last_code) ? 0 : 1;
            u8 sym1 = ((i * 4 + 2) == total_code && last_code) ? 0 : 1;
            u8 sym2 = ((i * 4 + 3) == total_code && last_code) ? 0 : 1;
            u8 sym3 = ((i * 4 + 4) == total_code && last_code) ? 0 : 1;
            aec_stage3_phase2(code_bin,
                0, sym0, (cm_x + blk_offset_x + ((i * 4 + 0) >> shift_x) + 1), 0,
                0, sym1, (cm_x + blk_offset_x + ((i * 4 + 1) >> shift_x) + 1), 0,
                0, sym2, (cm_x + blk_offset_x + ((i * 4 + 2) >> shift_x) + 1), 0,
                0, sym3, (cm_x + blk_offset_x + ((i * 4 + 3) >> shift_x) + 1), 0
            );
            bin_count = bin_count - 4;
        }
        else if (i >= loop_cnt0 && i < loop_cnt0 + loop_cnt1)
        {
            int code_bin = bin_count_x_tmp >= 4 ? 4 : bin_count_x_tmp;
            int shift_0 = (bin_count_x_tmp - 1) >= 0 ? (bin_count_x_tmp - 1) : 0;
            int shift_1 = (bin_count_x_tmp - 2) >= 0 ? (bin_count_x_tmp - 2) : 0;
            int shift_2 = (bin_count_x_tmp - 3) >= 0 ? (bin_count_x_tmp - 3) : 0;
            int shift_3 = (bin_count_x_tmp - 4) >= 0 ? (bin_count_x_tmp - 4) : 0;
            aec_stage3_phase2(code_bin,
                1, (sr_x >> shift_0) & 1, 0, 0,
                1, (sr_x >> shift_1) & 1, 0, 0,
                1, (sr_x >> shift_2) & 1, 0, 0,
                1, (sr_x >> shift_3) & 1, 0, 0
            );
            bin_count_x_tmp = bin_count_x_tmp - 4;
        }
        else if (i >= loop_cnt0 + loop_cnt1 && i < loop_cnt0 + loop_cnt1 + loop_cnt2)
        {
            int code_bin = bin_count_y >= 4 ? 4 : bin_count_y;
            u8 sym0 = ((ctx_y_count * 4 + 1) == total_code_y && last_code_y) ? 0 : 1;
            u8 sym1 = ((ctx_y_count * 4 + 2) == total_code_y && last_code_y) ? 0 : 1;
            u8 sym2 = ((ctx_y_count * 4 + 3) == total_code_y && last_code_y) ? 0 : 1;
            u8 sym3 = ((ctx_y_count * 4 + 4) == total_code_y && last_code_y) ? 0 : 1;
            aec_stage3_phase2(code_bin,
                0, sym0, (cm_y + blk_offset_y + ((ctx_y_count * 4 + 0) >> shift_y) + 1), 0,
                0, sym1, (cm_y + blk_offset_y + ((ctx_y_count * 4 + 1) >> shift_y) + 1), 0,
                0, sym2, (cm_y + blk_offset_y + ((ctx_y_count * 4 + 2) >> shift_y) + 1), 0,
                0, sym3, (cm_y + blk_offset_y + ((ctx_y_count * 4 + 3) >> shift_y) + 1), 0
            );
            bin_count_y = bin_count_y - 4;
            ctx_y_count++;
        }
        else {
            int code_bin = cnt >= 4 ? 4 : cnt;
            int shift_0 = (cnt - 1) >= 0 ? (cnt - 1) : 0;
            int shift_1 = (cnt - 2) >= 0 ? (cnt - 2) : 0;
            int shift_2 = (cnt - 3) >= 0 ? (cnt - 3) : 0;
            int shift_3 = (cnt - 4) >= 0 ? (cnt - 4) : 0;
            aec_stage3_phase2(code_bin,
                1, (sr_y >> shift_0) & 1, 0, 0,
                1, (sr_y >> shift_1) & 1, 0, 0,
                1, (sr_y >> shift_2) & 1, 0, 0,
                1, (sr_y >> shift_3) & 1, 0, 0
            );
            cnt = cnt - 4;
        }
    }
}

static void seq_code_coef_remain_exgolomb(int num, u16 symbol_seq[16])
{
#pragma HLS ARRAY_PARTITION variable=symbol_seq
    int exp_golomb_order = 0;
    int exp_golomb_order_pre = 0;
    int count_symbol = 0;
    int inner_loop = 0;
    int sum_loop = 0;

    int cnt = 0;
    int symbol_num = 0;
    u8 sym_tmp = 0;
    u32 value = 0;
    int num_bin = 0;
    int bin = 0;

    for (int i = 0; i < 16*(4+4); i++) // 16 max_num; 4: (exp_golomb_order / 4) + 1; 4: (exp_golomb_order - 1) / 4 + 1;
    {
        if (count_symbol >= num) {
            break;
        }

        int exp_golomb_order_tmp = 0;
        int symbol = symbol_seq[count_symbol];
        int symbol_tmp = symbol;

        u32 out = get_exp_golomb_symbol(symbol);
        u8 exp_golomb_order = out & 0xFF;

        if (exp_golomb_order)
        {
            symbol = symbol - (out >> 8);
        }

        int loop_cnt0 = (exp_golomb_order / 4) + 1;
        int loop_cnt1 = exp_golomb_order == 0 ? 0 : (exp_golomb_order - 1) / 4 + 1;

        
        if (i - sum_loop == 0)
        {
            cnt = exp_golomb_order + 1;
            symbol_num = exp_golomb_order + 1;
            sym_tmp = exp_golomb_order;

            value = symbol;
            num_bin = exp_golomb_order;
            bin = num_bin - 1;
        }

        if (i - sum_loop < loop_cnt0) {
            cnt = symbol_num >= 4 ? 4 : symbol_num;
            aec_stage3_phase2(cnt,
                1, sym_tmp ? 0 : 1, 0, 0,
                1, sym_tmp - 1 ? 0 : 1, 0, 0,
                1, sym_tmp - 2 ? 0 : 1, 0, 0,
                1, sym_tmp - 3 ? 0 : 1, 0, 0
            );
            symbol_num = symbol_num - 4;
            sym_tmp = sym_tmp - 4;
        }
        else {
            int cnt = ((bin + 1) >= 4) ? 4 : bin + 1;
            aec_stage3_phase2(cnt,
                1, value & (1 << (u32)bin), 0, 0,
                1, value & (1 << (u32)bin - 1), 0, 0,
                1, value & (1 << (u32)bin - 2), 0, 0,
                1, value & (1 << (u32)bin - 3), 0, 0);
            bin = bin - 4;
        }

        if (i - sum_loop == loop_cnt0 + loop_cnt1 - 1)
        {
            sum_loop += loop_cnt0 + loop_cnt1;
            count_symbol++;
        }
    }
    
//     for (int i = 0; i < num; i++)
//     {
//         int exp_golomb_order_tmp = 0;
//         int symbol = symbol_seq[i];
//         int symbol_tmp = symbol;
// 
//         u32 out = get_exp_golomb_symbol(symbol);
//         u8 exp_golomb_order = out & 0xFF;
// 
//         if (exp_golomb_order)
//         {
//             symbol = symbol - (out>>8);
//         }
// 
// // #ifndef __SYNTHESIS__ // check code here.
// #if 0
//         while ((int)symbol_tmp >= (1 << exp_golomb_order_tmp))
//         {
//             symbol_tmp = symbol_tmp - (1 << exp_golomb_order_tmp);
//             exp_golomb_order_tmp++;
//         }
//         
//         if (symbol != symbol_tmp)
//         {
//             int k = 0;
//         }
//         assert(exp_golomb_order == exp_golomb_order_tmp);
// #endif
//         int loop_cnt0 = (exp_golomb_order / 4) + 1;
//         int loop_cnt1 = exp_golomb_order == 0 ? 0 : (exp_golomb_order - 1) / 4 + 1;
//         
//         int cnt = exp_golomb_order + 1;
//         int symbol_num = exp_golomb_order + 1;
//         u8 sym_tmp = exp_golomb_order;
// 
//         u32 value = symbol;
//         int num_bin = exp_golomb_order;
//         int bin = num_bin - 1;
// 
//         for (int i = 0; i < loop_cnt0 + loop_cnt1; i++)
//         {
//             if (i < loop_cnt0) {
//                 cnt = symbol_num >= 4 ? 4 : symbol_num;
//                 aec_stage3_phase2(cnt,
//                     1, sym_tmp ? 0 : 1, 0, 0,
//                     1, sym_tmp - 1 ? 0 : 1, 0, 0,
//                     1, sym_tmp - 2 ? 0 : 1, 0, 0,
//                     1, sym_tmp - 3 ? 0 : 1, 0, 0
//                 );
//                 symbol_num = symbol_num - 4;
//                 sym_tmp = sym_tmp - 4;
//             }
//             else {
//                 int cnt = ((bin + 1) >= 4) ? 4 : bin + 1;
//                 aec_stage3_phase2(cnt,
//                     1, value & (1 << (u32)bin), 0, 0,
//                     1, value & (1 << (u32)bin - 1), 0, 0,
//                     1, value & (1 << (u32)bin - 2), 0, 0,
//                     1, value & (1 << (u32)bin - 3), 0, 0);
//                 bin = bin - 4;
//             }
//         }
//     }
    
}

static void code_coef_remain_exgolomb(int symbol)
{
    int exp_golomb_order = 0;
    while ((int)symbol >= (1 << exp_golomb_order))
    {
        symbol = symbol - (1 << exp_golomb_order);
        exp_golomb_order++;
    }

    sbac_write_unary_sym_ep(exp_golomb_order);
    sbac_encode_bins_ep_msb(symbol, exp_golomb_order);
}
int com_get_ctx_offset(COM_POS_INFO* pos_info, u8 is_intra, int pos_x, int pos_y, int sr_x, int sr_y)
{
#pragma HLS inline
    int offset = 0;

    if (!(pos_x == 0 && pos_y == 0))
    {
        if (is_intra)
        {
            int i = (pos_x <= pos_info->x.b) ? (pos_x <= pos_info->x.a ? 0 : 1) : (pos_x <= pos_info->x.c ? 2 : 3);
            int j = (pos_y <= pos_info->y.b) ? (pos_y <= pos_info->y.a ? 0 : 1) : (pos_y <= pos_info->y.c ? 2 : 3);
            int s = i + j;

            if (s <= 1)
            {
                offset = 4;
            }
            else if (s > 2)
            {
                offset = 8;
            }
            else
            {
                offset = 12;
            }
        }
        else
        {
            if (pos_x <= sr_x / 2 && pos_y <= sr_y / 2)
            {
                offset = 4;
            }
            else
            {
                offset = 8;
            }
        }
    }

    return offset;
}
int com_get_ctx_gt0_inc(int blkpos, int width, int height, int ch_type, int sr_x, int sr_y, bool prev_value[5]
    , u8 is_intra, COM_POS_INFO* pos_info
)
{
#pragma HLS inline
    //const s16* pdata = pcoeff + blkpos;
    const int width_m1 = width - 1;
    const int height_m1 = height - 1;
    const int log2_w = CONV_LOG2(width);
    const int pos_y = blkpos >> log2_w;
    const int pos_x = blkpos - (pos_y << log2_w);
    int diag = pos_x + pos_y;
    int num_gt0 = 0;

    for (int i = 0; i < NUM_PREV_0VAL; i++)
    {
#pragma HLS unroll
        if (prev_value[i] != false)
        {
            num_gt0++;
        }
    }
    num_gt0 = COM_MIN(num_gt0, 3) + 1;
    if (ch_type == Y_C)
    {
        num_gt0 += com_get_ctx_offset(pos_info, is_intra, pos_x, pos_y, sr_x, sr_y);
    }
    else
    {
        num_gt0 += (pos_x == 0 && pos_y == 0) ? 0 : 4;
    }
    return num_gt0;
}

int com_get_ctx_gt1_inc(int blkpos, int width, int height, int ch_type, int sr_x, int sr_y, int* prev_value
    , u8 is_intra, COM_POS_INFO* pos_info
)
{
#pragma HLS inline
    //const s16* pdata = pcoeff + blkpos;
    const int width_m1 = width - 1;
    const int height_m1 = height - 1;
    const int log2_w = CONV_LOG2(width);
    const int pos_y = blkpos >> log2_w;
    const int pos_x = blkpos - (pos_y << log2_w);
    int num_gt1 = 0;

    for (int i = 0; i < NUM_PREV_12VAL; i++)
    {
#pragma HLS unroll 
        if (COM_ABS16(prev_value[i]) > 1)
        {
            num_gt1++;
        }
    }
    num_gt1 = COM_MIN(num_gt1, 3) + 1;
    if (ch_type == Y_C)
    {
        num_gt1 += com_get_ctx_offset(pos_info, is_intra, pos_x, pos_y, sr_x, sr_y);
    }
    return num_gt1;
}

int com_get_ctx_gt2_inc(int blkpos, int width, int height, int ch_type, int sr_x, int sr_y, int* prev_value
    , u8 is_intra, COM_POS_INFO* pos_info
)
{
#pragma HLS inline
    //const s16* pdata = pcoeff + blkpos;
    const int width_m1 = width - 1;
    const int height_m1 = height - 1;
    const int log2_w = CONV_LOG2(width);
    const int pos_y = blkpos >> log2_w;
    const int pos_x = blkpos - (pos_y << log2_w);
    int num_gt2 = 0;

    for (int i = 0; i < NUM_PREV_12VAL; i++)
    {
#pragma HLS unroll
        if (COM_ABS16(prev_value[i]) > 2)
        {
            num_gt2++;
        }
    }
    num_gt2 = COM_MIN(num_gt2, 3) + 1;
    if (ch_type == Y_C)
    {
        num_gt2 += com_get_ctx_offset(pos_info, is_intra, pos_x, pos_y, sr_x, sr_y);
    }
    return num_gt2;
}
#if TS_GTX
int com_get_ctx_gtx_inc(int blkpos, int width, int height, int ch_type, int sr_x, int sr_y, int* prev_value
    , u8 is_intra, COM_POS_INFO* pos_info, int gt_x
)
{
    //const s16* pdata = pcoeff + blkpos;
    const int width_m1 = width - 1;
    const int height_m1 = height - 1;
    const int log2_w = CONV_LOG2(width);
    const int pos_y = blkpos >> log2_w;
    const int pos_x = blkpos - (pos_y << log2_w);
    int num_gtx = 0;

    for (int i = 0; i < NUM_PREV_12VAL; i++)
    {
        if (COM_ABS16(prev_value[i]) > gt_x)
        {
            num_gtx++;
        }
    }
    num_gtx = COM_MIN(num_gtx, 3) + 1;
    if (ch_type == Y_C)
    {
        num_gtx += com_get_ctx_offset(pos_info, is_intra, pos_x, pos_y, sr_x, sr_y);
    }
    return num_gtx;
}
#endif

u16 n_zigzag_scan(int* col, int* row, int sr_x, int sr_y, int size_x, int size_y, N_ZIGZAG_CHOICE* choice)
{
    u16 res;
    res = (*col) + (*row) * size_x;

    if (sr_x == 1) {
        (*row)--;
    }
    else if (sr_y == 1) {
        (*col)--;
    }
    else if ((*col) != 0 || (*row) != 0)
    {
        switch (*choice)
        {
        case N_GO_UP:
            (*row)--;
            if ((*col) == (sr_x - 1))
                (*choice) = N_LEFT_DOWN;
            else
                (*choice) = N_RIGHT_UP;
            break;
        case N_RIGHT_UP:
            (*row)--;
            (*col)++;
            if ((*row) == 0 && (*col) != 0)
                (*choice) = N_LEFT_TOWARDS;
            else if ((*col) == sr_x - 1)
                (*choice) = N_GO_UP;
            else
                (*choice) = N_RIGHT_UP;
            break;
        case N_LEFT_DOWN:
            (*row)++;
            (*col)--;
            if ((*col) == 0)
                (*choice) = N_GO_UP;
            else if ((*row) == sr_y - 1)
                (*choice) = N_LEFT_TOWARDS;
            else
                (*choice) = N_LEFT_DOWN;
            break;
        case N_LEFT_TOWARDS:
            (*col)--;
            if ((*row) == 0)
                (*choice) = N_LEFT_DOWN;
            else
                (*choice) = N_RIGHT_UP;
            break;
        }
    }
    return res;
}

static void enc_eco_srcc(int log2_w, int log2_h, int ch_type
    , u8 is_intra
#if TS_GTX
    , int ts_flag_code
#endif
    , int num_sig
 	, U8 line_idx_in_lcu[3]
    , SRCC_FOR_AEC* srcc_for_aec
)
{
#pragma HLS ARRAY_RESHAPE   variable=srcc_for_aec->coef_for_srcc   complete dim=3
#pragma HLS ARRAY_RESHAPE   variable=srcc_for_aec->blkpos_for_srcc complete dim=3
#pragma HLS ARRAY_PARTITION variable=line_idx_in_lcu               complete dim=0

    int width = 1 << log2_w;
    int height = 1 << log2_h;
    int i;
    int offset0;
    SBAC_CTX_MODEL cm_gt0;
    SBAC_CTX_MODEL cm_gtx;
    int scan_type = COEF_SCAN_ZIGZAG;
    int log2_block_size = aec_min(log2_w, log2_h);
    int* scan = com_scan_sr;
    int scan_pos_last = -1;
    int j;
    u8 sr_x = 0, sr_y = 0;
    int sr_width, sr_height;
    int num_coef;
    int ipos;
    int last_scan_set;
    int sub_set;

    int ctx_gt0 = 0;
    int cg_log2_size = LOG2_CG_SIZE;
    bool is_last_x = 0;
    bool is_last_y = 0;
    bool is_last_x_tmp = 0;
    bool is_last_y_tmp = 0;
    int pos_last = 0;

    int ctx_gt1 = 0;
    int ctx_gt2 = 0;
#if TS_GTX
    int ctx_gt4 = 0;
    int ctx_gt8 = 0;
#endif
    int escape_data_present_ingroup = 0;
    int cnt_nz = 0;
    u16 blkpos;
    u8 sx, sy;
    bool sig;
    int temp_x;
    int temp_y;
    temp_x = (num_sig >> 12) & 0xff;
    temp_y = (num_sig >> 20) & 0xff;

    // int prev_0val[NUM_PREV_0VAL] = { 0 }; //FIFO
    int prev_12val[NUM_PREV_12VAL] = { 0 }; //FIFO

    sr_x = temp_x;
    sr_y = temp_y;
    sr_width = sr_x + 1;
    sr_height = sr_y + 1;
    num_coef = sr_width * sr_height;

    int col = sr_x;
    int row = sr_y;
    int line_idx_cu = 0;
    if (ch_type == 0)
        line_idx_cu = line_idx_in_lcu[0];
    else if (ch_type == 1)
        line_idx_cu = line_idx_in_lcu[1];
    else
        line_idx_cu = line_idx_in_lcu[2];

    COM_POS_INFO cur_pos_info;
    com_init_pos_info(&cur_pos_info, sr_x, sr_y);

    // Code scan region
    code_scanregion(sr_x, sr_y, width, height, ch_type);

    //===== code significance flag =====
    offset0 = num_coef <= 4 ? 0 : NUM_CTX_GT0_LUMA_TU << (num_coef <= 16 ? 0 : 1);
    cm_gt0 = (ch_type == Y_C) ? 160 + offset0 : 160 + NUM_CTX_GT0_LUMA;
    cm_gtx = (ch_type == Y_C) ? 220 : 220 + NUM_CTX_GT1_LUMA;

    last_scan_set = (num_coef - 1) >> cg_log2_size;
    scan_pos_last = num_coef - 1;

    ipos = scan_pos_last;
    bool sig_coeff16_ctx[16 + 5] = { 0 };
#pragma HLS ARRAY_PARTITION variable=sig_coeff16_ctx    complete dim=0

    // for (u8 out_loop = 63; out_loop < length; out_loop++)
    // {
    // 
    // }
    for (sub_set = last_scan_set; sub_set >= 0; sub_set--)
    {
#pragma HLS pipeline
        int num_nz = 0;
        int sub_pos = sub_set << cg_log2_size;
        int coef_signs = 0;
        u16 abs_coef[1 << LOG2_CG_SIZE];
        u16 pos[1 << LOG2_CG_SIZE];
        // int last_nz_pos_in_cg = -1;
        // int first_nz_pos_in_cg = 1 << cg_log2_size;
		int i = 0;

        // load one line.
        s16 blkpos_com_srcc[16];
        s16 coef_tmp_srcc[16];    
        int tmp_pos = ipos;
        u16 ctx_gt0_coeff[16];
        int ctx_gt0_coeff_num = 0;
        bool sig_coeff[16];
        bool prev_0val_para[16][NUM_PREV_0VAL];
        bool enable_sig_out[16];
#pragma HLS ARRAY_PARTITION variable=abs_coef        complete dim=0
#pragma HLS ARRAY_PARTITION variable=pos             complete dim=0
#pragma HLS ARRAY_PARTITION variable=blkpos_com_srcc complete dim=0
#pragma HLS ARRAY_PARTITION variable=coef_tmp_srcc   complete dim=0
#pragma HLS ARRAY_PARTITION variable=ctx_gt0_coeff   complete dim=0
#pragma HLS ARRAY_PARTITION variable=sig_coeff       complete dim=0
#pragma HLS ARRAY_PARTITION variable=prev_0val_para  complete dim=0
#pragma HLS ARRAY_PARTITION variable=enable_sig_out  complete dim=0
        
        for (int i = 0; i < 16; i++) {
#pragma HLS unroll
            blkpos_com_srcc[i] = srcc_for_aec->blkpos_for_srcc[ch_type][line_idx_cu][i];
            coef_tmp_srcc[i] = srcc_for_aec->coef_for_srcc[ch_type][line_idx_cu][i];
            sig_coeff16_ctx[i + 5] = (coef_tmp_srcc[i] == 0 || (i > tmp_pos - sub_pos)) ? 0 : 1;
            
            if (sig_coeff16_ctx[i + 5] && (pos_last==0))
            {
                pos_last = blkpos_com_srcc[i];
            }
        }
        
        // parallel load for all coeff.
        for (int i = 0; i < 16; i++)
        {
#pragma HLS unroll
            for (int j = 0; j < 5; j++)
            {
                prev_0val_para[i][j] = sig_coeff16_ctx[i + 4 - j];
            }
        }

#if 1 // for HLS better.
        u8 sub_pos_val = tmp_pos - sub_pos;
        switch (sub_pos_val)
        {
        case 0:
            sig_coeff16_ctx[4] = sig_coeff16_ctx[5]; 
            sig_coeff16_ctx[3] = false;
            sig_coeff16_ctx[2] = false;
            sig_coeff16_ctx[1] = false;
            sig_coeff16_ctx[0] = false;
            break;
        case 1:
            sig_coeff16_ctx[4] = sig_coeff16_ctx[6];
            sig_coeff16_ctx[3] = sig_coeff16_ctx[5];
            sig_coeff16_ctx[2] = false;
            sig_coeff16_ctx[1] = false;
            sig_coeff16_ctx[0] = false;
            break;
        case 2:
            sig_coeff16_ctx[4] = sig_coeff16_ctx[7];
            sig_coeff16_ctx[3] = sig_coeff16_ctx[6];
            sig_coeff16_ctx[2] = sig_coeff16_ctx[5];
            sig_coeff16_ctx[1] = false;
            sig_coeff16_ctx[0] = false;
            break;
        case 3:
            sig_coeff16_ctx[4] = sig_coeff16_ctx[8];
            sig_coeff16_ctx[3] = sig_coeff16_ctx[7];
            sig_coeff16_ctx[2] = sig_coeff16_ctx[6];
            sig_coeff16_ctx[1] = sig_coeff16_ctx[5];
            sig_coeff16_ctx[0] = false;
            break;
        case 4:
            sig_coeff16_ctx[4] = sig_coeff16_ctx[9];
            sig_coeff16_ctx[3] = sig_coeff16_ctx[8];
            sig_coeff16_ctx[2] = sig_coeff16_ctx[7];
            sig_coeff16_ctx[1] = sig_coeff16_ctx[6];
            sig_coeff16_ctx[0] = sig_coeff16_ctx[5];
            break;
        case 5:
            sig_coeff16_ctx[4] = sig_coeff16_ctx[10];
            sig_coeff16_ctx[3] = sig_coeff16_ctx[9];
            sig_coeff16_ctx[2] = sig_coeff16_ctx[8];
            sig_coeff16_ctx[1] = sig_coeff16_ctx[7];
            sig_coeff16_ctx[0] = sig_coeff16_ctx[6];
            break;
        case 6:
            sig_coeff16_ctx[4] = sig_coeff16_ctx[11];
            sig_coeff16_ctx[3] = sig_coeff16_ctx[10];
            sig_coeff16_ctx[2] = sig_coeff16_ctx[9];
            sig_coeff16_ctx[1] = sig_coeff16_ctx[8];
            sig_coeff16_ctx[0] = sig_coeff16_ctx[7];
            break;
        case 7:
            sig_coeff16_ctx[4] = sig_coeff16_ctx[12];
            sig_coeff16_ctx[3] = sig_coeff16_ctx[11];
            sig_coeff16_ctx[2] = sig_coeff16_ctx[10];
            sig_coeff16_ctx[1] = sig_coeff16_ctx[9];
            sig_coeff16_ctx[0] = sig_coeff16_ctx[8];
            break;
        case 8:
            sig_coeff16_ctx[4] = sig_coeff16_ctx[13];
            sig_coeff16_ctx[3] = sig_coeff16_ctx[12];
            sig_coeff16_ctx[2] = sig_coeff16_ctx[11];
            sig_coeff16_ctx[1] = sig_coeff16_ctx[10];
            sig_coeff16_ctx[0] = sig_coeff16_ctx[9];
            break;
        case 9:
            sig_coeff16_ctx[4] = sig_coeff16_ctx[14];
            sig_coeff16_ctx[3] = sig_coeff16_ctx[13];
            sig_coeff16_ctx[2] = sig_coeff16_ctx[12];
            sig_coeff16_ctx[1] = sig_coeff16_ctx[11];
            sig_coeff16_ctx[0] = sig_coeff16_ctx[10];
            break;
        case 10:
            sig_coeff16_ctx[4] = sig_coeff16_ctx[15];
            sig_coeff16_ctx[3] = sig_coeff16_ctx[14];
            sig_coeff16_ctx[2] = sig_coeff16_ctx[13];
            sig_coeff16_ctx[1] = sig_coeff16_ctx[12];
            sig_coeff16_ctx[0] = sig_coeff16_ctx[11];
            break;
        case 11:
            sig_coeff16_ctx[4] = sig_coeff16_ctx[16];
            sig_coeff16_ctx[3] = sig_coeff16_ctx[15];
            sig_coeff16_ctx[2] = sig_coeff16_ctx[14];
            sig_coeff16_ctx[1] = sig_coeff16_ctx[13];
            sig_coeff16_ctx[0] = sig_coeff16_ctx[12];
            break;
        case 12:
            sig_coeff16_ctx[4] = sig_coeff16_ctx[17];
            sig_coeff16_ctx[3] = sig_coeff16_ctx[16];
            sig_coeff16_ctx[2] = sig_coeff16_ctx[15];
            sig_coeff16_ctx[1] = sig_coeff16_ctx[14];
            sig_coeff16_ctx[0] = sig_coeff16_ctx[13];
            break;
        case 13:
            sig_coeff16_ctx[4] = sig_coeff16_ctx[18];
            sig_coeff16_ctx[3] = sig_coeff16_ctx[17];
            sig_coeff16_ctx[2] = sig_coeff16_ctx[16];
            sig_coeff16_ctx[1] = sig_coeff16_ctx[15];
            sig_coeff16_ctx[0] = sig_coeff16_ctx[14];
            break;
        case 14:
            sig_coeff16_ctx[4] = sig_coeff16_ctx[19];
            sig_coeff16_ctx[3] = sig_coeff16_ctx[18];
            sig_coeff16_ctx[2] = sig_coeff16_ctx[17];
            sig_coeff16_ctx[1] = sig_coeff16_ctx[16];
            sig_coeff16_ctx[0] = sig_coeff16_ctx[15];
            break;
        case 15:
            sig_coeff16_ctx[4] = sig_coeff16_ctx[20];
            sig_coeff16_ctx[3] = sig_coeff16_ctx[19];
            sig_coeff16_ctx[2] = sig_coeff16_ctx[18];
            sig_coeff16_ctx[1] = sig_coeff16_ctx[17];
            sig_coeff16_ctx[0] = sig_coeff16_ctx[16];
            break;
        default:
            break;
        }
#endif
        
        for (int i = 0; i < 16; i++)
        {
#pragma HLS unroll
            s16 blkpos = blkpos_com_srcc[i];
            sy = blkpos >> log2_w;
            sx = blkpos - (sy << log2_w);
            sig = sig_coeff16_ctx[5 + i];

            enable_sig_out[i] = !(sx == 0 && sy == sr_y && is_last_y_tmp == 0) && !(sy == 0 && sx == sr_x && is_last_x_tmp == 0);

            // there is data dependency.
            if (sig) {
                if (sx == sr_x) {
                    is_last_x_tmp = 1;
                }
                if (sy == sr_y) {
                    is_last_y_tmp = 1;
                }
            }
        }

        for (int i = 0; i < 16; i++)
        {
#pragma HLS unroll
            if (i > tmp_pos - sub_pos) {
                break;
            }

            s16 blkpos_com = blkpos_com_srcc[i];
            blkpos = blkpos_com;
            sy = blkpos >> log2_w;
            sx = blkpos - (sy << log2_w);

            int coef_tmp = coef_tmp_srcc[i];
            sig = sig_coeff16_ctx[5 + i];

            if (ipos == scan_pos_last) {
                ctx_gt0 = 0;
            }
            else {
                ctx_gt0 = com_get_ctx_gt0_inc(blkpos, width, height, ch_type, sr_x, sr_y, prev_0val_para[i]
                    , is_intra, &cur_pos_info);
            }

            // if ((!(sx == 0 && sy == sr_y && is_last_y == 0) && !(sy == 0 && sx == sr_x && is_last_x == 0)) == false)
            // {
            //     int kk = 0;
            // }
            // 
            // if (is_last_x != is_last_x_para[i])
            // {
            //     int kk = 0;
            // }
            // 
            // if (is_last_y != is_last_y_para[i])
            // {
            //     int kk = 0;
            // }

            if (enable_sig_out[i])
            {
                ctx_gt0_coeff[ctx_gt0_coeff_num] = (cm_gt0 + ctx_gt0 + 1);
                sig_coeff[ctx_gt0_coeff_num] = sig;
                ctx_gt0_coeff_num++;

                //enc_sbac_encode_bin((u32)sig, sbac, &cm_gt0[ctx_gt0], bs);
                // aec_stage3_phase2( 1, 0, (u32)sig, (cm_gt0 + ctx_gt0 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }

            if (sig)
            {
                pos[num_nz] = blkpos;
                abs_coef[num_nz] = (int)(COM_ABS(coef_tmp));
                coef_signs = 2 * coef_signs + (coef_tmp < 0 ? 1 : 0);
                num_nz++;

                // if (sx == sr_x)
                // {
                //     is_last_x = 1;
                // }
                // if (sy == sr_y)
                // {
                //     is_last_y = 1;
                // }
            }
            ipos--;
        }

        // more than 4 dump?
#if AEC_STAGE2_HLS
        u8 out_1 = (sig_coeff[15] << 7) + (sig_coeff[14] << 6) + (sig_coeff[13] << 5) + (sig_coeff[12] << 4) +
            (sig_coeff[11] << 3) + (sig_coeff[10] << 2) + (sig_coeff[9] << 1) + (sig_coeff[8] << 0);
        u8 out_2 = (sig_coeff[7] << 7) + (sig_coeff[6] << 6) + (sig_coeff[5] << 5) + (sig_coeff[4] << 4) +
            (sig_coeff[3] << 3) + (sig_coeff[2] << 2) + (sig_coeff[1] << 1) + (sig_coeff[0] << 0);
        u8 out_3 = cm_gt0 & 0xFF;
        u8 out_4 = (cm_gt0 >> 8) & 0xFF;
        u32 ctx_0 = (ctx_gt0_coeff[0] & 0xFF) + ((ctx_gt0_coeff[1] & 0xFF) << 8) + ((ctx_gt0_coeff[2] & 0xFF) << 8) + ((ctx_gt0_coeff[3] & 0xFF) << 8);
        u32 ctx_1 = (ctx_gt0_coeff[4] & 0xFF) + ((ctx_gt0_coeff[5] & 0xFF) << 8) + ((ctx_gt0_coeff[6] & 0xFF) << 8) + ((ctx_gt0_coeff[7] & 0xFF) << 8);
        u32 ctx_2 = (ctx_gt0_coeff[8] & 0xFF) + ((ctx_gt0_coeff[9] & 0xFF) << 8) + ((ctx_gt0_coeff[10] & 0xFF) << 8) + ((ctx_gt0_coeff[11] & 0xFF) << 8);
        u32 ctx_3 = (ctx_gt0_coeff[12] & 0xFF) + ((ctx_gt0_coeff[13] & 0xFF) << 8) + ((ctx_gt0_coeff[14] & 0xFF) << 8) + ((ctx_gt0_coeff[15] & 0xFF) << 8);
        aec_stage3_phase2(ctx_gt0_coeff_num + 4,
            out_1, ctx_0, ctx_1, ctx_2, 
            out_2, ctx_3, 0, 0,
            out_3, 0, 0, 0,
            out_4, 0, 0, 0
            );
#else

        if (ctx_gt0_coeff_num > 0)
        {
            for (int m = 0; m < ctx_gt0_coeff_num/4; m++)
            {
                aec_stage3_phase2(4,
                    0, (u32)sig_coeff[0 + m * 4], ctx_gt0_coeff[0 + m * 4], 0,
                    0, (u32)sig_coeff[1 + m * 4], ctx_gt0_coeff[1 + m * 4], 0,
                    0, (u32)sig_coeff[2 + m * 4], ctx_gt0_coeff[2 + m * 4], 0,
                    0, (u32)sig_coeff[3 + m * 4], ctx_gt0_coeff[3 + m * 4], 0 );
            }
            int offset = (ctx_gt0_coeff_num / 4) * 4;
            if (ctx_gt0_coeff_num % 4 ==1) {
                aec_stage3_phase2(1, 0, (u32)sig_coeff[0 + offset], ctx_gt0_coeff[0 + offset], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            else if (ctx_gt0_coeff_num % 4 == 2) {
                aec_stage3_phase2(2, 
                    0, (u32)sig_coeff[0 + offset], ctx_gt0_coeff[0 + offset], 0, 
                    0, (u32)sig_coeff[1 + offset], ctx_gt0_coeff[1 + offset], 0,
                    0, 0, 0, 0, 
                    0, 0, 0, 0);
            }
            else if (ctx_gt0_coeff_num % 4 == 3) {
                aec_stage3_phase2(3,
                    0, (u32)sig_coeff[0 + offset], ctx_gt0_coeff[0 + offset], 0,
                    0, (u32)sig_coeff[1 + offset], ctx_gt0_coeff[1 + offset], 0,
                    0, (u32)sig_coeff[2 + offset], ctx_gt0_coeff[2 + offset], 0,
                    0, 0, 0, 0);
            }
        }
#endif

        line_idx_cu++;
        if (num_nz > 0)
        {
            int idx;
            int c2_idx = 0;
            escape_data_present_ingroup = 0;
            { 
                bool gt1_symbol[32];
                u16 gt1_ctx[32];
#pragma HLS ARRAY_PARTITION variable=gt1_symbol     complete dim=0
#pragma HLS ARRAY_PARTITION variable=gt1_ctx        complete dim=0
                int gt1_ctx_num = 0;
                for (idx = 0; idx < 16; idx++)
                {
#pragma HLS unroll
                    if (idx>=num_nz) {
                        break;
                    }
                    u32 symbol = abs_coef[idx] > 1 ? 1 : 0;
                    if (pos[idx] != pos_last)
                    {
                        ctx_gt1 = com_get_ctx_gt1_inc(pos[idx], width, height, ch_type, sr_x, sr_y, prev_12val
                            , is_intra, &cur_pos_info);
                    }
                    //enc_sbac_encode_bin(symbol, sbac, &cm_gtx[ctx_gt1], bs);
                    // aec_stage3_phase2( 1, 0, symbol, (cm_gtx + ctx_gt1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                    
                    gt1_symbol[gt1_ctx_num] = symbol;
                    gt1_ctx[gt1_ctx_num] = (cm_gtx + ctx_gt1 + 1);
                    gt1_ctx_num++;

                    if (symbol)
                    {
                        u32 symbol2 = abs_coef[idx] > 2 ? 1 : 0;
                        if (pos[idx] != pos_last)
                        {
                            ctx_gt2 = com_get_ctx_gt2_inc(pos[idx], width, height, ch_type, sr_x, sr_y, prev_12val
                                , is_intra, &cur_pos_info);
                        }
                        //enc_sbac_encode_bin(symbol2, sbac, &cm_gtx[ctx_gt2], bs);
                        // aec_stage3_phase2( 1, 0, symbol2, (cm_gtx + ctx_gt2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

                        gt1_symbol[gt1_ctx_num] = symbol2;
                        gt1_ctx[gt1_ctx_num] = (cm_gtx + ctx_gt2 + 1);
                        gt1_ctx_num++;

                        if (symbol2)
                        {
                            escape_data_present_ingroup = 1;
                        }
                    }

                    for (int i = NUM_PREV_12VAL - 1; i > 0; i--)
                    {
                        prev_12val[i] = prev_12val[i - 1];
                    }
                    prev_12val[0] = abs_coef[idx]; 
                }

                // more than 4 dump?
#if AEC_STAGE2_HLS
                u8 out_1 = (gt1_symbol[15] << 7) + (gt1_symbol[14] << 6) + (gt1_symbol[13] << 5) + (gt1_symbol[12] << 4) +
                    (gt1_symbol[11] << 3) + (gt1_symbol[10] << 2) + (gt1_symbol[9] << 1) + (gt1_symbol[8] << 0);
                u8 out_2 = (gt1_symbol[7] << 7) + (gt1_symbol[6] << 6) + (gt1_symbol[5] << 5) + (gt1_symbol[4] << 4) +
                    (gt1_symbol[3] << 3) + (gt1_symbol[2] << 2) + (gt1_symbol[1] << 1) + (gt1_symbol[0] << 0);
                u8 out_3 = cm_gtx & 0xFF;
                u8 out_4 = (cm_gtx >> 8) & 0xFF;
                u32 ctx_0 = (gt1_ctx[0] & 0xFF) + ((gt1_ctx[1] & 0xFF) << 8) + ((gt1_ctx[2] & 0xFF) << 8) + ((gt1_ctx[3] & 0xFF) << 8);
                u32 ctx_1 = (gt1_ctx[4] & 0xFF) + ((gt1_ctx[5] & 0xFF) << 8) + ((gt1_ctx[6] & 0xFF) << 8) + ((gt1_ctx[7] & 0xFF) << 8);
                u32 ctx_2 = (gt1_ctx[8] & 0xFF) + ((gt1_ctx[9] & 0xFF) << 8) + ((gt1_ctx[10] & 0xFF) << 8) + ((gt1_ctx[11] & 0xFF) << 8);
                u32 ctx_3 = (gt1_ctx[12] & 0xFF) + ((gt1_ctx[13] & 0xFF) << 8) + ((gt1_ctx[14] & 0xFF) << 8) + ((gt1_ctx[15] & 0xFF) << 8);
                aec_stage3_phase2(ctx_gt0_coeff_num + 4,
                    out_1, ctx_0, ctx_1, ctx_2,
                    out_2, ctx_3, 0, 0,
                    out_3, 0, 0, 0,
                    out_4, 0, 0, 0
                );
#else
                if (gt1_ctx_num > 0)
                {
                    for (int m = 0; m < gt1_ctx_num / 4; m++)
                    {
                        aec_stage3_phase2(4,
                            0, (u32)gt1_symbol[0 + m * 4], gt1_ctx[0 + m * 4], 0,
                            0, (u32)gt1_symbol[1 + m * 4], gt1_ctx[1 + m * 4], 0,
                            0, (u32)gt1_symbol[2 + m * 4], gt1_ctx[2 + m * 4], 0,
                            0, (u32)gt1_symbol[3 + m * 4], gt1_ctx[3 + m * 4], 0);
                    }
                    int offset = (gt1_ctx_num / 4) * 4;
                    if (gt1_ctx_num % 4 == 1) {
                        aec_stage3_phase2(1, 0, (u32)gt1_symbol[0 + offset], gt1_ctx[0 + offset], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                    }
                    else if (gt1_ctx_num % 4 == 2) {
                        aec_stage3_phase2(2,
                            0, (u32)gt1_symbol[0 + offset], gt1_ctx[0 + offset], 0,
                            0, (u32)gt1_symbol[1 + offset], gt1_ctx[1 + offset], 0,
                            0, 0, 0, 0,
                            0, 0, 0, 0);
                    }
                    else if (gt1_ctx_num % 4 == 3) {
                        aec_stage3_phase2(3,
                            0, (u32)gt1_symbol[0 + offset], gt1_ctx[0 + offset], 0,
                            0, (u32)gt1_symbol[1 + offset], gt1_ctx[1 + offset], 0,
                            0, (u32)gt1_symbol[2 + offset], gt1_ctx[2 + offset], 0,
                            0, 0, 0, 0);
                    }
                }
#endif
            }
            if (escape_data_present_ingroup)
            {
                u16 escape_value[16];
                int escape_value_num = 0;
                for (idx = 0; idx < num_nz; idx++)
                {
#if TS_GTX
                    int base_level;
                    if (ts_flag_code)
                    {
                        base_level = 9;
                    }
                    else
                    {
                        base_level = 3;
                    }
#else
                    int base_level = 3;
#endif
                    if (abs_coef[idx] >= base_level)
                    {
                        int escape_code_value = abs_coef[idx] - base_level;
                        escape_value[escape_value_num] = escape_code_value;
                        escape_value_num++;
                        // code_coef_remain_exgolomb(escape_code_value);
                    }
                }
                seq_code_coef_remain_exgolomb(escape_value_num, escape_value);
            }

            sbac_encode_bins_ep_msb(coef_signs, num_nz);
            cnt_nz += num_nz;
        }
    }
}
#endif

void enc_eco_xcoef(U2 cu_mode, ENC_CTX_HLS* ctx, int log2_w, int log2_h, int num_sig, int ch_type, U8 line_idx_in_lcu[3], SRCC_FOR_AEC* srcc_for_aec)
{
    if ((log2_w > MAX_TR_LOG2) || (log2_h > MAX_TR_LOG2))
    {
        printf("transform size > 64x64");
        assert(0);
    }

#if TS_GTX
    int ts_flag_code = ctx->info.pic_header.ph_ists_enable_flag;
#endif

#if SRCC
    if (ctx->info.sqh.srcc_enable_flag)
    {
        enc_eco_srcc(log2_w, log2_h, ch_type
            , cu_mode == MODE_INTRA ? 1 : 0
#if TS_GTX
            , ts_flag_code
#endif
            , num_sig
			, line_idx_in_lcu
            , srcc_for_aec
        );
    }
    else
    {
#endif
        //enc_eco_run_length_cc(coef, log2_w, log2_h, num_sig, (ch_type == Y_C ? 0 : 1));
#if SRCC
    }
#endif
}
#if ST_CHROMA_TEMP
u8   com_st_chroma_allow(COM_MODE* mod_info_curr, int tool_st_chroma, int tree_status)
{
    u8 b_avail = 0;
    s8 ipm_l = mod_info_curr->ipm[PB0][0];
    s8 ipm_c = mod_info_curr->ipm[PB0][1];

    if (!tool_st_chroma || tree_status == TREE_L)
        return 0;

    if (mod_info_curr->ipf_flag)
        return 0;

#if IIP_TEMP
    if (mod_info_curr->iip_flag)
        return 0;
#endif
#if SAWP_TEMP
    if (mod_info_curr->sawp_flag && tree_status != TREE_C) //
        return 0;
#endif // SAWP


    if (mod_info_curr->cu_mode == MODE_INTRA && !(ipm_l == IPD_IPCM && ipm_c == IPD_DM_C))
    {
        b_avail = 1;
    }

    return b_avail;
}
#endif
#if ST_CHROMA_TEMP
void enc_eco_st_chroma_flag(int flag)
{
    //enc_sbac_encode_bin(flag, sbac, sbac->ctx.st_chroma_flag, bs);
    aec_stage3_phase2( 1, 0, flag, 455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}
#endif

int encode_coef(int aec_num_delta_qp, int aec_pred_qp, COM_MODE* mod_info_curr, int cu_width_log2, int cu_height_log2, u8 pred_mode, COM_MODE* mi, u8 tree_status, ENC_CTX_HLS* ctx
// #if CUDQP
//     , int qp_y
// #endif
, U8 line_idx_in_lcu[3], SRCC_FOR_AEC* srcc_for_aec
)
{
#if ENC_DEC_TRACE
    int num_coeff = 1 << (cu_height_log2 + cu_width_log2);
#endif
    int tb_part_size = mi->tb_part;
    int pb_part_size = mi->pb_part;
    int i, j;

    int tb_avaliable = is_tb_avaliable(ctx->info, mi);
    int start_comp, num_comp;
    start_comp = (tree_status == TREE_L || tree_status == TREE_LC) ? Y_C : U_C;
    num_comp = (tree_status == TREE_LC) ? 3 : (tree_status == TREE_L ? 1 : 2);


    if (tree_status != TREE_C)
    {
#if IPCM
        enc_eco_cbf(mod_info_curr, tb_avaliable, pb_part_size, tb_part_size, mi->num_nz, pred_mode, mi->ipm, tree_status, ctx);
#else
        enc_eco_cbf(mod_info_curr, bs, tb_avaliable, pb_part_size, tb_part_size, mi->num_nz, pred_mode, tree_status, ctx);
#endif
    }
    else
#if IPCM
        if (!(pred_mode == MODE_INTRA && mi->ipm[0][0] == IPD_IPCM && mi->ipm[0][1] == IPD_DM_C))
        {
#endif
#if PMC_TEMP || EPMC_TEMP
            s8 ipm_c = pred_mode == MODE_INTRA ? mi->ipm[0][1] : -1;
#endif
            enc_eco_cbf_uv(mi->num_nz
#if PMC_TEMP || EPMC_TEMP
                , ipm_c
#endif
            );
#if IPCM
        }
#endif
// #if CUDQP
//     if (com_is_cu_dqp(&ctx->info))
//     {
//         if (tree_status == TREE_L) //debug
//         {
//             for (int i = 0; i < MAX_NUM_TB; i++)
//             {
//                 assert(mi->num_nz[i][U_C] == 0);
//                 assert(mi->num_nz[i][U_C] == 0);
//             }
//         }
//         if (tree_status == TREE_C) //debug
//         {
//             //do nothing, as core->qp_y already derived in dec_decode_cu_chroma()
//             // int cu_w_scu = PEL2SCU(1 << cu_width_log2);
//             // int cu_h_scu = PEL2SCU(1 << cu_height_log2);
//             // int luma_scup = mi->x_scu + (cu_w_scu - 1) + (mi->y_scu + (cu_h_scu - 1)) * ctx->info.pic_width_in_scu;
//             // assert(qp_y == MCU_GET_QP(ctx->map.map_scu[luma_scup]));
//         }

//         if (tree_status != TREE_C && is_cu_nz(mi->num_nz))
//         {
//             enc_eco_cu_delta_qp(aec_num_delta_qp, qp_y - aec_pred_qp);
//         }
//     }
// #endif

#if ST_CHROMA_TEMP
    if ((mi->num_nz[TB0][U_C] || mi->num_nz[TB0][V_C])
        && com_st_chroma_allow(mi, ctx->info.sqh.st_chroma_enable_flag, tree_status))
    {
        assert(cu_width_log2 >= 3 && cu_height_log2 >= 3);
        enc_eco_st_chroma_flag(mi->st_chroma_flag);
    }
#endif

    for (i = start_comp; i < start_comp + num_comp; i++)
    {
        int log2_tb_w, log2_tb_h, tb_size, part_num;
        int plane_width_log2 = cu_width_log2 - (i != Y_C);
        int plane_height_log2 = cu_height_log2 - (i != Y_C);


            part_num = get_part_num((PART_SIZE)(i == 0 ? tb_part_size : SIZE_2Nx2N));
            get_tb_width_height_log2(plane_width_log2, plane_height_log2, (PART_SIZE)(i == 0 ? tb_part_size : SIZE_2Nx2N), &log2_tb_w, &log2_tb_h);
#if SBT_TEMP
            get_sbt_tb_size(mi->sbt_info, i, log2_tb_w, log2_tb_h, &log2_tb_w, &log2_tb_h);
#endif
            tb_size = 1 << (log2_tb_w + log2_tb_h);

            for (j = 0; j < part_num; j++)
            {
                if (mi->num_nz[j][i])
                {
#if IBC_TS
                    if (i == Y_C && part_num == 1 && plane_width_log2 < 6 && plane_height_log2 < 6 &&
                        ctx->info.sqh.ists_enable_flag && ctx->info.pic_header.ph_ists_enable_flag && mi->cu_mode == MODE_IBC)
                    {
                        enc_eco_ts_flag(mi->ist_tu_flag);
                    }
#endif
                    enc_eco_xcoef(mod_info_curr->cu_mode, ctx, log2_tb_w, log2_tb_h, mi->num_nz[j][i], i, line_idx_in_lcu, srcc_for_aec);
#if EST_TEMP
                    if (ctx->info.sqh.est_enable_flag && i == Y_C &&
                        part_num == 1 && mi->cu_mode == MODE_INTRA
#if IST_TEMP
                        && (mi->ist_tu_flag == 0)
#endif
                        )
                    {
                        enc_eco_est_flag(mi->est_flag);
#if ENC_DEC_TRACE
                        COM_TRACE_COUNTER;
                        COM_TRACE_STR("est_flag: ");
                        COM_TRACE_INT(mi->est_flag);
                        COM_TRACE_STR("\n");
#endif
                    }
#endif
                }
            }

    }

    return COM_OK;
}
#if DT_SYNTAX
void encode_part_size(ENC_CTX_HLS* ctx, int part_size, int cu_w, int cu_h, int pred_mode)
{
    int allowDT = com_dt_allow_aec(cu_w, cu_h, pred_mode, ctx->info.sqh.max_dt_size);
    int sym, dir, eq;

    int cnt_num = 0;
    int symbol[4] = {0,};
    int context[4] = {0,};

    if (!ctx->info.sqh.dt_intra_enable_flag && pred_mode == MODE_INTRA)
        return;
    if (!allowDT)
        return;

    sym = part_size != SIZE_2Nx2N;
    //enc_sbac_encode_bin(sym, sbac, sbac->ctx.part_size + 0, bs);
    // aec_stage3_phase2( 1, 0, sym, 446, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    
    symbol[cnt_num] = sym;
    context[cnt_num] = 446;
    cnt_num++;
    
    if (sym == 1)
    {
        int hori_allow = (allowDT >> 0) & 0x01;
        int vert_allow = (allowDT >> 1) & 0x01;
        dir = part_size == SIZE_2NxhN || part_size == SIZE_2NxnD || part_size == SIZE_2NxnU;
        if (hori_allow && vert_allow)
        {
            //enc_sbac_encode_bin(dir, sbac, sbac->ctx.part_size + 1, bs);
            // aec_stage3_phase2( 1, 0, dir, 447, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            
            symbol[cnt_num] = dir;
            context[cnt_num] = 447;
            cnt_num++;
        }
        else
            assert(dir == hori_allow);

        if (dir)
        {
            //hori
            eq = part_size == SIZE_2NxhN;
            //enc_sbac_encode_bin(eq, sbac, sbac->ctx.part_size + 2, bs);
            // aec_stage3_phase2( 1, 0, eq, 448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            
            symbol[cnt_num] = eq;
            context[cnt_num] = 448;
            cnt_num++;

            if (eq)
            {
                assert(part_size == SIZE_2NxhN);
            }
            else
            {
                assert(part_size == SIZE_2NxnD || part_size == SIZE_2NxnU);
                sym = part_size == SIZE_2NxnD;
                //enc_sbac_encode_bin(sym, sbac, sbac->ctx.part_size + 3, bs);
                // aec_stage3_phase2( 1, 0, sym, 449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

                symbol[cnt_num] = sym;
                context[cnt_num] = 449;
                cnt_num++;
            }
        }
        else
        {
            //vert
            eq = part_size == SIZE_hNx2N;
            //enc_sbac_encode_bin(eq, sbac, sbac->ctx.part_size + 4, bs);
            // aec_stage3_phase2( 1, 0, eq, 450, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

            symbol[cnt_num] = eq;
            context[cnt_num] = 450;
            cnt_num++;

            if (eq)
            {
                assert(part_size == SIZE_hNx2N);
            }
            else
            {
                assert(part_size == SIZE_nRx2N || part_size == SIZE_nLx2N);
                sym = part_size == SIZE_nRx2N;
                //enc_sbac_encode_bin(sym, sbac, sbac->ctx.part_size + 5, bs);
                // aec_stage3_phase2( 1, 0, sym, 451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

                symbol[cnt_num] = sym;
                context[cnt_num] = 451;
                cnt_num++;
            }
        }
    }
    else
    {
        assert(part_size == SIZE_2Nx2N);
    }

    assert(cnt_num <= 4);
    aec_stage3_phase2(cnt_num, 
        0, symbol[0], context[0], 0, 
        0, symbol[1], context[1], 0, 
        0, symbol[2], context[2], 0, 
        0, symbol[3], context[3], 0
    );

    COM_TRACE_COUNTER;
    COM_TRACE_STR("part_size ");
    COM_TRACE_INT(part_size);
    COM_TRACE_STR("\n");
}
#endif
// int enc_eco_unit_chroma(ENC_CTX_HLS* ctx, ENC_CU_DATA* cu_data, COM_MODE* mod_info_curr, COM_SQH sqh,
//     AEC_inner* AEC_DATA_inner_tmp, int x, int y, int cup, int cu_width, int cu_height,LINE_IDX* line_idx, SRCC_FOR_AEC srcc_for_aec)
// {
//     s16 coef[3][MAX_CU_DIM] = { 0 };
//     COM_MODE* mi = mod_info_curr;

//     int i, j;

//     int scu_stride = PEL2SCU(ctx->info.max_cuwh);
//     int x_scu_in_LCU = PEL2SCU(x % ctx->info.max_cuwh);
//     int y_scu_in_LCU = PEL2SCU(y % ctx->info.max_cuwh);
//     int cu_w_scu = PEL2SCU(cu_width);
//     int cu_h_scu = PEL2SCU(cu_height);
//     int luma_cup = (y_scu_in_LCU + (cu_h_scu - 1)) * scu_stride + (x_scu_in_LCU + (cu_w_scu - 1));
//     u8 luma_pred_mode = cu_data->pred_mode[luma_cup];
// #if EPMC_TEMP
//     u8 ipm_chroma = cu_data->ipm[1][cup];

//     if (ipm_chroma >= IPD_EMCPM_C && ipm_chroma <= IPD_EMCPM_T_C)
//     {
//         assert(ctx->info.pic_header.ph_epmc_model_flag == 0);
//     }
//     else if (ipm_chroma >= IPD_EMCPM2_C && ipm_chroma <= IPD_EMCPM2_T_C)
//     {
//         assert(ctx->info.pic_header.ph_epmc_model_flag == 1);
//     }
// #endif
// #if USE_IBC_TEMP
//     if (luma_pred_mode == MODE_IBC)
//     {
//         luma_pred_mode = MODE_INTRA;
//     }
// #endif
//     if (luma_pred_mode != MODE_INTRA)
//     {
//         mi->cu_mode = MODE_INTER;
//         for (int lidx = 0; lidx < REFP_NUM; lidx++)
//         {
//             mi->refi[lidx] = cu_data->refi[luma_cup][lidx];
//             mi->mv[lidx][MV_X] = cu_data->mv[luma_cup][lidx][MV_X];
//             mi->mv[lidx][MV_Y] = cu_data->mv[luma_cup][lidx][MV_Y];

//         }

//     }
//     else
//     {
//         mi->cu_mode = MODE_INTRA;
// #if IPCM
//         mod_info_curr->ipm[PB0][0] = cu_data->ipm[0][luma_cup];
//         mod_info_curr->ipm[PB0][1] = cu_data->ipm[1][cup];
// #endif
//         encode_intra_dir_c(cu_data->ipm[1][cup], cu_data->ipm[0][luma_cup]
// #if TSCPM
//             , sqh.tscpm_enable_flag
// #endif
// #if ENHANCE_TSPCM
//             , sqh.enhance_tscpm_enable_flag
// #endif
// #if PMC_TEMP || EPMC_TEMP
//             , sqh.pmc_enable_flag
// #endif
// #if SAWP_TEMP
//             , 0
// #endif // SAWP

//         );
//     }

//     /* get coefficients and tq */
//     coef_rect_to_series(ctx, cu_data->coef_y, cu_data->coef_u, cu_data->coef_v, x, y, cu_width, cu_height, coef);
//     for (i = U_C; i < N_C; i++)
//     {
//         int part_num = get_part_num(SIZE_2Nx2N);
//         for (j = 0; j < part_num; j++)
//         {
//             int pos_x, pos_y, tbp;
//             get_tb_start_pos(cu_width, cu_height, SIZE_2Nx2N, j, &pos_x, &pos_y);
//             pos_x >>= MIN_CU_LOG2;
//             pos_y >>= MIN_CU_LOG2;
//             tbp = cup + pos_y * (ctx->info.max_cuwh >> MIN_CU_LOG2) + pos_x;
//             mi->num_nz[j][i] = cu_data->num_nz_coef[i][tbp];
//         }
//     }
// #if ST_CHROMA_TEMP
//     mod_info_curr->st_chroma_flag = cu_data->st_chroma_tu_flag[cup];
//     mod_info_curr->ipf_flag = 0;
// #if IIP_TEMP
//     mod_info_curr->iip_flag = 0;
// #endif
// #endif
// #if IPCM
//     encode_coef(mod_info_curr, coef, mi->cu_width_log2, mi->cu_height_log2, mi->cu_mode, mod_info_curr, AEC_DATA_inner_tmp->tree_status, ctx
// #if CUDQP
//         , AEC_DATA_inner_tmp->qp_y
// #endif
//   , line_idx, srcc_for_aec);
// #else
//     encode_coef(mod_info_curr, bs, coef, mi->cu_width_log2, mi->cu_height_log2, cu_data->pred_mode[cup], &core->mod_info_curr, ctx->tree_status, ctx
// #if CUDQP
//         , core->qp_y
// #endif
//     );
// #endif


//     return COM_OK;
// }

int encode_ipf_flag(u8 ipf_flag)
{
    //enc_sbac_encode_bin(ipf_flag, sbac, sbac->ctx.ipf_flag, bs);
    aec_stage3_phase2( 1, 0, ipf_flag, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

    return COM_OK;
}

int encode_pred_mode(AEC_inner* AEC_DATA_inner_tmp, COM_MODE* mod_info_curr, u8 pred_mode, ENC_CTX_HLS* ctx)
{
#if NUM_PRED_MODE_CTX > 1
    //u32* map_scu = ctx->map.map_scu;
    u8  avail[2] = { 0, 0 };
    int scun[2];
    int ctx_inc = 0;
    scun[0] = mod_info_curr->scup - ctx->info.pic_width_in_scu;
    scun[1] = mod_info_curr->scup - 1;

    // if (mod_info_curr->y_scu > 0)
    //     avail[0] = MCU_GET_CODED_FLAG(map_scu[scun[0]]); // up
    // if (mod_info_curr->x_scu > 0)
    //     avail[1] = MCU_GET_CODED_FLAG(map_scu[scun[1]]); // left
    // if (avail[0])
    //     ctx_inc += MCU_GET_INTRA_FLAG(map_scu[scun[0]]);
    // if (avail[1])
    //     ctx_inc += MCU_GET_INTRA_FLAG(map_scu[scun[1]]);
    if (mod_info_curr->y_scu > 0)
        avail[0] = MCU_GET_CODED_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[0]); // up
    if (mod_info_curr->x_scu > 0)
        avail[1] = MCU_GET_CODED_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[1]); // left
    if (avail[0])
        ctx_inc += MCU_GET_INTRA_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[0]);
    if (avail[1])
        ctx_inc += MCU_GET_INTRA_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[1]);
    if (ctx_inc == 0)
    {
        int sample = (1 << mod_info_curr->cu_width_log2) * (1 << mod_info_curr->cu_height_log2);
        ctx_inc = (sample > 256) ? 0 : (sample > 64 ? 3 : 4);
    }

#if SEP_CONTEXT
    if (mod_info_curr->cu_width_log2 > 6 || mod_info_curr->cu_height_log2 > 6)
    {
#if IPCM
        assert(pred_mode == MODE_INTER || pred_mode == MODE_INTRA);
#else
        assert(pred_mode == MODE_INTER);
#endif
        ctx_inc = 5;
    }
#endif

    //enc_sbac_encode_bin((pred_mode == MODE_INTRA || pred_mode == 4 /*MODE_IBC*/), sbac, sbac->ctx.pred_mode + ctx_inc, bs);
    aec_stage3_phase2( 1, 0, (pred_mode == MODE_INTRA || pred_mode == 4 /*MODE_IBC*/), 82 + ctx_inc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
    //enc_sbac_encode_bin((pred_mode == MODE_INTRA || pred_mode == MODE_IBC), sbac, sbac->ctx.pred_mode, bs);
    aec_stage3_phase2(sbac, bs, 1, 0, (pred_mode == MODE_INTRA || pred_mode == MODE_IBC), 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#endif
    COM_TRACE_COUNTER;
    COM_TRACE_STR("pred mode ");
    COM_TRACE_INT(pred_mode == MODE_INTER);
#if NUM_PRED_MODE_CTX > 1
    COM_TRACE_STR(" pred mode ctx ");
    COM_TRACE_INT(ctx_inc);
#endif
    COM_TRACE_STR("\n");
    return COM_OK;
}
void encode_direct_flag(int cu_width_log2, int cu_height_log2, int direct_flag)
{
#if SEP_CONTEXT
    //COM_MODE* mod_info_curr = &ctx->core->mod_info_curr;
    int ctx_inc = 0;
    if ((cu_width_log2 + cu_height_log2 < 6) || cu_width_log2 > 6 || cu_height_log2 > 6)
    {
        assert(direct_flag == 0);
        ctx_inc = 1;
    }

    //enc_sbac_encode_bin(direct_flag, sbac, sbac->ctx.direct_flag + ctx_inc, bs);
    aec_stage3_phase2( 1, 0, direct_flag, 47 + ctx_inc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
    enc_sbac_encode_bin(direct_flag, sbac, sbac->ctx.direct_flag, bs);
#endif
    COM_TRACE_COUNTER;
    COM_TRACE_STR("direct flag ");
    COM_TRACE_INT(direct_flag);
#if SEP_CONTEXT
    COM_TRACE_STR(" direct flag ctx ");
    COM_TRACE_INT(ctx_inc);
#endif
    COM_TRACE_STR("\n");
}

void encode_skip_flag(AEC_inner* AEC_DATA_inner_tmp, COM_MODE* mod_info_curr, int flag, ENC_CTX_HLS* ctx)
{
#if NUM_SBAC_CTX_SKIP_FLAG > 1
    //u32* map_scu = ctx->map.map_scu;
    u8  avail[2] = { 0, 0 };
    int scun[2];
    int ctx_inc = 0;
    scun[0] = mod_info_curr->scup - ctx->info.pic_width_in_scu;
    scun[1] = mod_info_curr->scup - 1;

    // if (mod_info_curr->y_scu > 0)
    //     avail[0] = MCU_GET_CODED_FLAG(map_scu[scun[0]]); // up
    // if (mod_info_curr->x_scu > 0)
    //     avail[1] = MCU_GET_CODED_FLAG(map_scu[scun[1]]); // left
    // if (avail[0])
    //     ctx_inc += MCU_GET_SF(map_scu[scun[0]]);
    // if (avail[1])
    //     ctx_inc += MCU_GET_SF(map_scu[scun[1]]);
    if (mod_info_curr->y_scu > 0)
        avail[0] = MCU_GET_CODED_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[0]); // up
    if (mod_info_curr->x_scu > 0)
        avail[1] = MCU_GET_CODED_FLAG(AEC_DATA_inner_tmp->map_scu_tmp1[1]); // left
    if (avail[0])
        ctx_inc += MCU_GET_SF(AEC_DATA_inner_tmp->map_scu_tmp1[0]);
    if (avail[1])
        ctx_inc += MCU_GET_SF(AEC_DATA_inner_tmp->map_scu_tmp1[1]);

#if SEP_CONTEXT
    if (mod_info_curr->cu_width_log2 + mod_info_curr->cu_height_log2 < 6)
    {
        assert(flag == 0);
        ctx_inc = 3;
    }
#endif

    //enc_sbac_encode_bin(flag, sbac, sbac->ctx.skip_flag + ctx_inc, bs);
    aec_stage3_phase2( 1, 0, flag, 1 + ctx_inc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
    //enc_sbac_encode_bin(flag, sbac, sbac->ctx.skip_flag, bs);
    aec_stage3_phase2(sbac, bs, 1, 0, flag, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#endif
    COM_TRACE_COUNTER;
    COM_TRACE_STR("skip flag ");
    COM_TRACE_INT(flag);
#if NUM_SBAC_CTX_SKIP_FLAG > 1
    COM_TRACE_STR(" skip ctx ");
    COM_TRACE_INT(ctx_inc);
#endif
    COM_TRACE_STR("\n");
}


void encode_skip_idx(int skip_idx, int num_hmvp_cands,
#if MVAP_TEMP
    int num_mvap_cands,
#endif
    ENC_CTX_HLS* ctx)
{
    int ctx_idx = 0;
#if ENC_DEC_TRACE
    int skip_idx_org = skip_idx;
#endif

    // for P slice, change 3, 4, ..., 13 to 1, 2, ..., 11
    if (ctx->info.pic_header.slice_type == SLICE_P && skip_idx > 0)
    {
        assert(skip_idx >= 3);
        skip_idx -= 2;
    }

    int val = skip_idx;
#if MVAP_TEMP
    int max_skip_num = (ctx->info.pic_header.slice_type == SLICE_P ? 2 : TRADITIONAL_SKIP_NUM) + aec_max(num_hmvp_cands, num_mvap_cands);
#else
    int max_skip_num = (ctx->info.pic_header.slice_type == SLICE_P ? 2 : TRADITIONAL_SKIP_NUM) + num_hmvp_cands;
#endif

    assert(skip_idx < max_skip_num);

    int bin_count = val;
    for (int i = 0; i < (val - 1) / 4 + 1; i++)
    {
        int code_bin = bin_count >= 4 ? 4 : bin_count;
        
        int ctx_idx0 = aec_min(ctx_idx + 0, NUM_SBAC_CTX_SKIP_IDX - 1);
        int ctx_idx1 = aec_min(ctx_idx + 1, NUM_SBAC_CTX_SKIP_IDX - 1);
        int ctx_idx2 = aec_min(ctx_idx + 2, NUM_SBAC_CTX_SKIP_IDX - 1);
        int ctx_idx3 = aec_min(ctx_idx + 3, NUM_SBAC_CTX_SKIP_IDX - 1);
        
        aec_stage3_phase2(code_bin,
            0, 0, 36 + ctx_idx0, 0, 
            0, 0, 36 + ctx_idx1, 0,
            0, 0, 36 + ctx_idx2, 0,
            0, 0, 36 + ctx_idx3, 0
        );
        bin_count = bin_count - 4;
    
        ctx_idx += code_bin;
    }

    // while (val-- > 0)
    // {
    //     ctx_idx = aec_min(ctx_idx, NUM_SBAC_CTX_SKIP_IDX - 1);
    //     //enc_sbac_encode_bin(0, sbac, &sbac->ctx.skip_idx_ctx[ctx_idx], bs);
    //     aec_stage3_phase2( 1, 0, 0, 36 + ctx_idx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    //     ctx_idx++;
    // }
    if (skip_idx != max_skip_num - 1)
    {
        ctx_idx = aec_min(ctx_idx, NUM_SBAC_CTX_SKIP_IDX - 1);
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.skip_idx_ctx[ctx_idx], bs);
        aec_stage3_phase2( 1, 0, 1, 36 + ctx_idx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("skip idx ");
#if ENC_DEC_TRACE
    COM_TRACE_INT(skip_idx_org);
#else
    COM_TRACE_INT(skip_idx);
#endif
    COM_TRACE_STR(" HmvpSpsNum ");
    COM_TRACE_INT(num_hmvp_cands);
    COM_TRACE_STR("\n");
}

int encode_mvr_idx(u8 mvr_idx, BOOL is_affine_mode)
{


#if !BD_AFFINE_AMVR
    if (is_affine_mode) {
        return COM_OK;
    }
#endif

#if BD_AFFINE_AMVR
    if (is_affine_mode) {
        sbac_write_truncate_unary_sym1(mvr_idx, NUM_AFFINE_MVR_IDX_CTX, MAX_NUM_AFFINE_MVR, 98);
    }
    else {
        sbac_write_truncate_unary_sym1(mvr_idx, NUM_MVR_IDX_CTX, MAX_NUM_MVR, 93);
    }
#else
    sbac_write_truncate_unary_sym(mvr_idx, NUM_MVR_IDX_CTX, MAX_NUM_MVR, sbac, sbac->ctx.mvr_idx, bs);
#endif
    COM_TRACE_COUNTER;
    COM_TRACE_STR("mvr idx ");
    COM_TRACE_INT(mvr_idx);
    COM_TRACE_STR("\n");
    return COM_OK;
}

#if UMVE_ENH_TEMP
void encode_umve_idx_sec_set(int umve_idx)
{
    // TODO: not enabled? not sure?
    int idx;
    int base_idx = umve_idx / UMVE_MAX_REFINE_NUM_SEC_SET;
    int ref_step = (umve_idx - (base_idx * UMVE_MAX_REFINE_NUM_SEC_SET)) / 4;
    int direction = umve_idx - base_idx * UMVE_MAX_REFINE_NUM_SEC_SET - ref_step * 4;

    int num_cand_minus1_base = UMVE_BASE_NUM - 1;
    if (num_cand_minus1_base > 0)
    {
        if (base_idx == 0)
            //enc_sbac_encode_bin(1, sbac, sbac->ctx.umve_base_idx, bs);
            aec_stage3_phase2( 1, 0, 1, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        else
        {
            //enc_sbac_encode_bin(0, sbac, sbac->ctx.umve_base_idx, bs);
            aec_stage3_phase2( 1, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            for (idx = 1; idx < num_cand_minus1_base; idx++)
            {
                //sbac_encode_bin_ep(base_idx == idx ? 1 : 0, sbac, bs);
                aec_stage3_phase2( 1, 1, base_idx == idx ? 1 : 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                if (base_idx == idx)
                {
                    break;
                }
            }
        }
    }

    if (ref_step >= 4)
    {
        //enc_sbac_encode_bin(1, sbac, sbac->ctx.umve_step_idx, bs);
        aec_stage3_phase2( 1, 0, 1, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        if (ref_step >= 5)
        {
            //sbac_encode_bin_ep(1, sbac, bs);
            aec_stage3_phase2( 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            if (ref_step >= 6)
            {
                //sbac_encode_bin_ep(1, sbac, bs);
                aec_stage3_phase2( 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                if (ref_step == 7)
                {
                    //sbac_encode_bin_ep(1, sbac, bs);
                    aec_stage3_phase2( 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                }
                else
                {
                    //sbac_encode_bin_ep(0, sbac, bs);
                    aec_stage3_phase2( 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                }
            }
            else
            {
                //sbac_encode_bin_ep(0, sbac, bs);
                aec_stage3_phase2( 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
        }
        else
        {
            //sbac_encode_bin_ep(0, sbac, bs);
            aec_stage3_phase2( 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
    }
    else
    {
        //enc_sbac_encode_bin(0, sbac, sbac->ctx.umve_step_idx, bs);
        aec_stage3_phase2( 1, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        if (ref_step >= 2)
        {
            //sbac_encode_bin_ep(1, sbac, bs);
            aec_stage3_phase2( 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            if (ref_step == 2)
            {
                //sbac_encode_bin_ep(1, sbac, bs);
                aec_stage3_phase2( 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            else
            {
                //sbac_encode_bin_ep(0, sbac, bs);
                aec_stage3_phase2( 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
        }
        else
        {
            //sbac_encode_bin_ep(0, sbac, bs);
            aec_stage3_phase2( 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            if (ref_step == 1)
            {
                //sbac_encode_bin_ep(1, sbac, bs);
                aec_stage3_phase2( 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            else
            {
                //sbac_encode_bin_ep(0, sbac, bs);
                aec_stage3_phase2( 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
        }
    }

    if (direction == 0)
    {
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.umve_dir_idx[0], bs);
        aec_stage3_phase2( 1, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.umve_dir_idx[1], bs);
        aec_stage3_phase2( 1, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else if (direction == 1)
    {
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.umve_dir_idx[0], bs);
        aec_stage3_phase2( 1, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.umve_dir_idx[1], bs);
        aec_stage3_phase2( 1, 0, 1, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else if (direction == 2)
    {
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.umve_dir_idx[0], bs);
        aec_stage3_phase2( 1, 0, 1, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.umve_dir_idx[1], bs);
        aec_stage3_phase2( 1, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else if (direction == 3)
    {
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.umve_dir_idx[0], bs);
        aec_stage3_phase2( 1, 0, 1, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.umve_dir_idx[1], bs);
        aec_stage3_phase2( 1, 0, 1, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("umve idx ");
    COM_TRACE_INT(umve_idx);
    COM_TRACE_STR("\n");
}
#endif

#if AWP
void encode_awp_flag(int flag)
{
    //COM_MODE* mod_info_curr = &ctx->core->mod_info_curr;
    //enc_sbac_encode_bin(flag, sbac, sbac->ctx.awp_flag, bs);
    aec_stage3_phase2( 1, 0, flag, 436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

    COM_TRACE_COUNTER;
    COM_TRACE_STR("awp flag ");
    COM_TRACE_INT(flag);
    COM_TRACE_STR("\n");
}
#if AWP_TEMP || CCSAO_TEMP
static void sbac_write_truncate_unary_sym_ep(u32 sym, u32 max_num)
{
    // TODO: no function call? remove it?
    u32 ctx_idx = 0;
    do
    {
        //sbac_encode_bin_ep(sym ? 0 : 1, sbac, bs);
        aec_stage3_phase2( 1, 1, sym ? 0 : 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        ctx_idx++;
    } while (ctx_idx < max_num - 1 && sym--);
}
#endif

#if AWP_TEMP || SAWP_TEMP
static void sbac_write_truncate_binary_sym_ep(s32 sym, s32 max_num)
{
    s32 thresh;
    if (max_num > 256)
    {
        s32 threshVal = 1 << 8;
        thresh = 8;
        while (threshVal <= max_num)
        {
            thresh++;
            threshVal <<= 1;
        }
        thresh--;
    }
    else
    {
        thresh = com_tbl_logmap[max_num];
    }

    s32 val = 1 << thresh;
    assert(val <= max_num);
    assert((val << 1) > max_num);
    assert(sym < max_num);
    s32 b = max_num - val;
    assert(b < val);
    if (sym < val - b)
    {
        sbac_encode_bins_ep_msb(sym, thresh);
    }
    else
    {
        sym += val - b;
        assert(sym < (val << 1));
        assert((sym >> 1) >= val - b);
        sbac_encode_bins_ep_msb(sym, thresh + 1);
    }
}
#endif
#if 0
void encode_awp_mode(int cu_width_log2, int cu_height_log2, int awp_idx, int awp_cand_idx0, int awp_cand_idx1, ENC_CTX_HLS* ctx)
{
    //COM_MODE* mod_info_curr = &ctx->core->mod_info_curr;
#if BAWP
    u8 awp_mode_num = ctx->slice_type == SLICE_P ? com_tbl_bawp_num[cu_width_log2 - MIN_AWP_SIZE_LOG2][cu_height_log2 - MIN_AWP_SIZE_LOG2] : AWP_MODE_NUM;
    if (awp_mode_num > 1)
    {
        sbac_write_truncate_binary_sym_ep(awp_idx, awp_mode_num);
    }
#else
    sbac_write_truncate_binary_sym_ep(awp_idx, AWP_MODE_NUM, sbac, bs);
#endif

    COM_TRACE_COUNTER;
    COM_TRACE_STR("awp partition idx ");
    COM_TRACE_INT(awp_idx);
    COM_TRACE_STR("\n");

    int mergeCand0 = awp_cand_idx1;
    int mergeCand1 = awp_cand_idx0;
#if AWP_MVR_TEMP
    assert(mergeCand0 != mergeCand1);
#endif
    mergeCand1 -= mergeCand1 < mergeCand0 ? 0 : 1;
    int numCandminus1 = AWP_MV_LIST_LENGTH - 1;
    if (mergeCand0 == 0)
    {
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.awp_idx[0], bs);
        aec_stage3_phase2( 1, 0, 1, 437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else
    {
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.awp_idx[0], bs);
        aec_stage3_phase2( 1, 0, 0, 437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }

    if (mergeCand0 > 0)
    {
        sbac_write_truncate_unary_sym_ep(mergeCand0 - 1, numCandminus1);
    }
    if (mergeCand1 == 0)
    {
#if FIX_316
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.awp_idx[2], bs);
        aec_stage3_phase2( 1, 0, 1, 439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

#else
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.awp_idx[1], bs);
        aec_stage3_phase2(sbac, bs, 1, 0, 1, 438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#endif
    }
    else
    {
#if FIX_316
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.awp_idx[2], bs);
        aec_stage3_phase2( 1, 0, 0, 439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.awp_idx[1], bs);
        aec_stage3_phase2(sbac, bs, 1, 0, 0, 438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#endif
    }

    if (mergeCand1 > 0)
    {
        sbac_write_truncate_unary_sym_ep(mergeCand1 - 1, numCandminus1 - 1);
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("awp cand idx0 ");
    COM_TRACE_INT(awp_cand_idx0);
    COM_TRACE_STR("\n");
    COM_TRACE_COUNTER;
    COM_TRACE_STR("awp cand idx1 ");
    COM_TRACE_INT(awp_cand_idx1);
    COM_TRACE_STR("\n");
}
#endif
#endif
#if SAWP_TEMP
void encode_sawp_flag(int flag)
{
    //COM_MODE* mod_info_curr = &ctx->core->mod_info_curr;
    //enc_sbac_encode_bin(flag, sbac, sbac->ctx.sawp_flag, bs);
    aec_stage3_phase2( 1, 0, flag, 440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

    COM_TRACE_COUNTER;
    COM_TRACE_STR("sawp flag ");
    COM_TRACE_INT(flag);
    COM_TRACE_STR("\n");
}
void encode_sawp_mode(int awp_idx)
{
    //COM_MODE* mod_info_curr = &ctx->core->mod_info_curr;
    sbac_write_truncate_binary_sym_ep(awp_idx, AWP_MODE_NUM);

    COM_TRACE_COUNTER;
    COM_TRACE_STR("sawp partition idx ");
    COM_TRACE_INT(awp_idx);
    COM_TRACE_STR("\n");
}
#endif // SAWP

#if ETMVP_TEMP
void encode_etmvp_flag(int cu_width, int cu_height, int flag)
{
    //COM_MODE* mod_info_curr = &ctx->core->mod_info_curr;
  

    if (cu_width >= MIN_ETMVP_SIZE && cu_height >= MIN_ETMVP_SIZE)
    {
        //enc_sbac_encode_bin(flag, sbac, sbac->ctx.etmvp_flag, bs);
        aec_stage3_phase2( 1, 0, flag, 431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }

    COM_TRACE_COUNTER;
    COM_TRACE_STR("etmvp flag ");
    COM_TRACE_INT(flag);
    COM_TRACE_STR("\n");
}

void encode_etmvp_idx(int etmvp_idx)
{
    // TODO: no function call? remove it?
    int ctx_idx = 0;
    int val = etmvp_idx;
    int max_skip_num = MAX_ETMVP_NUM;
    assert(etmvp_idx < max_skip_num);
    while (val-- > 0)
    {
        ctx_idx = aec_min(ctx_idx, NUM_SBAC_CTX_ETMVP_IDX - 1);
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.etmvp_idx[ctx_idx], bs);
        aec_stage3_phase2( 1, 0, 0, 432 + ctx_idx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        ctx_idx++;
    }
    if (etmvp_idx != max_skip_num - 1)
    {
        ctx_idx = aec_min(ctx_idx, NUM_SBAC_CTX_ETMVP_IDX - 1);
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.etmvp_idx[ctx_idx], bs);
        aec_stage3_phase2( 1, 0, 1, 432 + ctx_idx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("etmvp idx ");
    COM_TRACE_INT(etmvp_idx);
    COM_TRACE_STR("\n");
}
#endif



#if AWP_MVR_TEMP
void encode_awp_mode1(int awp_idx, int awp_cand_idx0, int awp_cand_idx1)
{
    //COM_MODE* mod_info_curr = &ctx->core->mod_info_curr;
    sbac_write_truncate_binary_sym_ep(awp_idx, AWP_MODE_NUM);

    COM_TRACE_COUNTER;
    COM_TRACE_STR("awp partition idx ");
    COM_TRACE_INT(awp_idx);
    COM_TRACE_STR("\n");

    int mergeCand0 = awp_cand_idx1;
    int mergeCand1 = awp_cand_idx0;

    int numCandminus1 = AWP_MV_LIST_LENGTH - 1;
    if (mergeCand0 == 0)
    {
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.awp_idx[0], bs);
        aec_stage3_phase2( 1, 0, 1, 437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else
    {
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.awp_idx[0], bs);
        aec_stage3_phase2( 1, 0, 0, 437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }

    if (mergeCand0 > 0)
    {
        sbac_write_truncate_unary_sym_ep(mergeCand0 - 1, numCandminus1);
    }
    if (mergeCand1 == 0)
    {
#if FIX_316
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.awp_idx[1], bs);
        aec_stage3_phase2( 1, 0, 1, 438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
        enc_sbac_encode_bin(1, sbac, &sbac->ctx.awp_idx[0], bs);
        aec_stage3_phase2(sbac, bs, 1, 0, 1, 437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#endif
    }
    else
    {
#if FIX_316
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.awp_idx[1], bs);
        aec_stage3_phase2( 1, 0, 0, 438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#else
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.awp_idx[0], bs);
        aec_stage3_phase2(sbac, bs, 1, 0, 0, 437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
#endif
    }

    if (mergeCand1 > 0)
    {
        sbac_write_truncate_unary_sym_ep(mergeCand1 - 1, numCandminus1);
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("awp cand idx0 ");
    COM_TRACE_INT(awp_cand_idx0);
    COM_TRACE_STR("\n");
    COM_TRACE_COUNTER;
    COM_TRACE_STR("awp cand idx1 ");
    COM_TRACE_INT(awp_cand_idx1);
    COM_TRACE_STR("\n");
}
#endif
#if AWP
void encode_umve_awp_flag(int flag)
{
    //enc_sbac_encode_bin(flag, sbac, &sbac->ctx.umve_awp_flag, bs);
    aec_stage3_phase2( 1, 0, flag, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    COM_TRACE_COUNTER;
    COM_TRACE_STR("umve awp flag ");
    COM_TRACE_INT(flag);
    COM_TRACE_STR("\n");
}

#if EXT_AMVR_HMVP
void encode_extend_amvr_flag(u8 mvp_from_hmvp_flag)
{
    //enc_sbac_encode_bin(mvp_from_hmvp_flag, sbac, sbac->ctx.mvp_from_hmvp_flag, bs);
    aec_stage3_phase2( 1, 0, mvp_from_hmvp_flag, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    COM_TRACE_COUNTER;
    COM_TRACE_STR("extended amvr flag ");
    COM_TRACE_INT(mvp_from_hmvp_flag);
    COM_TRACE_STR("\n");
}
#endif

#if AWP_MVR_ENCODER_OPT_TEMP
void encode_awp_cand_idx1(COM_BSW* bs, int awp_cand_idx)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    int mergeCand = awp_cand_idx;
    int numCandminus1 = AWP_MV_LIST_LENGTH - 1;

    if (mergeCand == 0)
    {
#if FIX_316
        enc_sbac_encode_bin(1, sbac, &sbac->ctx.awp_idx[2], bs);
#else
        enc_sbac_encode_bin(1, sbac, &sbac->ctx.awp_idx[1], bs);
#endif
    }
    else
    {
#if FIX_316
        enc_sbac_encode_bin(0, sbac, &sbac->ctx.awp_idx[2], bs);
#else
        enc_sbac_encode_bin(0, sbac, &sbac->ctx.awp_idx[1], bs);
#endif
    }

    if (mergeCand > 0)
    {
        sbac_write_truncate_unary_sym_ep(mergeCand - 1, numCandminus1 - 1);
    }
}
#endif
#if 0
void encode_awp_mvr_flag(int flag)
{
    //COM_MODE* mod_info_curr = &ctx->core->mod_info_curr;
    //enc_sbac_encode_bin(flag, sbac, &sbac->ctx.awp_mvr_flag, bs);
    aec_stage3_phase2( 1, 0, flag, 441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

    COM_TRACE_COUNTER;
    COM_TRACE_STR("awp umve flag ");
    COM_TRACE_INT(flag);
    COM_TRACE_STR("\n");
}

void encode_awp_mvr_idx(int awp_mvr_idx)
{
    // TODO: no function call? remove it?
    int idx;
    int ref_step = awp_mvr_idx / AWP_MVR_DIR;
    int direction = awp_mvr_idx - ref_step * AWP_MVR_DIR;
    int num_cand_minus1_step = AWP_MVR_REFINE_STEP - 1;

    // step size
    if (num_cand_minus1_step > 0)
    {
        if (ref_step == 0)
        {
            //enc_sbac_encode_bin(1, sbac, sbac->ctx.awp_mvr_step_idx, bs);
            aec_stage3_phase2( 1, 0, 1, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        else
        {
            //enc_sbac_encode_bin(0, sbac, sbac->ctx.awp_mvr_step_idx, bs);
            aec_stage3_phase2( 1, 0, 0, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            for (idx = 1; idx < num_cand_minus1_step; idx++)
            {
                //sbac_encode_bin_ep(ref_step == idx ? 1 : 0, sbac, bs);
                aec_stage3_phase2( 1, 1, ref_step == idx ? 1 : 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                if (ref_step == idx)
                {
                    break;
                }
            }
        }
    }

    // direction
    if (direction == 0)
    {
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.awp_mvr_dir_idx[0], bs);
        aec_stage3_phase2( 1, 0, 0, 443, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.awp_mvr_dir_idx[1], bs);
        aec_stage3_phase2( 1, 0, 0, 444, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else if (direction == 1)
    {
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.awp_mvr_dir_idx[0], bs);
        aec_stage3_phase2( 1, 0, 0, 443, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.awp_mvr_dir_idx[1], bs);
        aec_stage3_phase2( 1, 0, 1, 444, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else if (direction == 2)
    {
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.awp_mvr_dir_idx[0], bs);
        aec_stage3_phase2( 1, 0, 1, 443, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.awp_mvr_dir_idx[1], bs);
        aec_stage3_phase2( 1, 0, 0, 444, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else if (direction == 3)
    {
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.awp_mvr_dir_idx[0], bs);
        aec_stage3_phase2( 1, 0, 1, 443, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.awp_mvr_dir_idx[1], bs);
        aec_stage3_phase2( 1, 0, 1, 444, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("awp umve idx ");
    COM_TRACE_INT(awp_mvr_idx);
    COM_TRACE_STR("\n");
}
#endif
#endif

void encode_umve_idx(int umve_idx)
{
    int idx;
    int base_idx = umve_idx / UMVE_MAX_REFINE_NUM;
    int ref_step = (umve_idx - (base_idx * UMVE_MAX_REFINE_NUM)) / 4;
    int direction = umve_idx - base_idx * UMVE_MAX_REFINE_NUM - ref_step * 4;

    int num_cand_minus1_base = UMVE_BASE_NUM - 1;
    if (num_cand_minus1_base > 0)
    {

        if (base_idx == 0)
            //enc_sbac_encode_bin(1, sbac, sbac->ctx.umve_base_idx, bs);
            aec_stage3_phase2( 1, 0, 1, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        else
        {
            //enc_sbac_encode_bin(0, sbac, sbac->ctx.umve_base_idx, bs);
            aec_stage3_phase2( 1, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            for (idx = 1; idx < num_cand_minus1_base; idx++)
            {
                {
                    //sbac_encode_bin_ep(base_idx == idx ? 1 : 0, sbac, bs);
                    aec_stage3_phase2( 1, 1, base_idx == idx ? 1 : 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                }
                if (base_idx == idx)
                {
                    break;
                }
            }
        }
    }

    int num_cand_minus1_step = UMVE_REFINE_STEP - 1;
    if (num_cand_minus1_step > 0)
    {
        if (ref_step == 0)
            //enc_sbac_encode_bin(1, sbac, sbac->ctx.umve_step_idx, bs);
            aec_stage3_phase2( 1, 0, 1, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        else
        {
            //enc_sbac_encode_bin(0, sbac, sbac->ctx.umve_step_idx, bs);
            aec_stage3_phase2( 1, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            for (idx = 1; idx < num_cand_minus1_step; idx++)
            {
                {
                    //sbac_encode_bin_ep(ref_step == idx ? 1 : 0, sbac, bs);
                    aec_stage3_phase2( 1, 1, ref_step == idx ? 1 : 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                }
                if (ref_step == idx)
                {
                    break;
                }
            }
        }
    }

    if (direction == 0)
    {
        // enc_sbac_encode_bin(0, sbac, &sbac->ctx.umve_dir_idx[0], bs);
        // aec_stage3_phase2( 1, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        // enc_sbac_encode_bin(0, sbac, &sbac->ctx.umve_dir_idx[1], bs);
        // aec_stage3_phase2( 1, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        aec_stage3_phase2(2, 
            0, 0, 59, 0,
            0, 0, 60, 0, 
            0, 0, 0, 0, 
            0, 0, 0, 0
        );
    }
    else if (direction == 1)
    {
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.umve_dir_idx[0], bs);
        // aec_stage3_phase2( 1, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.umve_dir_idx[1], bs);
        // aec_stage3_phase2( 1, 0, 1, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        aec_stage3_phase2(2, 
            0, 0, 59, 0,
            0, 1, 60, 0,
            0, 0, 0, 0, 
            0, 0, 0, 0
        );
    }
    else if (direction == 2)
    {
        // enc_sbac_encode_bin(1, sbac, &sbac->ctx.umve_dir_idx[0], bs);
        // aec_stage3_phase2( 1, 0, 1, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        // enc_sbac_encode_bin(0, sbac, &sbac->ctx.umve_dir_idx[1], bs);
        // aec_stage3_phase2( 1, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        aec_stage3_phase2(2, 
            0, 1, 59, 0, 
            0, 0, 60, 0, 
            0, 0, 0, 0, 
            0, 0, 0, 0
        );
    }
    else if (direction == 3)
    {
        // enc_sbac_encode_bin(1, sbac, &sbac->ctx.umve_dir_idx[0], bs);
        // aec_stage3_phase2( 1, 0, 1, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        // enc_sbac_encode_bin(1, sbac, &sbac->ctx.umve_dir_idx[1], bs);
        // aec_stage3_phase2( 1, 0, 1, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        aec_stage3_phase2(2, 
            0, 1, 59, 0, 
            0, 1, 60, 0,
            0, 0, 0, 0, 
            0, 0, 0, 0);
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("umve idx ");
    COM_TRACE_INT(umve_idx);
    COM_TRACE_STR("\n");
}

#if IPC_TEMP
void encode_ipc_flag(int flag)
{
    //enc_sbac_encode_bin(flag > 0, sbac, &sbac->ctx.ipc_flag[0], bs);
    aec_stage3_phase2( 1, 0, flag > 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    if (flag == 1)
    {
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.ipc_flag[1], bs);
        aec_stage3_phase2( 1, 0, 1, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else if (flag > 1)
    {
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.ipc_flag[1], bs);
        aec_stage3_phase2( 1, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //enc_sbac_encode_bin(flag == 2, sbac, &sbac->ctx.ipc_flag[2], bs);
        aec_stage3_phase2( 1, 0, flag == 2, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }

    COM_TRACE_COUNTER;
    COM_TRACE_STR("ipc flag ");
    COM_TRACE_INT(flag);
    COM_TRACE_STR("\n");
}
#endif

void encode_affine_mrg_idx(s16 affine_mrg_idx)
{
    sbac_write_truncate_unary_sym1(affine_mrg_idx, NUM_SBAC_CTX_AFFINE_MRG, AFF_MAX_NUM_MRG, 426);
}

void encode_affine_flag(int flag, ENC_CTX_HLS* ctx, int cu_width, int cu_height)
{
    if (cu_width >= AFF_SIZE && cu_height >= AFF_SIZE
        && ctx->info.sqh.affine_enable_flag) {
        //enc_sbac_encode_bin(flag, sbac, sbac->ctx.affine_flag, bs);
        aec_stage3_phase2( 1, 0, flag, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("affine flag ");
    COM_TRACE_INT(flag);
    COM_TRACE_STR("\n");
}

#if AFFINE_UMVE_TEMP
void encode_affine_umve_flag(int flag)
{
    //COM_MODE* mod_info_curr = &ctx->core->mod_info_curr;
    //enc_sbac_encode_bin(flag, sbac, &sbac->ctx.affine_umve_flag, bs);
    aec_stage3_phase2( 1, 0, flag, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    COM_TRACE_COUNTER;
    COM_TRACE_STR("affine umve flag ");
    COM_TRACE_INT(flag);
    COM_TRACE_STR("\n");
}

void encode_affine_umve_idx(int affine_umve_idx)
{
    int idx;
    int ref_step = affine_umve_idx / AFFINE_UMVE_DIR;
    int direction = affine_umve_idx - ref_step * AFFINE_UMVE_DIR;
    int num_cand_minus1_step = AFFINE_UMVE_REFINE_STEP - 1;
    if (num_cand_minus1_step > 0)
    {
        if (ref_step == 0)
        {
            //enc_sbac_encode_bin(1, sbac, sbac->ctx.affine_umve_step_idx, bs);
            aec_stage3_phase2( 1, 0, 1, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        else
        {
            //enc_sbac_encode_bin(0, sbac, sbac->ctx.affine_umve_step_idx, bs);
            aec_stage3_phase2( 1, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            for (idx = 1; idx < num_cand_minus1_step; idx++)
            {
                //sbac_encode_bin_ep(ref_step == idx ? 1 : 0, sbac, bs);
                aec_stage3_phase2( 1, 1, ref_step == idx ? 1 : 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                if (ref_step == idx)
                {
                    break;
                }
            }
        }
    }

    if (direction == 0)
    {
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.affine_umve_dir_idx[0], bs);
        aec_stage3_phase2( 1, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.affine_umve_dir_idx[1], bs);
        aec_stage3_phase2( 1, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else if (direction == 1)
    {
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.affine_umve_dir_idx[0], bs);
        aec_stage3_phase2( 1, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.affine_umve_dir_idx[1], bs);
        aec_stage3_phase2( 1, 0, 1, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else if (direction == 2)
    {
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.affine_umve_dir_idx[0], bs);
        aec_stage3_phase2( 1, 0, 1, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.affine_umve_dir_idx[1], bs);
        aec_stage3_phase2( 1, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else if (direction == 3)
    {
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.affine_umve_dir_idx[0], bs);
        aec_stage3_phase2( 1, 0, 1, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.affine_umve_dir_idx[1], bs);
        aec_stage3_phase2( 1, 0, 1, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("affine umve idx ");
    COM_TRACE_INT(affine_umve_idx);
    COM_TRACE_STR("\n");
}
#endif

#if SMVD
void encode_smvd_flag(int flag)
{
    //enc_sbac_encode_bin(flag, sbac, sbac->ctx.smvd_flag, bs);
    aec_stage3_phase2( 1, 0, flag, 445, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

}
#endif

#if INTERPF
void encode_inter_filter_flag(int flag)
{
    //enc_sbac_encode_bin(flag > 0, sbac, &sbac->ctx.inter_filter_flag[0], bs);
    // aec_stage3_phase2( 1, 0, flag > 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    // if (flag)
    // {
    //     //enc_sbac_encode_bin(flag > 1, sbac, &sbac->ctx.inter_filter_flag[1], bs);
    //     aec_stage3_phase2( 1, 0, flag > 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    // }

    int num = flag ? 2 : 1;
    aec_stage3_phase2(num, 
        0, flag > 0, 49, 0, 
        0, flag > 1, 50, 0, 
        0, 0, 0, 0, 
        0, 0, 0, 0
    );

    COM_TRACE_COUNTER;
    COM_TRACE_STR("inter filter flag ");
    COM_TRACE_INT(flag);
    COM_TRACE_STR("\n");
}
#endif

#if IBC_BVP_TEMP
void encode_ibc_bvp_flag(int flag)
{
    // TODO: no function call, can remove it.
    int bvp_idx = flag;
    int ctx_idx = 0;

    int val = bvp_idx;

    int max_skip_num = MAX_NUM_BVP;

    assert(bvp_idx < max_skip_num);
    while (val > 0)
    {
        ctx_idx = aec_min(ctx_idx, NUM_BVP_IDX_CTX - 1);
        //enc_sbac_encode_bin(0, sbac, &sbac->ctx.cbvp_idx[ctx_idx], bs);
        aec_stage3_phase2( 1, 0, 0, 102 + ctx_idx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        ctx_idx++;
        val--;
    }
    if (bvp_idx != max_skip_num - 1)
    {
        ctx_idx = aec_min(ctx_idx, NUM_BVP_IDX_CTX - 1);
        //enc_sbac_encode_bin(1, sbac, &sbac->ctx.cbvp_idx[ctx_idx], bs);
        aec_stage3_phase2( 1, 0, 1, 102 + ctx_idx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("bvp idx ");
    COM_TRACE_INT(bvp_idx);
    COM_TRACE_STR("\n");
}
#endif
// #if USE_IBC
// int enc_eco_ibc(int scup, int y_scu, int x_scu, u8 pred_mode_ibc_flag, ENC_CTX_HLS* ctx)
// {

//     //COM_MODE* mod_info_curr = &ctx->core->mod_info_curr;
//     u32* map_scu = ctx->map.map_scu;
// #if USE_SP
//     u8* map_usp = ctx->map.map_usp;
// #endif
//     u8  avail[2] = { 0, 0 };
//     int scun[2];
//     int ctx_inc = 0;
//     scun[0] = scup - ctx->info.pic_width_in_scu;
//     scun[1] = scup - 1;

//     if (y_scu > 0)
//         avail[0] = MCU_GET_CODED_FLAG(map_scu[scun[0]]); // up
//     if (x_scu > 0)
//         avail[1] = MCU_GET_CODED_FLAG(map_scu[scun[1]]); // left
//     if (avail[0])
// #if USE_SP
//         ctx_inc += (MCU_GET_IBC(map_scu[scun[0]]) && !MSP_GET_SP_INFO(map_usp[scun[0]])
//             && !MSP_GET_CS2_INFO(map_usp[scun[0]])
//             );
// #else
//         ctx_inc += MCU_GET_IBC(map_scu[scun[0]]);
// #endif
//     if (avail[1])
// #if USE_SP
//         ctx_inc += (MCU_GET_IBC(map_scu[scun[1]]) && !MSP_GET_SP_INFO(map_usp[scun[1]])
//             && !MSP_GET_CS2_INFO(map_usp[scun[1]])
//             );
// #else
//         ctx_inc += MCU_GET_IBC(map_scu[scun[1]]);
// #endif

//     //enc_sbac_encode_bin(pred_mode_ibc_flag, sbac, sbac->ctx.ibc_flag + ctx_inc, bs);
//     aec_stage3_phase2( 1, 0, pred_mode_ibc_flag, 5 + ctx_inc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

//     COM_TRACE_COUNTER;
//     COM_TRACE_STR("ibc flag ");
//     COM_TRACE_INT(!!pred_mode_ibc_flag);
// #if NUM_SBAC_CTX_IBC_FLAG > 1
//     COM_TRACE_STR(" ibc ctx ");
//     COM_TRACE_INT(ctx_inc);
// #endif
//     COM_TRACE_STR("\n");

//     return COM_OK;
// }
// #endif
#if USE_SP_TEMP
int* com_tbl_raster2trav[2][MAX_CU_DEPTH][MAX_CU_DEPTH];
int* com_tbl_trav2raster[2][MAX_CU_DEPTH][MAX_CU_DEPTH];
int  com_tbl_raster2trav_2d[4][4][1024][2];
u8    g_msb_p1_idx[256];
const u8 g_sp_tb_tbl[257] = { 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                              4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                              5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
                              6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
                              6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7,
                              7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                              7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                              7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                              7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                              7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8 };
u8 g_uc_run_top_lut[5] = { 0, 1, 1, 2, 2 };

unsigned char get_msb_p1_idx(int uiVal)
{
    unsigned char idx = 0;
    while (uiVal > 255)
    {
        uiVal >>= 8;
        idx += 8;
    }
    return idx + g_msb_p1_idx[uiVal];
}

int enc_eco_sp_or_ibc_flag(COM_BSW* bs, u8 sp_or_ibc_flag) //if two or more of IBC/SP modes are enabled, this flag is set
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    enc_sbac_encode_bin(sp_or_ibc_flag, sbac, sbac->ctx.sp_or_ibc_flag, bs);
    COM_TRACE_COUNTER;
    COM_TRACE_STR("sp or ibc flag ");
    COM_TRACE_INT(sp_or_ibc_flag);
    COM_TRACE_STR("\n");
    return COM_OK;
}
// void encode_sp_or_ibc_cu_flag(AEC_inner* AEC_DATA_inner_tmp, int scup, int y_scu, int x_scu, COM_BSW* bs, int cu_width, int cu_height, ENC_CU_DATA* cu_data, int cup, ENC_CTX_HLS* ctx)
// {
//     u8 code_ibc, code_sp; //FLAG whether the IBC/SP mode is to be coded
//     u8 ibc_flag, sp_flag;
//     code_ibc = code_sp = FALSE;
//     ibc_flag = sp_flag = FALSE;
//     u8 sp_or_ibc_flag = 0;
// #if USE_IBC
//     if (CONV_LOG2(cu_width) <= IBC_BITSTREAM_FLAG_RESTRIC_LOG2 && CONV_LOG2(cu_height) <= IBC_BITSTREAM_FLAG_RESTRIC_LOG2 && ctx->info.pic_header.ibc_flag)
//     {
//         code_ibc = 1;
//     }
//     else
//     {
//         code_ibc = 0;
//     }
//     ibc_flag = cu_data->ibc_flag[cup];
// #endif
//     code_sp = ((IS_VALID_SP_CU_SIZE(cu_width, cu_height) && ctx->info.pic_header.sp_pic_flag) || (IS_VALID_CS2_CU_SIZE(cu_width, cu_height) && ctx->info.pic_header.evs_ubvs_pic_flag));
//     sp_flag = cu_data->sp_flag[cup];
//     if (code_sp == 1 && code_ibc == 1)
//     {
//         sp_or_ibc_flag = ibc_flag || sp_flag;
//         enc_eco_sp_or_ibc_flag(bs, sp_or_ibc_flag);
//         if (sp_or_ibc_flag == TRUE)
//         {
//             enc_eco_ibc(AEC_DATA_inner_tmp, scup, y_scu, x_scu, ibc_flag, ctx);
//         }
//     }
//     else if (code_sp == 1 && code_ibc == 0)
//     {
//         enc_eco_sp_or_ibc_flag(bs, sp_flag);
//     }
//     else if (code_sp == 0 && code_ibc == 1)
//     {
//         enc_eco_ibc(AEC_DATA_inner_tmp, scup, y_scu, x_scu, ibc_flag, ctx);
//     }
// }
#endif

void write_bins_ep(ENC_SBAC* sbac, COM_BSW* bs, int bin_values, int num_bins)
{
    int i;
    int value;
    for (i = num_bins; i > 0; i--)
    {
        value = bin_values >> (i - 1);
        sbac_encode_bin_ep(value & 0x1, sbac, bs);
    }
}

void x_write_ep_ex_golomb(COM_BSW* bs, int act_sym, int exp_golomb_order)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    while (1)
    {
        if (act_sym >= (int)(1 << exp_golomb_order))
        {
            sbac_encode_bin_ep(0, sbac, bs);
            act_sym = act_sym - (1 << exp_golomb_order);
            exp_golomb_order++;
        }
        else
        {
            sbac_encode_bin_ep(1, sbac, bs);
            while (exp_golomb_order--) //next binary part
            {
                sbac_encode_bin_ep((unsigned char)((act_sym >> exp_golomb_order) & 1), sbac, bs);
            }

            break;
        }
    }
}
#if USE_SP_TEMP
void encode_pvbuf_pred_indicator(COM_BSW* bs, u8* b_reused_prev, int ui_pvbuf_size_prev, int* uiNumSRBPredicted, int ui_max_pvbuf_size)
{
    int last_pred_idx = -1;
    int run = 0;
    int idx;
    *uiNumSRBPredicted = 0;

    for (idx = 0; idx < (int)ui_pvbuf_size_prev; idx++)
    {
        if (b_reused_prev[idx])
        {
            (*uiNumSRBPredicted)++;
            last_pred_idx = idx;
        }
    }
    {
        int num_srb_color_transferred = ui_max_pvbuf_size - *uiNumSRBPredicted;
        int num_srb_color_reused = *uiNumSRBPredicted;
        x_write_ep_ex_golomb(bs, num_srb_color_transferred, 0);
        COM_TRACE_COUNTER;
        COM_TRACE_STR("ui_num_SRB_rcv:");
        COM_TRACE_INT(num_srb_color_transferred);
        COM_TRACE_STR("\n");
        if (ui_pvbuf_size_prev > 0 && num_srb_color_transferred < MAX_SRB_SIZE) {
            x_write_ep_ex_golomb(bs, num_srb_color_reused, 0);
            COM_TRACE_COUNTER;
            COM_TRACE_STR("ui_num_SRB_pred:");
            COM_TRACE_INT(num_srb_color_reused);
            COM_TRACE_STR("\n");
        }
    }
    idx = 0;
    while (idx <= last_pred_idx)
    {
        if (b_reused_prev[idx])
        {
            x_write_ep_ex_golomb(bs, run, 0);
            COM_TRACE_COUNTER;
            COM_TRACE_STR("uiNumSRBPredRun:");
            COM_TRACE_INT(run);
            COM_TRACE_STR("\n");
            run = 0;
        }
        else
        {
            run++;
        }
        idx++;
    }
}

void encode_pv_buf(COM_BSW* bs, CS2_MODE_INFO* cs2_info, int* ui_num_SRB_pred, int* ui_num_SRB_rcv)
{
    //encode cu SRB present flag
    int ui_symbol;
    int ui_pvbuf_size = cs2_info->m_pvbuf_size;
    int ui_max_pvbuf_size = MAX_SRB_SIZE;
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    {
        ui_symbol = cs2_info->m_unpredictable_pixel_present_flag;
        enc_sbac_encode_bin(ui_symbol, sbac, sbac->ctx.sp_SRB_lo_ref_color_flag_context, bs);
        COM_TRACE_COUNTER;
        COM_TRACE_STR("Unpredictable_pixel_present_flag");
        COM_TRACE_INT(ui_symbol);
        COM_TRACE_STR("\n");
    }
    {
        //
        {
            int ui_pvbuf_size_prev = cs2_info->m_pvbuf_size_prev;
            u8* b_reused_prev;
            *ui_num_SRB_rcv = cs2_info->m_pvbuf_size;
            *ui_num_SRB_pred = 0;

            b_reused_prev = cs2_info->m_pvbuf_reused_flag;
            //write number of recv & pred & reusedFlag
            encode_pvbuf_pred_indicator(bs, b_reused_prev, ui_pvbuf_size_prev, ui_num_SRB_pred, ui_pvbuf_size);
            *ui_num_SRB_rcv = cs2_info->m_pvbuf_size - *ui_num_SRB_pred;
            COM_TRACE_COUNTER;
            COM_TRACE_STR("ui_pvbuf_size:");
            COM_TRACE_INT(ui_pvbuf_size);
            COM_TRACE_STR("ui_num_SRB_rcv:");
            COM_TRACE_INT(*ui_num_SRB_rcv);
            COM_TRACE_STR("ui_num_SRB_pred:");
            COM_TRACE_INT(*ui_num_SRB_pred);
            COM_TRACE_STR("\n");

            assert(ui_pvbuf_size >= *ui_num_SRB_pred);
        }
    }
}
int write_sp_lo_ref_maxlen(COM_BSW* bs, int ui_run, int ui_max)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    SBAC_CTX_MODEL* p_CTX;
    int   act_sym;
    int i;
    assert(ui_run <= ui_max);
    for (i = 0; i < (int)ui_run; i++)
    {
        act_sym = 0;
        if (i < 3)
        {
            p_CTX = sbac->ctx.sp_lo_ref_maxlength_context + i;
        }
        else
        {
            p_CTX = sbac->ctx.sp_lo_ref_maxlength_context + 3;
        }

        enc_sbac_encode_bin(act_sym, sbac, p_CTX, bs);
    }
    if (ui_run < ui_max)
    {
        act_sym = 1;
        if (ui_run < 3)
        {
            p_CTX = sbac->ctx.sp_lo_ref_maxlength_context + ui_run;
        }
        else
        {
            p_CTX = sbac->ctx.sp_lo_ref_maxlength_context + 3;
        }

        enc_sbac_encode_bin(act_sym, sbac, p_CTX, bs);
    }

    return 0;

}
void write_inf_suf_sum(COM_BSW* bs, unsigned int b, unsigned int temp, int n, unsigned int max_val_infix)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    unsigned int k, m, c;
    int i;
    //middle
    if (b < (1 << n) - (max_val_infix + 1) || max_val_infix == 0)
    {
        k = 0;
    }
    else
    {
        k = 1;
    }
    if (k == 0)
    {
        b = b;
    }
    else
    {
        b = ((b + ((1 << n) - max_val_infix - 1)) >> 1);
    }
    if (n > 1)
    {
        m = 1 << (n - 2);
        for (i = 0; i < n - 1; i++)
        {
            sbac_encode_bin_ep(((b & m) == 0 ? 0 : 1), sbac, bs);
            m = m >> 1;
        }
    }
    //suffix
    if (k == 0)
    {
        return;
    }
    else
    {
        c = temp - (b << 1) + ((1 << n) - (max_val_infix + 1));
        sbac_encode_bin_ep(c & 0x0001, sbac, bs);
    }
}
void  encode_dup_count(COM_BSW* bs, u32 ui_run, u8 b_copy_top_mode, u32 ui_SRB_idx, u32 ui_max_run)
{
    SBAC_CTX_MODEL* pc_model;
    u8* uc_ctx_lut;
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    COM_SBAC_CTX* ctx = &sbac->ctx;

    pc_model = ctx->sp_SRB_copy_toprun_context;
    uc_ctx_lut = g_uc_run_top_lut;


    if (ui_max_run == 0)
    {
        return;
    }
    else if (ui_max_run == 1 && (b_copy_top_mode == SRB_RUN_ABOVE))
    {
        sbac_encode_bin_ep(((ui_run & 0x1) == 0 ? 0 : 1), sbac, bs);
        return;
    }
    else
    {
        u32 ui_msb_p1, rui_run, temp;
        u32 ui_max = ui_max_run + 1;
        u32 max_val_prefix = get_msb_p1_idx(ui_max_run) - (b_copy_top_mode == SRB_RUN_ABOVE);
        SBAC_CTX_MODEL* pc_SC_model = pc_model;
        u32 ui_ctx_t = 4;
        u32 a, b, n, max_val_infix;

        if (max_val_prefix == 0)
        {
            ui_msb_p1 = 0;
        }
        else
        {
            rui_run = ui_run >> (b_copy_top_mode == SRB_RUN_ABOVE);
            for (ui_msb_p1 = 0; rui_run > 0; ui_msb_p1++)
            {
                rui_run >>= 1;
                if (ui_msb_p1 > ui_ctx_t)
                {
#if EVS_LP_BUGFIX
                    write_bins_ep(sbac, bs, 0, 1);
#else
                    write_bins_ep(sbac, bs, 1, 1);
#endif
                }
                else
                {
                    SBAC_CTX_MODEL* cur_SC_model = ui_msb_p1 <= ui_ctx_t ? pc_SC_model + uc_ctx_lut[ui_msb_p1] : pc_SC_model + uc_ctx_lut[ui_ctx_t];
#if EVS_LP_BUGFIX
                    enc_sbac_encode_bin(0, sbac, cur_SC_model, bs);
#else
                    enc_sbac_encode_bin(1, sbac, cur_SC_model, bs);
#endif
                }
            }
            assert(ui_msb_p1 <= max_val_prefix);
            if (ui_msb_p1 < max_val_prefix)
            {
                if (ui_msb_p1 > ui_ctx_t)
                {
#if EVS_LP_BUGFIX
                    write_bins_ep(sbac, bs, 1, 1);
#else
                    write_bins_ep(sbac, bs, 0, 1);
#endif
                }
                else
                {
                    SBAC_CTX_MODEL* cur_SC_model = ui_msb_p1 <= ui_ctx_t ? pc_SC_model + uc_ctx_lut[ui_msb_p1] : pc_SC_model + uc_ctx_lut[ui_ctx_t];
#if EVS_LP_BUGFIX
                    enc_sbac_encode_bin(1, sbac, cur_SC_model, bs);
#else
                    enc_sbac_encode_bin(0, sbac, cur_SC_model, bs);
#endif
                }
            }
        }
        a = ui_msb_p1;
        //middle
        if (a == 0)
        {
            if (b_copy_top_mode == SRB_RUN_ABOVE)
            {
                sbac_encode_bin_ep(((ui_run & 0x1) == 0 ? 0 : 1), sbac, bs);
                return;
            }
            max_val_infix = 0;
            n = 0;
            b = 0;
        }
        else
        {
            a = a + (b_copy_top_mode == SRB_RUN_ABOVE);
            max_val_infix = ((u32)(ui_max - 1 - (1 << (a - 1))) < (u32)((1 << (a - 1)) - 1)) ? (u32)(ui_max - 1 - (1 << (a - 1))) : (u32)((1 << (a - 1)) - 1);
            n = get_msb_p1_idx(max_val_infix);
            b = ui_run - (1 << (a - 1));
        }
        temp = ui_run - (1 << (a - 1));
        //middle and suffix
        write_inf_suf_sum(/*sbac,*/ bs, b, temp, n, max_val_infix);
    }
}

void enc_eco_cs2_pixel_group(int log2_width, int log2_height, COM_BSW* bs, CS2_MODE_INFO* cs2_info
    , int x, int y, u8 tree_status
)
{
    u8 bit_depth = cs2_info->m_bit_depth;
    int cu_width = 1 << log2_width;
    int cu_height = 1 << log2_height;
    int total_pixel = cu_width * cu_height;
    int cur_pix_pos = 0;

    int i = 0, j = 0;
    int is_hor_scan = cs2_info->string_copy_direction;
    int* p_trav_scan_order = com_tbl_raster2trav[is_hor_scan][log2_width - MIN_CU_LOG2][log2_height - MIN_CU_LOG2];
    COM_SP_EVS_INFO str_info;
    int sub_string_no = cs2_info->sub_string_no;
    COM_SP_EVS_INFO* c_info = cs2_info->p_evs_copy_info;
    COM_SP_PIX* p_dict_pixel = cs2_info->unpredict_pix_info;
    int dict_pix_size = cs2_info->unpredict_pix_num;
    int dict_pix_idx = 0;
    int is_match = 0;

    int cu_ext = 0;
    if (tree_status == TREE_L)
    {
        cu_ext = 1;
    }

    i = 0;
    while (i < (int)sub_string_no)
    {
        str_info = *(c_info + i);
        is_match = (u8)str_info.is_matched;
        if (str_info.match_type == MATCH_POS_WIDTH)
        {
            is_match = TRUE;
        }

        if (is_match)
        {
            total_pixel -= str_info.length;
            cur_pix_pos += str_info.length;
        }
        else
        {
            int ui_length = 0;
            int Y = str_info.pixel[0];
            int U = str_info.pixel[1];
            int V = str_info.pixel[2];
            int ui_encoded_level = 0;
            int srb_index = str_info.srb_index;
            ENC_SBAC* sbac = GET_SBAC_ENC(bs);
            if (str_info.pv_type == 1 || str_info.pv_type == 3)
            {
                write_bins_ep(sbac, bs, Y, bit_depth);
                COM_TRACE_COUNTER;
                COM_TRACE_STR("CS2_SRB Y:");
                COM_TRACE_INT(Y);
                COM_TRACE_STR("\n");
            }
            if (str_info.pv_type == 2 || str_info.pv_type == 3)
            {
                write_bins_ep(sbac, bs, U, bit_depth);
                write_bins_ep(sbac, bs, V, bit_depth);
                COM_TRACE_COUNTER;
                COM_TRACE_STR("CS2_SRB U:");
                COM_TRACE_INT(U);
                COM_TRACE_STR("CS2_SRB V:");
                COM_TRACE_INT(V);
                COM_TRACE_STR("\n");
            }
            if (str_info.pv_type == 4)
            {
                for (j = 0; j < str_info.length; j++)
                {
                    int trav_order_index = p_trav_scan_order[cur_pix_pos + j];
                    int trav_x = GET_TRAV_X(trav_order_index, cu_width);
                    int trav_y = GET_TRAV_Y(trav_order_index, log2_width);

                    Y = p_dict_pixel[dict_pix_idx].Y;
                    U = p_dict_pixel[dict_pix_idx].U;
                    V = p_dict_pixel[dict_pix_idx].V;
                    dict_pix_idx++;
                    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
                    write_bins_ep(sbac, bs, Y, bit_depth);
                    COM_TRACE_COUNTER;
                    COM_TRACE_STR("CS2_PIX Y:");
                    COM_TRACE_INT(Y);
                    if (trav_x % 2 == 0 && trav_y % 2 == 0)
                    {
                        if (!cu_ext)
                        {
                            write_bins_ep(sbac, bs, U, bit_depth);
                            write_bins_ep(sbac, bs, V, bit_depth);
                            COM_TRACE_STR("CS2_PIX U:");
                            COM_TRACE_INT(U);
                            COM_TRACE_STR("CS2_PIX V:");
                            COM_TRACE_INT(V);
                        }
                    }
                    COM_TRACE_STR("\n");
                }
            }
            total_pixel -= str_info.length;
            cur_pix_pos += str_info.length;
        }
        i++;
    }
}
int enc_eco_cs2_flag(COM_BSW* bs, u8 cs2_flag)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    enc_sbac_encode_bin(cs2_flag, sbac, sbac->ctx.sp_cs2_flag, bs);
    COM_TRACE_COUNTER;
    COM_TRACE_STR("cs2 flag ");
    COM_TRACE_INT(cs2_flag);
    COM_TRACE_STR("\n");
    return COM_OK;
}
// void encode_sp_or_cs2_cu_flag(COM_BSW* bs, int cu_width, int cu_height, ENC_CU_DATA* cu_data, int cup, ENC_CTX_HLS* ctx)
// {
//     u8 code_cs2; //FLAG whether the CS2 mode is to be coded
//     u8 cs2_flag;
//     code_cs2 = ctx->param.sp_enable_flag && ctx->param.evs_ubvs_enable_flag;
//     cs2_flag = cu_data->cs2_flag[cup];

//     if (code_cs2 == 1)
//     {
//         enc_eco_cs2_flag(bs, cs2_flag);
//     }
//     else
//     {
//         assert(cs2_flag == ctx->info.pic_header.evs_ubvs_pic_flag);
//     }

// }

int write_sp_match_flag_run(COM_BSW* bs, u8 is_match, int ui_run, int ui_max)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    int   act_sym;
    int i;
    assert(ui_run <= ui_max);
    for (i = 0; i < (int)ui_run; i++)
    {
        act_sym = 0;
        enc_sbac_encode_bin(act_sym, sbac, sbac->ctx.sp_str_type_context, bs);
    }
    if (ui_run < ui_max)
    {
        act_sym = 1;
        enc_sbac_encode_bin(act_sym, sbac, sbac->ctx.sp_str_type_context, bs);
    }
    return 0;

}

void SRB_predition_enc(CS2_MODE_INFO* cs2_info, COM_SP_PIX* p_hi_ref_UmP, int ui_hi_ref_UmPSize, u8* p_reused_prev)
{
    pel* p_pred[3] = { cs2_info->m_srb_prev[0] , cs2_info->m_srb_prev[1], cs2_info->m_srb_prev[2] };
    int ui_pvbuf_size_prev = cs2_info->m_pvbuf_size_prev;
    //set SRB Reused Flag
    pel p_SRB_temp[3][MAX_SRB_SIZE];
    int ui_idx_prev = 0, ui_idx_curr = 0;
    u8 b_reused;
    u8 p_predicted[MAX_SRB_SIZE + 1];
    memset(p_predicted, 0, sizeof(p_predicted));

    //save cur SRB into temp
    for (int i = 0; i < MAX_SRB_SIZE; i++)
    {
        p_SRB_temp[0][i] = p_hi_ref_UmP[i].Y;
        p_SRB_temp[1][i] = p_hi_ref_UmP[i].U;
        p_SRB_temp[2][i] = p_hi_ref_UmP[i].V;
    }
    //
    for (ui_idx_prev = 0; ui_idx_prev < ui_pvbuf_size_prev; ui_idx_prev++)
    {
        b_reused = 0;
        int counter = 0;
        for (ui_idx_curr = 0; ui_idx_curr < ui_hi_ref_UmPSize; ui_idx_curr++)
        {
            counter = 0;

            for (int ch = 0; ch < 3; ch++)
            {
                if (p_pred[ch][ui_idx_prev] == p_SRB_temp[ch][ui_idx_curr])
                {
                    counter++;
                }
            }
            if (counter == 3)
            {
                b_reused = 1;
                break;
            }
        }
        p_reused_prev[ui_idx_prev] = b_reused;
        p_predicted[ui_idx_curr] = b_reused;
    }

    //reorder SRB
    ui_idx_curr = 0;
    for (ui_idx_prev = 0; ui_idx_prev < ui_pvbuf_size_prev; ui_idx_prev++)
    {
        if (p_reused_prev[ui_idx_prev])
        {
            p_hi_ref_UmP[ui_idx_curr].Y = p_pred[0][ui_idx_prev];
            p_hi_ref_UmP[ui_idx_curr].U = p_pred[1][ui_idx_prev];
            p_hi_ref_UmP[ui_idx_curr].V = p_pred[2][ui_idx_prev];
            ui_idx_curr++;
        }
    }
    for (int ui_idx = 0; ui_idx < ui_hi_ref_UmPSize; ui_idx++)
    {
        if (p_predicted[ui_idx] == 0)
        {
            p_hi_ref_UmP[ui_idx_curr].Y = p_SRB_temp[0][ui_idx];
            p_hi_ref_UmP[ui_idx_curr].U = p_SRB_temp[1][ui_idx];
            p_hi_ref_UmP[ui_idx_curr].V = p_SRB_temp[2][ui_idx];
            ui_idx_curr++;
        }
    }
}
int x_write_CS2_pv_adr(COM_BSW* bs, int ui_idx, int ui_pvbuf_adr, int i_max_symbol, int ui_pvbuf_adr_prev, SP_MATCH_TYPE match_type_prev, int ui_pvbuf_adr_above, SP_MATCH_TYPE match_type_above)
{
    int n, max_val, b, temp;
    int i_ref_level = MAX_INT;
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);

    int suffix_flag = 0;
    unsigned int suffix_idx = 0;

    if (ui_idx)
    {

        if (match_type_prev == MATCH_POS_ONE || match_type_prev == MATCH_NONE) //left mode
        {
            assert(ui_pvbuf_adr != ui_pvbuf_adr_prev);
            i_ref_level = ui_pvbuf_adr_prev;
            i_max_symbol--;
        }

        else if (match_type_prev == MATCH_POS_WIDTH && match_type_above != MATCH_NONE)
        {
            assert(ui_pvbuf_adr != ui_pvbuf_adr_above);
            i_ref_level = ui_pvbuf_adr_above;
            i_max_symbol--;
        }
        else
        {
            i_ref_level = ui_pvbuf_adr_above;
            i_max_symbol--;
            if (ui_pvbuf_adr == 0)
            {
                suffix_flag = 1;
                suffix_idx = 0;
            }
            if (ui_pvbuf_adr == ui_pvbuf_adr_above)
            {
                ui_pvbuf_adr++;
                suffix_flag = 1;
                suffix_idx = 1;
            }
        }
    }
    else
    {
        i_max_symbol--;
        i_ref_level = i_max_symbol;

        if (ui_pvbuf_adr == 0)
        {
            suffix_flag = 1;
            suffix_idx = 0;
        }
        if (ui_pvbuf_adr == i_max_symbol)
        {
            ui_pvbuf_adr = ui_pvbuf_adr + 1 - (i_max_symbol + 1);
            suffix_flag = 1;
            suffix_idx = 1;
        }
    }

    if (i_ref_level != MAX_INT)
    {
        int iLevel = ui_pvbuf_adr - (i_ref_level + 1);
        if (iLevel < 0)
            ui_pvbuf_adr = iLevel + (i_max_symbol + 1);
        else
            ui_pvbuf_adr = iLevel;
    }

    assert(i_max_symbol >= 0);
    assert(ui_pvbuf_adr >= 0);
    assert(i_max_symbol >= (int)ui_pvbuf_adr);

    if (i_max_symbol > 0)
    {
        n = get_msb_p1_idx(i_max_symbol);

        max_val = i_max_symbol - 1;

        temp = ui_pvbuf_adr;
        b = ui_pvbuf_adr;
        //prefix and infix
        write_inf_suf_sum(/*sbac, */bs, b, temp, n, max_val);

        //suffix
        if (suffix_flag)
        {
            sbac_encode_bin_ep(suffix_idx & 0x0001, sbac, bs);
        }
    }
    return ui_pvbuf_adr;
}
void enc_eco_cs2(int log2_width, int log2_height, COM_BSW* bs, CS2_MODE_INFO* cs2_info
    , int x, int y, u8 tree_status, int ctulog2size)
{
    int i, j, total_pixel, cu_width, cu_height, cur_pix_pos, total_bits;
    COM_SP_EVS_INFO str_info;
    COM_SP_EVS_INFO* p_str_info = NULL;
    u8 is_hor_scan, is_match;
    int sub_string_no = cs2_info->sub_string_no;
    COM_SP_EVS_INFO* c_info = cs2_info->p_evs_copy_info;
    COM_SP_PIX* p_dict_pixel = cs2_info->unpredict_pix_info;
    int dict_pix_size = cs2_info->unpredict_pix_num;
    int dict_pix_idx = 0;
    int* p_trav_scan_order;
    ////code the SRB
    pel* p_SRB[3] = { NULL, NULL, NULL };
    int ui_pvbuf_size = 0, ui_pvbuf_adr = 0;
    int ui_max_size = 0;
    int ui_num_SRB_pred = 0, ui_num_SRB_rcv = 0;
    u8 ui_evs_present_flag = cs2_info->m_evs_present_flag;
    u8 ui_esc_flag = cs2_info->m_unpredictable_pixel_present_flag;
    int cur_active_SRB_count = 0;
    u8 bit_depth = cs2_info->m_bit_depth;
    //
    SP_MATCH_TYPE match_mode_linebuf[MAX_CU_SIZE];
    int ui_pvbuf_adr_linebuf[MAX_CU_SIZE];
    int ui_pvbuf_adr_above = 0;
    SP_MATCH_TYPE match_type_above = MATCH_NONE;
    int ui_pvbuf_adr_prev = 0;
    SP_MATCH_TYPE match_type_prev = MATCH_NONE;
    u8 HiNRP_state[MAX_SRB_SIZE];
    COM_SP_PIX HiNRP_pixel[MAX_SRB_SIZE];
    u8 all_comp_flag_state[MAX_SRB_SIZE];
    u8 cuS_flag_state[MAX_SRB_SIZE];
    s16 pv_x_state[MAX_SRB_SIZE];
    s16 pv_y_state[MAX_SRB_SIZE];
    memset(pv_x_state, -1, sizeof(s16) * MAX_SRB_SIZE);
    memset(pv_y_state, -1, sizeof(s16) * MAX_SRB_SIZE);
    u8 dpb_idx_state[MAX_SRB_SIZE];
    u8 dpb_reYonly_state[MAX_SRB_SIZE];
    memset(dpb_idx_state, 0, sizeof(u8) * MAX_SRB_SIZE);
    memset(dpb_reYonly_state, 0, sizeof(u8) * MAX_SRB_SIZE);
    int HiNRP_size = 0;
    int vec_dict_run_val[1024];
    int vec_dict_run_idx = 0;
    int cur_run = 0;
    int is_first_run = 1;
    int ui_lo_ref_maxlength = 0;
    assert(sub_string_no > 0 && c_info != NULL);
    cu_width = 1 << log2_width;
    cu_height = 1 << log2_height;
    total_pixel = cu_width * cu_height;
    cur_pix_pos = 0;
    total_bits = 0;
    is_hor_scan = cs2_info->string_copy_direction;
    p_trav_scan_order = com_tbl_raster2trav[is_hor_scan][log2_width - MIN_CU_LOG2][log2_height - MIN_CU_LOG2];
    encode_pv_buf(bs, cs2_info, &ui_num_SRB_pred, &ui_num_SRB_rcv);
    int cu_ext = 0;
    if (tree_status == TREE_L)
    {
        cu_ext = 1;
    }
    int all_comp_flag_size = 0;
    for (i = 0; i < cs2_info->m_pvbuf_size_prev; i++)
    {
        if (cs2_info->m_pvbuf_reused_flag[i])
        {
            all_comp_flag_state[all_comp_flag_size] = cs2_info->m_all_comp_pre_flag[i];
            cuS_flag_state[all_comp_flag_size] = cs2_info->m_cuS_pre_flag[i];
            pv_x_state[all_comp_flag_size] = cs2_info->m_pv_prev_x[i];
            pv_y_state[all_comp_flag_size] = cs2_info->m_pv_prev_y[i];
            dpb_idx_state[all_comp_flag_size] = cs2_info->m_dpb_idx_prev[i];
            dpb_reYonly_state[all_comp_flag_size] = cs2_info->m_dpb_reYonly_prev[i];
            assert(dpb_idx_state[all_comp_flag_size] == 0 || dpb_idx_state[all_comp_flag_size] == 1);
            assert(dpb_reYonly_state[all_comp_flag_size] == 0 || dpb_reYonly_state[all_comp_flag_size] == 1);
            all_comp_flag_size++;
        }
    }
    assert(all_comp_flag_size == ui_num_SRB_pred);

    for (i = 0; i < cs2_info->m_pvbuf_size; i++)
    {
        if (i < (int)ui_num_SRB_pred)
            HiNRP_state[i] = 1;
        else
            HiNRP_state[i] = 0;
    }
    for (i = 0; i < cu_width; i++)
    {
        match_mode_linebuf[i] = MATCH_NONE;
        ui_pvbuf_adr_linebuf[i] = 0;
    }

    ui_pvbuf_size = cs2_info->m_pvbuf_size;
    for (i = 0; i < 3; i++)
    {
        p_SRB[i] = cs2_info->m_srb[i];
    }
    HiNRP_size = ui_num_SRB_pred;
    for (i = 0; i < (int)HiNRP_size; i++)
    {
        HiNRP_pixel[i].Y = p_SRB[0][i];
        HiNRP_pixel[i].U = p_SRB[1][i];
        HiNRP_pixel[i].V = p_SRB[2][i];
    }
    cur_active_SRB_count = ui_num_SRB_pred;
    if (cur_active_SRB_count >= ui_pvbuf_size)
    {
        cur_active_SRB_count = ui_pvbuf_size;
        ui_max_size = cur_active_SRB_count + ui_esc_flag;
    }
    else
    {
        ui_max_size = cur_active_SRB_count + 1 + ui_esc_flag;
    }

    for (i = 0; i < (int)sub_string_no;)
    {
        int cur_len;
        int idx = i + 1;
        str_info = *(c_info + i);
        cur_run = 1;
        cur_len = str_info.length;
        if (cur_pix_pos >= (int)cu_width)
        {
            for (; idx < sub_string_no;)
            {
                COM_SP_EVS_INFO str_info_next = *(c_info + idx);
                if (str_info_next.match_type == str_info.match_type ||
                    ((str_info_next.match_type == MATCH_POS_ONE || str_info_next.match_type == MATCH_NONE) && (str_info.match_type == MATCH_POS_ONE || str_info.match_type == MATCH_NONE)) ||
                    ((str_info_next.match_type == MATCH_POS_WIDTH) && (str_info.match_type == MATCH_POS_WIDTH)))
                {
                    idx++;
                    cur_run++;
                    cur_len += str_info_next.length;
                }
                else
                {
                    break;
                }
            }
            vec_dict_run_val[vec_dict_run_idx] = cur_run;
            vec_dict_run_idx++;
        }
        i += cur_run;
        cur_pix_pos += cur_len;
    }
    //reset curRun
    cur_run = 0; vec_dict_run_idx = 0; cur_pix_pos = 0;
    if (ui_esc_flag)
    {
        for (i = 0; i < (int)sub_string_no; i++)
        {
            str_info = *(c_info + i);
            if (str_info.match_type == MATCH_NONE && (int)ui_lo_ref_maxlength < str_info.length)
                ui_lo_ref_maxlength = str_info.length;
        }
        assert(ui_lo_ref_maxlength > 0);
        write_sp_lo_ref_maxlen(bs, ui_lo_ref_maxlength - 1, total_pixel);
        COM_TRACE_COUNTER;
        COM_TRACE_STR("ui_lo_ref_maxlength:");
        COM_TRACE_INT(ui_lo_ref_maxlength - 1);
        COM_TRACE_STR("\n");
    }

    i = 0;
    while (i < (int)sub_string_no)
    {
        str_info = *(c_info + i);
        p_str_info = (c_info + i);
        p_str_info->pv_type = 0;
        is_match = (u8)str_info.is_matched;
        if (str_info.match_type == MATCH_POS_WIDTH) //ABOVE_MODE
        {
            is_match = TRUE;
        }
        {
            int trav_order_index = p_trav_scan_order[cur_pix_pos];
            int trav_x = GET_TRAV_X(trav_order_index, cu_width);
            int trav_y = GET_TRAV_Y(trav_order_index, log2_width);
            match_type_above = match_mode_linebuf[is_hor_scan ? trav_x : trav_y];
            ui_pvbuf_adr_above = ui_pvbuf_adr_linebuf[is_hor_scan ? trav_x : trav_y];
        }

        int uiMax = total_pixel;
        if (cur_pix_pos >= (int)cu_width)
        {
            if (cur_run == 0)
            { //get Run from the bitstream
                cur_run = vec_dict_run_val[vec_dict_run_idx];
                vec_dict_run_idx++;
                if (is_first_run)
                {
                    if (str_info.match_type == MATCH_POS_WIDTH)
                    {
                        cur_run = 0;
                    }
                    write_sp_match_flag_run(bs, is_match, cur_run, uiMax);
                    COM_TRACE_COUNTER;
                    COM_TRACE_STR("EVS_run:");
                    COM_TRACE_INT(cur_run);
                    COM_TRACE_STR("\n");
                    is_first_run = 0;
                }
                else
                {
                    if (str_info.match_type != MATCH_POS_WIDTH)
                    {
                        write_sp_match_flag_run(bs, is_match, cur_run - 1, uiMax - 1);
                        COM_TRACE_COUNTER;
                        COM_TRACE_STR("EVS_run:");
                        COM_TRACE_INT(cur_run - 1);
                        COM_TRACE_STR("\n");
                    }
                }
            }
            if (cur_run > 0)
            {
                cur_run -= 1;
            }

        }

        if (is_match)
        {
            for (int i = 0; i < str_info.length; i++)
            {
                int trav_order_index = p_trav_scan_order[cur_pix_pos + i];
                int trav_x = GET_TRAV_X(trav_order_index, cu_width);
                int trav_y = GET_TRAV_Y(trav_order_index, log2_width);
                if (match_mode_linebuf[is_hor_scan ? trav_x : trav_y] == MATCH_POS_ONE)
                {
                    u16 pvaddr = ui_pvbuf_adr_linebuf[is_hor_scan ? trav_x : trav_y];
                    if (!cu_ext && (trav_x % 2 == 0 && trav_y % 2 == 0) && dpb_reYonly_state[pvaddr])
                    {
                        pv_x_state[pvaddr] = x + trav_x;
                        pv_y_state[pvaddr] = y + trav_y;
                        dpb_reYonly_state[pvaddr] = 0;
                        dpb_idx_state[pvaddr] = 0;
                    }
                }
            }
            int ui_length = str_info.length - 1;
            encode_dup_count(bs, ui_length, SRB_RUN_ABOVE, 0, total_pixel - 1);
            COM_TRACE_COUNTER;
            COM_TRACE_STR("CS2_Above_Length:");
            COM_TRACE_INT(ui_length);
            COM_TRACE_STR("\n");
            total_pixel -= str_info.length;
            cur_pix_pos += str_info.length;
            ui_pvbuf_adr_prev = 0;
            match_type_prev = MATCH_POS_WIDTH;
        }
        else
        {
            int ui_length = 0;
            int Y = str_info.pixel[0];
            int U = str_info.pixel[1];
            int V = str_info.pixel[2];
            int ui_encoded_level = 0;
            int srb_index = str_info.srb_index;
            if (ui_evs_present_flag && srb_index != MAX_SRB_SIZE)
            {
                int idx;//regen the srb_index according to the reordered SRB.
                ui_pvbuf_adr = MAX_SRB_SIZE; //initialize to a Max Value
                for (idx = 0; idx < (int)HiNRP_size; idx++) {
                    if (Y == HiNRP_pixel[idx].Y && U == HiNRP_pixel[idx].U && V == HiNRP_pixel[idx].V) {
                        ui_pvbuf_adr = idx;
                        break;
                    }
                }
                if (ui_pvbuf_adr == MAX_SRB_SIZE) { //new
                    HiNRP_pixel[HiNRP_size].Y = Y;
                    HiNRP_pixel[HiNRP_size].U = U;
                    HiNRP_pixel[HiNRP_size].V = V;
                    ui_pvbuf_adr = HiNRP_size;
                    HiNRP_size++;
                }
                assert(ui_pvbuf_adr < ui_pvbuf_size);

                if (cur_pix_pos > 0 && match_type_prev == MATCH_NONE)
                {
                    ui_pvbuf_adr_prev = ui_max_size - 1;
                }
                if (match_type_prev == MATCH_POS_WIDTH && match_type_above == MATCH_NONE)
                {
                    ui_pvbuf_adr_above = ui_max_size - 1;
                }

                ui_encoded_level = x_write_CS2_pv_adr(bs, cur_pix_pos, ui_pvbuf_adr, ui_max_size, ui_pvbuf_adr_prev, match_type_prev, ui_pvbuf_adr_above, match_type_above);

                COM_TRACE_COUNTER;
                COM_TRACE_STR("CS2PCAAdr:");
                COM_TRACE_INT(ui_pvbuf_adr);
                COM_TRACE_STR("\n");

                ui_pvbuf_adr_prev = ui_pvbuf_adr;
                match_type_prev = MATCH_POS_ONE;
                for (j = 0; j < str_info.length; j++)
                {
                    int trav_order_index = p_trav_scan_order[cur_pix_pos + j];
                    int trav_x = GET_TRAV_X(trav_order_index, cu_width);
                    int trav_y = GET_TRAV_Y(trav_order_index, log2_width);
                    match_mode_linebuf[is_hor_scan ? trav_x : trav_y] = MATCH_POS_ONE;
                    ui_pvbuf_adr_linebuf[is_hor_scan ? trav_x : trav_y] = ui_pvbuf_adr;
                }
                if (ui_pvbuf_adr == cur_active_SRB_count)
                {
                    cur_active_SRB_count++;
                    if (cur_active_SRB_count >= ui_pvbuf_size)
                    {
                        cur_active_SRB_count = ui_pvbuf_size;
                        ui_max_size = cur_active_SRB_count + ui_esc_flag;
                    }
                    else
                    {
                        ui_max_size = cur_active_SRB_count + 1 + ui_esc_flag;
                    }
                }
                ui_length = str_info.length - 1;
                encode_dup_count(bs, ui_length, SRB_RUN_LEFT, ui_encoded_level, total_pixel - 1);
                COM_TRACE_COUNTER;
                COM_TRACE_STR("CS2_Left_Length:");
                COM_TRACE_INT(ui_length);
                COM_TRACE_STR("\n");


                if (!HiNRP_state[ui_pvbuf_adr])
                {
                    p_str_info->pv_type = 1;
                    all_comp_flag_state[all_comp_flag_size] = 0;
                    dpb_reYonly_state[all_comp_flag_size] = 0;
                    dpb_idx_state[all_comp_flag_size] = 0;
                    if (cu_ext)
                    {
                        all_comp_flag_state[all_comp_flag_size] = 1;
                        cuS_flag_state[all_comp_flag_size] = 1;
                    }
                    else
                    {
                        cuS_flag_state[all_comp_flag_size] = 0;
                    }
                    for (int i = 0; i < str_info.length; i++)
                    {
                        int trav_order_index = p_trav_scan_order[cur_pix_pos + i];
                        int trav_x = GET_TRAV_X(trav_order_index, cu_width);
                        int trav_y = GET_TRAV_Y(trav_order_index, log2_width);
                        if (pv_x_state[all_comp_flag_size] == -1 && pv_y_state[all_comp_flag_size] == -1)
                        {
                            pv_x_state[all_comp_flag_size] = x + trav_x;
                            pv_y_state[all_comp_flag_size] = y + trav_y;
                        }
                        if (trav_x % 2 == 0 && trav_y % 2 == 0)
                        {
                            all_comp_flag_state[all_comp_flag_size] = 1;
                            if (!cuS_flag_state[ui_pvbuf_adr])
                            {
                                pv_x_state[all_comp_flag_size] = x + trav_x;
                                pv_y_state[all_comp_flag_size] = y + trav_y;
                            }
                            break;
                        }
                    }
                    if (all_comp_flag_state[all_comp_flag_size])
                    {
                        if (!cu_ext)
                        {
                            p_str_info->pv_type = 3;
                        }
                    }
                    all_comp_flag_size++;
                    HiNRP_state[ui_pvbuf_adr] = 1;
                }
                else
                {
                    if (!all_comp_flag_state[ui_pvbuf_adr] && !cu_ext)
                    {
                        int trav_order_index = p_trav_scan_order[cur_pix_pos];
                        int trav_x = GET_TRAV_X(trav_order_index, cu_width);
                        int trav_y = GET_TRAV_Y(trav_order_index, log2_width);
                        int log2size = ctulog2size < 7 ? ctulog2size : 6;
                        if ((pv_x_state[ui_pvbuf_adr] >> log2size) != ((x + trav_x) >> log2size) || (pv_y_state[ui_pvbuf_adr] >> log2size) != ((y + trav_y) >> log2size))
                        {
                            dpb_idx_state[ui_pvbuf_adr] = 0;
                            pv_x_state[ui_pvbuf_adr] = x + trav_x;
                            pv_y_state[ui_pvbuf_adr] = y + trav_y;
                        }
                        for (int i = 0; i < str_info.length; i++)
                        {
                            int trav_order_index = p_trav_scan_order[cur_pix_pos + i];
                            int trav_x = GET_TRAV_X(trav_order_index, cu_width);
                            int trav_y = GET_TRAV_Y(trav_order_index, log2_width);
                            if (trav_x % 2 == 0 && trav_y % 2 == 0)
                            {
                                pv_x_state[ui_pvbuf_adr] = x + trav_x;
                                pv_y_state[ui_pvbuf_adr] = y + trav_y;
                                all_comp_flag_state[ui_pvbuf_adr] = 1;
                                p_str_info->pv_type = 2;
                                break;
                            }
                        }
                    }
                    else if (!cu_ext)
                    {
                        if (dpb_idx_state[ui_pvbuf_adr])
                        {
                            int trav_order_index = p_trav_scan_order[cur_pix_pos];
                            int trav_x = GET_TRAV_X(trav_order_index, cu_width);
                            int trav_y = GET_TRAV_Y(trav_order_index, log2_width);

                            pv_x_state[ui_pvbuf_adr] = x + trav_x;
                            pv_y_state[ui_pvbuf_adr] = y + trav_y;
                            dpb_reYonly_state[ui_pvbuf_adr] = 1;
                        }
                        for (int i = 0; i < str_info.length; i++)
                        {
                            int trav_order_index = p_trav_scan_order[cur_pix_pos + i];
                            int trav_x = GET_TRAV_X(trav_order_index, cu_width);
                            int trav_y = GET_TRAV_Y(trav_order_index, log2_width);
                            if (trav_x % 2 == 0 && trav_y % 2 == 0)
                            {
                                int log2size = ctulog2size < 7 ? ctulog2size : 6;
                                if ((pv_x_state[ui_pvbuf_adr] >> log2size) != ((x + trav_x) >> log2size) || (pv_y_state[ui_pvbuf_adr] >> log2size) != ((y + trav_y) >> log2size) || dpb_reYonly_state[ui_pvbuf_adr])
                                {
                                    dpb_reYonly_state[ui_pvbuf_adr] = 0;
                                    dpb_idx_state[ui_pvbuf_adr] = 0;
                                    pv_x_state[ui_pvbuf_adr] = x + trav_x;
                                    pv_y_state[ui_pvbuf_adr] = y + trav_y;
                                }
                                break;
                            }
                        }
                    }
                }
                total_pixel -= str_info.length;
                cur_pix_pos += str_info.length;
            }
            else
            {
                //unmatched pixel
                if (ui_evs_present_flag)
                {
                    if (cur_active_SRB_count >= ui_pvbuf_size)
                    {
                        cur_active_SRB_count = ui_pvbuf_size;
                        ui_pvbuf_adr = ui_pvbuf_size;
                        ui_max_size = cur_active_SRB_count + ui_esc_flag;
                    }
                    else
                    {
                        ui_pvbuf_adr = cur_active_SRB_count + 1;
                        ui_max_size = cur_active_SRB_count + 1 + ui_esc_flag;
                    }

                    if (match_type_prev == MATCH_POS_WIDTH && match_type_above == MATCH_NONE)
                    {
                        ui_pvbuf_adr_above = ui_max_size - 1;
                    }

                    ui_encoded_level = x_write_CS2_pv_adr(bs, cur_pix_pos, ui_pvbuf_adr, ui_max_size, ui_pvbuf_adr_prev, match_type_prev, ui_pvbuf_adr_above, match_type_above);
                    COM_TRACE_COUNTER;
                    COM_TRACE_STR("CS2PCAAdr:");
                    COM_TRACE_INT(ui_pvbuf_adr);
                    COM_TRACE_STR("\n");

                    ui_pvbuf_adr_prev = ui_pvbuf_size;
                    match_type_prev = MATCH_NONE;
                }

                {
                    //write length of repeated unmatched color
                    ui_length = str_info.length - 1;
                    encode_dup_count(bs, ui_length, SRB_RUN_LEFT, ui_encoded_level, ui_lo_ref_maxlength - 1);
                    COM_TRACE_COUNTER;
                    COM_TRACE_STR("CS2_None_Length:");
                    COM_TRACE_INT(ui_length);
                    COM_TRACE_STR("\n");
                }

                for (j = 0; j < str_info.length; j++)
                {
                    int trav_order_index = p_trav_scan_order[cur_pix_pos + j];
                    int trav_x = GET_TRAV_X(trav_order_index, cu_width);
                    int trav_y = GET_TRAV_Y(trav_order_index, log2_width);
                    match_mode_linebuf[is_hor_scan ? trav_x : trav_y] = MATCH_NONE;
                    ui_pvbuf_adr_linebuf[is_hor_scan ? trav_x : trav_y] = ui_pvbuf_size;
                    Y = p_dict_pixel[dict_pix_idx].Y;
                    U = p_dict_pixel[dict_pix_idx].U;
                    V = p_dict_pixel[dict_pix_idx].V;
                    dict_pix_idx++;
                    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
                    p_str_info->pv_type = 4;
                }
                total_pixel -= (ui_length + 1);
                cur_pix_pos += (ui_length + 1);
            }
        }
        i++;
    }
    enc_eco_cs2_pixel_group(log2_width, log2_height, bs, cs2_info, x, y, tree_status);

    //update the SRB Info
    {
        {
            u8* p_reused_prev = (u8*)malloc((MAX_SRB_PRED_SIZE + 1) * sizeof(u8));
            memset(p_reused_prev, FALSE, sizeof(u8) * (MAX_SRB_PRED_SIZE + 1));
            SRB_predition_enc(cs2_info, HiNRP_pixel, HiNRP_size, p_reused_prev);
            assert(all_comp_flag_size == HiNRP_size);
            memcpy(cs2_info->m_all_comp_flag, all_comp_flag_state, all_comp_flag_size * sizeof(u8));
            memcpy(cs2_info->m_cuS_flag, cuS_flag_state, all_comp_flag_size * sizeof(u8));
            memcpy(cs2_info->m_pv_x, pv_x_state, all_comp_flag_size * sizeof(s16));
            memcpy(cs2_info->m_pv_y, pv_y_state, all_comp_flag_size * sizeof(s16));
            memcpy(cs2_info->m_dpb_idx, dpb_idx_state, all_comp_flag_size * sizeof(u8));
            memcpy(cs2_info->m_dpb_reYonly, dpb_reYonly_state, all_comp_flag_size * sizeof(u8));
            for (i = 0; i < MAX_SRB_PRED_SIZE; i++)
            {
                cs2_info->m_pvbuf_reused_flag[i] = p_reused_prev[i];
            }
            if (p_reused_prev)
            {
                free(p_reused_prev);
            }
        }
        for (i = 0; i < (int)HiNRP_size; i++)
        {
            p_SRB[0][i] = HiNRP_pixel[i].Y;
            p_SRB[1][i] = HiNRP_pixel[i].U;
            p_SRB[2][i] = HiNRP_pixel[i].V;
        }
        cs2_info->m_pvbuf_size = HiNRP_size;
        assert(HiNRP_size <= ui_pvbuf_size);
    }
}

int enc_eco_pixel_y(pel pixel[N_C], int bit_depth, COM_BSW* bs)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    sbac_encode_bins_ep_msb((u32)pixel[Y_C], bit_depth);
    COM_TRACE_COUNTER;
    COM_TRACE_STR("unmatched pixel Y ");
    COM_TRACE_INT(pixel[Y_C]);
    COM_TRACE_STR("\n");
    return COM_OK;
}

int enc_eco_pixel_uv(pel pixel[N_C], int bit_depth, COM_BSW* bs)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    sbac_encode_bins_ep_msb((u32)pixel[U_C], bit_depth);
    sbac_encode_bins_ep_msb((u32)pixel[V_C], bit_depth);
    COM_TRACE_COUNTER;
    COM_TRACE_STR("unmatched pixel U ");
    COM_TRACE_INT(pixel[U_C]);
    COM_TRACE_STR("\n");
    COM_TRACE_STR("unmatched pixel V ");
    COM_TRACE_INT(pixel[V_C]);
    COM_TRACE_STR("\n");
    return COM_OK;
}
// void enc_eco_sp_pixel_group(ENC_CTX_HLS* ctx, ENC_CORE* core, COM_MODE* mod_info_curr, COM_BSW* bs, ENC_CU_DATA* cu_data, int x, int y, int cup)
// {
//     int bit_depth = ctx->info.bit_depth_internal;
//     int width = 1 << mod_info_curr->cu_width_log2;
//     int height = 1 << mod_info_curr->cu_height_log2;
//     int total_pixel = width * height;
//     int cur_pixel = 0;
//     COM_SP_INFO* p_sp_info = cu_data->sp_strInfo;
//     u8  is_sp_full_len = FALSE;
//     p_sp_info = &(cu_data->sp_strInfo[0]);
//     const int ctu_size = ctx->param.ctu_size;
//     p_sp_info += ((y & (ctu_size - 1)) >> 1) * (ctu_size >> 1) + ((x & (ctu_size - 1)) >> 1);
//     int p_sp_info_cnt = 0;
//     while (cur_pixel < total_pixel)
//     {
//         if (p_sp_info->is_matched)
//         {
//             cur_pixel += p_sp_info->length;
//         }
//         else
//         {
//             int* p_trav_scan_order = com_tbl_raster2trav[cu_data->sp_copy_direction[cup]][mod_info_curr->cu_width_log2 - MIN_CU_LOG2][mod_info_curr->cu_height_log2 - MIN_CU_LOG2];
//             int pixel_start = cur_pixel;
//             for (int i = 0; i < 4; i++)
//             {
//                 if (!p_sp_info->match_dict[i])
//                 {
//                     int  trav_order_index = p_trav_scan_order[cur_pixel];
//                     int  trav_x = GET_TRAV_X(trav_order_index, 1 << mod_info_curr->cu_width_log2);
//                     int  trav_y = GET_TRAV_Y(trav_order_index, mod_info_curr->cu_width_log2);
//                     enc_eco_pixel_y(p_sp_info->pixel[i], bit_depth, bs);
//                     if (ctx->tree_status != TREE_L)
//                     {
//                         if (!((&ctx->param)->chroma_format <= 1 && (trav_x & 0x1 || trav_y & 0x1)))
//                         {
//                             enc_eco_pixel_uv(p_sp_info->pixel[i], bit_depth, bs);
//                         }
//                     }
//                     cur_pixel++;
//                 }
//                 else
//                 {
//                     cur_pixel++;
//                 }
//             }
//         }
//         p_sp_info++;
//         p_sp_info_cnt++;
//         if (p_sp_info_cnt >= (width >> 1))
//         {
//             p_sp_info_cnt = 0;
//             p_sp_info = p_sp_info + ((ctu_size - width) >> 1);
//         }
//     }
// }
int enc_eco_above_offset(COM_BSW* bs, u8 sp_above_offset)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    enc_sbac_encode_bin(sp_above_offset, sbac, sbac->ctx.sp_above_offset, bs);
    COM_TRACE_COUNTER;
    COM_TRACE_STR("sp above offset mode ");
    COM_TRACE_INT(sp_above_offset);
    COM_TRACE_STR("\n");
    return COM_OK;
}

int enc_eco_offset_zero(COM_BSW* bs, u8 offset_zero, u8 is_offset_x)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    if (is_offset_x)
    {
        enc_sbac_encode_bin(offset_zero, sbac, sbac->ctx.sp_offset_x_zero, bs);
    }
    else
    {
        enc_sbac_encode_bin(offset_zero, sbac, sbac->ctx.sp_offset_y_zero, bs);
    }
    COM_TRACE_COUNTER;
    if (is_offset_x)
    {
        COM_TRACE_STR("sp OffsetXZero ");
    }
    else
    {
        COM_TRACE_STR("sp OffsetYZero ");
    }
    COM_TRACE_INT(offset_zero);
    COM_TRACE_STR("\n");
    return COM_OK;
}
int enc_eco_sp_is_matched_flag(COM_BSW* bs, u8 sp_is_matched_flag)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    enc_sbac_encode_bin(sp_is_matched_flag, sbac, sbac->ctx.sp_is_matched_flag, bs);
    COM_TRACE_COUNTER;
    COM_TRACE_STR("sp is matched ");
    COM_TRACE_INT(sp_is_matched_flag);  // (TRUE:Horizontal FALSE : Vertical)
    COM_TRACE_STR("\n");
    return COM_OK;
}

int enc_eco_sp_pixel_is_matched_flag(COM_BSW* bs, u8 pixel_is_matched_flag)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    enc_sbac_encode_bin(pixel_is_matched_flag, sbac, sbac->ctx.sp_pixel_is_matched_flag, bs);
    COM_TRACE_COUNTER;
    COM_TRACE_STR("pixel is matched ");
    COM_TRACE_INT(pixel_is_matched_flag);
    COM_TRACE_STR("\n");
    return COM_OK;
}
void enc_eco_len_in_suffix(COM_BSW* bs, unsigned int b, unsigned int temp, int n, unsigned int max_val_infix)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    unsigned int k, m, c;
    int i;
    //middle
    if (b < (1 << n) - (max_val_infix + 1) || max_val_infix == 0)
    {
        k = 0;
    }
    else
    {
        k = 1;
    }
    if (k == 0)
    {
        b = b;
    }
    else
    {
        b = ((b + ((1 << n) - max_val_infix - 1)) >> 1);
    }
    if (n > 1)
    {
        m = 1 << (n - 2);
        for (i = 0; i < n - 1; i++)
        {
            sbac_encode_bin_ep(((b & m) == 0 ? 0 : 1), sbac, bs);
            m = m >> 1;
        }
    }
    //suffix
    if (k == 0)
    {
        return;
    }
    else
    {
        c = temp - (b << 1) + ((1 << n) - (max_val_infix + 1));
        sbac_encode_bin_ep(c & 0x0001, sbac, bs);
    }
}

int enc_eco_sp_string_length(COM_BSW* bs, u16 value, u16 max_value)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    unsigned int n, a, d, b, temp;
    int max_val_infix;
    assert(value <= max_value);
    if (max_value > 0)
    {
        // prefix
        if (value == 0)
        {
            a = 0;
            enc_sbac_encode_bin(1, sbac, sbac->ctx.sp_string_length, bs);
        }
        else
        {
            enc_sbac_encode_bin(0, sbac, sbac->ctx.sp_string_length, bs);
            value--;
            max_value--;
            if (max_value < 4)
            {
                a = 1;
            }
            else if (max_value < 20)
            {
                if (value < 4)
                {
                    a = 1;
                    enc_sbac_encode_bin(1, sbac, sbac->ctx.sp_string_length + 1, bs);
                }
                else
                {
                    a = 2;
                    enc_sbac_encode_bin(0, sbac, sbac->ctx.sp_string_length + 1, bs);
                }
            }
            else
            {
                if (value < 4)
                {
                    a = 1;
                    enc_sbac_encode_bin(1, sbac, sbac->ctx.sp_string_length + 1, bs);
                }
                else if (value < 20)
                {
                    a = 2;
                    enc_sbac_encode_bin(0, sbac, sbac->ctx.sp_string_length + 1, bs);
                    enc_sbac_encode_bin(1, sbac, sbac->ctx.sp_string_length + 2, bs);
                }
                else
                {
                    a = 3;
                    enc_sbac_encode_bin(0, sbac, sbac->ctx.sp_string_length + 1, bs);
                    enc_sbac_encode_bin(0, sbac, sbac->ctx.sp_string_length + 2, bs);
                }
            }
            //middle
            if (a == 1)
            {
                max_val_infix = aec_min(max_value + 1 - 1, 3);
            }
            else if (a == 2)
            {
                max_val_infix = aec_min(max_value + 1 - 5, 15);
            }
            else if (a == 3)
            {
                max_val_infix = aec_min(max_value + 1 - 21, 255);
            }
            else
            {
                max_val_infix = max_value + 1 - 277;
            }
            n = get_msb_p1_idx(max_val_infix);

            if (a == 1)
            {
                d = 0;
                b = value;
            }
            else if (a == 2)
            {
                d = 4;
                b = value - 4;
            }
            else
            {
                d = 20;
                b = value - 20;
            }
            temp = value - d;
            //middle and suffix
            enc_eco_len_in_suffix(bs, b, temp, n, max_val_infix);
        }
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("matched length ");
    COM_TRACE_INT(value + 1);
    COM_TRACE_STR("\n");
    return COM_OK;
}
int enc_eco_sp_n_recent_flag(COM_BSW* bs, u8 sp_n_recent_flag)
{
    ENC_SBAC* sbac = GET_SBAC_ENC(bs);
    enc_sbac_encode_bin(sp_n_recent_flag, sbac, sbac->ctx.sp_n_recent_flag, bs);
    COM_TRACE_COUNTER;
    COM_TRACE_STR("sp_n_recent flag ");
    COM_TRACE_INT(sp_n_recent_flag);
    COM_TRACE_STR("\n");
    return COM_OK;
}

void enc_eco_sp_n_recent_index(COM_BSW* bs, ENC_SBAC* sbac, s8 flag)
{
    int n_recent_idx = flag;
    int ctx_idx = 0;
    int val = n_recent_idx;
    int max_skip_num = SP_RECENT_CANDS;
    assert(n_recent_idx < max_skip_num);
    while (val > 0)
    {
        ctx_idx = aec_min(ctx_idx, max_skip_num - 1);
        if (ctx_idx >= 3)
        {
            sbac_encode_bin_ep(0, GET_SBAC_ENC(bs), bs);
        }
        else
        {
            enc_sbac_encode_bin(0, sbac, &sbac->ctx.sp_n_index[ctx_idx], bs);
        }
        ctx_idx++;
        val--;
    }
    if (n_recent_idx != max_skip_num - 1)
    {
        ctx_idx = aec_min(ctx_idx, max_skip_num - 1);
        if (ctx_idx >= 3)
        {
            sbac_encode_bin_ep(1, GET_SBAC_ENC(bs), bs);
        }
        else
        {
            enc_sbac_encode_bin(1, sbac, &sbac->ctx.sp_n_index[ctx_idx], bs);
        }
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("n recent idx ");
    COM_TRACE_INT(n_recent_idx);
    COM_TRACE_STR("\n");
}
#endif
#if USE_SP_TEMP || USE_IBC_TEMP
static int enc_exgolomb_abs_mvd(u32 act_sym, u8 exp_golomb_order)
{
    while (1)
    {
        if (act_sym >= (unsigned int)(1 << exp_golomb_order))
        {
            //sbac_encode_bin_ep(0, sbac, bs);
            aec_stage3_phase2( 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            act_sym = act_sym - (1 << exp_golomb_order);
            exp_golomb_order++;
        }
        else
        {
            //sbac_encode_bin_ep(1, sbac, bs);
            aec_stage3_phase2( 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            while (exp_golomb_order--) //next binary part
            {
                //sbac_encode_bin_ep((unsigned char)((act_sym >> exp_golomb_order) & 1), sbac, bs);
                aec_stage3_phase2( 1, 1, (unsigned char)((act_sym >> exp_golomb_order) & 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            break;
        }
    }
    return COM_OK;
}
#endif
#if USE_IBC_TEMP || USE_SP_TEMP
#if USE_IBC
static int enc_eco_abs_bvdy(u32 sym, u32 bvdx, SBAC_CTX_MODEL model)
{
    if (bvdx == 0)
    {
        if (sym < 17)
        {
            if (sym == 0)
            {
                //enc_sbac_encode_bin(0, sbac, model + 7, bs);
                aec_stage3_phase2( 1, 0, 0, (model + 7 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            else if (sym == 1)
            {
                //enc_sbac_encode_bin(1, sbac, model + 7, bs);
                //enc_sbac_encode_bin(0, sbac, model + 1, bs);
                aec_stage3_phase2( 1, 0, 1, (model + 7  + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 0, (model + 1  + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            else if (sym == 2)
            {
                //enc_sbac_encode_bin(1, sbac, model + 7, bs);
                //enc_sbac_encode_bin(1, sbac, model + 1, bs);
                //enc_sbac_encode_bin(0, sbac, model + 2, bs);
                aec_stage3_phase2( 1, 0, 1, (model + 7  + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 1  + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 0, (model + 2  + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            else if (sym == 3)
            {
                //enc_sbac_encode_bin(1, sbac, model + 7, bs);
                //enc_sbac_encode_bin(1, sbac, model + 1, bs);
                //enc_sbac_encode_bin(1, sbac, model + 2, bs);
                //enc_sbac_encode_bin(0, sbac, model + 3, bs);
                aec_stage3_phase2( 1, 0, 1, (model + 7 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 0, (model + 3 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            else if (sym == 4)
            {
                //enc_sbac_encode_bin(1, sbac, model + 7, bs);
                //enc_sbac_encode_bin(1, sbac, model + 1, bs);
                //enc_sbac_encode_bin(1, sbac, model + 2, bs);
                //enc_sbac_encode_bin(1, sbac, model + 3, bs);
                //enc_sbac_encode_bin(0, sbac, model + 4, bs);
                aec_stage3_phase2( 1, 0, 1, (model + 7 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 3 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 0, (model + 4 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            else if (sym < 9)
            {
                //enc_sbac_encode_bin(1, sbac, model + 7, bs);
                //enc_sbac_encode_bin(1, sbac, model + 1, bs);
                //enc_sbac_encode_bin(1, sbac, model + 2, bs);
                //enc_sbac_encode_bin(1, sbac, model + 3, bs);
                //enc_sbac_encode_bin(1, sbac, model + 4, bs);
                //enc_sbac_encode_bin(0, sbac, model + 5, bs);
                aec_stage3_phase2( 1, 0, 1, (model + 7 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 3 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 4 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 0, (model + 5 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                //flc
                int len = 2;
                int m = 1 << (len - 1);
                sym = sym - 5;
                for (int i = 0; i < len; i++)
                {
                    //sbac_encode_bin_ep(((sym & m) == 0 ? 0 : 1), sbac, bs);
                    aec_stage3_phase2( 1, 1, ((sym & m) == 0 ? 0 : 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                    m = m >> 1;
                }
            }
            else if (sym < 17)
            {
                //enc_sbac_encode_bin(1, sbac, model + 7, bs);
                //enc_sbac_encode_bin(1, sbac, model + 1, bs);
                //enc_sbac_encode_bin(1, sbac, model + 2, bs);
                //enc_sbac_encode_bin(1, sbac, model + 3, bs);
                //enc_sbac_encode_bin(1, sbac, model + 4, bs);
                //enc_sbac_encode_bin(1, sbac, model + 5, bs);
                //enc_sbac_encode_bin(0, sbac, model + 6, bs);
                aec_stage3_phase2( 1, 0, 1, (model + 7 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 3 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 4 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 5 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 0, (model + 6 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                //flc
                int len = 3;
                int m = 1 << (len - 1);
                sym = sym - 9;
                for (int i = 0; i < len; i++)
                {
                    //sbac_encode_bin_ep(((sym & m) == 0 ? 0 : 1), sbac, bs);
                    aec_stage3_phase2( 1, 1, ((sym & m) == 0 ? 0 : 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                    m = m >> 1;
                }
            }
        }
        else
        {
            //enc_sbac_encode_bin(1, sbac, model + 7, bs);
            //enc_sbac_encode_bin(1, sbac, model + 1, bs);
            //enc_sbac_encode_bin(1, sbac, model + 2, bs);
            //enc_sbac_encode_bin(1, sbac, model + 3, bs);
            //enc_sbac_encode_bin(1, sbac, model + 4, bs);
            //enc_sbac_encode_bin(1, sbac, model + 5, bs);
            //enc_sbac_encode_bin(1, sbac, model + 6, bs);
            aec_stage3_phase2( 1, 0, 1, (model + 7 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 3 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 4 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 5 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 6 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

            int offset;

            sym -= 17;
            offset = sym & 1;

            //sbac_encode_bin_ep(offset, sbac, bs);
            aec_stage3_phase2( 1, 1, offset, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            sym = (sym - offset) >> 1;

            // exp_golomb part
            enc_exgolomb_abs_mvd(sym, BVD_EXG_ORDER);
        }
    }
    else
    {
        if (sym < 17)
        {
            if (sym == 0)
            {
                //enc_sbac_encode_bin(0, sbac, model, bs);
                aec_stage3_phase2( 1, 0, 0, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            else if (sym == 1)
            {
                //enc_sbac_encode_bin(1, sbac, model, bs);
                //enc_sbac_encode_bin(0, sbac, model + 1, bs);
                aec_stage3_phase2( 1, 0, 1, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 0, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            else if (sym == 2)
            {
                //enc_sbac_encode_bin(1, sbac, model, bs);
                //enc_sbac_encode_bin(1, sbac, model + 1, bs);
                //enc_sbac_encode_bin(0, sbac, model + 2, bs);
                aec_stage3_phase2( 1, 0, 1, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 0, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            else if (sym == 3)
            {
                //enc_sbac_encode_bin(1, sbac, model, bs);
                //enc_sbac_encode_bin(1, sbac, model + 1, bs);
                //enc_sbac_encode_bin(1, sbac, model + 2, bs);
                //enc_sbac_encode_bin(0, sbac, model + 3, bs);
                aec_stage3_phase2( 1, 0, 1, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 0, (model + 3 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            else if (sym == 4)
            {
                //enc_sbac_encode_bin(1, sbac, model, bs);
                //enc_sbac_encode_bin(1, sbac, model + 1, bs);
                //enc_sbac_encode_bin(1, sbac, model + 2, bs);
                //enc_sbac_encode_bin(1, sbac, model + 3, bs);
                //enc_sbac_encode_bin(0, sbac, model + 4, bs);
                aec_stage3_phase2( 1, 0, 1, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 3 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 0, (model + 4 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            else if (sym < 9)
            {
                //enc_sbac_encode_bin(1, sbac, model, bs);
                //enc_sbac_encode_bin(1, sbac, model + 1, bs);
                //enc_sbac_encode_bin(1, sbac, model + 2, bs);
                //enc_sbac_encode_bin(1, sbac, model + 3, bs);
                //enc_sbac_encode_bin(1, sbac, model + 4, bs);
                //enc_sbac_encode_bin(0, sbac, model + 5, bs);
                aec_stage3_phase2( 1, 0, 1, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 3 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 4 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 0, (model + 5 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                //flc
                int len = 2;
                int m = 1 << (len - 1);
                sym = sym - 5;
                for (int i = 0; i < len; i++)
                {
                    //sbac_encode_bin_ep(((sym & m) == 0 ? 0 : 1), sbac, bs);
                    aec_stage3_phase2( 1, 1, ((sym & m) == 0 ? 0 : 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                    m = m >> 1;
                }
            }
            else if (sym < 17)
            {
                //enc_sbac_encode_bin(1, sbac, model, bs);
                //enc_sbac_encode_bin(1, sbac, model + 1, bs);
                //enc_sbac_encode_bin(1, sbac, model + 2, bs);
                //enc_sbac_encode_bin(1, sbac, model + 3, bs);
                //enc_sbac_encode_bin(1, sbac, model + 4, bs);
                //enc_sbac_encode_bin(1, sbac, model + 5, bs);
                //enc_sbac_encode_bin(0, sbac, model + 6, bs);
                aec_stage3_phase2( 1, 0, 1, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 3 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 4 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 1, (model + 5 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                aec_stage3_phase2( 1, 0, 0, (model + 6 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                //flc
                int len = 3;
                int m = 1 << (len - 1);
                sym = sym - 9;
                for (int i = 0; i < len; i++)
                {
                    //sbac_encode_bin_ep(((sym & m) == 0 ? 0 : 1), sbac, bs);
                    aec_stage3_phase2( 1, 1, ((sym & m) == 0 ? 0 : 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                    m = m >> 1;
                }
            }
        }
        else
        {
            //enc_sbac_encode_bin(1, sbac, model, bs);
            //enc_sbac_encode_bin(1, sbac, model + 1, bs);
            //enc_sbac_encode_bin(1, sbac, model + 2, bs);
            //enc_sbac_encode_bin(1, sbac, model + 3, bs);
            //enc_sbac_encode_bin(1, sbac, model + 4, bs);
            //enc_sbac_encode_bin(1, sbac, model + 5, bs);
            //enc_sbac_encode_bin(1, sbac, model + 6, bs);
            aec_stage3_phase2( 1, 0, 1, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 3 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 4 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 5 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 6 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

            int offset;

            sym -= 17;
            offset = sym & 1;

            //sbac_encode_bin_ep(offset, sbac, bs);
            aec_stage3_phase2( 1, 1, offset, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            sym = (sym - offset) >> 1;

            // exp_golomb part
            enc_exgolomb_abs_mvd(sym, BVD_EXG_ORDER);
        }
    }
    return COM_OK;
}
#endif
static int enc_eco_abs_bvd(u32 sym, SBAC_CTX_MODEL model)
{
    if (sym < 17)
    {
        if (sym == 0)
        {
            //enc_sbac_encode_bin(0, sbac, model, bs);
            aec_stage3_phase2( 1, 0, 0, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        else if (sym == 1)
        {
            //enc_sbac_encode_bin(1, sbac, model, bs);
            //enc_sbac_encode_bin(0, sbac, model + 1, bs);
            aec_stage3_phase2( 1, 0, 1, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 0, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        else if (sym == 2)
        {
            //enc_sbac_encode_bin(1, sbac, model, bs);
            //enc_sbac_encode_bin(1, sbac, model + 1, bs);
            //enc_sbac_encode_bin(0, sbac, model + 2, bs);
            aec_stage3_phase2( 1, 0, 1, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 0, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        else if (sym == 3)
        {
            //enc_sbac_encode_bin(1, sbac, model, bs);
            //enc_sbac_encode_bin(1, sbac, model + 1, bs);
            //enc_sbac_encode_bin(1, sbac, model + 2, bs);
            //enc_sbac_encode_bin(0, sbac, model + 3, bs);
            aec_stage3_phase2( 1, 0, 1, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 0, (model + 3 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        else if (sym == 4)
        {
            //enc_sbac_encode_bin(1, sbac, model, bs);
            //enc_sbac_encode_bin(1, sbac, model + 1, bs);
            //enc_sbac_encode_bin(1, sbac, model + 2, bs);
            //enc_sbac_encode_bin(1, sbac, model + 3, bs);
            //enc_sbac_encode_bin(0, sbac, model + 4, bs);
            aec_stage3_phase2( 1, 0, 1, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 3 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 0, (model + 4 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        else if (sym < 9)
        {
            //enc_sbac_encode_bin(1, sbac, model, bs);
            //enc_sbac_encode_bin(1, sbac, model + 1, bs);
            //enc_sbac_encode_bin(1, sbac, model + 2, bs);
            //enc_sbac_encode_bin(1, sbac, model + 3, bs);
            //enc_sbac_encode_bin(1, sbac, model + 4, bs);
            //enc_sbac_encode_bin(0, sbac, model + 5, bs);
            aec_stage3_phase2( 1, 0, 1, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 3 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 4 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 0, (model + 5 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            //flc
            int len = 2;
            int m = 1 << (len - 1);
            sym = sym - 5;
            for (int i = 0; i < len; i++)
            {
                //sbac_encode_bin_ep(((sym & m) == 0 ? 0 : 1), sbac, bs);
                aec_stage3_phase2( 1, 1, ((sym & m) == 0 ? 0 : 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                m = m >> 1;
            }
        }
        else if (sym < 17)
        {
            //enc_sbac_encode_bin(1, sbac, model, bs);
            //enc_sbac_encode_bin(1, sbac, model + 1, bs);
            //enc_sbac_encode_bin(1, sbac, model + 2, bs);
            //enc_sbac_encode_bin(1, sbac, model + 3, bs);
            //enc_sbac_encode_bin(1, sbac, model + 4, bs);
            //enc_sbac_encode_bin(1, sbac, model + 5, bs);
            //enc_sbac_encode_bin(0, sbac, model + 6, bs);
            aec_stage3_phase2( 1, 0, 1, (model+ 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 3 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 4 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 1, (model + 5 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            aec_stage3_phase2( 1, 0, 0, (model + 6 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            //flc
            int len = 3;
            int m = 1 << (len - 1);
            sym = sym - 9;
            for (int i = 0; i < len; i++)
            {
                //sbac_encode_bin_ep(((sym & m) == 0 ? 0 : 1), sbac, bs);
                aec_stage3_phase2( 1, 1, ((sym & m) == 0 ? 0 : 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                m = m >> 1;
            }
        }
    }
    else
    {
        //enc_sbac_encode_bin(1, sbac, model, bs);
        //enc_sbac_encode_bin(1, sbac, model + 1, bs);
        //enc_sbac_encode_bin(1, sbac, model + 2, bs);
        //enc_sbac_encode_bin(1, sbac, model + 3, bs);
        //enc_sbac_encode_bin(1, sbac, model + 4, bs);
        //enc_sbac_encode_bin(1, sbac, model + 5, bs);
        //enc_sbac_encode_bin(1, sbac, model + 6, bs);
        aec_stage3_phase2( 1, 0, 1, (model + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aec_stage3_phase2( 1, 0, 1, (model + 1 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aec_stage3_phase2( 1, 0, 1, (model + 2 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aec_stage3_phase2( 1, 0, 1, (model + 3 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aec_stage3_phase2( 1, 0, 1, (model + 4 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aec_stage3_phase2( 1, 0, 1, (model + 5 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        aec_stage3_phase2( 1, 0, 0, (model + 6 + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        int offset;

        sym -= 17;
        offset = sym & 1;

        //sbac_encode_bin_ep(offset, sbac, bs);
        aec_stage3_phase2( 1, 1, offset, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        sym = (sym - offset) >> 1;

        // exp_golomb part
        enc_exgolomb_abs_mvd(sym, BVD_EXG_ORDER);
    }
    return COM_OK;
}


#if IBC_ABVR
int encode_bvr_idx(u8 bvr_idx)
{
    sbac_write_truncate_unary_sym(bvr_idx >> 1, NUM_BVR_IDX_CTX, MAX_NUM_BVR, 97);

    COM_TRACE_COUNTER;
    COM_TRACE_STR("bvr idx ");
    COM_TRACE_INT(bvr_idx);
    COM_TRACE_STR("\n");
    return COM_OK;
}
#endif



#if USE_IBC
int encode_bvd(s16 mvd[MV_D])
{
    int            t0;
    u32            mv;
    t0 = 0;
    mv = mvd[MV_X];
    if (mvd[MV_X] < 0)
    {
        t0 = 1;
        mv = -mvd[MV_X];
    }
    enc_eco_abs_bvd(mv, 107);
    if (mv)
    {
        //sbac_encode_bin_ep(t0, sbac, bs);
        aec_stage3_phase2( 1, 1, t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    t0 = 0;
    mv = mvd[MV_Y];
    if (mvd[MV_Y] < 0)
    {
        t0 = 1;
        mv = -mvd[MV_Y];
    }

    enc_eco_abs_bvdy(mv, mvd[MV_X],115);

    if (mv)
    {
        //sbac_encode_bin_ep(t0, sbac, bs);
        aec_stage3_phase2( 1, 1, t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    COM_TRACE_COUNTER;
    COM_TRACE_STR("mvd x ");
    COM_TRACE_INT(mvd[MV_X]);
    COM_TRACE_STR("mvd y ");
    COM_TRACE_INT(mvd[MV_Y]);
    COM_TRACE_STR("\n");
    return COM_OK;
}
#endif
#endif

#if BGC_TEMP
void encode_bgc_flag(int flag, int idx)
{
    //enc_sbac_encode_bin(flag, sbac, &sbac->ctx.bgc_flag, bs);
    aec_stage3_phase2( 1, 0, flag, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    COM_TRACE_COUNTER;
    COM_TRACE_STR("bgc flag ");
    COM_TRACE_INT(flag);
    COM_TRACE_STR("\n");
    if (flag)
    {
        //enc_sbac_encode_bin(idx, sbac, &sbac->ctx.bgc_idx, bs);
        aec_stage3_phase2( 1, 0, idx, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        COM_TRACE_COUNTER;
        COM_TRACE_STR("bgc idx ");
        COM_TRACE_INT(idx);
        COM_TRACE_STR("\n");
    }
}
#endif

#if IIP_TEMP
int encode_iip_flag(u8 iip_flag)
{
    //enc_sbac_encode_bin(iip_flag, sbac, sbac->ctx.iip_flag, bs);
    aec_stage3_phase2( 1, 0, iip_flag, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

    COM_TRACE_COUNTER;
    COM_TRACE_STR("iip flag ");
    COM_TRACE_INT(iip_flag);
    COM_TRACE_STR("\n");

    return COM_OK;
}
#endif

//void sp_save_last_srb(void* sp_encoder, ENC_CU_DATA* cu_data, int cup)
//{
//    ((string_prediction*)sp_encoder)->save_last_srb(cu_data, cup);
//}

#if SAWP_TEMP
int encode_sawp_dir(u8 ipm, u8 mpm[SAWP_MPM_NUM])
{
#if SAWP_MPM_SIMP
    int ipm_code = ipm == mpm[0] ? -2 : mpm[1] == ipm ? -1 : ipm < mpm[0] ? ipm : ipm < mpm[1] ? ipm - 1 : ipm - 2;
    if (ipm_code > 0)
    {
        ipm_code -= 5;
    }
    if (ipm_code < 0)
    {
        //enc_sbac_encode_bin(1, sbac, sbac->ctx.intra_dir, bs);
        aec_stage3_phase2( 1, 0, 1, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        sbac_encode_bins_ep_msb(ipm_code + 2, 1);
    }
    else
    {
        //enc_sbac_encode_bin(0, sbac, sbac->ctx.intra_dir, bs);
        aec_stage3_phase2( 1, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        if (ipm_code % 3 == 2)
        {
            sbac_encode_bins_ep_msb(1, 1);
            sbac_encode_bins_ep_msb(ipm_code / 3, 3);
        }
        else
        {
            sbac_encode_bins_ep_msb(0, 1);
            sbac_encode_bins_ep_msb(ipm_code / 3, 3);
            sbac_encode_bins_ep_msb(ipm_code % 3, 1);
        }
    }
#else // SAWP_MPM_SIMP
    int ipm_code = ipm == mpm[0] ? -4 : mpm[1] == ipm ? -3 : mpm[2] == ipm ? -2 : mpm[3] == ipm ? -1 : ipm < mpm[0] ? ipm : ipm < mpm[1] ? ipm - 1 : ipm < mpm[2] ? ipm - 2 : ipm < mpm[3] ? ipm - 3 : ipm - 4;
    if (ipm_code > 0)
    {
        ipm_code -= 4;
    }
    sbac = GET_SBAC_ENC(bs);
    if (ipm_code < 0)
    {
        //enc_sbac_encode_bin(1, sbac, sbac->ctx.intra_dir, bs);
        aec_stage3_phase2(sbac, bs, 1, 0, 1, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        sbac_encode_bins_ep_msb(ipm_code + 4, 2, sbac, bs);
    }
    else
    {
        enc_sbac_encode_bin(0, sbac, sbac->ctx.intra_dir, bs);
        if (ipm_code % 3 == 2)
        {
            sbac_encode_bins_ep_msb(1, 1, sbac, bs);
            sbac_encode_bins_ep_msb(ipm_code / 3, 3, sbac, bs);
        }
        else
        {
            sbac_encode_bins_ep_msb(0, 1, sbac, bs);
            sbac_encode_bins_ep_msb(ipm_code / 3, 3, sbac, bs);
            sbac_encode_bins_ep_msb(ipm_code % 3, 1, sbac, bs);
        }
    }
#endif // SAWP_MPM_SIMP
    COM_TRACE_COUNTER;
    COM_TRACE_STR("sawp ipm Y ");
    COM_TRACE_INT(ipm);
    COM_TRACE_STR(" mpm_0 ");
    COM_TRACE_INT(mpm[0]);
    COM_TRACE_STR(" mpm_1 ");
    COM_TRACE_INT(mpm[1]);
    COM_TRACE_STR(" mpm_2 ");
    COM_TRACE_INT(mpm[2]);
    COM_TRACE_STR(" mpm_3 ");
    COM_TRACE_INT(mpm[3]);
    COM_TRACE_STR("\n");
    return COM_OK;
}

int encode_sawp_dir1(u8 ipm, u8 mpm[SAWP_MPM_NUM], u8 dir0)
{
    ENC_SBAC* sbac;
#if SAWP_MPM_SIMP
    int ipm_code = ipm == mpm[0] ? -2 : mpm[1] == ipm ? -1 : ipm < mpm[0] ? ipm : ipm < mpm[1] ? ipm - 1 : ipm - 2;
    if (ipm_code > 0)
    {
        ipm_code -= 5;
    }
    if (ipm_code < 0)
    {
        //enc_sbac_encode_bin(1, sbac, sbac->ctx.intra_dir, bs);
        aec_stage3_phase2( 1, 0, 1, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        int dir0_mpm_idx = -1;
        for (int i = 0; i < SAWP_MPM_NUM; i++)
        {
            if (dir0 == mpm[i])
            {
                dir0_mpm_idx = i;
                break;
            }
        }
        if (dir0_mpm_idx == -1)
        {
            sbac_encode_bins_ep_msb(ipm_code + 2, 1);
        }
    }
    else
    {
        //enc_sbac_encode_bin(0, sbac, sbac->ctx.intra_dir, bs);
        aec_stage3_phase2( 1, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        if (ipm_code % 3 == 2)
        {
            sbac_encode_bins_ep_msb(1, 1);
            sbac_encode_bins_ep_msb(ipm_code / 3, 3);
        }
        else
        {
            sbac_encode_bins_ep_msb(0, 1);
            sbac_encode_bins_ep_msb(ipm_code / 3, 3);
            sbac_encode_bins_ep_msb(ipm_code % 3, 1);
        }
    }
#else // SAWP_MPM_SIMP
    int ipm_code = ipm == mpm[0] ? -4 : mpm[1] == ipm ? -3 : mpm[2] == ipm ? -2 : mpm[3] == ipm ? -1 : ipm < mpm[0] ? ipm : ipm < mpm[1] ? ipm - 1 : ipm < mpm[2] ? ipm - 2 : ipm < mpm[3] ? ipm - 3 : ipm - 4;
    if (ipm_code > 0)
    {
        ipm_code -= 4;
    }
    sbac = GET_SBAC_ENC(bs);
    if (ipm_code < 0)
    {
        //enc_sbac_encode_bin(1, sbac, sbac->ctx.intra_dir, bs);
        aec_stage3_phase2(sbac, bs, 1, 0, 1, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        int dir0_mpm_idx = -1;
        for (int i = 0; i < SAWP_MPM_NUM; i++)
        {
            if (dir0 == mpm[i])
            {
                dir0_mpm_idx = i;
                break;
            }
        }
        if (dir0_mpm_idx == -1)
        {
            sbac_encode_bins_ep_msb(ipm_code + 4, 2, sbac, bs);
        }
        else
        {
            int mpm_idx = ipm_code + 4;
            assert(mpm_idx != dir0_mpm_idx);
            if (mpm_idx > dir0_mpm_idx)
            {
                mpm_idx--;
            }
            if (mpm_idx == 0)
            {
                sbac_encode_bins_ep_msb(0, 1, sbac, bs);
            }
            else
            {
                sbac_encode_bins_ep_msb(1, 1, sbac, bs);
                sbac_encode_bins_ep_msb(mpm_idx - 1, 1, sbac, bs);
            }
        }
    }
    else
    {
        //enc_sbac_encode_bin(0, sbac, sbac->ctx.intra_dir, bs);
        aec_stage3_phase2(sbac, bs, 1, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        if (ipm_code % 3 == 2)
        {
            sbac_encode_bins_ep_msb(1, 1, sbac, bs);
            sbac_encode_bins_ep_msb(ipm_code / 3, 3, sbac, bs);
        }
        else
        {
            sbac_encode_bins_ep_msb(0, 1, sbac, bs);
            sbac_encode_bins_ep_msb(ipm_code / 3, 3, sbac, bs);
            sbac_encode_bins_ep_msb(ipm_code % 3, 1, sbac, bs);
        }
    }
#endif // SAWP_MPM_SIMP
    COM_TRACE_COUNTER;
    COM_TRACE_STR("sawp ipm Y ");
    COM_TRACE_INT(ipm);
    COM_TRACE_STR(" mpm_0 ");
    COM_TRACE_INT(mpm[0]);
    COM_TRACE_STR(" mpm_1 ");
    COM_TRACE_INT(mpm[1]);
    COM_TRACE_STR(" mpm_2 ");
    COM_TRACE_INT(mpm[2]);
    COM_TRACE_STR(" mpm_3 ");
    COM_TRACE_INT(mpm[3]);
    COM_TRACE_STR("\n");
    return COM_OK;
}
#endif // SAWP
#if USE_ENH
int enc_eco_unit(u8 pred_mode, int aec_num_delta_qp, int aec_pred_qp, ENC_CTX_HLS* ctx, ENC_CU_DATA* cu_data, COM_MODE* mod_info_curr,
    AEC_inner* AEC_DATA_inner_tmp, int x, int y, int cup, int cu_width, int cu_height, U8 line_idx_in_lcu[3], SRCC_FOR_AEC* srcc_for_aec)
{
    //COM_MODE* mod_info_curr = &core->mod_info_curr;
    COM_SQH* sqh = &ctx->info.sqh;
    //s16 coef[3][MAX_CU_DIM] = { 0 };/*= core->ctmp;*/
    //u32* map_scu;
    u32* map_scu;
    int slice_type, refi0, refi1;
    int i, j, w, h;
    //ENC_CU_DATA* cu_data = &ctx->ctu_map_cu_data;
    //u32* map_cu_mode;
    int cu_cbf_flag;
#if TB_SPLIT_EXT
    //u32* map_pb_tb_part;
#endif
    slice_type = ctx->slice_type;

#if EPMC_TEMP
    if (AEC_DATA_inner_tmp->tree_status != TREE_L)
    {
        u8 ipm_chroma = cu_data->ipm[1][cup];
    }
#endif
    if (!AEC_DATA_inner_tmp->skip_flag)
    {
        /* get coefficients and tq */
        //coef_rect_to_series(ctx, cu_data->coef_y, cu_data->coef_u, cu_data->coef_v, x, y, cu_width, cu_height, coef);
#if CUDQP_PLATFORM_BUGFIX
        int sta_comp = AEC_DATA_inner_tmp->tree_status == TREE_C ? U_C : Y_C;
        int end_comp = AEC_DATA_inner_tmp->tree_status == TREE_L ? Y_C : V_C;
        for (i = sta_comp; i <= end_comp; i++)
#else
        for (i = 0; i < N_C; i++)
#endif
        {
            COM_MODE* mi = mod_info_curr;
            int part_num = get_part_num((PART_SIZE)(i == 0 ? mi->tb_part : SIZE_2Nx2N));

            for (j = 0; j < part_num; j++)
            {
                int pos_x, pos_y, tbp;
                get_tb_start_pos_aec(cu_width, cu_height, (PART_SIZE)(i == 0 ? mi->tb_part : SIZE_2Nx2N), j, &pos_x, &pos_y);
                pos_x >>= MIN_CU_LOG2;
                pos_y >>= MIN_CU_LOG2;
                tbp = cup + pos_y * (ctx->info.max_cuwh >> MIN_CU_LOG2) + pos_x;
                mi->num_nz[j][i] = cu_data->num_nz_coef[i][tbp];
            }
        }
#if INTERPF
        mod_info_curr->inter_filter_flag = cu_data->inter_filter_flag[cup];
#endif
#if IPC_TEMP
        mod_info_curr->ipc_flag = 0;// cu_data->ipc_flag[cup];
#endif
    }
//if (AEC_DATA_inner_tmp->skip_flag) {
//        int num_nz_temp[3];
//        int num_nz_y = 0;
//        int num_nz_u = 0;
//        int num_nz_v = 0;
//        for (int i = 0; i < 3; i++)
//        {
//            int pos_x, pos_y, tbp;
//            get_tb_start_pos(cu_width, cu_height, (PART_SIZE)(i == 0 ? mod_info_curr->tb_part : SIZE_2Nx2N), 0, &pos_x, &pos_y);
//            pos_x >>= MIN_CU_LOG2;
//            pos_y >>= MIN_CU_LOG2;
//            tbp = cup + pos_y * (ctx->info.max_cuwh >> MIN_CU_LOG2) + pos_x;
//            num_nz_temp[i] = cu_data->num_nz_coef[i][tbp];
//        }
//        num_nz_y = num_nz_temp[0];
//        num_nz_u = num_nz_temp[1];
//        num_nz_v = num_nz_temp[2];
//        int sr_x = 0;
//        int sr_y = 0;
//        int num_coef = 0;
//        //y
//        if (num_nz_y)
//        {
//            sr_x = (num_nz_y >> 12) & 0xff;
//            sr_y = (num_nz_y >> 20) & 0xff;
//            num_coef = (sr_x + 1) * (sr_y + 1);
//            /*do
//            {
//                line_idx->line_idx_in_lcu_y++;
//                num_coef = num_coef - 16;
//            } while (num_coef / 16);*/
//            int n = num_coef / 16;
//            line_idx->line_idx_in_lcu_y = line_idx->line_idx_in_lcu_y + n + 1;
//        }
//        //u
//        if (num_nz_u)
//        {
//            sr_x = (num_nz_u >> 12) & 0xff;
//            sr_y = (num_nz_u >> 20) & 0xff;
//            num_coef = (sr_x + 1) * (sr_y + 1);
//           /* do
//            {
//                line_idx->line_idx_in_lcu_u++;
//                num_coef = num_coef - 16;
//            } while (num_coef / 16);*/
//            int n = num_coef / 16;
//            line_idx->line_idx_in_lcu_y = line_idx->line_idx_in_lcu_y + n + 1;
//        }
//        //v
//        if (num_nz_v)
//        {
//            sr_x = (num_nz_v >> 12) & 0xff;
//            sr_y = (num_nz_v >> 20) & 0xff;
//            num_coef = (sr_x + 1) * (sr_y + 1);
//            /*do
//            {
//                line_idx->line_idx_in_lcu_v++;
//                num_coef = num_coef - 16;
//            } while (num_coef / 16);*/
//            int n = num_coef / 16;
//            line_idx->line_idx_in_lcu_y = line_idx->line_idx_in_lcu_y + n + 1;
//        }
//    }

    /* entropy coding a CU */
    if (slice_type != SLICE_I)
    {
#if MODE_CONS
        if (AEC_DATA_inner_tmp->cons_pred_mode == ONLY_INTRA)
        {
            assert(AEC_DATA_inner_tmp->skip_flag == 0 && (pred_mode == MODE_INTRA || pred_mode == 4/*MODE_IBC*/));
        }
#endif

        if (AEC_DATA_inner_tmp->cons_pred_mode != ONLY_INTRA)
        {
            encode_skip_flag(AEC_DATA_inner_tmp, mod_info_curr, AEC_DATA_inner_tmp->skip_flag, ctx);
        }
        if (AEC_DATA_inner_tmp->skip_flag)
        {
#if INTERPF
            assert(cu_data->inter_filter_flag[cup] == 0);
#endif

            int UmveAwpFlag = cu_data->umve_flag[cup] || cu_data->awp_flag[cup]
#if ETMVP_TEMP
                || cu_data->etmvp_flag[cup]
#endif
                ;

            if (sqh->umve_enable_flag || (sqh->awp_enable_flag
                && cu_width >= MIN_AWP_SIZE && cu_height >= MIN_AWP_SIZE && cu_width <= MAX_AWP_SIZE && cu_height <= MAX_AWP_SIZE)

#if ETMVP_TEMP
                || (sqh->etmvp_enable_flag && cu_width >= MIN_ETMVP_SIZE && cu_height >= MIN_ETMVP_SIZE)
#endif
                )
            {
                encode_umve_awp_flag(UmveAwpFlag);
            }

#if ETMVP_TEMP
            if (UmveAwpFlag && sqh->etmvp_enable_flag
#if ETMVP_FLAG_BUG_FIX
                && (sqh->umve_enable_flag || (sqh->awp_enable_flag
                    && cu_width >= MIN_AWP_SIZE && cu_height >= MIN_AWP_SIZE && cu_width <= MAX_AWP_SIZE && cu_height <= MAX_AWP_SIZE))

#endif
                )
            {
                encode_etmvp_flag(mod_info_curr->cu_width, mod_info_curr->cu_height, cu_data->etmvp_flag[cup] != 0); /* skip etmvp_flag */
            }

            if (!cu_data->etmvp_flag[cup])
            {
#endif
#if 0
                if (UmveAwpFlag && sqh->umve_enable_flag && sqh->awp_enable_flag
                    && cu_width >= MIN_AWP_SIZE && cu_height >= MIN_AWP_SIZE && cu_width <= MAX_AWP_SIZE && cu_height <= MAX_AWP_SIZE)
                {
                    encode_awp_flag(cu_data->awp_flag[cup]);
                    assert(cu_data->awp_flag[cup] != cu_data->umve_flag[cup]);
                }
#endif
#if ETMVP_TEMP
            }
#endif
#if 0
            if (cu_data->awp_flag[cup])
            {
#if AWP_MVR_TEMP
                if (sqh->awp_mvr_enable_flag && slice_type == SLICE_B)

                {
                    encode_awp_mvr_flag(cu_data->awp_mvr_flag0[cup]);
                    if (cu_data->awp_mvr_flag0[cup])
                    {
                        encode_awp_mvr_idx(cu_data->awp_mvr_idx0[cup]);
                    }
                    encode_awp_mvr_flag(cu_data->awp_mvr_flag1[cup]);
                    if (cu_data->awp_mvr_flag1[cup])
                    {
                        encode_awp_mvr_idx(cu_data->awp_mvr_idx1[cup]);
                    }

                    if (!cu_data->awp_mvr_flag0[cup] && !cu_data->awp_mvr_flag1[cup])
                    {
                        encode_awp_mode(mod_info_curr->cu_width_log2, mod_info_curr->cu_height_log2, cu_data->skip_idx[cup], cu_data->awp_idx0[cup], cu_data->awp_idx1[cup], ctx);
                    }
                    else if (cu_data->awp_mvr_flag0[cup] && cu_data->awp_mvr_flag1[cup])
                    {
                        if (cu_data->awp_mvr_idx0[cup] == cu_data->awp_mvr_idx1[cup])
                        {
                            encode_awp_mode(mod_info_curr->cu_width_log2, mod_info_curr->cu_height_log2, cu_data->skip_idx[cup], cu_data->awp_idx0[cup], cu_data->awp_idx1[cup], ctx);
                        }
                        else
                        {
                            encode_awp_mode1(cu_data->skip_idx[cup], cu_data->awp_idx0[cup], cu_data->awp_idx1[cup]);
                        }
                    }
                    else
                    {
                        encode_awp_mode1(cu_data->skip_idx[cup], cu_data->awp_idx0[cup], cu_data->awp_idx1[cup]);
                    }
                }
                else
#endif
                    encode_awp_mode(mod_info_curr->cu_width_log2, mod_info_curr->cu_height_log2, cu_data->skip_idx[cup], cu_data->awp_idx0[cup], cu_data->awp_idx1[cup], ctx);
            }
            else if (cu_data->umve_flag[cup])
#else
            if (cu_data->umve_flag[cup])
#endif
            {
#if UMVE_ENH 
#if IPC_TEMP
                if (sqh->ipc_enable_flag && mod_info_curr->cu_width * mod_info_curr->cu_height >= IPC_MIN_BLK && ctx->info.pic_header.ph_ipc_flag && (mod_info_curr->cu_width <= IPC_MAX_WD && mod_info_curr->cu_height <= IPC_MAX_HT))
                {
                    encode_ipc_flag(cu_data->ipc_flag[cup]);
                }
#endif 
#if 0
                if (ctx->info.pic_header.umve_set_flag)
                {
                    encode_umve_idx_sec_set(cu_data->umve_idx[cup]);
                    if (ctx->dataCol)
                    {
                        int base_idx = cu_data->umve_idx[cup] / UMVE_MAX_REFINE_NUM_SEC_SET;
                        int ref_step = (cu_data->umve_idx[cup] - (base_idx * UMVE_MAX_REFINE_NUM_SEC_SET)) / 4;
                        assert(ref_step < UMVE_REFINE_STEP_SEC_SET);
                        //ctx->umveOffsetPicCount[ref_step] ++;
                    }
                }
                else
#endif
                {
                    encode_umve_idx(cu_data->umve_idx[cup]);
                    if (ctx->dataCol)
                    {
                        int base_idx = cu_data->umve_idx[cup] / UMVE_MAX_REFINE_NUM;
                        int ref_step = (cu_data->umve_idx[cup] - (base_idx * UMVE_MAX_REFINE_NUM)) / 4;
                        assert(ref_step < UMVE_REFINE_STEP);
                        //ctx->umveOffsetPicCount[ref_step] ++;
                    }
                }
#else
                encode_umve_idx(bs, cu_data->umve_idx[cup]);
#endif
            }
#if ETMVP_TEMP
            else if (cu_data->etmvp_flag[cup])
            {
                encode_etmvp_idx(cu_data->skip_idx[cup]);
            }
#endif
            else
            {
                encode_affine_flag(mod_info_curr->affine_flag != 0, ctx, cu_width, cu_height);
#if 0
                if (mod_info_curr->affine_flag)
                {
#if AFFINE_UMVE_TEMP
                    if (sqh->affine_umve_enable_flag)
                    {
                        encode_affine_umve_flag(mod_info_curr->affine_umve_flag != 0);
                    }
#endif
                    encode_affine_mrg_idx(cu_data->skip_idx[cup]);
#if AFFINE_UMVE_TEMP
                    if (mod_info_curr->affine_umve_flag)
                    {
                        encode_affine_umve_idx(cu_data->affine_umve_idx[0][cup]);
                        encode_affine_umve_idx(cu_data->affine_umve_idx[1][cup]);
                    }
#endif

                }
                else
#endif
                {
#if IPC_TEMP
                    if (sqh->ipc_enable_flag && mod_info_curr->cu_width * mod_info_curr->cu_height >= IPC_MIN_BLK && ctx->info.pic_header.ph_ipc_flag && (mod_info_curr->cu_width <= IPC_MAX_WD && mod_info_curr->cu_height <= IPC_MAX_HT))
                    {
                        encode_ipc_flag(cu_data->ipc_flag[cup]);
                    }
#endif                     
                    encode_skip_idx(cu_data->skip_idx[cup], sqh->num_of_hmvp_cand,
#if MVAP_TEMP
                        sqh->num_of_mvap_cand,
#endif
                        ctx);
                }
            }
        }
        else
        {
            if (AEC_DATA_inner_tmp->cons_pred_mode != ONLY_INTRA)
            {
                encode_direct_flag(mod_info_curr->cu_width_log2, mod_info_curr->cu_height_log2, pred_mode == MODE_DIR);
            }
            if (pred_mode == MODE_DIR)
            {

                int UmveAwpFlag = cu_data->umve_flag[cup] || cu_data->awp_flag[cup]
#if ETMVP_TEMP
                    || cu_data->etmvp_flag[cup]
#endif
                    ;
                if (sqh->umve_enable_flag || (sqh->awp_enable_flag
                    && cu_width >= MIN_AWP_SIZE && cu_height >= MIN_AWP_SIZE && cu_width <= MAX_AWP_SIZE && cu_height <= MAX_AWP_SIZE)

#if ETMVP_TEMP
                    || (sqh->etmvp_enable_flag && cu_width >= MIN_ETMVP_SIZE && cu_height >= MIN_ETMVP_SIZE)
#endif
                    )
                {
                    encode_umve_awp_flag(UmveAwpFlag);
                }

#if ETMVP_TEMP
                if (UmveAwpFlag && sqh->etmvp_enable_flag
#if ETMVP_FLAG_BUG_FIX
                    && (sqh->umve_enable_flag || (sqh->awp_enable_flag
                        && cu_width >= MIN_AWP_SIZE && cu_height >= MIN_AWP_SIZE && cu_width <= MAX_AWP_SIZE && cu_height <= MAX_AWP_SIZE))

#endif
                    )
                {
                    encode_etmvp_flag(mod_info_curr->cu_width, mod_info_curr->cu_height, cu_data->etmvp_flag[cup] != 0); /* skip etmvp_flag */
                }

                if (!cu_data->etmvp_flag[cup])
                {
#endif
#if 0
                    if (UmveAwpFlag && sqh->umve_enable_flag && sqh->awp_enable_flag
                        && cu_width >= MIN_AWP_SIZE && cu_height >= MIN_AWP_SIZE && cu_width <= MAX_AWP_SIZE && cu_height <= MAX_AWP_SIZE)

                    {
                        encode_awp_flag(cu_data->awp_flag[cup]);
                        assert(cu_data->awp_flag[cup] != cu_data->umve_flag[cup]);
                    }
#endif
#if ETMVP_TEMP
                }
#endif
#if 0
                if (cu_data->awp_flag[cup])
                {
#if AWP_MVR_TEMP
#if BAWP
                    if (sqh->awp_mvr_enable_flag && slice_type == SLICE_B)
#else
                    if (ctx->info.sqh->awp_mvr_enable_flag)
#endif
                    {
                        encode_awp_mvr_flag(cu_data->awp_mvr_flag0[cup]);
                        if (cu_data->awp_mvr_flag0[cup])
                        {
                            encode_awp_mvr_idx(cu_data->awp_mvr_idx0[cup]);
                        }
                        encode_awp_mvr_flag(cu_data->awp_mvr_flag1[cup]);
                        if (cu_data->awp_mvr_flag1[cup])
                        {
                            encode_awp_mvr_idx(cu_data->awp_mvr_idx1[cup]);
                        }

                        if (!cu_data->awp_mvr_flag0[cup] && !cu_data->awp_mvr_flag1[cup])
                        {
                            encode_awp_mode(mod_info_curr->cu_width_log2, mod_info_curr->cu_height_log2,cu_data->skip_idx[cup], cu_data->awp_idx0[cup], cu_data->awp_idx1[cup], ctx);
                        }
                        else if (cu_data->awp_mvr_flag0[cup] && cu_data->awp_mvr_flag1[cup])
                        {
                            if (cu_data->awp_mvr_idx0[cup] == cu_data->awp_mvr_idx1[cup])
                            {
                                encode_awp_mode(mod_info_curr->cu_width_log2, mod_info_curr->cu_height_log2, cu_data->skip_idx[cup], cu_data->awp_idx0[cup], cu_data->awp_idx1[cup], ctx);
                            }
                            else
                            {
                                encode_awp_mode1(cu_data->skip_idx[cup], cu_data->awp_idx0[cup], cu_data->awp_idx1[cup]);
                            }
                        }
                        else
                        {
                            encode_awp_mode1(cu_data->skip_idx[cup], cu_data->awp_idx0[cup], cu_data->awp_idx1[cup]);
                        }
                    }
                    else
#endif
                        encode_awp_mode(mod_info_curr->cu_width_log2, mod_info_curr->cu_height_log2, cu_data->skip_idx[cup], cu_data->awp_idx0[cup], cu_data->awp_idx1[cup], ctx);
                }
                else if (cu_data->umve_flag[cup])
#else
                if (cu_data->umve_flag[cup])               
#endif
                {
#if UMVE_ENH
#if INTERPF
                    if (sqh->umve_enh_enable_flag && sqh->interpf_enable_flag && (mod_info_curr->cu_width * mod_info_curr->cu_height >= 64)
                        && (mod_info_curr->cu_width <= 64) && (mod_info_curr->cu_height <= 64))
                    {
                        encode_inter_filter_flag(cu_data->inter_filter_flag[cup]);
                    }
#endif
#if IPC_TEMP
                    if (sqh->ipc_enable_flag && sqh->umve_enh_enable_flag && mod_info_curr->cu_width * mod_info_curr->cu_height >= IPC_MIN_BLK
                        && (mod_info_curr->cu_width <= IPC_MAX_WD && mod_info_curr->cu_height <= IPC_MAX_HT) && !cu_data->inter_filter_flag[cup])
                    {
                        encode_ipc_flag(cu_data->ipc_flag[cup]);
                    }
#endif
#if 0
                    if (ctx->info.pic_header.umve_set_flag)
                    {
                        encode_umve_idx_sec_set(cu_data->umve_idx[cup]);
                        if (ctx->dataCol)
                        {
                            int base_idx = cu_data->umve_idx[cup] / UMVE_MAX_REFINE_NUM_SEC_SET;
                            int ref_step = (cu_data->umve_idx[cup] - (base_idx * UMVE_MAX_REFINE_NUM_SEC_SET)) / 4;
                            assert(ref_step < UMVE_REFINE_STEP_SEC_SET);
                            //ctx->umveOffsetPicCount[ref_step] ++;
                        }
                    }
                    else
#endif
                    {
                        encode_umve_idx(cu_data->umve_idx[cup]);
                        if (ctx->dataCol)
                        {
                            int base_idx = cu_data->umve_idx[cup] / UMVE_MAX_REFINE_NUM;
                            int ref_step = (cu_data->umve_idx[cup] - (base_idx * UMVE_MAX_REFINE_NUM)) / 4;
                            assert(ref_step < UMVE_REFINE_STEP);
                            //ctx->umveOffsetPicCount[ref_step] ++;
                        }
                    }
#else
                    encode_umve_idx(bs, cu_data->umve_idx[cup]);
#endif
                }
#if ETMVP_TEMP
                else if (cu_data->etmvp_flag[cup])
                {
                    encode_etmvp_idx(cu_data->skip_idx[cup]);
                }
#endif
                else
                {
#if 0
                    encode_affine_flag(mod_info_curr->affine_flag != 0, ctx, cu_width, cu_height);
#endif
#if 0
                    if (mod_info_curr->affine_flag)
                    {
#if AFFINE_UMVE_TEMP
                        if (sqh->affine_umve_enable_flag)
                        {
                            encode_affine_umve_flag(mod_info_curr->affine_umve_flag != 0);
                        }
#endif
                        encode_affine_mrg_idx(cu_data->skip_idx[cup]);
#if AFFINE_UMVE_TEMP
                        if (mod_info_curr->affine_umve_flag)
                        {
                            encode_affine_umve_idx(cu_data->affine_umve_idx[0][cup]);
                            encode_affine_umve_idx(cu_data->affine_umve_idx[1][cup]);
                        }
#endif
                    }
                    else
#endif
                    {
#if INTERPF
                        if (sqh->interpf_enable_flag && (mod_info_curr->cu_width * mod_info_curr->cu_height >= 64)
                            && (mod_info_curr->cu_width <= 64) && (mod_info_curr->cu_height <= 64))
                        {
                            encode_inter_filter_flag(cu_data->inter_filter_flag[cup]);
                        }
#endif
#if IPC_TEMP
                        if (sqh->ipc_enable_flag && mod_info_curr->cu_width * mod_info_curr->cu_height >= IPC_MIN_BLK && !cu_data->inter_filter_flag[cup] && (mod_info_curr->cu_width <= IPC_MAX_WD && mod_info_curr->cu_height <= IPC_MAX_HT))
                        {
                            encode_ipc_flag(cu_data->ipc_flag[cup]);
                        }
#endif
                        encode_skip_idx(cu_data->skip_idx[cup], sqh->num_of_hmvp_cand,
#if MVAP_TEMP
                            sqh->num_of_mvap_cand,
#endif
                            ctx);
                    }
                }
            }
            else
            {
                if (AEC_DATA_inner_tmp->cons_pred_mode == NO_MODE_CONS)
                {
                    encode_pred_mode(AEC_DATA_inner_tmp, mod_info_curr, pred_mode, ctx);
                }
                else if (AEC_DATA_inner_tmp->cons_pred_mode == ONLY_INTER)
                {
                    assert(pred_mode == MODE_INTER);
                }
                else
                {
                    assert(pred_mode == MODE_INTRA || pred_mode == 4 /*MODE_IBC*/);
                }

#if USE_IBC_TEMP

                //if (ctx->param.use_ibc_flag && ctx->info.pic_header.ibc_flag
                //    && (AEC_DATA_inner_tmp->cons_pred_mode == NO_MODE_CONS || AEC_DATA_inner_tmp->cons_pred_mode == ONLY_INTRA)
                //    && mod_info_curr->cu_mode != MODE_INTER
                //    && mod_info_curr->cu_width_log2 <= IBC_BITSTREAM_FLAG_RESTRIC_LOG2 && mod_info_curr->cu_height_log2 <= IBC_BITSTREAM_FLAG_RESTRIC_LOG2)
                //{
                //    enc_eco_ibc(bs, cu_data->ibc_flag[cup], ctx);
                //}

                if (cu_data->ibc_flag[cup])
                {
#if IBC_BVP
                    if (sqh->num_of_hbvp_cand > 0 && cu_data->cnt_hbvp_cands[cup] >= 1)
                    {
                        encode_ibc_bvp_flag(cu_data->cbvp_idx[cup]);
                    }
#endif
#if IBC_ABVR
                    if (sqh->abvr_enable_flag)
                    {
                        encode_bvr_idx(cu_data->bvr_idx[cup]);
                    }
                    s16 mvd[MV_D];
                    mvd[MV_Y] = cu_data->mvd[cup][0][MV_Y] >> (cu_data->bvr_idx[cup] + 2);
                    mvd[MV_X] = cu_data->mvd[cup][0][MV_X] >> (cu_data->bvr_idx[cup] + 2);
                    encode_bvd(mvd);
#else
                    s16 mvd[MV_D];
                    mvd[MV_Y] = cu_data->mvd[cup][0][MV_Y] >> 2;
                    mvd[MV_X] = cu_data->mvd[cup][0][MV_X] >> 2;
                    encode_bvd(bs, mvd);
#endif
                }
                else
                {
#endif
                    if (pred_mode != MODE_INTRA)
                    {
                        assert(pred_mode == MODE_INTER);
                        encode_affine_flag(mod_info_curr->affine_flag != 0, ctx, cu_width, cu_height); /* inter affine_flag */

                        if (sqh->amvr_enable_flag)
                        {
#if EXT_AMVR_HMVP
                            if (sqh->emvr_enable_flag && !mod_info_curr->affine_flag) // also imply ctx->info.sqh->num_of_hmvp_cand is not zero
                            {
                                encode_extend_amvr_flag(cu_data->mvp_from_hmvp_flag[cup]);
                            }
#endif
                            encode_mvr_idx(cu_data->mvr_idx[cup], mod_info_curr->affine_flag);
                        }

                        if (pred_mode != MODE_DIR)
                        {
                            if (slice_type == SLICE_B)
                            {
                                s8 refi_temp[REFP_NUM] = { cu_data->refi[cup][REFP_0],cu_data->refi[cup][REFP_1] };
                                encode_inter_dir_org(mod_info_curr, refi_temp, mod_info_curr->pb_part, ctx);

                            }
#if 0
                            if (mod_info_curr->affine_flag) // affine inter mode
                            {
                                int vertex;
                                int vertex_num = mod_info_curr->affine_flag + 1;
                                int aff_scup[VER_NUM];
                                aff_scup[0] = cup;
                                aff_scup[1] = cup + ((cu_width >> MIN_CU_LOG2) - 1);
                                aff_scup[2] = cup + (((cu_height >> MIN_CU_LOG2) - 1) << ctx->log2_culine);
                                refi0 = cu_data->refi[cup][REFP_0];
                                refi1 = cu_data->refi[cup][REFP_1];
                                if (IS_INTER_SLICE(slice_type) && REFI_IS_VALID(refi0))
                                {
                                    encode_refidx(ctx->num_refp[REFP_0], refi0);
                                    for (vertex = 0; vertex < vertex_num; vertex++)
                                    {
#if BD_AFFINE_AMVR
                                        s16 mvd_tmp[MV_D];
                                        u8 amvr_shift = Tab_Affine_AMVR(cu_data->mvr_idx[cup]);
                                        mvd_tmp[MV_X] = cu_data->mvd[aff_scup[vertex]][REFP_0][MV_X] >> amvr_shift;
                                        mvd_tmp[MV_Y] = cu_data->mvd[aff_scup[vertex]][REFP_0][MV_Y] >> amvr_shift;
                                        encode_mvd(mvd_tmp);
#else
                                        encode_mvd(bs, cu_data->mvd[aff_scup[vertex]][REFP_0]);
#endif
                                    }
                                }
                                if (slice_type == SLICE_B && REFI_IS_VALID(refi1))
                                {
                                    encode_refidx(ctx->num_refp[REFP_1], refi1);
                                    for (vertex = 0; vertex < vertex_num; vertex++)
                                    {
#if BD_AFFINE_AMVR
                                        s16 mvd_tmp[MV_D];
                                        u8 amvr_Shift = Tab_Affine_AMVR(cu_data->mvr_idx[cup]);
                                        mvd_tmp[MV_X] = cu_data->mvd[aff_scup[vertex]][REFP_1][MV_X] >> amvr_Shift;
                                        mvd_tmp[MV_Y] = cu_data->mvd[aff_scup[vertex]][REFP_1][MV_Y] >> amvr_Shift;
                                        encode_mvd(mvd_tmp);
#else
                                        encode_mvd(bs, cu_data->mvd[aff_scup[vertex]][REFP_1]);
#endif
                                    }
                                }
                            }
                            else
#endif
                            {
                                refi0 = cu_data->refi[cup][REFP_0];
                                refi1 = cu_data->refi[cup][REFP_1];
#if SMVD
                                if (sqh->smvd_enable_flag && REFI_IS_VALID(refi0) && REFI_IS_VALID(refi1)
                                    && (ctx->ptr - ctx->refp_ptr[0][REFP_0] == ctx->refp_ptr[0][REFP_1] - ctx->ptr)
                                    && !cu_data->mvp_from_hmvp_flag[cup]
                                    )
                                {
                                    encode_smvd_flag(cu_data->smvd_flag[cup]);
                                }
#endif

                                if (IS_INTER_SLICE(slice_type) && REFI_IS_VALID(refi0))
                                {
#if SMVD
                                    if (cu_data->smvd_flag[cup] == 0)
#endif
                                        encode_refidx(ctx->num_refp[REFP_0], refi0);

                                    s16 mvd[MV_D];
                                    mvd[MV_Y] = cu_data->mvd[cup][REFP_0][MV_Y] >> cu_data->mvr_idx[cup];
                                    mvd[MV_X] = cu_data->mvd[cup][REFP_0][MV_X] >> cu_data->mvr_idx[cup];
                                    encode_mvd(mvd);
                                }
                                if (slice_type == SLICE_B && REFI_IS_VALID(refi1))
                                {
#if SMVD
                                    if (cu_data->smvd_flag[cup] == 0)
                                    {
#endif
                                        encode_refidx(ctx->num_refp[REFP_1], refi1);

                                        s16 mvd[MV_D];
                                        mvd[MV_Y] = cu_data->mvd[cup][REFP_1][MV_Y] >> cu_data->mvr_idx[cup];
                                        mvd[MV_X] = cu_data->mvd[cup][REFP_1][MV_X] >> cu_data->mvr_idx[cup];
                                        encode_mvd(mvd);
#if SMVD
                                    }
#endif
                                }
                            }
#if BGC_TEMP
                            if (sqh->bgc_enable_flag && slice_type == SLICE_B && REFI_IS_VALID(refi0) && REFI_IS_VALID(refi1) && mod_info_curr->cu_width * mod_info_curr->cu_height >= 256)
                            {
                                encode_bgc_flag(cu_data->bgc_flag[cup], cu_data->bgc_idx[cup]);
                            }
#endif
                        }
                    }
#if USE_IBC_TEMP
                }
#endif
            }
        }
    }
#if USE_IBC_TEMP
    else if ((ctx->slice_type== SLICE_I && ctx->info.pic_header.ibc_flag))

    {

        if (mod_info_curr->cu_width_log2 <= IBC_BITSTREAM_FLAG_RESTRIC_LOG2 && mod_info_curr->cu_height_log2 <= IBC_BITSTREAM_FLAG_RESTRIC_LOG2)
        {
        //    enc_eco_ibc(AEC_DATA_inner_tmp, mod_info_curr->scup, mod_info_curr->y_scu, mod_info_curr->x_scu, cu_data->ibc_flag[cup], ctx);
        }
        if (cu_data->ibc_flag[cup])
        {
#if IBC_BVP
            if (sqh->num_of_hbvp_cand > 0 && cu_data->cnt_hbvp_cands[cup] >= 1)
            {
                encode_ibc_bvp_flag(cu_data->cbvp_idx[cup]);
            }
#endif
#if IBC_ABVR
            if (sqh->abvr_enable_flag)
            {
                encode_bvr_idx(cu_data->bvr_idx[cup]);
            }
            s16 mvd[MV_D];
            mvd[MV_Y] = cu_data->mvd[cup][0][MV_Y] >> (cu_data->bvr_idx[cup] + 2);
            mvd[MV_X] = cu_data->mvd[cup][0][MV_X] >> (cu_data->bvr_idx[cup] + 2);
            encode_bvd(mvd);
#else
            s16 mvd[MV_D];
            mvd[MV_Y] = cu_data->mvd[cup][0][MV_Y] >> 2;
            mvd[MV_X] = cu_data->mvd[cup][0][MV_X] >> 2;
            encode_bvd(bs, mvd);

#endif
        }
    }
#endif
    if (pred_mode == MODE_INTRA)
    {
        if (AEC_DATA_inner_tmp->tree_status != TREE_C)
        {
            com_assert(cu_data->ipm[0][cup] != IPD_INVALID);
        }
        if (AEC_DATA_inner_tmp->tree_status != TREE_L)
        {
            com_assert(cu_data->ipm[1][cup] != IPD_INVALID);
        }
#if SAWP_TEMP
        if (sqh->sawp_enable_flag && cu_width >= SAWP_MIN_SIZE && cu_height >= SAWP_MIN_SIZE && cu_width <= SAWP_MAX_SIZE && cu_height <= SAWP_MAX_SIZE && (AEC_DATA_inner_tmp->tree_status == TREE_LC || AEC_DATA_inner_tmp->tree_status == TREE_L))
        {
            encode_sawp_flag(cu_data->sawp_flag[cup]);
        }
        if (cu_data->sawp_flag[cup])
        {
            assert(cu_data->pb_part[cup] == SIZE_2Nx2N);
            encode_sawp_mode(cu_data->skip_idx[cup]);
            get_part_info(ctx->info.max_cuwh >> 2, x % ctx->info.max_cuwh, y % ctx->info.max_cuwh, cu_width, cu_height, cu_data->pb_part[cup], &mod_info_curr->pb_info);
            int pb_scup = mod_info_curr->pb_info.sub_scup[0];

            u8 mpm[SAWP_MPM_NUM];
            for (int mpm_idx = 0; mpm_idx < SAWP_MPM_NUM; mpm_idx++)
            {
                mpm[mpm_idx] = cu_data->sawp_mpm[mpm_idx][pb_scup];
            }

            encode_sawp_dir(cu_data->sawp_idx0[cup], mpm);
            encode_sawp_dir1(cu_data->sawp_idx1[cup], mpm, cu_data->sawp_idx0[cup]);

            assert(cu_data->ipm[0][cup] != IPD_IPCM);
            //mod_info_curr->ipm[0][0] = ctx->map.map_ipm[PEL2SCU(x + (cu_width - 1)) + PEL2SCU(y + (cu_height - 1)) * AEC_FW_data_in->pic_width_in_scu]; //????
            //assert(mod_info_curr->ipm[0][0] != IPD_IPCM);
        }
        else {
#endif // SAWP

#if DT_SYNTAX //core
            COM_PART_INFO pb_info;
            encode_part_size(ctx, cu_data->pb_part[cup], cu_width, cu_height, pred_mode);
            //here is special, we need to calculate scup inside one CTU
            get_part_info_aec(ctx->info.max_cuwh >> 2, x % ctx->info.max_cuwh, y % ctx->info.max_cuwh, cu_width, cu_height, cu_data->pb_part[cup], &pb_info);
            //assert(core->mod_info_curr.pb_info.sub_scup[0] == cup);
            for (int part_idx = 0; part_idx < pb_info.num_sub_part; part_idx++)
            {
                int pb_x = pb_info.sub_x[part_idx];
                int pb_y = pb_info.sub_y[part_idx];
                int pb_width = pb_info.sub_w[part_idx];
                int pb_height = pb_info.sub_h[part_idx];
                int pb_scup = pb_info.sub_scup[part_idx];
#if IPCM
                mod_info_curr->ipm[part_idx][0] = cu_data->ipm[0][pb_scup];
#endif
#endif
                u8 mpm[2];
                mpm[0] = cu_data->mpm[0][pb_scup];
                mpm[1] = cu_data->mpm[1][pb_scup];
                encode_intra_dir(cu_data->ipm[0][pb_scup],
#if EIPM
                    sqh->eipm_enable_flag,
#endif
                    mpm);
#if DT_SYNTAX
            }
#if SAWP_TEMP
        }
#endif // SAWP
#endif
        if (AEC_DATA_inner_tmp->tree_status != TREE_L)
        {
#if IPCM
            mod_info_curr->ipm[PB0][1] = cu_data->ipm[1][cup];
#endif

#if SAWP_TEMP
            encode_intra_dir_c(cu_data->ipm[1][cup], mod_info_curr->ipm[0][0]
#else // SAWP
            encode_intra_dir_c(cu_data->ipm[1][cup], mod_info_curr->ipm[0][0]
#endif // SAWP
#if TSCPM
                , sqh->tscpm_enable_flag
#endif
#if ENHANCE_TSPCM
                , sqh->enhance_tscpm_enable_flag
#endif
#if PMC_TEMP || EPMC_TEMP 
                , sqh->pmc_enable_flag
#endif
#if SAWP_TEMP
                , AEC_DATA_inner_tmp->tree_status == TREE_C ? 0 : cu_data->sawp_flag[cup]
#endif // SAWP

            );
        }
#if 0
#if IPCM
#if SAWP_TEMP
        if (!((AEC_DATA_inner_tmp->tree_status == TREE_C && mod_info_curr->ipm[0][0] == IPD_IPCM && cu_data->ipm[1][cup] == IPD_DM_C)
            || (AEC_DATA_inner_tmp->tree_status != TREE_C && mod_info_curr->ipm[0][0] == IPD_IPCM))
#else // SAWP

        if (!((ctx->tree_status == TREE_C && cu_data->ipm[0][cup] == IPD_IPCM && cu_data->ipm[1][cup] == IPD_DM_C)
            || (ctx->tree_status != TREE_C && cu_data->ipm[0][cup] == IPD_IPCM))
#endif // SAWP
#if SAWP_TEMP
            && !cu_data->sawp_flag[cup]
#endif // SAWP

            )
        {
#endif

#if DT_INTRA_BOUNDARY_FILTER_OFF
            if (sqh->ipf_enable_flag && (cu_width < MAX_CU_SIZE) && (cu_height < MAX_CU_SIZE) && mod_info_curr->pb_part == SIZE_2Nx2N)
#else
            if (sqh->ipf_enable_flag && (cu_width < MAX_CU_SIZE) && (cu_height < MAX_CU_SIZE))
#endif
                encode_ipf_flag(cu_data->ipf_flag[cup]);
#if IIP_TEMP
            int area = cu_height * cu_width;
            if (sqh->iip_enable_flag && (mod_info_curr->pb_part == SIZE_2Nx2N) && (cu_width < MAX_CU_SIZE) && (cu_height < MAX_CU_SIZE) &&
                (AEC_DATA_inner_tmp->tree_status != TREE_C) && !cu_data->ipf_flag[cup] && (cu_height * cu_width >= MIN_IIP_BLK) && (cu_height * cu_width <= MAX_IIP_BLK)
#if SAWP_TEMP
                && !cu_data->sawp_flag[cup]
#endif // SAWP
                )
            {
                encode_iip_flag(cu_data->iip_flag[cup]);
            }
#endif
#if IPCM
        }
#endif
#endif
    }


    if (!AEC_DATA_inner_tmp->skip_flag)
    {
#if IST_TEMP
        // cu_data->ist_tu_flag[cup] = 0;
        // mod_info_curr->ist_tu_flag = cu_data->ist_tu_flag[cup];
        mod_info_curr->ist_tu_flag = 0;
#endif
#if EST_TEMP
        // cu_data->est_tu_flag[cup] = 0;
        // mod_info_curr->est_flag = cu_data->est_tu_flag[cup];
        mod_info_curr->est_flag = 0;
#endif
#if ST_CHROMA_TEMP
        // cu_data->st_chroma_tu_flag[cup] = 0;
        // cu_data->ipf_flag[cup] = 0;
        // mod_info_curr->st_chroma_flag = cu_data->st_chroma_tu_flag[cup];
        // mod_info_curr->ipf_flag = cu_data->ipf_flag[cup];
        mod_info_curr->st_chroma_flag = 0;
        mod_info_curr->ipf_flag = 0;
#if IIP_TEMP
        // cu_data->iip_flag[cup] = 0;
        // mod_info_curr->iip_flag = cu_data->iip_flag[cup];
        mod_info_curr->iip_flag = 0;
#endif
#endif
        encode_coef(aec_num_delta_qp, aec_pred_qp, mod_info_curr, mod_info_curr->cu_width_log2, mod_info_curr->cu_height_log2, pred_mode, mod_info_curr, AEC_DATA_inner_tmp->tree_status, ctx
// #if CUDQP
//             , AEC_DATA_inner_tmp->qp_y
// #endif
, line_idx_in_lcu, srcc_for_aec
        );
    }

    w = (mod_info_curr->cu_width >> MIN_CU_LOG2);
    h = (mod_info_curr->cu_height >> MIN_CU_LOG2);
#if TB_SPLIT_EXT
    //map_pb_tb_part = ctx->map.map_pb_tb_part + mod_info_curr->scup;
#endif
#if CHROMA_NOT_SPLIT // encoder cu_cbf based on cbf_y in TREE_L
    if (AEC_DATA_inner_tmp->tree_status == TREE_LC)
    {
        cu_cbf_flag = is_cu_nz(mod_info_curr->num_nz);
    }
    else if (AEC_DATA_inner_tmp->tree_status == TREE_L)
    {
        cu_cbf_flag = is_cu_plane_nz(mod_info_curr->num_nz, Y_C);
    }
    else
        assert(0);
#endif


    return COM_OK;
}

#endif

void enc_eco_sao_mrg_flag(int merge_left_avail, int merge_up_avail, int modeIdc, int typeIdc)
{
    int merge_left = 0;
    int merge_up = 0;
    int value1 = 0;
    int value2 = 0;
    if (merge_left_avail)
    {
        merge_left = ((modeIdc == SAO_MODE_MERGE) && (typeIdc == SAO_MERGE_LEFT));
        value1 = merge_left ? 1 : 0;
    }
    if (merge_up_avail && !merge_left)
    {
        merge_up = ((modeIdc == SAO_MODE_MERGE) && (typeIdc == SAO_MERGE_ABOVE));
        value1 = merge_up ? (1 + merge_left_avail) : 0;
    }
    value2 = merge_left_avail + merge_up_avail;
    if (value2 == 1)
    {
        assert(value1 <= 1);
        //enc_sbac_encode_bin(value1, sbac, &sbac->ctx.sao_merge_flag[0], bs);
        aec_stage3_phase2( 1, 0, value1, 456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else if (value2 == 2)
    {
        assert(value1 <= 2);
        //enc_sbac_encode_bin(value1 & 0x01, sbac, &sbac->ctx.sao_merge_flag[1], bs);
        int cnt = value1 != 1 ? 2 : 1;
        aec_stage3_phase2(cnt,
            0, value1 & 0x01, 457, 0, 
            0, (value1 >> 1) & 0x01, 458, 0,
            0, 0, 0, 0, 
            0, 0, 0, 0
        );

        // aec_stage3_phase2( 1, 0, value1 & 0x01, 457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        // if (value1 != 1)
        // {
        //     //enc_sbac_encode_bin((value1 >> 1) & 0x01, sbac, &sbac->ctx.sao_merge_flag[2], bs);
        //     aec_stage3_phase2( 1, 0, (value1 >> 1) & 0x01, 458, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        // }
    }
}


void enc_eco_sao_mode(int modeIdc, int typeIdc)
{
    int value1 = 0;
    if (modeIdc == SAO_MODE_OFF)
    {
        value1 = 0;
    }
    else if (typeIdc == SAO_TYPE_BO)
    {
        value1 = 1;
    }
    else
    {
        value1 = 3;
    }
    if (value1 == 0)
    {
        //enc_sbac_encode_bin(1, sbac, sbac->ctx.sao_mode, bs);
        aec_stage3_phase2( 1, 0, 1, 459, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else
    {
        // enc_sbac_encode_bin(0, sbac, sbac->ctx.sao_mode, bs);
        // aec_stage3_phase2( 1, 0, 0, 459, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        // sbac_encode_bin_ep(!((value1 >> 1) & 0x01), sbac, bs);
        // aec_stage3_phase2( 1, 1, !((value1 >> 1) & 0x01), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

        aec_stage3_phase2(2, 
            0, 0, 459, 0, 
            1, !((value1 >> 1) & 0x01), 0, 0, 
            0, 0, 0, 0, 
            0, 0, 0, 0
        );
    }
}

static void eco_sao_offset_AEC(int value1, int value2)
{
    int act_sym;
    u32 sign = value1 >= 0 ? 0 : 1;
    int temp, max_value;
    int offset_type = value2;
	int saoclip[6][3] = { {(-1), (6), (7)}, {(0), (1), (1)}, {(0), (0), (0)}, {(-1), (0), (1)}, {(-6), (1), (7)}, {(-7), (7), (7)} };
    assert(offset_type != SAO_CLASS_EO_PLAIN);
    if (offset_type == SAO_CLASS_EO_FULL_VALLEY)
    {
        assert(value1 < 7);
        act_sym = EO_OFFSET_MAP[value1 + 1];
    }
    else if (offset_type == SAO_CLASS_EO_FULL_PEAK)
    {
        assert(value1 > -7);
        act_sym = EO_OFFSET_MAP[-value1 + 1];
    }
    else
    {
        act_sym = abs(value1);
    }
    max_value = saoclip[offset_type][2];
    temp = act_sym;
    if (temp == 0)
    {
        if (offset_type == SAO_CLASS_BO)
        {
            //enc_sbac_encode_bin(1, sbac, sbac->ctx.sao_offset, bs);
            aec_stage3_phase2( 1, 0, 1, 460, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        else
        {
            //sbac_encode_bin_ep(1, sbac, bs);
            aec_stage3_phase2( 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
    }
    else
    {
        while (temp != 0)
        {
            if (offset_type == SAO_CLASS_BO && temp == act_sym)
            {
                //enc_sbac_encode_bin(0, sbac, sbac->ctx.sao_offset, bs);
                aec_stage3_phase2( 1, 0, 0, 460, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            else
            {
                //sbac_encode_bin_ep(0, sbac, bs);
                aec_stage3_phase2( 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }
            temp--;
        }
        if (act_sym < max_value)
        {
            //sbac_encode_bin_ep(1, sbac, bs);
            aec_stage3_phase2( 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
    }
    if (offset_type == SAO_CLASS_BO && act_sym)
    {
        //sbac_encode_bin_ep(sign, sbac, bs);
        aec_stage3_phase2( 1, 1, sign, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}

void enc_eco_sao_offset(int offset[MAX_NUM_SAO_CLASSES], int startBand, int startBand2, int typeIdc, int modeIdc)
{
    int value1 = 0;
    int value2 = 0;
    int i;
    int band_idx_BO[4];
    assert(modeIdc == SAO_MODE_NEW);
    if (typeIdc == SAO_TYPE_BO)
    {
        band_idx_BO[0] = startBand;
        band_idx_BO[1] = band_idx_BO[0] + 1;
        band_idx_BO[2] = startBand2;
        band_idx_BO[3] = band_idx_BO[2] + 1;
        for (i = 0; i < 4; i++)
        {
            value1 = offset[band_idx_BO[i]];
            value2 = SAO_CLASS_BO;
            assert(abs(value1) >= 0 && abs(value1) <= 7);
            eco_sao_offset_AEC(value1, value2);
        }
    }
    else
    {
        assert(typeIdc >= SAO_TYPE_EO_0 && typeIdc <= SAO_TYPE_EO_45);
        for (i = SAO_CLASS_EO_FULL_VALLEY; i < NUM_SAO_EO_CLASSES; i++)
        {
            if (i == SAO_CLASS_EO_PLAIN)
            {
                continue;
            }
            value1 = offset[i];
            value2 = i;
            if (i == 0)
                assert(value1 >= -1 && value1 <= 6);
            if (i == 1)
                assert(value1 >= 0 && value1 <= 1);
            if (i == 2)
                assert(value1 >= -1 && value1 <= 0);
            if (i == 3)
                assert(value1 >= -6 && value1 <= 1);
            eco_sao_offset_AEC(value1, value2);
        }
    }
}

static void eco_sao_type_AEC(int value1, int value2)
{
    int act_sym = value1;
    int temp;
    int i, length;
    int exp_golomb_order;
    temp = act_sym;
    exp_golomb_order = 1;
    switch (value2)
    {
    case 0:
        length = NUM_SAO_EO_TYPES_LOG2;
        break;
    case 1:
        length = NUM_SAO_BO_CLASSES_LOG2;
        break;
    case 2:
        length = NUM_SAO_BO_CLASSES_LOG2 - 1;
        break;
    default:
        length = 0;
        break;
    }
    if (value2 == 2)
    {
        while (1)
        {
            if ((unsigned int)temp >= (unsigned int)(1 << exp_golomb_order))
            {
                //sbac_encode_bin_ep(0, sbac, bs);
                aec_stage3_phase2( 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                temp = temp - (1 << exp_golomb_order);
                exp_golomb_order++;
            }
            else
            {
                if (exp_golomb_order == 4)
                {
                    exp_golomb_order = 0;
                }
                else
                {
                    //sbac_encode_bin_ep(1, sbac, bs);
                    aec_stage3_phase2( 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                }
                
                int bin_count = exp_golomb_order;
                for (int i = 0; i < (exp_golomb_order - 1) / 4 + 1; i++)
                {
                    int code_bin = bin_count >= 4 ? 4 : bin_count;
                    int shift_0 = (bin_count - 1) >= 0 ? (bin_count - 1) : 0;
                    int shift_1 = (bin_count - 2) >= 0 ? (bin_count - 2) : 0;
                    int shift_2 = (bin_count - 3) >= 0 ? (bin_count - 3) : 0;
                    int shift_3 = (bin_count - 4) >= 0 ? (bin_count - 4) : 0;
                    aec_stage3_phase2(code_bin,
                        1, (unsigned char)((temp >> shift_0) & 1), 0, 0,
                        1, (unsigned char)((temp >> shift_1) & 1), 0, 0,
                        1, (unsigned char)((temp >> shift_2) & 1), 0, 0,
                        1, (unsigned char)((temp >> shift_3) & 1), 0, 0
                    );
                    bin_count = bin_count - 4;
                }

                // while (exp_golomb_order--)     //next binary part
                // {
                //     //sbac_encode_bin_ep((unsigned char)((temp >> exp_golomb_order) & 1), sbac, bs);
                //     aec_stage3_phase2( 1, 1, (unsigned char)((temp >> exp_golomb_order) & 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                // }
                break;
            }
        }
    }
    else
    {
        // for (i = 0; i < length; i++)
        // {
        //     //sbac_encode_bin_ep(temp & 0x0001, sbac, bs);
        //     aec_stage3_phase2( 1, 1, temp & 0x0001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        //     temp = temp >> 1;
        // }

        int bin_count = length;
        for (int i = 0; i < (length - 1) / 4 + 1; i++)
        {
            int code_bin = bin_count >= 4 ? 4 : bin_count;
            aec_stage3_phase2(code_bin,
                1, (temp & 0x0001) >> 0, 0, 0,
                1, (temp & 0x0002) >> 1, 0, 0,
                1, (temp & 0x0004) >> 2, 0, 0,
                1, (temp & 0x0008) >> 3, 0, 0
            );
            temp = temp >> 4;
            bin_count = bin_count - 4;
        }
    }
}

static void enc_eco_sao_type(int startBand, int deltaband, int typeIdc, int modeIdc)
{
    int value1 = 0;
    int value2 = 0;
    assert(modeIdc == SAO_MODE_NEW);
    if (typeIdc == SAO_TYPE_BO)
    {
        value1 = startBand;
        value2 = 1;//write start band for BO
        eco_sao_type_AEC(value1, value2);
        assert(deltaband >= 2);
        value1 = deltaband - 2;
        value2 = 2;//write delta start band for BO
        eco_sao_type_AEC(value1, value2);
    }
    else
    {
        assert(typeIdc >= SAO_TYPE_EO_0 && typeIdc <= SAO_TYPE_EO_45);
        value1 = typeIdc;
        value2 = 0;
        eco_sao_type_AEC(value1, value2);
    }
}


void write_sao_lcu(ENC_CTX_HLS* ctx, int MergeLeftAvail, int MergeUpAvail, int lcu_pos, int pix_y, int pix_x, int offset[3][32], int startBand[3], int startBand2[3], int deltaband[3], int modeIdc[3], int typeIdc[3])
{
    COM_SH_EXT* sh = &(ctx->info.shext);
    int mb_x = pix_x >> MIN_CU_LOG2;
    int mb_y = pix_y >> MIN_CU_LOG2;

    if (MergeLeftAvail + MergeUpAvail)
    {
        enc_eco_sao_mrg_flag(MergeLeftAvail, MergeUpAvail, modeIdc[Y_C], typeIdc[Y_C]);
    }
    if (modeIdc[Y_C] != SAO_MODE_MERGE)
    {
        //luma
        if (sh->slice_sao_enable[Y_C] == 1)
        {
            enc_eco_sao_mode(modeIdc[Y_C], typeIdc[Y_C]);
            if (modeIdc[Y_C] == SAO_MODE_NEW)
            {
                enc_eco_sao_offset(offset[Y_C], startBand[Y_C], startBand2[Y_C], typeIdc[Y_C], modeIdc[Y_C]);
                enc_eco_sao_type(startBand[Y_C], deltaband[Y_C], typeIdc[Y_C], modeIdc[Y_C]);
            }
        }
        for (int compIdx = U_C; compIdx < N_C; compIdx++)
        {
            if (sh->slice_sao_enable[compIdx] == 1)
            {
                enc_eco_sao_mode(modeIdc[compIdx], typeIdc[compIdx]);
                if (modeIdc[compIdx] == SAO_MODE_NEW)
                {
                    enc_eco_sao_offset(offset[compIdx], startBand[compIdx], startBand2[compIdx], typeIdc[compIdx], modeIdc[compIdx]);
                    enc_eco_sao_type(startBand[compIdx], deltaband[compIdx], typeIdc[compIdx], modeIdc[compIdx]);
                }
            }
        }
    }
}
void write_param_sao_one_lcu(ENC_CTX_HLS* ctx, int y_pel, int x_pel, int MergeLeftAvail, int MergeUpAvail, int offset[3][32], int startBand[3], int startBand2[3], int deltaband[3], int modeIdc[3], int typeIdc[3])
{
    COM_SH_EXT* sh = &(ctx->info.shext);
    int lcuw = 1 << ctx->info.log2_max_cuwh;
    int lcuh = 1 << ctx->info.log2_max_cuwh;

    int x_in_lcu = x_pel >> ctx->info.log2_max_cuwh;
    int y_in_lcu = y_pel >> ctx->info.log2_max_cuwh;
    int lcu_pos = x_in_lcu + y_in_lcu * ctx->info.pic_width_in_lcu;
    if (!sh->slice_sao_enable[Y_C] && !sh->slice_sao_enable[U_C] && !sh->slice_sao_enable[V_C])
    {
        return;
    }
    write_sao_lcu(ctx, MergeLeftAvail, MergeUpAvail, lcu_pos, y_pel, x_pel, offset, startBand, startBand2, deltaband, modeIdc, typeIdc);
}

#if USE_ENH
int aec_enc_eco_tree_phase2(ENC_CU_DATA* ctu_map_cu_data, u8 pred_mode, int tb_part, int aec_num_delta_qp, int aec_pred_qp, ENC_CTX_HLS* ctx, ENC_CU_DATA* cu_data,
    AEC_inner* AEC_DATA_inner_tmp, int type, int x0, int y0, int cup, int cu_width, int cu_height, int cud,
    const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status, U8 line_idx_in_lcu[3], u32 map_scu_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], int min_scu_x, int min_scu_y, SRCC_FOR_AEC* srcc_for_aec, int last_lcu_delta_qp[1])
{
    int ret;
    COM_MODE mod_info_curr_tmp;
    COM_MODE* mod_info_curr = &mod_info_curr_tmp;
    cu_init(ctu_map_cu_data, pred_mode, tb_part, ctx, AEC_DATA_inner_tmp, mod_info_curr, x0, y0, cup, cu_width, cu_height, map_scu_inner, min_scu_x, min_scu_y);
    if (type == 0)
    {
        ret = enc_eco_unit(pred_mode, aec_num_delta_qp, aec_pred_qp, ctx, cu_data, mod_info_curr, AEC_DATA_inner_tmp, x0, y0, cup, cu_width, cu_height, line_idx_in_lcu, srcc_for_aec);
        //printf("luma: %d %d %d %d %d %d %d %d %d %d\n", x0, y0, sbac->range, sbac->left_bits, sbac->code, sbac->stacked_ff, sbac->pending_byte, sbac->is_pending_byte, sbac->bitcounter, sbac->is_bitcount);
// #if CUDQP
//         if (com_is_cu_dqp(&ctx->info) && is_cu_nz(mod_info_curr->num_nz))
//         {
//             int aec_qp_y = MCU_GET_QP(/*cu_data->map_scu[cup]*/ctu_map_cu_data->map_scu[cup]);
//             aec_num_delta_qp++;
//             aec_pred_qp = aec_qp_y;
//             //if (/*qp_y - */aec_pred_qp != 56)
//             //	printf("wrong\n");
//         }
// #endif

    }
    else
    {
        //ret = enc_eco_unit_chroma(ctx, cu_data, mod_info_currAEC_DATA_inner_tmp, x0, y0, cup, cu_width, cu_height, line_idx, srcc_for_aec);
        //printf("chroma: %d %d %d %d %d %d %d %d %d %d\n", x0, y0, sbac->range, sbac->left_bits, sbac->code, sbac->stacked_ff, sbac->pending_byte, sbac->is_pending_byte, sbac->bitcounter, sbac->is_bitcount);
        //ctx->tree_status = TREE_LC;

    }


    return 0;
}

int is_ipcm;
#if AEC_STAGE1_HLS
hls::stream<u336> OutStream;
#endif
void aec_stage2_phase2(u8 pred_mode, int tb_part, int aec_num_delta_qp, int aec_pred_qp, ENC_CTX_HLS* ctx, ENC_CU_DATA* ctu_map_cu_data,
    int type, int x0, int y0, int cup, int cu_width, int cu_height, int cud,
    const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local
    , u32 map_cu_mode_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], u32 map_scu_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], int min_scu_x, int min_scu_y, U8 line_idx_in_lcu[3], SRCC_FOR_AEC* srcc_for_aec, int last_lcu_delta_qp[1])
{
#if AEC_STAGE1_HLS
    u336 out_tmp;
    out_tmp(335, 320) = aec_num_delta_qp; // 16bit
    out_tmp(319, 304) = aec_pred_qp;      // 16bit
    out_tmp(303, 296) = type;             // 8bit
    out_tmp(295, 272) = x0;
    out_tmp(271, 240) = y0;
    out_tmp(239, 208) = cup;
    out_tmp(207, 176) = cu_width;
    out_tmp(175, 144) = cu_height;
    out_tmp(143, 112) = cud;
    out_tmp(111, 104) = parent_split;  // 8bit
    out_tmp(103, 96) = qt_depth;       // 8bit
    out_tmp(95, 88) = bet_depth;  // 8bit
    out_tmp(87, 80) = cons_pred_mode;  // 8bit
    out_tmp(79, 72) = tree_status;  // 8bit
    out_tmp(71, 64) = min_scu_x;  // 8bit
    out_tmp(63, 56) = min_scu_y;  // 8bit
    out_tmp(55, 48) = line_idx_in_lcu[0];  // 8bit
    out_tmp(47, 40) = line_idx_in_lcu[1];  // 8bit
    out_tmp(39, 32) = line_idx_in_lcu[2];  // 8bit
    out_tmp(31, 0) = last_lcu_delta_qp[0]; // 32bit

    OutStream.write(out_tmp);
#else

    AEC_inner AEC_DATA_inner_tmp;

    if (type == 7)
    {
#if CTU_RATE_CONTROL
        int dqp = 0;
    
        dqp = ctx->delta_qp;
    
        if (!ctx->info.shext.fixed_slice_qp_flag) {
// #if CUDQP
//             if (com_is_cu_dqp(&ctx->info))
//             {
//                 //aec_pred_qp = ctx->info.shext.slice_qp;
//                 assert(dqp == 0);
//             }
//             else
//             {
// #endif
                enc_eco_lcu_delta_qp(&AEC_DATA_output.bs, dqp, last_lcu_delta_qp[0]);
//#if CUDQP
//                }
//#endif
        }
#endif
    }
    else if (type == 2)
    {
        enc_eco_split_mode(&AEC_DATA_inner_tmp, cons_pred_mode, ctx, cud, cup, cu_width, cu_height, ctx->info.max_cuwh
            , parent_split, qt_depth, bet_depth, x0, y0, x0 >> 6, min_scu_x, min_scu_y, FEC_info_local);
    }
    else if (type == 3)
    {

        // enc_sbac_encode_bin_trm(tree_status, sbac, bs);
        // if (tree_status == 1) {
        //     is_ipcm = 0;
        //     enc_sbac_finish(bs);
        //     com_bsw_flush(bs);
        //     bs->leftbits = 32;
        //     bs->code = 0;
        // }
		aec_stage3_phase2(1, 3, tree_status, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else if (type == 4) //ctx init
    {
        //enc_sbac_init(bs);
        //com_sbac_ctx_init(&(GET_SBAC_ENC(bs)->ctx));
        aec_sbac_local.range = 0x1FF;
        aec_sbac_local.code = 0;
        aec_sbac_local.left_bits = 23;
        aec_sbac_local.pending_byte = 0;
        aec_sbac_local.is_pending_byte = 0;
        aec_sbac_local.stacked_ff = 0;
        com_sbac_ctx_init(&aec_ctx_phase2);

    }
    else if (type == 5)
    {
        enc_eco_cons_pred_mode_child(cons_pred_mode);
    }
    else if (type == 6)
    {
        write_param_sao_one_lcu(ctx, y0, x0, AEC_DATA_input->MergeLeftAvail, AEC_DATA_input->MergeUpAvail, AEC_DATA_input->offset, AEC_DATA_input->startBand, AEC_DATA_input->startBand2,
            AEC_DATA_input->deltaband, AEC_DATA_input->modeIdc, AEC_DATA_input->typeIdc);
    }


    else
    {
#if TB_SPLIT_EXT
        AEC_DATA_inner_tmp.pb_part = SIZE_2Nx2N;//AEC_DATA_input->cu_data_pb_part[cup];
        AEC_DATA_inner_tmp.tb_part = SIZE_2Nx2N; //AEC_DATA_input->cu_data_tb_part[cup];
        AEC_DATA_inner_tmp.ipf_flag = 0;// AEC_DATA_input->cu_data_ipf_flag[cup];
#endif      

        AEC_DATA_inner_tmp.affine_flag = AEC_DATA_input->cu_data_affine_flag[cup];
        AEC_DATA_inner_tmp.umve_flag = AEC_DATA_input->cu_data_umve_flag[cup];
        AEC_DATA_inner_tmp.umve_idx = AEC_DATA_input->cu_data_umve_idx[cup];
        AEC_DATA_inner_tmp.skip_idx = AEC_DATA_input->cu_data_skip_idx[cup];
        AEC_DATA_inner_tmp.mvr_idx = AEC_DATA_input->cu_data_mvr_idx[cup];
        AEC_DATA_inner_tmp.mvp_from_hmvp_flag = AEC_DATA_input->cu_data_mvp_from_hmvp_flag[cup];
        AEC_DATA_inner_tmp.refi[0] = AEC_DATA_input->cu_data_refi[cup][0];
        AEC_DATA_inner_tmp.refi[1] = AEC_DATA_input->cu_data_refi[cup][1];

        int x_scu = x0 >> MIN_CU_LOG2;
	    int y_scu = y0 >> MIN_CU_LOG2;
	    int pic_x_scu = x_scu - min_scu_x;
	    int pic_y_scu = y_scu - min_scu_y;
        if (y_scu == min_scu_y) {
            AEC_DATA_inner_tmp.map_scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_above_line[(x0 >> 6) * 16 + pic_x_scu];
            //AEC_DATA_inner_tmp->map_scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_above_line_using[pic_x_scu];
           // scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_above_line_using[pic_x_scu];
        }
        else {
            AEC_DATA_inner_tmp.map_scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_inner[pic_x_scu * 16L + (pic_y_scu - 1)];
            //scu_tmp1[0] = FEC_info_local->map_ptr_map_scu_inner[pic_x_scu * 16L + (pic_y_scu - 1)];
        }
        if (x_scu == min_scu_x) {
            AEC_DATA_inner_tmp.map_scu_tmp1[1] = FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu];
            //scu_tmp1[1] = FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu];
        }
        else {
            AEC_DATA_inner_tmp.map_scu_tmp1[1] = FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu];
            // scu_tmp1[1] = FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu];
        }

        if (y_scu == min_scu_y) {
            AEC_DATA_inner_tmp.map_cu_mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_above_line[(x0 >> 6) * 16 + pic_x_scu];
            //AEC_DATA_inner_tmp->map_cu_mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_above_line_using[pic_x_scu];
            //mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_above_line_using[pic_x_scu];
        }
        else {
            AEC_DATA_inner_tmp.map_cu_mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_inner[pic_x_scu * 16L + (pic_y_scu - 1)];
            //mode_tmp1[0] = FEC_info_local->map_ptr_map_cu_mode_inner[pic_x_scu * 16L + (pic_y_scu - 1)];
        }

        if (x_scu == min_scu_x) {
            AEC_DATA_inner_tmp.map_cu_mode_tmp1[1] = FEC_info_local->map_ptr_map_cu_mode_inner_left[pic_y_scu];
            //mode_tmp1[1] = FEC_info_local->map_ptr_map_cu_mode_inner_left[pic_y_scu];
        }
        else {
            AEC_DATA_inner_tmp.map_cu_mode_tmp1[1] = FEC_info_local->map_ptr_map_cu_mode_inner[(pic_x_scu - 1) * 16L + pic_y_scu];
            //mode_tmp1[1] = FEC_info_local->map_ptr_map_cu_mode_inner[(pic_x_scu - 1) * 16L + pic_y_scu];
        }


        if (type == 0)
        {
            AEC_DATA_inner_tmp.tree_status = tree_status;
            AEC_DATA_inner_tmp.cons_pred_mode = cons_pred_mode;
            AEC_DATA_inner_tmp.x = x0;
            AEC_DATA_inner_tmp.y = y0;
        }
        else //type ==1
        {
            AEC_DATA_inner_tmp.tree_status = TREE_C;
            AEC_DATA_inner_tmp.cons_pred_mode = NO_MODE_CONS;
            AEC_DATA_inner_tmp.x = x0;
            AEC_DATA_inner_tmp.y = y0;
        }

        aec_enc_eco_tree_phase2(ctu_map_cu_data, pred_mode, tb_part, aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, &AEC_DATA_inner_tmp,
            type, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, line_idx_in_lcu, map_scu_inner, min_scu_x, min_scu_y, srcc_for_aec, last_lcu_delta_qp);
        
        // int i, j, w, h;
        // int idx;
        //u32* map_cu_mode;
        // w = (mod_info_curr->cu_width >> MIN_CU_LOG2);
        // h = (mod_info_curr->cu_height >> MIN_CU_LOG2);

//         int cu_cbf_flag;
// #if CHROMA_NOT_SPLIT // encoder cu_cbf based on cbf_y in TREE_L
//         if (AEC_DATA_inner_tmp.tree_status == TREE_LC)
//         {
//             cu_cbf_flag = is_cu_nz(mod_info_curr->num_nz);
//         }
//         else if (AEC_DATA_inner_tmp.tree_status == TREE_L)
//         {
//             cu_cbf_flag = is_cu_plane_nz(mod_info_curr->num_nz, Y_C);
//         }
//         else
//             assert(0);
// #endif
        
        //map_cu_mode = ctx->map.map_cu_mode + mod_info_curr->scup;
//         for (i = 0; i < h; i++)
//         {
//             for (j = 0; j < w; j++)
//             {
//                 if (AEC_DATA_inner_tmp.skip_flag)
//                 {
//                     MCU_SET_SF(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu + j)* 16 +pic_y_scu + i]);
//                 }
//                 else
//                 {
//                     MCU_CLR_SF(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu + j)* 16 +pic_y_scu + i]);
//                 }
// #if USE_IBC
//                 if (ctx->info.pic_header.ibc_flag)
//                 {
//                     if (ctu_map_cu_data->ibc_flag[cup])
//                     {
//                         MCU_SET_IBC(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu + j)* 16 +pic_y_scu + i]);
    
//                     }
//                     else
//                     {
//                         MCU_CLR_IBC(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu + j)* 16 +pic_y_scu + i]);
//                     }
//                 }
// #endif
//                 if (cu_cbf_flag)
//                 {
// #if CUDQP    
//                     if (AEC_DATA_inner_tmp.tree_status != TREE_C && com_is_cu_dqp(&ctx->info))
//                     {
//                         MCU_SET_QP(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu + j)* 16 +pic_y_scu + i], AEC_DATA_inner_tmp.qp_y);
//                         assert(AEC_DATA_inner_tmp.qp_y >= 0 && AEC_DATA_inner_tmp.qp_y <= MAX_QUANT_BASE + ctx->info.qp_offset_bit_depth);
//                     }
// #endif    
//                 }
//                 else
//                 {
// #if CUDQP    
//                     if (AEC_DATA_inner_tmp.tree_status != TREE_C && com_is_cu_dqp(&ctx->info))
//                     {
//                         MCU_SET_QP(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu + j)* 16 +pic_y_scu + i], aec_pred_qp);
//                         assert(aec_pred_qp >= 0 && aec_pred_qp <= MAX_QUANT_BASE + ctx->info.qp_offset_bit_depth);
//                     }
// #endif    
//                 }
//                 MCU_SET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu + j)* 16 +pic_y_scu + i]);
//                 if (ctu_map_cu_data->pred_mode[cup] == MODE_INTRA)
//                 {
//                     MCU_SET_INTRA_FLAG(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu + j)* 16 +pic_y_scu + i]);
//                 }
//                 else
//                 {
//                     MCU_CLEAR_INTRA_FLAG(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu + j)* 16 +pic_y_scu + i]);
//                 }
//                 //MCU_SET_X_SCU_OFF(map_cu_mode[i * ctx->info.pic_width_in_scu + j], j);
//                 //MCU_SET_Y_SCU_OFF(map_cu_mode[i * ctx->info.pic_width_in_scu + j], i);
//                 MCU_SET_LOGW(FEC_info_local->map_ptr_map_cu_mode_inner[(pic_x_scu + j) * 16 + pic_y_scu + i], mod_info_curr->cu_width_log2);
//                 MCU_SET_LOGH(FEC_info_local->map_ptr_map_cu_mode_inner[(pic_x_scu + j) * 16 + pic_y_scu + i], mod_info_curr->cu_height_log2);
//             }
//         }

    }
#endif
}

//FILE* fp = fopen("out.txt", "w");
//static int count = 0;
void aec_stage3_phase2_1bin(int num, u8 method0, u32 symbol0, SBAC_CTX_MODEL model1_t0, SBAC_CTX_MODEL model2_t0,
    u8 method1, u32 symbol1, SBAC_CTX_MODEL model1_t1, SBAC_CTX_MODEL model2_t1,
    u8 method2, u32 symbol2, SBAC_CTX_MODEL model1_t2, SBAC_CTX_MODEL model2_t2,
    u8 method3, u32 symbol3, SBAC_CTX_MODEL model1_t3, SBAC_CTX_MODEL model2_t3)
{
    //fprintf(fp, "%d, %d, %d, %d\n", method0, symbol0, model1_t0, model2_t0);
    // count++;
    // if (count == 72414)
    // {
    //     int t = 0;
    // }
    //assert(method0 <= 4 && method0 >= 0);
    if (!(method0 <= 4 && method0 >= 0))
        printf("0");
    SBAC_CTX_MODEL* model1;
    SBAC_CTX_MODEL* model2;
    u32 symbol;
    symbol = symbol0;
    model1 = model1_t0 + (&aec_ctx_phase2)->skip_flag - 1;
    model2 = model2_t0 + (&aec_ctx_phase2)->last2 - 1;
#if AEC_STAGE1_2_DEBUG  
    stage3sim(num, method0, symbol0, model1_t0, model2_t0,
        method1, symbol1, model1_t1, model2_t1,
        method2, symbol2, model1_t2, model2_t2,
        method3, symbol3, model1_t3, model2_t3);
#endif
    //u32 code = aec_sbac_local.code;      
    if (method0 == 0) {
        enc_sbac_encode_bin(symbol, &aec_sbac_local, model1, &AEC_DATA_output.bs);
    }
    else if (method0 == 1) {
        sbac_encode_bin_ep(symbol, &aec_sbac_local, &AEC_DATA_output.bs);
    }
    else if (method0 == 2) {
        enc_sbac_encode_binW(symbol, &aec_sbac_local, model1, model2, &AEC_DATA_output.bs);
    }
    else if (method0 == 3) {
        enc_sbac_encode_bin_trm(symbol, &aec_sbac_local, &AEC_DATA_output.bs);
        if (symbol == 1) {
            is_ipcm = 0;
            enc_sbac_finish_phase2(&AEC_DATA_output.bs);
        }
    }
    else {
        aec_ctx_init();
    }
    //code = aec_sbac_local.code;
}

#if AEC_STAGE2_HLS
hls::stream<u448> OutStream;
#endif
void aec_stage3_phase2(int num, u8 method0, u32 symbol0, SBAC_CTX_MODEL model1_t0, SBAC_CTX_MODEL model2_t0,
    u8 method1, u32 symbol1, SBAC_CTX_MODEL model1_t1, SBAC_CTX_MODEL model2_t1,
    u8 method2, u32 symbol2, SBAC_CTX_MODEL model1_t2, SBAC_CTX_MODEL model2_t2,
    u8 method3, u32 symbol3, SBAC_CTX_MODEL model1_t3, SBAC_CTX_MODEL model2_t3)
{
#if AEC_STAGE2_HLS
#pragma HLS inline
    u448 out_tmp;
    out_tmp(447, 416) = (u32)num;
    out_tmp(415, 408) = method0;
    out_tmp(407, 376) = symbol0;
    out_tmp(375, 344) = (u32)model2_t0;
    out_tmp(343, 312) = (u32)model1_t0;
    out_tmp(311, 304) = method1;
    out_tmp(303, 272) = symbol1;
    out_tmp(271, 240) = (u32)model2_t1;
    out_tmp(239, 208) = (u32)model1_t1;
    out_tmp(207, 200) = method2;
    out_tmp(199, 168) = symbol2;
    out_tmp(167, 136) = (u32)model2_t2;
    out_tmp(135, 104) = (u32)model1_t2;
    out_tmp(103, 96) = method3;
    out_tmp(95, 64) = symbol3;
    out_tmp(63, 32) = (u32)model2_t3;
    out_tmp(31, 0) = (u32)model1_t3;

    OutStream.write(out_tmp);
#else
    for (int i = 0; i < num; i++)
    {
        u8 method; 
        u32 symbol; 
        SBAC_CTX_MODEL model1; 
        SBAC_CTX_MODEL model2;
        if (i == 0) {
            method = method0; symbol = symbol0; model1 = model1_t0; model2 = model2_t0;
        }
        else if (i == 1) {
            method = method1; symbol = symbol1; model1 = model1_t1; model2 = model2_t1;
        }
        else if (i == 2) {
            method = method2; symbol = symbol2; model1 = model1_t2; model2 = model2_t2;
        }
        else if (i == 3) {
            method = method3; symbol = symbol3; model1 = model1_t3; model2 = model2_t1;
        }
        aec_stage3_phase2_1bin(1,
            method, symbol, model1, model2,
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0 
            );
    }
#endif
}

int aec_enc_eco_tree_4_phase2(bool is_cu_dqp_flag, int aec_num_delta_qp, int aec_pred_qp, ENC_CTX_HLS* ctx, ENC_CU_DATA* ctu_map_cu_data,
    int x0, int y0, int cup, int cu_width, int cu_height, int cud
    , const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status, AEC_input* AEC_DATA_input, FEC_info* FEC_info_local
    , u32 map_cu_mode_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], u32 map_scu_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], int min_scu_x, int min_scu_y, U8 line_idx_in_lcu[3], SRCC_FOR_AEC* srcc_for_aec, int last_lcu_delta_qp[1])
{
    u8 pred_mode = 0;
    int tb_part = 0;
// #if CUDQP
//     if (is_cu_dqp_flag && cu_width * cu_height >= ctx->info.pic_header.cu_qp_group_area_size)
//     {
//         assert(tree_status != TREE_C);
//         aec_num_delta_qp = 0;
//         // ctx->cu_qp_group.cu_qp_group_x = x0;
//         // ctx->cu_qp_group.cu_qp_group_y = y0;
//         //int luma_scup = PEL2SCU(x0) + PEL2SCU(y0) * ctx->info.pic_width_in_scu;
//         //aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(ctx->map.map_scu[luma_scup - 1])) ? MCU_GET_QP(ctx->map.map_scu[luma_scup - 1]) : ctx->info.shext.slice_qp;
//         int x_scu = x0 >> MIN_CU_LOG2;
//         int y_scu = y0 >> MIN_CU_LOG2;
//         int pic_x_scu = x_scu - min_scu_x;
//         int pic_y_scu = y_scu - min_scu_y;
//         if (x_scu == min_scu_x) {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu])) ? MCU_GET_QP(FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         else {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu])) ? MCU_GET_QP(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         assert(aec_pred_qp >= 0 && aec_pred_qp <= MAX_QUANT_BASE + ctx->info.qp_offset_bit_depth);
//     }
// #endif
    {
        pred_mode = ctu_map_cu_data->pred_mode[cup];
        tb_part = ctu_map_cu_data->tb_part[cup];
// #if CUDQP
//         int i, j;
// 	    int  aec_num_nz[MAX_NUM_TB][N_C];
//         //s16 coef[3][MAX_CU_DIM] = { 0 };
//         if (!(pred_mode == MODE_SKIP))
//         {
//         /* get coefficients and tq */
//             //coef_rect_to_series(ctx, ctu_map_cu_data->coef_y, ctu_map_cu_data->coef_u, ctu_map_cu_data->coef_v, x0, y0, cu_width, cu_height, coef);
// #if CUDQP_PLATFORM_BUGFIX
//             int sta_comp = tree_status == TREE_C ? U_C : Y_C;
//             int end_comp = tree_status == TREE_L ? Y_C : V_C;
//             for (i = sta_comp; i <= end_comp; i++)
// #else
//             for (i = 0; i < N_C; i++)
// #endif
//             {
//                 int part_num = get_part_num((PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N));
    
//                 for (j = 0; j < part_num; j++)
//                 {
//                     int pos_x, pos_y, tbp;
//                     get_tb_start_pos_aec(cu_width, cu_height, (PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N), j, &pos_x, &pos_y);
//                     pos_x >>= MIN_CU_LOG2;
//                     pos_y >>= MIN_CU_LOG2;
//                     tbp = cup + pos_y * (ctx->info.max_cuwh >> MIN_CU_LOG2) + pos_x;
//                     aec_num_nz[j][i] = ctu_map_cu_data->num_nz_coef[i][tbp];
//                 }
//             }
//         }
//         if (is_cu_dqp_flag && is_cu_nz(aec_num_nz))
//         {
//             int aec_qp_y = MCU_GET_QP(/*cu_data->map_scu[cup]*/ctu_map_cu_data->map_scu[cup]);
//             aec_num_delta_qp++;
//             aec_pred_qp = aec_qp_y;
//             //if (/*qp_y - */aec_pred_qp != 56)
//             //	printf("wrong\n");
//         }
// #endif
        aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
    }

    return 0;
}

int aec_enc_eco_tree_8x4_phase2(bool is_cu_dqp_flag, int aec_num_delta_qp, int aec_pred_qp, ENC_CTX_HLS* ctx, ENC_CU_DATA* ctu_map_cu_data,
    int x0, int y0, int cup, int cu_width, int cu_height, int cud
    , const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local
    , u32 map_cu_mode_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], u32 map_scu_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], int min_scu_x, int min_scu_y, U8 line_idx_in_lcu[3], SRCC_FOR_AEC* srcc_for_aec, int last_lcu_delta_qp[1])
{
    int ret;
    s8 split_mode;
    u8 pred_mode = 0;
    int tb_part = 0;

#if CHROMA_NOT_SPLIT
    u8 tree_status_child = TREE_LC;
#endif
#if MODE_CONS
    u8 cons_pred_mode_child;
    u8 cons_pred_mode_child_tmp;
#endif

    aec_com_get_split_mode(&split_mode, &cons_pred_mode_child_tmp, cud, cup, cu_width, cu_height, ctx->info.max_cuwh, ctu_map_cu_data->split_mode);
    aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 2, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, split_mode, 0, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);

// #if CUDQP
//     if (is_cu_dqp_flag && cu_width * cu_height >= ctx->info.pic_header.cu_qp_group_area_size)
//     {
//         assert(tree_status != TREE_C);
//         aec_num_delta_qp = 0;
//         // ctx->cu_qp_group.cu_qp_group_x = x0;
//         // ctx->cu_qp_group.cu_qp_group_y = y0;
//         //int luma_scup = PEL2SCU(x0) + PEL2SCU(y0) * ctx->info.pic_width_in_scu;
//         //aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(ctx->map.map_scu[luma_scup - 1])) ? MCU_GET_QP(ctx->map.map_scu[luma_scup - 1]) : ctx->info.shext.slice_qp;
//         int x_scu = x0 >> MIN_CU_LOG2;
//         int y_scu = y0 >> MIN_CU_LOG2;
//         int pic_x_scu = x_scu - min_scu_x;
//         int pic_y_scu = y_scu - min_scu_y;
//         if (x_scu == min_scu_x) {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu])) ? MCU_GET_QP(FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         else {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu])) ? MCU_GET_QP(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         assert(aec_pred_qp >= 0 && aec_pred_qp <= MAX_QUANT_BASE + ctx->info.qp_offset_bit_depth);
//     }
// #endif
    if (split_mode != NO_SPLIT)
    {
#if CHROMA_NOT_SPLIT
        tree_status_child = (tree_status == TREE_LC && aec_com_tree_split(cu_width, cu_height, (SPLIT_MODE)split_mode)) ? TREE_L : tree_status;
#endif
#if MODE_CONS
        if (cons_pred_mode == NO_MODE_CONS && aec_com_constrain_pred_mode(cu_width, cu_height, (SPLIT_MODE)split_mode, ctx->slice_type))
        {
            cons_pred_mode_child = cons_pred_mode_child_tmp;
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, cons_pred_mode_child, 0, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }
        else
        {
            cons_pred_mode_child = cons_pred_mode;
        }
#endif
        COM_SPLIT_STRUCT split_struct;
        aec_com_split_get_part_structure(split_mode, x0, y0, cu_width, cu_height, cup, cud, ctx->log2_culine, &split_struct);
        for (int part_num = 0; part_num < SPLIT_MAX_PART_COUNT; ++part_num)
        {
            int cur_part_num = part_num;
            int sub_cuw = split_struct.width[cur_part_num];
            int sub_cuh = split_struct.height[cur_part_num];
            int x_pos = split_struct.x_pos[cur_part_num];
            int y_pos = split_struct.y_pos[cur_part_num];

            if (x_pos < ctx->info.pic_width && y_pos < ctx->info.pic_height && part_num < split_struct.part_count)
            {
                ret = aec_enc_eco_tree_4_phase2(is_cu_dqp_flag, aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data,x_pos, y_pos, split_struct.cup[cur_part_num], sub_cuw, sub_cuh, split_struct.cud
                    , split_mode, INC_QT_DEPTH(qt_depth, split_mode), INC_BET_DEPTH(bet_depth, split_mode), cons_pred_mode_child, tree_status_child, AEC_DATA_input, FEC_info_local
                    , map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
            }
        }
#if CHROMA_NOT_SPLIT
        if (tree_status_child == TREE_L && tree_status == TREE_LC)
        {
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 1, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }
#endif
    }
    else
    {
        pred_mode = ctu_map_cu_data->pred_mode[cup];
        tb_part = ctu_map_cu_data->tb_part[cup];
// #if CUDQP
//         int i, j;
// 	    int  aec_num_nz[MAX_NUM_TB][N_C];
//         //s16 coef[3][MAX_CU_DIM] = { 0 };
//         if (!(pred_mode == MODE_SKIP))
//         {
//         /* get coefficients and tq */
//             //coef_rect_to_series(ctx, ctu_map_cu_data->coef_y, ctu_map_cu_data->coef_u, ctu_map_cu_data->coef_v, x0, y0, cu_width, cu_height, coef);
// #if CUDQP_PLATFORM_BUGFIX
//             int sta_comp = tree_status == TREE_C ? U_C : Y_C;
//             int end_comp = tree_status == TREE_L ? Y_C : V_C;
//             for (i = sta_comp; i <= end_comp; i++)
// #else
//             for (i = 0; i < N_C; i++)
// #endif
//             {
//                 int part_num = get_part_num((PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N));
    
//                 for (j = 0; j < part_num; j++)
//                 {
//                     int pos_x, pos_y, tbp;
//                     get_tb_start_pos_aec(cu_width, cu_height, (PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N), j, &pos_x, &pos_y);
//                     pos_x >>= MIN_CU_LOG2;
//                     pos_y >>= MIN_CU_LOG2;
//                     tbp = cup + pos_y * (ctx->info.max_cuwh >> MIN_CU_LOG2) + pos_x;
//                     aec_num_nz[j][i] = ctu_map_cu_data->num_nz_coef[i][tbp];
//                 }
//             }
//         }
//         if (is_cu_dqp_flag && is_cu_nz(aec_num_nz))
//         {
//             int aec_qp_y = MCU_GET_QP(/*cu_data->map_scu[cup]*/ctu_map_cu_data->map_scu[cup]);
//             aec_num_delta_qp++;
//             aec_pred_qp = aec_qp_y;
//             //if (/*qp_y - */aec_pred_qp != 56)
//             //	printf("wrong\n");
//         }
// #endif        
        aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
    }
    return COM_OK;
}

int aec_enc_eco_tree_8_phase2(bool is_cu_dqp_flag, int aec_num_delta_qp, int aec_pred_qp, ENC_CTX_HLS* ctx, ENC_CU_DATA* ctu_map_cu_data,
    int x0, int y0, int cup, int cu_width, int cu_height, int cud
    , const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local
    , u32 map_cu_mode_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], u32 map_scu_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], int min_scu_x, int min_scu_y, U8 line_idx_in_lcu[3], SRCC_FOR_AEC* srcc_for_aec, int last_lcu_delta_qp[1])
{
    int ret;
    s8 split_mode;
    u8 pred_mode = 0;
    int tb_part = 0;
#if CHROMA_NOT_SPLIT
    u8 tree_status_child = TREE_LC;
#endif
#if MODE_CONS
    u8 cons_pred_mode_child;
    u8 cons_pred_mode_child_tmp;
#endif

    aec_com_get_split_mode(&split_mode, &cons_pred_mode_child_tmp, cud, cup, cu_width, cu_height, ctx->info.max_cuwh, ctu_map_cu_data->split_mode);
    aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 2, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, split_mode, 0, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);

// #if CUDQP
//     if (is_cu_dqp_flag && cu_width * cu_height >= ctx->info.pic_header.cu_qp_group_area_size)
//     {
//         assert(tree_status != TREE_C);
//         aec_num_delta_qp = 0;
//         // ctx->cu_qp_group.cu_qp_group_x = x0;
//         // ctx->cu_qp_group.cu_qp_group_y = y0;
//         //int luma_scup = PEL2SCU(x0) + PEL2SCU(y0) * ctx->info.pic_width_in_scu;
//         //aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(ctx->map.map_scu[luma_scup - 1])) ? MCU_GET_QP(ctx->map.map_scu[luma_scup - 1]) : ctx->info.shext.slice_qp;
//         int x_scu = x0 >> MIN_CU_LOG2;
//         int y_scu = y0 >> MIN_CU_LOG2;
//         int pic_x_scu = x_scu - min_scu_x;
//         int pic_y_scu = y_scu - min_scu_y;
//         if (x_scu == min_scu_x) {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu])) ? MCU_GET_QP(FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         else {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu])) ? MCU_GET_QP(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         assert(aec_pred_qp >= 0 && aec_pred_qp <= MAX_QUANT_BASE + ctx->info.qp_offset_bit_depth);
//     }
// #endif
    if (split_mode != NO_SPLIT)
    {
#if CHROMA_NOT_SPLIT
        tree_status_child = (tree_status == TREE_LC && aec_com_tree_split(cu_width, cu_height, (SPLIT_MODE)split_mode)) ? TREE_L : tree_status;
#endif
#if MODE_CONS
        if (cons_pred_mode == NO_MODE_CONS && aec_com_constrain_pred_mode(cu_width, cu_height, (SPLIT_MODE)split_mode, ctx->slice_type))
        {
            cons_pred_mode_child = cons_pred_mode_child_tmp;
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, cons_pred_mode_child, 0, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }
        else
        {
            cons_pred_mode_child = cons_pred_mode;
        }
#endif
        COM_SPLIT_STRUCT split_struct;
        aec_com_split_get_part_structure(split_mode, x0, y0, cu_width, cu_height, cup, cud, ctx->log2_culine, &split_struct);
        for (int part_num = 0; part_num < SPLIT_MAX_PART_COUNT; ++part_num)
        {
            int cur_part_num = part_num;
            int sub_cuw = split_struct.width[cur_part_num];
            int sub_cuh = split_struct.height[cur_part_num];
            int x_pos = split_struct.x_pos[cur_part_num];
            int y_pos = split_struct.y_pos[cur_part_num];

            if (x_pos < ctx->info.pic_width && y_pos < ctx->info.pic_height && part_num < split_struct.part_count)
            {
                ret = aec_enc_eco_tree_8x4_phase2(is_cu_dqp_flag, aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data,x_pos, y_pos, split_struct.cup[cur_part_num], sub_cuw, sub_cuh, split_struct.cud
                    , split_mode, INC_QT_DEPTH(qt_depth, split_mode), INC_BET_DEPTH(bet_depth, split_mode), cons_pred_mode_child, tree_status_child,
                    AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
            }
        }
#if CHROMA_NOT_SPLIT
        if (tree_status_child == TREE_L && tree_status == TREE_LC)
        {
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 1, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }
#endif
    }
    else
    {
        pred_mode = ctu_map_cu_data->pred_mode[cup];
        tb_part = ctu_map_cu_data->tb_part[cup];
// #if CUDQP
//         int i, j;
// 	    int  aec_num_nz[MAX_NUM_TB][N_C];
//         //s16 coef[3][MAX_CU_DIM] = { 0 };
//         if (!(pred_mode == MODE_SKIP))
//         {
//         /* get coefficients and tq */
//             //coef_rect_to_series(ctx, ctu_map_cu_data->coef_y, ctu_map_cu_data->coef_u, ctu_map_cu_data->coef_v, x0, y0, cu_width, cu_height, coef);
// #if CUDQP_PLATFORM_BUGFIX
//             int sta_comp = tree_status == TREE_C ? U_C : Y_C;
//             int end_comp = tree_status == TREE_L ? Y_C : V_C;
//             for (i = sta_comp; i <= end_comp; i++)
// #else
//             for (i = 0; i < N_C; i++)
// #endif
//             {
//                 int part_num = get_part_num((PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N));
    
//                 for (j = 0; j < part_num; j++)
//                 {
//                     int pos_x, pos_y, tbp;
//                     get_tb_start_pos_aec(cu_width, cu_height, (PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N), j, &pos_x, &pos_y);
//                     pos_x >>= MIN_CU_LOG2;
//                     pos_y >>= MIN_CU_LOG2;
//                     tbp = cup + pos_y * (ctx->info.max_cuwh >> MIN_CU_LOG2) + pos_x;
//                     aec_num_nz[j][i] = ctu_map_cu_data->num_nz_coef[i][tbp];
//                 }
//             }
//         }
//         if (is_cu_dqp_flag && is_cu_nz(aec_num_nz))
//         {
//             int aec_qp_y = MCU_GET_QP(/*cu_data->map_scu[cup]*/ctu_map_cu_data->map_scu[cup]);
//             aec_num_delta_qp++;
//             aec_pred_qp = aec_qp_y;
//             //if (/*qp_y - */aec_pred_qp != 56)
//             //	printf("wrong\n");
//         }
// #endif
        aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        line_idx_in_lcu[0] += cu_width * cu_height / 16;
        line_idx_in_lcu[1] += cu_width * cu_height / 64;
        line_idx_in_lcu[2] += cu_width * cu_height / 64;
    }
    return COM_OK;
}

int aec_enc_eco_tree_16x8_phase2(bool is_cu_dqp_flag, int aec_num_delta_qp, int aec_pred_qp, ENC_CTX_HLS* ctx, ENC_CU_DATA* ctu_map_cu_data,
    int x0, int y0, int cup, int cu_width, int cu_height, int cud
    , const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local
    , u32 map_cu_mode_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], u32 map_scu_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], int min_scu_x, int min_scu_y, U8 line_idx_in_lcu[3], SRCC_FOR_AEC* srcc_for_aec, int last_lcu_delta_qp[1])
{
    int ret;
    s8 split_mode;
    u8 pred_mode = 0;
    int tb_part = 0;
#if CHROMA_NOT_SPLIT
    u8 tree_status_child = TREE_LC;
#endif
#if MODE_CONS
    u8 cons_pred_mode_child;
    u8 cons_pred_mode_child_tmp;
#endif
    aec_com_get_split_mode(&split_mode, &cons_pred_mode_child_tmp, cud, cup, cu_width, cu_height, ctx->info.max_cuwh, ctu_map_cu_data->split_mode);
    aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 2, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, split_mode, 0, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
// #if CUDQP
//     if (is_cu_dqp_flag && cu_width * cu_height >= ctx->info.pic_header.cu_qp_group_area_size)
//     {
//         assert(tree_status != TREE_C);
//         aec_num_delta_qp = 0;
//         // ctx->cu_qp_group.cu_qp_group_x = x0;
//         // ctx->cu_qp_group.cu_qp_group_y = y0;
//         //int luma_scup = PEL2SCU(x0) + PEL2SCU(y0) * ctx->info.pic_width_in_scu;
//         //aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(ctx->map.map_scu[luma_scup - 1])) ? MCU_GET_QP(ctx->map.map_scu[luma_scup - 1]) : ctx->info.shext.slice_qp;
//         int x_scu = x0 >> MIN_CU_LOG2;
//         int y_scu = y0 >> MIN_CU_LOG2;
//         int pic_x_scu = x_scu - min_scu_x;
//         int pic_y_scu = y_scu - min_scu_y;
//         if (x_scu == min_scu_x) {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu])) ? MCU_GET_QP(FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         else {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu])) ? MCU_GET_QP(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         assert(aec_pred_qp >= 0 && aec_pred_qp <= MAX_QUANT_BASE + ctx->info.qp_offset_bit_depth);
//     }
// #endif
    if (split_mode != NO_SPLIT)
    {
#if CHROMA_NOT_SPLIT
        tree_status_child = (tree_status == TREE_LC && aec_com_tree_split(cu_width, cu_height, (SPLIT_MODE)split_mode)) ? TREE_L : tree_status;
#endif
#if MODE_CONS
        if (cons_pred_mode == NO_MODE_CONS && aec_com_constrain_pred_mode(cu_width, cu_height, (SPLIT_MODE)split_mode, ctx->slice_type))
        {
            cons_pred_mode_child = cons_pred_mode_child_tmp;
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, cons_pred_mode_child, 0, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }
        else
        {
            cons_pred_mode_child = cons_pred_mode;
        }
#endif
        COM_SPLIT_STRUCT split_struct;
        aec_com_split_get_part_structure(split_mode, x0, y0, cu_width, cu_height, cup, cud, ctx->log2_culine, &split_struct);
        for (int part_num = 0; part_num < SPLIT_MAX_PART_COUNT; ++part_num)
        {
            int cur_part_num = part_num;
            int sub_cuw = split_struct.width[cur_part_num];
            int sub_cuh = split_struct.height[cur_part_num];
            int x_pos = split_struct.x_pos[cur_part_num];
            int y_pos = split_struct.y_pos[cur_part_num];

            if (x_pos < ctx->info.pic_width && y_pos < ctx->info.pic_height && part_num < split_struct.part_count)
            {
                ret = aec_enc_eco_tree_8_phase2(is_cu_dqp_flag, aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data,x_pos, y_pos, split_struct.cup[cur_part_num], sub_cuw, sub_cuh, split_struct.cud
                    , split_mode, INC_QT_DEPTH(qt_depth, split_mode), INC_BET_DEPTH(bet_depth, split_mode), cons_pred_mode_child, tree_status_child,
                    AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
            }
        }
#if CHROMA_NOT_SPLIT
        if (tree_status_child == TREE_L && tree_status == TREE_LC)
        {
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 1, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }
#endif
    }
    else
    {
        pred_mode = ctu_map_cu_data->pred_mode[cup];
        tb_part = ctu_map_cu_data->tb_part[cup];
// #if CUDQP
//         int i, j;
// 	    int  aec_num_nz[MAX_NUM_TB][N_C];
//         //s16 coef[3][MAX_CU_DIM] = { 0 };
//         if (!(pred_mode == MODE_SKIP))
//         {
//         /* get coefficients and tq */
//             //coef_rect_to_series(ctx, ctu_map_cu_data->coef_y, ctu_map_cu_data->coef_u, ctu_map_cu_data->coef_v, x0, y0, cu_width, cu_height, coef);
// #if CUDQP_PLATFORM_BUGFIX
//             int sta_comp = tree_status == TREE_C ? U_C : Y_C;
//             int end_comp = tree_status == TREE_L ? Y_C : V_C;
//             for (i = sta_comp; i <= end_comp; i++)
// #else
//             for (i = 0; i < N_C; i++)
// #endif
//             {
//                 int part_num = get_part_num((PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N));
    
//                 for (j = 0; j < part_num; j++)
//                 {
//                     int pos_x, pos_y, tbp;
//                     get_tb_start_pos_aec(cu_width, cu_height, (PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N), j, &pos_x, &pos_y);
//                     pos_x >>= MIN_CU_LOG2;
//                     pos_y >>= MIN_CU_LOG2;
//                     tbp = cup + pos_y * (ctx->info.max_cuwh >> MIN_CU_LOG2) + pos_x;
//                     aec_num_nz[j][i] = ctu_map_cu_data->num_nz_coef[i][tbp];
//                 }
//             }
//         }
//         if (is_cu_dqp_flag && is_cu_nz(aec_num_nz))
//         {
//             int aec_qp_y = MCU_GET_QP(/*cu_data->map_scu[cup]*/ctu_map_cu_data->map_scu[cup]);
//             aec_num_delta_qp++;
//             aec_pred_qp = aec_qp_y;
//             //if (/*qp_y - */aec_pred_qp != 56)
//             //	printf("wrong\n");
//         }
// #endif
        aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        line_idx_in_lcu[0] += cu_width * cu_height / 16;
        line_idx_in_lcu[1] += cu_width * cu_height / 64;
        line_idx_in_lcu[2] += cu_width * cu_height / 64;
    }
    return COM_OK;

}

int aec_enc_eco_tree_16_phase2(bool is_cu_dqp_flag, int aec_num_delta_qp, int aec_pred_qp, ENC_CTX_HLS* ctx, ENC_CU_DATA* ctu_map_cu_data,
    int x0, int y0, int cup, int cu_width, int cu_height, int cud
    , const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local
    , u32 map_cu_mode_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], u32 map_scu_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], int min_scu_x, int min_scu_y, U8 line_idx_in_lcu[3], SRCC_FOR_AEC* srcc_for_aec, int last_lcu_delta_qp[1])
{
    int ret;
    s8 split_mode;
    u8 pred_mode = 0;
    int tb_part = 0;
#if CHROMA_NOT_SPLIT
    u8 tree_status_child = TREE_LC;
#endif
#if MODE_CONS
    u8 cons_pred_mode_child;
    u8 cons_pred_mode_child_tmp;
#endif

    aec_com_get_split_mode(&split_mode, &cons_pred_mode_child_tmp, cud, cup, cu_width, cu_height, ctx->info.max_cuwh, ctu_map_cu_data->split_mode);
    aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 2, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, split_mode, 0, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);

// #if CUDQP
//     if (is_cu_dqp_flag && cu_width * cu_height >= ctx->info.pic_header.cu_qp_group_area_size)
//     {
//         assert(tree_status != TREE_C);
//         aec_num_delta_qp = 0;
//         // ctx->cu_qp_group.cu_qp_group_x = x0;
//         // ctx->cu_qp_group.cu_qp_group_y = y0;
//         //int luma_scup = PEL2SCU(x0) + PEL2SCU(y0) * ctx->info.pic_width_in_scu;
//         //aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(ctx->map.map_scu[luma_scup - 1])) ? MCU_GET_QP(ctx->map.map_scu[luma_scup - 1]) : ctx->info.shext.slice_qp;
//         int x_scu = x0 >> MIN_CU_LOG2;
//         int y_scu = y0 >> MIN_CU_LOG2;
//         int pic_x_scu = x_scu - min_scu_x;
//         int pic_y_scu = y_scu - min_scu_y;
//         if (x_scu == min_scu_x) {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu])) ? MCU_GET_QP(FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         else {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu])) ? MCU_GET_QP(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         assert(aec_pred_qp >= 0 && aec_pred_qp <= MAX_QUANT_BASE + ctx->info.qp_offset_bit_depth);
//     }
// #endif

    if (split_mode != NO_SPLIT)
    {
#if CHROMA_NOT_SPLIT
        tree_status_child = (tree_status == TREE_LC && aec_com_tree_split(cu_width, cu_height, (SPLIT_MODE)split_mode)) ? TREE_L : tree_status;
#endif
#if MODE_CONS
        if (cons_pred_mode == NO_MODE_CONS && aec_com_constrain_pred_mode(cu_width, cu_height, (SPLIT_MODE)split_mode, ctx->slice_type))
        {
            cons_pred_mode_child = cons_pred_mode_child_tmp;
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, cons_pred_mode_child, 0, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }
        else
        {
            cons_pred_mode_child = cons_pred_mode;
        }
#endif
        COM_SPLIT_STRUCT split_struct;
        aec_com_split_get_part_structure(split_mode, x0, y0, cu_width, cu_height, cup, cud, ctx->log2_culine, &split_struct);
        for (int part_num = 0; part_num < SPLIT_MAX_PART_COUNT; ++part_num)
        {
            int cur_part_num = part_num;
            int sub_cuw = split_struct.width[cur_part_num];
            int sub_cuh = split_struct.height[cur_part_num];
            int x_pos = split_struct.x_pos[cur_part_num];
            int y_pos = split_struct.y_pos[cur_part_num];

            if (x_pos < ctx->info.pic_width && y_pos < ctx->info.pic_height && part_num < split_struct.part_count)
            {
                ret = aec_enc_eco_tree_16x8_phase2(is_cu_dqp_flag, aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data,x_pos, y_pos, split_struct.cup[cur_part_num], sub_cuw, sub_cuh, split_struct.cud
                    , split_mode, INC_QT_DEPTH(qt_depth, split_mode), INC_BET_DEPTH(bet_depth, split_mode), cons_pred_mode_child, tree_status_child,
                    AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
            }
        }
#if CHROMA_NOT_SPLIT
        if (tree_status_child == TREE_L && tree_status == TREE_LC)
        {
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 1, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }
#endif
    }
    else
    {
        pred_mode = ctu_map_cu_data->pred_mode[cup];
        tb_part = ctu_map_cu_data->tb_part[cup];
// #if CUDQP
//         int i, j;
// 	    int  aec_num_nz[MAX_NUM_TB][N_C];
//         //s16 coef[3][MAX_CU_DIM] = { 0 };
//         if (!(pred_mode == MODE_SKIP))
//         {
//         /* get coefficients and tq */
//            // coef_rect_to_series(ctx, ctu_map_cu_data->coef_y, ctu_map_cu_data->coef_u, ctu_map_cu_data->coef_v, x0, y0, cu_width, cu_height, coef);
// #if CUDQP_PLATFORM_BUGFIX
//             int sta_comp = tree_status == TREE_C ? U_C : Y_C;
//             int end_comp = tree_status == TREE_L ? Y_C : V_C;
//             for (i = sta_comp; i <= end_comp; i++)
// #else
//             for (i = 0; i < N_C; i++)
// #endif
//             {
//                 int part_num = get_part_num((PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N));
    
//                 for (j = 0; j < part_num; j++)
//                 {
//                     int pos_x, pos_y, tbp;
//                     get_tb_start_pos_aec(cu_width, cu_height, (PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N), j, &pos_x, &pos_y);
//                     pos_x >>= MIN_CU_LOG2;
//                     pos_y >>= MIN_CU_LOG2;
//                     tbp = cup + pos_y * (ctx->info.max_cuwh >> MIN_CU_LOG2) + pos_x;
//                     aec_num_nz[j][i] = ctu_map_cu_data->num_nz_coef[i][tbp];
//                 }
//             }
//         }
//         if (is_cu_dqp_flag && is_cu_nz(aec_num_nz))
//         {
//             int aec_qp_y = MCU_GET_QP(/*cu_data->map_scu[cup]*/ctu_map_cu_data->map_scu[cup]);
//             aec_num_delta_qp++;
//             aec_pred_qp = aec_qp_y;
//             //if (/*qp_y - */aec_pred_qp != 56)
//             //	printf("wrong\n");
//         }
// #endif
        aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        line_idx_in_lcu[0] += cu_width * cu_height / 16;
        line_idx_in_lcu[1] += cu_width * cu_height / 64;
        line_idx_in_lcu[2] += cu_width * cu_height / 64;
    }
    return COM_OK;

}

int aec_enc_eco_tree_32x16_phase2(bool is_cu_dqp_flag, int aec_num_delta_qp, int aec_pred_qp, ENC_CTX_HLS* ctx, ENC_CU_DATA* ctu_map_cu_data,
    int x0, int y0, int cup, int cu_width, int cu_height, int cud
    , const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local
    , u32 map_cu_mode_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], u32 map_scu_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], int min_scu_x, int min_scu_y, U8 line_idx_in_lcu[3], SRCC_FOR_AEC* srcc_for_aec, int last_lcu_delta_qp[1])
{
    int ret;
    s8 split_mode;
    u8 pred_mode = 0;
    int tb_part = 0;

#if CHROMA_NOT_SPLIT
    u8 tree_status_child = TREE_LC;
#endif
#if MODE_CONS
    u8 cons_pred_mode_child;
    u8 cons_pred_mode_child_tmp;
#endif

    aec_com_get_split_mode(&split_mode, &cons_pred_mode_child_tmp, cud, cup, cu_width, cu_height, ctx->info.max_cuwh, ctu_map_cu_data->split_mode);
    aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 2, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, split_mode, 0, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);

// #if CUDQP
//     if (is_cu_dqp_flag && cu_width * cu_height >= ctx->info.pic_header.cu_qp_group_area_size)
//     {
//         assert(tree_status != TREE_C);
//         aec_num_delta_qp = 0;
//         // ctx->cu_qp_group.cu_qp_group_x = x0;
//         // ctx->cu_qp_group.cu_qp_group_y = y0;
//         //int luma_scup = PEL2SCU(x0) + PEL2SCU(y0) * ctx->info.pic_width_in_scu;
//         //aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(ctx->map.map_scu[luma_scup - 1])) ? MCU_GET_QP(ctx->map.map_scu[luma_scup - 1]) : ctx->info.shext.slice_qp;
//         int x_scu = x0 >> MIN_CU_LOG2;
//         int y_scu = y0 >> MIN_CU_LOG2;
//         int pic_x_scu = x_scu - min_scu_x;
//         int pic_y_scu = y_scu - min_scu_y;
//         if (x_scu == min_scu_x) {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu])) ? MCU_GET_QP(FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         else {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu])) ? MCU_GET_QP(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         assert(aec_pred_qp >= 0 && aec_pred_qp <= MAX_QUANT_BASE + ctx->info.qp_offset_bit_depth);
//     }
// #endif
    if (split_mode != NO_SPLIT)
    {
#if CHROMA_NOT_SPLIT
        tree_status_child = (tree_status == TREE_LC && aec_com_tree_split(cu_width, cu_height, (SPLIT_MODE)split_mode)) ? TREE_L : tree_status;
#endif
#if MODE_CONS
        if (cons_pred_mode == NO_MODE_CONS && aec_com_constrain_pred_mode(cu_width, cu_height, (SPLIT_MODE)split_mode, ctx->slice_type))
        {
            cons_pred_mode_child = cons_pred_mode_child_tmp;
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, cons_pred_mode_child, 0, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }
        else
        {
            cons_pred_mode_child = cons_pred_mode;
        }
#endif
        COM_SPLIT_STRUCT split_struct;
        aec_com_split_get_part_structure(split_mode, x0, y0, cu_width, cu_height, cup, cud, ctx->log2_culine, &split_struct);
        for (int part_num = 0; part_num < SPLIT_MAX_PART_COUNT; ++part_num)
        {
            int cur_part_num = part_num;
            int sub_cuw = split_struct.width[cur_part_num];
            int sub_cuh = split_struct.height[cur_part_num];
            int x_pos = split_struct.x_pos[cur_part_num];
            int y_pos = split_struct.y_pos[cur_part_num];

            if (x_pos < ctx->info.pic_width && y_pos < ctx->info.pic_height && part_num < split_struct.part_count)
            {
                ret = aec_enc_eco_tree_16_phase2(is_cu_dqp_flag, aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data,x_pos, y_pos, split_struct.cup[cur_part_num], sub_cuw, sub_cuh, split_struct.cud
                    , split_mode, INC_QT_DEPTH(qt_depth, split_mode), INC_BET_DEPTH(bet_depth, split_mode), cons_pred_mode_child, tree_status_child,
                    AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
            }
        }
#if CHROMA_NOT_SPLIT
        if (tree_status_child == TREE_L && tree_status == TREE_LC)
        {
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 1, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }
#endif
    }
    else
    {
        pred_mode = ctu_map_cu_data->pred_mode[cup];
        tb_part = ctu_map_cu_data->tb_part[cup];
// #if CUDQP
//         int i, j;
// 	    int  aec_num_nz[MAX_NUM_TB][N_C];
//         //s16 coef[3][MAX_CU_DIM] = { 0 };
//         if (!(pred_mode == MODE_SKIP))
//         {
//         /* get coefficients and tq */
//             //coef_rect_to_series(ctx, ctu_map_cu_data->coef_y, ctu_map_cu_data->coef_u, ctu_map_cu_data->coef_v, x0, y0, cu_width, cu_height, coef);
// #if CUDQP_PLATFORM_BUGFIX
//             int sta_comp = tree_status == TREE_C ? U_C : Y_C;
//             int end_comp = tree_status == TREE_L ? Y_C : V_C;
//             for (i = sta_comp; i <= end_comp; i++)
// #else
//             for (i = 0; i < N_C; i++)
// #endif
//             {
//                 int part_num = get_part_num((PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N));
    
//                 for (j = 0; j < part_num; j++)
//                 {
//                     int pos_x, pos_y, tbp;
//                     get_tb_start_pos_aec(cu_width, cu_height, (PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N), j, &pos_x, &pos_y);
//                     pos_x >>= MIN_CU_LOG2;
//                     pos_y >>= MIN_CU_LOG2;
//                     tbp = cup + pos_y * (ctx->info.max_cuwh >> MIN_CU_LOG2) + pos_x;
//                     aec_num_nz[j][i] = ctu_map_cu_data->num_nz_coef[i][tbp];
//                 }
//             }
//         }
//         if (is_cu_dqp_flag && is_cu_nz(aec_num_nz))
//         {
//             int aec_qp_y = MCU_GET_QP(/*cu_data->map_scu[cup]*/ctu_map_cu_data->map_scu[cup]);
//             aec_num_delta_qp++;
//             aec_pred_qp = aec_qp_y;
//             //if (/*qp_y - */aec_pred_qp != 56)
//             //	printf("wrong\n");
//         }
// #endif
        aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        line_idx_in_lcu[0] += cu_width * cu_height / 16;
        line_idx_in_lcu[1] += cu_width * cu_height / 64;
        line_idx_in_lcu[2] += cu_width * cu_height / 64;
    }
    return COM_OK;

}


int aec_enc_eco_tree_32_phase2(bool is_cu_dqp_flag, int aec_num_delta_qp, int aec_pred_qp, ENC_CTX_HLS* ctx, ENC_CU_DATA* ctu_map_cu_data,
    int x0, int y0, int cup, int cu_width, int cu_height, int cud
    , const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local
    , u32 map_cu_mode_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], u32 map_scu_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], int min_scu_x, int min_scu_y, U8 line_idx_in_lcu[3], SRCC_FOR_AEC* srcc_for_aec, int last_lcu_delta_qp[1])
{
    int ret;
    s8 split_mode;
    u8 pred_mode = 0; 
    int tb_part = 0;
#if CHROMA_NOT_SPLIT
    u8 tree_status_child = TREE_LC;
#endif
#if MODE_CONS
    u8 cons_pred_mode_child;
    u8 cons_pred_mode_child_tmp;
#endif

    aec_com_get_split_mode(&split_mode, &cons_pred_mode_child_tmp, cud, cup, cu_width, cu_height, ctx->info.max_cuwh, ctu_map_cu_data->split_mode);
    aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 2, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, split_mode, 0, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);

// #if CUDQP
//     if (is_cu_dqp_flag && cu_width * cu_height >= ctx->info.pic_header.cu_qp_group_area_size)
//     {
//         assert(tree_status != TREE_C);
//         aec_num_delta_qp = 0;
//         // ctx->cu_qp_group.cu_qp_group_x = x0;
//         // ctx->cu_qp_group.cu_qp_group_y = y0;
//         //int luma_scup = PEL2SCU(x0) + PEL2SCU(y0) * ctx->info.pic_width_in_scu;
//         //aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(ctx->map.map_scu[luma_scup - 1])) ? MCU_GET_QP(ctx->map.map_scu[luma_scup - 1]) : ctx->info.shext.slice_qp;
//         int x_scu = x0 >> MIN_CU_LOG2;
//         int y_scu = y0 >> MIN_CU_LOG2;
//         int pic_x_scu = x_scu - min_scu_x;
//         int pic_y_scu = y_scu - min_scu_y;
//         if (x_scu == min_scu_x) {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu])) ? MCU_GET_QP(FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         else {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu])) ? MCU_GET_QP(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         assert(aec_pred_qp >= 0 && aec_pred_qp <= MAX_QUANT_BASE + ctx->info.qp_offset_bit_depth);
//     }
// #endif
    if (split_mode != NO_SPLIT)
    {
#if CHROMA_NOT_SPLIT
        tree_status_child = (tree_status == TREE_LC && aec_com_tree_split(cu_width, cu_height, (SPLIT_MODE)split_mode)) ? TREE_L : tree_status;
#endif
#if MODE_CONS
        if (cons_pred_mode == NO_MODE_CONS && aec_com_constrain_pred_mode(cu_width, cu_height, (SPLIT_MODE)split_mode, ctx->slice_type))
        {
            cons_pred_mode_child = cons_pred_mode_child_tmp;
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, cons_pred_mode_child, 0, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }
        else
        {
            cons_pred_mode_child = cons_pred_mode;
        }
#endif
        COM_SPLIT_STRUCT split_struct;
        aec_com_split_get_part_structure(split_mode, x0, y0, cu_width, cu_height, cup, cud, ctx->log2_culine, &split_struct);
        for (int part_num = 0; part_num < SPLIT_MAX_PART_COUNT; ++part_num)
        {
            int cur_part_num = part_num;
            int sub_cuw = split_struct.width[cur_part_num];
            int sub_cuh = split_struct.height[cur_part_num];
            int x_pos = split_struct.x_pos[cur_part_num];
            int y_pos = split_struct.y_pos[cur_part_num];

            if (x_pos < ctx->info.pic_width && y_pos < ctx->info.pic_height && part_num < split_struct.part_count)
            {
                ret = aec_enc_eco_tree_32x16_phase2(is_cu_dqp_flag, aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data,x_pos, y_pos, split_struct.cup[cur_part_num], sub_cuw, sub_cuh, split_struct.cud
                    , split_mode, INC_QT_DEPTH(qt_depth, split_mode), INC_BET_DEPTH(bet_depth, split_mode), cons_pred_mode_child, tree_status_child,
                    AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
            }
        }

#if CHROMA_NOT_SPLIT
        if (tree_status_child == TREE_L && tree_status == TREE_LC)
        {
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 1, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }
#endif
    }
    else
    {
        pred_mode = ctu_map_cu_data->pred_mode[cup];
        tb_part = ctu_map_cu_data->tb_part[cup];
// #if CUDQP
//         int i, j;
// 	    int  aec_num_nz[MAX_NUM_TB][N_C];
//         //s16 coef[3][MAX_CU_DIM] = { 0 };
//         if (!(pred_mode == MODE_SKIP))
//         {
//         /* get coefficients and tq */
//             //coef_rect_to_series(ctx, ctu_map_cu_data->coef_y, ctu_map_cu_data->coef_u, ctu_map_cu_data->coef_v, x0, y0, cu_width, cu_height, coef);
// #if CUDQP_PLATFORM_BUGFIX
//             int sta_comp = tree_status == TREE_C ? U_C : Y_C;
//             int end_comp = tree_status == TREE_L ? Y_C : V_C;
//             for (i = sta_comp; i <= end_comp; i++)
// #else
//             for (i = 0; i < N_C; i++)
// #endif
//             {
//                 int part_num = get_part_num((PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N));
    
//                 for (j = 0; j < part_num; j++)
//                 {
//                     int pos_x, pos_y, tbp;
//                     get_tb_start_pos_aec(cu_width, cu_height, (PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N), j, &pos_x, &pos_y);
//                     pos_x >>= MIN_CU_LOG2;
//                     pos_y >>= MIN_CU_LOG2;
//                     tbp = cup + pos_y * (ctx->info.max_cuwh >> MIN_CU_LOG2) + pos_x;
//                     aec_num_nz[j][i] = ctu_map_cu_data->num_nz_coef[i][tbp];
//                 }
//             }
//         }
//         if (is_cu_dqp_flag && is_cu_nz(aec_num_nz))
//         {
//             int aec_qp_y = MCU_GET_QP(/*cu_data->map_scu[cup]*/ctu_map_cu_data->map_scu[cup]);
//             aec_num_delta_qp++;
//             aec_pred_qp = aec_qp_y;
//             //if (/*qp_y - */aec_pred_qp != 56)
//             //	printf("wrong\n");
//         }
// #endif
        aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        line_idx_in_lcu[0] += cu_width * cu_height / 16;
        line_idx_in_lcu[1] += cu_width * cu_height / 64;
        line_idx_in_lcu[2] += cu_width * cu_height / 64;
    }
    return COM_OK;

}


int aec_enc_eco_tree_64x32_phase2(bool is_cu_dqp_flag, int aec_num_delta_qp, int aec_pred_qp, ENC_CTX_HLS* ctx, ENC_CU_DATA* ctu_map_cu_data,
    int x0, int y0, int cup, int cu_width, int cu_height, int cud
    , const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status,
    AEC_input* AEC_DATA_input, FEC_info* FEC_info_local
    , u32 map_cu_mode_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], u32 map_scu_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], int min_scu_x, int min_scu_y, U8 line_idx_in_lcu[3], SRCC_FOR_AEC* srcc_for_aec, int last_lcu_delta_qp[1])
{
    int ret;
    s8 split_mode;
    u8 pred_mode = 0;
    int tb_part = 0;
#if CHROMA_NOT_SPLIT
    u8 tree_status_child = TREE_LC;
#endif
#if MODE_CONS
    u8 cons_pred_mode_child;
    u8 cons_pred_mode_child_tmp;
#endif
    aec_com_get_split_mode(&split_mode, &cons_pred_mode_child_tmp, cud, cup, cu_width, cu_height, ctx->info.max_cuwh, ctu_map_cu_data->split_mode);
    aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 2, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, split_mode, 0, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);

// #if CUDQP
//     if (is_cu_dqp_flag && cu_width * cu_height >= ctx->info.pic_header.cu_qp_group_area_size)
//     {
//         assert(tree_status != TREE_C);
//         aec_num_delta_qp = 0;
//         // ctx->cu_qp_group.cu_qp_group_x = x0;
//         // ctx->cu_qp_group.cu_qp_group_y = y0;
//         //int luma_scup = PEL2SCU(x0) + PEL2SCU(y0) * ctx->info.pic_width_in_scu;
//         //aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(ctx->map.map_scu[luma_scup - 1])) ? MCU_GET_QP(ctx->map.map_scu[luma_scup - 1]) : ctx->info.shext.slice_qp;
//         int x_scu = x0 >> MIN_CU_LOG2;
//         int y_scu = y0 >> MIN_CU_LOG2;
//         int pic_x_scu = x_scu - min_scu_x;
//         int pic_y_scu = y_scu - min_scu_y;
//         if (x_scu == min_scu_x) {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu])) ? MCU_GET_QP(FEC_info_local->map_ptr_map_scu_inner_left[pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         else {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu])) ? MCU_GET_QP(FEC_info_local->map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         assert(aec_pred_qp >= 0 && aec_pred_qp <= MAX_QUANT_BASE + ctx->info.qp_offset_bit_depth);
//     }
// #endif
    if (split_mode != NO_SPLIT)
    {
#if CHROMA_NOT_SPLIT
        tree_status_child = (tree_status == TREE_LC && aec_com_tree_split(cu_width, cu_height, (SPLIT_MODE)split_mode)) ? TREE_L : tree_status;
#endif
#if MODE_CONS
        if (cons_pred_mode == NO_MODE_CONS && aec_com_constrain_pred_mode(cu_width, cu_height, (SPLIT_MODE)split_mode, ctx->slice_type))
        {
            cons_pred_mode_child = cons_pred_mode_child_tmp;
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, cons_pred_mode_child, 0, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }
        else
        {
            cons_pred_mode_child = cons_pred_mode;
        }
#endif
        COM_SPLIT_STRUCT split_struct;
        aec_com_split_get_part_structure(split_mode, x0, y0, cu_width, cu_height, cup, cud, ctx->log2_culine, &split_struct);
        for (int part_num = 0; part_num < SPLIT_MAX_PART_COUNT; ++part_num)
        {
            int cur_part_num = part_num;
            int sub_cuw = split_struct.width[cur_part_num];
            int sub_cuh = split_struct.height[cur_part_num];
            int x_pos = split_struct.x_pos[cur_part_num];
            int y_pos = split_struct.y_pos[cur_part_num];

            if (x_pos < ctx->info.pic_width && y_pos < ctx->info.pic_height && part_num < split_struct.part_count)
            {
                ret = aec_enc_eco_tree_32_phase2(is_cu_dqp_flag, aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data,x_pos, y_pos, split_struct.cup[cur_part_num], sub_cuw, sub_cuh, split_struct.cud
                    , split_mode, INC_QT_DEPTH(qt_depth, split_mode), INC_BET_DEPTH(bet_depth, split_mode), cons_pred_mode_child, tree_status_child,
                    AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
            }
        }
#if CHROMA_NOT_SPLIT
        if (tree_status_child == TREE_L && tree_status == TREE_LC)
        {
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 1, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }
#endif
    }
    else
    {
        pred_mode = ctu_map_cu_data->pred_mode[cup];
        tb_part = ctu_map_cu_data->tb_part[cup];
// #if CUDQP
//         int i, j;
// 	    int  aec_num_nz[MAX_NUM_TB][N_C];
//         //s16 coef[3][MAX_CU_DIM] = { 0 };
//         if (!(pred_mode == MODE_SKIP))
//         {
//         /* get coefficients and tq */
//             //coef_rect_to_series(ctx, ctu_map_cu_data->coef_y, ctu_map_cu_data->coef_u, ctu_map_cu_data->coef_v, x0, y0, cu_width, cu_height, coef);
// #if CUDQP_PLATFORM_BUGFIX
//             int sta_comp = tree_status == TREE_C ? U_C : Y_C;
//             int end_comp = tree_status == TREE_L ? Y_C : V_C;
//             for (i = sta_comp; i <= end_comp; i++)
// #else
//             for (i = 0; i < N_C; i++)
// #endif
//             {
//                 int part_num = get_part_num((PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N));
    
//                 for (j = 0; j < part_num; j++)
//                 {
//                     int pos_x, pos_y, tbp;
//                     get_tb_start_pos_aec(cu_width, cu_height, (PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N), j, &pos_x, &pos_y);
//                     pos_x >>= MIN_CU_LOG2;
//                     pos_y >>= MIN_CU_LOG2;
//                     tbp = cup + pos_y * (ctx->info.max_cuwh >> MIN_CU_LOG2) + pos_x;
//                     aec_num_nz[j][i] = ctu_map_cu_data->num_nz_coef[i][tbp];
//                 }
//             }
//         }
//         if (is_cu_dqp_flag && is_cu_nz(aec_num_nz))
//         {
//             int aec_qp_y = MCU_GET_QP(/*cu_data->map_scu[cup]*/ctu_map_cu_data->map_scu[cup]);
//             aec_num_delta_qp++;
//             aec_pred_qp = aec_qp_y;
//             //if (/*qp_y - */aec_pred_qp != 56)
//             //	printf("wrong\n");
//         }
// #endif
        aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        line_idx_in_lcu[0] += cu_width * cu_height / 16;
        line_idx_in_lcu[1] += cu_width * cu_height / 64;
        line_idx_in_lcu[2] += cu_width * cu_height / 64;
    }
    return COM_OK;

}




int aec_enc_eco_tree_64_phase2(AEC_FW* fetch2aec_firmware, ENC_CU_DATA* ctu_map_cu_data,
    SAOBlkParam cur_saoPAram[3], int fetch_output_aec_lcu_num, int fetch_output_aec_delta_qp, int x0, int y0, int cup, int cu_width, int cu_height, int cud,
    const int parent_split, int qt_depth, int bet_depth, u8 cons_pred_mode, u8 tree_status, FEC_info* FEC_info_local,
    u32 map_cu_mode_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], u32 map_scu_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], int min_scu_x, int min_scu_y, SRCC_FOR_AEC* srcc_for_aec)
{
    /*
    cud = 0
    cup = 0
    parent_split = 0
    qt_depth = 0
    bet_depth = 0
    cons_pred_mode = 0
    */

    /**********************************************************************************************************************************/
    ENC_CTX_HLS ctx_hls_tmp;
    ENC_CTX_HLS* ctx = &ctx_hls_tmp;
    // data transfer
    ctx->info.pic_header.cu_delta_qp_flag = fetch2aec_firmware->cu_delta_qp_flag;
    ctx->info.pic_header.slice_type = fetch2aec_firmware->slice_type;
    ctx->info.pic_header.ph_ists_enable_flag = fetch2aec_firmware->ph_ists_enable_flag;
    ctx->info.pic_header.ph_epmc_model_flag = fetch2aec_firmware->ph_epmc_model_flag;
    ctx->info.pic_header.ibc_flag = fetch2aec_firmware->ibc_flag;
    ctx->info.pic_header.sp_pic_flag = fetch2aec_firmware->sp_pic_flag;
    ctx->info.pic_header.evs_ubvs_pic_flag = fetch2aec_firmware->evs_ubvs_pic_flag;
    ctx->info.pic_header.umve_set_flag = fetch2aec_firmware->umve_set_flag;
    ctx->info.pic_header.ph_ipc_flag = fetch2aec_firmware->ph_ipc_flag;
    ctx->info.pic_header.cu_qp_group_area_size = fetch2aec_firmware->cu_qp_group_area_size;
    ctx->info.pic_header.chroma_quant_param_delta_cb = fetch2aec_firmware->chroma_quant_param_delta_cb;
    ctx->info.pic_header.chroma_quant_param_delta_cr = fetch2aec_firmware->chroma_quant_param_delta_cr;

    for (int i = 0; i < N_C; ++i)
    {
        ctx->info.shext.slice_sao_enable[i] = fetch2aec_firmware->slice_sao_enable[i];
    }
    ctx->info.shext.fixed_slice_qp_flag = fetch2aec_firmware->fixed_slice_qp_flag;
    ctx->info.shext.slice_qp = fetch2aec_firmware->slice_qp;

    ctx->info.sqh.min_cu_size = fetch2aec_firmware->min_cu_size;
    ctx->info.sqh.max_part_ratio = fetch2aec_firmware->max_part_ratio;
    ctx->info.sqh.max_split_times = fetch2aec_firmware->max_split_times;
    ctx->info.sqh.min_qt_size = fetch2aec_firmware->min_qt_size;
    ctx->info.sqh.max_bt_size = fetch2aec_firmware->max_bt_size;
    ctx->info.sqh.max_eqt_size = fetch2aec_firmware->max_eqt_size;
    ctx->info.sqh.max_dt_size = fetch2aec_firmware->max_dt_size;
    ctx->info.sqh.amvr_enable_flag = fetch2aec_firmware->amvr_enable_flag;
    ctx->info.sqh.abvr_enable_flag = fetch2aec_firmware->abvr_enable_flag;
    ctx->info.sqh.umve_enable_flag = fetch2aec_firmware->umve_enable_flag;
    ctx->info.sqh.umve_enh_enable_flag = fetch2aec_firmware->umve_enh_enable_flag;
    ctx->info.sqh.awp_enable_flag = fetch2aec_firmware->awp_enable_flag;
    ctx->info.sqh.awp_mvr_enable_flag = fetch2aec_firmware->awp_mvr_enable_flag;
    ctx->info.sqh.etmvp_enable_flag = fetch2aec_firmware->etmvp_enable_flag;
    ctx->info.sqh.ipf_enable_flag = fetch2aec_firmware->ipf_enable_flag;
    ctx->info.sqh.emvr_enable_flag = fetch2aec_firmware->emvr_enable_flag;
    ctx->info.sqh.affine_umve_enable_flag = fetch2aec_firmware->affine_umve_enable_flag;
    ctx->info.sqh.smvd_enable_flag = fetch2aec_firmware->smvd_enable_flag;
    ctx->info.sqh.bgc_enable_flag = fetch2aec_firmware->bgc_enable_flag;
    ctx->info.sqh.interpf_enable_flag = fetch2aec_firmware->interpf_enable_flag;
    ctx->info.sqh.ipc_enable_flag = fetch2aec_firmware->ipc_enable_flag;
    ctx->info.sqh.num_of_mvap_cand = fetch2aec_firmware->num_of_mvap_cand;
    ctx->info.sqh.num_of_hmvp_cand = fetch2aec_firmware->num_of_hmvp_cand;
    ctx->info.sqh.num_of_hbvp_cand = fetch2aec_firmware->num_of_hbvp_cand;
    ctx->info.sqh.tscpm_enable_flag = fetch2aec_firmware->tscpm_enable_flag;
    ctx->info.sqh.enhance_tscpm_enable_flag = fetch2aec_firmware->enhance_tscpm_enable_flag;
    ctx->info.sqh.pmc_enable_flag = fetch2aec_firmware->pmc_enable_flag;
    ctx->info.sqh.iip_enable_flag = fetch2aec_firmware->iip_enable_flag;
    ctx->info.sqh.sawp_enable_flag = fetch2aec_firmware->sawp_enable_flag;
    ctx->info.sqh.position_based_transform_enable_flag = fetch2aec_firmware->position_based_transform_enable_flag;
    ctx->info.sqh.sbt_enable_flag = fetch2aec_firmware->sbt_enable_flag;
    ctx->info.sqh.ists_enable_flag = fetch2aec_firmware->ists_enable_flag;
    ctx->info.sqh.srcc_enable_flag = fetch2aec_firmware->srcc_enable_flag;
    ctx->info.sqh.eipm_enable_flag = fetch2aec_firmware->eipm_enable_flag;
    ctx->info.sqh.st_chroma_enable_flag = fetch2aec_firmware->st_chroma_enable_flag;
    ctx->info.sqh.est_enable_flag = fetch2aec_firmware->est_enable_flag;
    ctx->info.sqh.dt_intra_enable_flag = fetch2aec_firmware->dt_intra_enable_flag;
    ctx->info.sqh.affine_enable_flag = fetch2aec_firmware->affine_enable_flag;
    ctx->info.sqh.sample_adaptive_offset_enable_flag = fetch2aec_firmware->sample_adaptive_offset_enable_flag;
    ctx->info.pic_width = fetch2aec_firmware->pic_width;
    ctx->info.pic_height = fetch2aec_firmware->pic_height;
    ctx->info.max_cuwh = fetch2aec_firmware->max_cuwh;
    ctx->info.log2_max_cuwh = fetch2aec_firmware->log2_max_cuwh;
    ctx->info.pic_width_in_lcu = fetch2aec_firmware->pic_width_in_lcu;
    ctx->info.pic_width_in_scu = fetch2aec_firmware->pic_width_in_scu;
    ctx->info.bit_depth_input = fetch2aec_firmware->bit_depth_input;
    ctx->info.qp_offset_bit_depth = fetch2aec_firmware->qp_offset_bit_depth;

    for (int i = 0; i < MAX_NUM_REF_PICS; i++)
    {
        for (int j = 0; j < REFP_NUM; j++)
        {
            ctx->refp_ptr[i][j] = fetch2aec_firmware->refp_ptr[i][j];
        }
    }

    ctx->num_refp[0] = fetch2aec_firmware->rpm_num_refp[0];
    ctx->num_refp[1] = fetch2aec_firmware->rpm_num_refp[1];
    ctx->slice_type = fetch2aec_firmware->slice_type;
    ctx->log2_culine = fetch2aec_firmware->log2_culine;
    ctx->ptr = fetch2aec_firmware->ptr;
    ctx->temporal_id = fetch2aec_firmware->temporal_id;
    //ctx->ctu_map_cu_data = ctu_map_cu_data;
    ctx->delta_qp = fetch_output_aec_delta_qp;

    ctx->tree_status = fetch2aec_firmware->tree_status;

    ctx->dataCol = fetch2aec_firmware->dataCol;

    for (int i = 0; i < UMVE_REFINE_STEP_SEC_SET; i++)
    {
        ctx->umveOffsetPicCount[i] = fetch2aec_firmware->umveOffsetPicCount[i];
    }

    ctx->cons_pred_mode = fetch2aec_firmware->cons_pred_mode;

    for (int i = 0; i < 256; i++)
    {
        ctx->cu_delta_qp_lcu_map[i] = fetch2aec_firmware->cu_delta_qp_lcu_map[i];
    }
    ctx->cu_qp_group.num_delta_qp = fetch2aec_firmware->num_delta_qp;
    ctx->cu_qp_group.pred_qp = fetch2aec_firmware->pred_qp;
    ctx->cu_qp_group.cu_qp_group_x = fetch2aec_firmware->cu_qp_group_x;
    ctx->cu_qp_group.cu_qp_group_y = fetch2aec_firmware->cu_qp_group_y;

    ctx->lcu_cnt = fetch2aec_firmware->lcu_total_cnt;
    /**********************************************************************************************************************************/

    static AEC_input  AEC_DATA_input;

    //if (AEC_DATA_input.x_lcu_idx != x_lcu_idx)
    //    printf("debug\n");

    get_sao_param(x0, y0, &AEC_DATA_input, cur_saoPAram);
    /**********************************************************************************************************************************/

    int ret;
    s8 split_mode;
    u8 pred_mode = 0;
    int tb_part = 0;
	LINE_IDX line_idx;
    line_idx.line_idx_in_lcu_y = 0;
    line_idx.line_idx_in_lcu_u = 0;
    line_idx.line_idx_in_lcu_v = 0;
    U8 line_idx_in_lcu[3];
    line_idx_in_lcu[0] = 0;
    line_idx_in_lcu[1] = 0;
    line_idx_in_lcu[2] = 0;
    static int aec_num_delta_qp;
    static int aec_pred_qp;
    //bool is_cu_dqp_flag = com_is_cu_dqp(&ctx->info);
    bool is_cu_dqp_flag = 0;

    static int last_lcu_delta_qp[1] = {0};

    #if CTU_RATE_CONTROL
        int dqp = 0;
    
        dqp = ctx->delta_qp;
    
//        if (!ctx->info.shext.fixed_slice_qp_flag) {
// #if CUDQP
//             if (is_cu_dqp_flag)
//             {
//                 aec_pred_qp = ctx->info.shext.slice_qp;
//                 assert(dqp == 0);
//             }
//             else
//             {
// #endif
                //enc_eco_lcu_delta_qp(&AEC_DATA_output.bs, dqp, last_lcu_delta_qp[0]);
//            }
 //       }
#endif

    aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, &AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);

    if (fetch_output_aec_lcu_num == 0) {
        aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, &AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
    }


    if (ctx->info.sqh.sample_adaptive_offset_enable_flag)
    {
        aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 6, x0, y0, 0, 0, 0, 0, 0, 0, 0, 0, 0, &AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
    }
#if CHROMA_NOT_SPLIT
    //TREE_LC = 0
    u8 tree_status_child = TREE_LC;
#endif
#if MODE_CONS
    u8 cons_pred_mode_child;
    u8 cons_pred_mode_child_tmp;
#endif

    aec_com_get_split_mode(&split_mode, &cons_pred_mode_child_tmp, cud, cup, cu_width, cu_height, ctx->info.max_cuwh, ctu_map_cu_data->split_mode);
    aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 2, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, split_mode, 0, &AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
// #if CUDQP
//     if (is_cu_dqp_flag && cu_width * cu_height >= ctx->info.pic_header.cu_qp_group_area_size)
//     {
//         assert(tree_status != TREE_C);
//         aec_num_delta_qp = 0;
//         // ctx->cu_qp_group.cu_qp_group_x = x0;
//         // ctx->cu_qp_group.cu_qp_group_y = y0;
//         //int luma_scup = PEL2SCU(x0) + PEL2SCU(y0) * ctx->info.pic_width_in_scu;
//         //aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(ctx->map.map_scu[luma_scup - 1])) ? MCU_GET_QP(ctx->map.map_scu[luma_scup - 1]) : ctx->info.shext.slice_qp;
//         int x_scu = x0 >> MIN_CU_LOG2;
//         int y_scu = y0 >> MIN_CU_LOG2;
//         int pic_x_scu = x_scu - min_scu_x;
//         int pic_y_scu = y_scu - min_scu_y;
//         if (x_scu == min_scu_x) {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local.map_ptr_map_scu_inner_left[pic_y_scu])) ? MCU_GET_QP(FEC_info_local.map_ptr_map_scu_inner_left[pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         else {
//             aec_pred_qp = (x0 > 0 && MCU_GET_CODED_FLAG(FEC_info_local.map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu])) ? MCU_GET_QP(FEC_info_local.map_ptr_map_scu_inner[(pic_x_scu - 1) * 16L + pic_y_scu]) : ctx->info.shext.slice_qp;
//         }
//         assert(aec_pred_qp >= 0 && aec_pred_qp <= MAX_QUANT_BASE + ctx->info.qp_offset_bit_depth);
//     }
// #endif
    if (split_mode != NO_SPLIT)//
    {

        tree_status_child = (tree_status == TREE_LC && aec_com_tree_split(cu_width, cu_height, (SPLIT_MODE)split_mode)) ? TREE_L : tree_status;

        if (cons_pred_mode == NO_MODE_CONS && aec_com_constrain_pred_mode(cu_width, cu_height, (SPLIT_MODE)split_mode, ctx->slice_type))
        {
            cons_pred_mode_child = cons_pred_mode_child_tmp;
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, cons_pred_mode_child, 0, &AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }
        else
        {
            cons_pred_mode_child = cons_pred_mode;
        }

        COM_SPLIT_STRUCT split_struct;

        aec_com_split_get_part_structure(split_mode, x0, y0, cu_width, cu_height, cup, cud, ctx->log2_culine, &split_struct);

        for (int part_num = 0; part_num < SPLIT_MAX_PART_COUNT; ++part_num)
        {
            int cur_part_num = part_num;
            int sub_cuw = split_struct.width[cur_part_num];
            int sub_cuh = split_struct.height[cur_part_num];
            int x_pos = split_struct.x_pos[cur_part_num];
            int y_pos = split_struct.y_pos[cur_part_num];

            if (x_pos < ctx->info.pic_width && y_pos < ctx->info.pic_height && part_num < split_struct.part_count) // check if inner the picture
            {
                ret = aec_enc_eco_tree_64x32_phase2(is_cu_dqp_flag, aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data,x_pos, y_pos, split_struct.cup[cur_part_num], sub_cuw, sub_cuh, split_struct.cud
                    , split_mode, INC_QT_DEPTH(qt_depth, split_mode), INC_BET_DEPTH(bet_depth, split_mode), cons_pred_mode_child, tree_status_child,
                    &AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
            }
        }

        if (tree_status_child == TREE_L && tree_status == TREE_LC)
        {
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 1, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, &AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }

    }
    else
    {
        pred_mode = ctu_map_cu_data->pred_mode[cup];
        tb_part = ctu_map_cu_data->tb_part[cup];
// #if CUDQP
//         int i, j;
// 	    int  aec_num_nz[MAX_NUM_TB][N_C];
//        // s16 coef[3][MAX_CU_DIM] = { 0 };
//         if (!(pred_mode == MODE_SKIP))
//         {
//         /* get coefficients and tq */
//             //coef_rect_to_series(ctx, ctu_map_cu_data->coef_y, ctu_map_cu_data->coef_u, ctu_map_cu_data->coef_v, x0, y0, cu_width, cu_height, coef);
// #if CUDQP_PLATFORM_BUGFIX
//             int sta_comp = tree_status == TREE_C ? U_C : Y_C;
//             int end_comp = tree_status == TREE_L ? Y_C : V_C;
//             for (i = sta_comp; i <= end_comp; i++)
// #else
//             for (i = 0; i < N_C; i++)
// #endif
//             {
//                 int part_num = get_part_num((PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N));
    
//                 for (j = 0; j < part_num; j++)
//                 {
//                     int pos_x, pos_y, tbp;
//                     get_tb_start_pos_aec(cu_width, cu_height, (PART_SIZE)(i == 0 ? tb_part : SIZE_2Nx2N), j, &pos_x, &pos_y);
//                     pos_x >>= MIN_CU_LOG2;
//                     pos_y >>= MIN_CU_LOG2;
//                     tbp = cup + pos_y * (ctx->info.max_cuwh >> MIN_CU_LOG2) + pos_x;
//                     aec_num_nz[j][i] = ctu_map_cu_data->num_nz_coef[i][tbp];
//                 }
//             }
//         }
//         if (is_cu_dqp_flag && is_cu_nz(aec_num_nz))
//         {
//             int aec_qp_y = MCU_GET_QP(/*cu_data->map_scu[cup]*/ctu_map_cu_data->map_scu[cup]);
//             aec_num_delta_qp++;
//             aec_pred_qp = aec_qp_y;
//             //if (/*qp_y - */aec_pred_qp != 56)
//             //	printf("wrong\n");
//         }
// #endif
        aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 0, x0, y0, cup, cu_width, cu_height, cud, parent_split, qt_depth, bet_depth, cons_pred_mode, tree_status, &AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        line_idx_in_lcu[0] += cu_width * cu_height / 16;
        line_idx_in_lcu[1] += cu_width * cu_height / 64;
        line_idx_in_lcu[2] += cu_width * cu_height / 64;

    }

    //if ((AEC_DATA_input->lcu_cnt - 1) == 0){
    if (fetch_output_aec_lcu_num == (ctx->lcu_cnt - 1)) {
        aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, &AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
    }
    else
    {
#if PATCH_DEBUG
        //if (patch->patch_end == 0)
#endif
        {
            aec_stage2_phase2(pred_mode, tb_part,  aec_num_delta_qp, aec_pred_qp, ctx, ctu_map_cu_data, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, &AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, line_idx_in_lcu, srcc_for_aec, last_lcu_delta_qp);
        }
    }

    #if CTU_RATE_CONTROL
        if (!ctx->info.shext.fixed_slice_qp_flag)
        {
            last_lcu_delta_qp[0] = ctx->delta_qp;
        }
    #endif

    return COM_OK;

}

/*void aec_run_phase2(ENC_CTX_HLS* ctx, ENC_CORE* core, ENC_CU_DATA* ctu_map_cu_data, SAOBlkParam* cur_saoPAram, int lcu_num, int lcu_cnt, AEC_FW* frame_level_fw_in,
    u32 map_scu_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], u32 map_cu_mode_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], COM_BSW* bs, 
    int min_scu_x, int min_scu_y,int last_lcu_delta_qp[1],SRCC_FOR_AEC srcc_for_aec)*/
void aec_run_phase2(/*ENC_CTX_HLS* ctx,*/ ENC_CORE* core, ENC_CU_DATA ctu_map_cu_data, SAOBlkParam* cur_saoPAram, int fetch_output_aec_lcu_num, 
    int fetch_output_aec_lcu_cnt, int fetch_output_aec_delta_qp, U12 fetch_output_pixel_x, U12 fetch_output_pixel_y, AEC_FW* fetch2aec_firmware,
    u32 map_scu_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], u32 map_cu_mode_inner[SCU_IN_LCU_NUMS_LEN][SCU_IN_LCU_NUMS_LEN], COM_BSW* bs,
    int min_scu_x, int min_scu_y, int last_lcu_delta_qp[1], SRCC_FOR_AEC* srcc_for_aec)
{

    int  ret;
    int i, j, k;
    int x_lcu_idx = fetch_output_pixel_x >> 6;
    static FEC_info FEC_info_local;
    

    AEC_FW_input AEC_FW_data_in;

    if (fetch_output_aec_lcu_num == 0)//look as frame start
    {
        //AEC_DATA_input.x_lcu_idx = 1;
        // AEC_DATA_input.x_lcu_idx = 0;
        // AEC_DATA_input.y_lcu_idx = 0;
        // AEC_DATA_input.x_pel = 0;
        // AEC_DATA_input.y_pel = 0;
        // AEC_DATA_input.fetch_output_me_line_map_ptr_min_scu_x = 0;
        // AEC_DATA_input.fetch_output_me_line_map_ptr_min_scu_y = 0;
        AEC_DATA_output.bs.uiStartPos = AEC_DATA_output.bs_cur;
        AEC_DATA_output.bs.uiBitsWriteOffset = 0;
        AEC_DATA_output.bs.uiZeroCount = 0;
        AEC_DATA_output.bs.CurAddress = AEC_DATA_output.bs_cur;
    }
    else
    {
        // AEC_DATA_input.x_pel = AEC_DATA_input.x_lcu_idx * 64;
        // AEC_DATA_input.y_pel = AEC_DATA_input.y_lcu_idx * 64;
        // AEC_DATA_input.fetch_output_me_line_map_ptr_min_scu_x = AEC_DATA_input.x_pel >> 2;
        // AEC_DATA_input.fetch_output_me_line_map_ptr_min_scu_y = AEC_DATA_input.y_pel >> 2;

    }

    if (x_lcu_idx == 0)
    {
        for (int i = 0; i < 16; ++i)
        {
            FEC_info_local.map_ptr_map_cu_mode_inner_left[i] = 0x0;
            FEC_info_local.map_ptr_map_scu_inner_left[i] = 0;
        }
    }
    else
    {
        for (int i = 0; i < 16; ++i)
        {
            FEC_info_local.map_ptr_map_cu_mode_inner_left[i] = FEC_info_local.map_ptr_map_cu_mode_inner[15 * 16 + i];// FEC_info_local.map_ptr_map_cu_mode_inner[(i + 1) * 16 - 1];
            FEC_info_local.map_ptr_map_scu_inner_left[i] = FEC_info_local.map_ptr_map_scu_inner[15 * 16 + i];
        }
    }

    for (int j = 0; j < 16; ++j) {
        for (int idx = 0; idx < 16; ++idx) {
            FEC_info_local.map_ptr_map_cu_mode_inner[j * 16 + idx] = map_cu_mode_inner[j][idx];
            FEC_info_local.map_ptr_map_scu_inner[j * 16 + idx] = map_scu_inner[j][idx];
        }
    }

    if (fetch_output_aec_lcu_num == 0)
    {
        for (int i = 0; i < (max_buffer_width >> 2); ++i)
        {
            FEC_info_local.map_ptr_map_cu_mode_above_line[i] = 0xcccccccc;
            FEC_info_local.map_ptr_map_scu_above_line[i] = 0;
        }
    }

    // for (i = 0; i < N_C; ++i)
    // {
    //     AEC_DATA_input.slice_sao_enable[i] = fetch2aec_firmware->slice_sao_enable[i];
    // }


    // for (i = 0; i < MAX_CU_DEPTH; i++) {
    //     for (j = 0; j < NUM_BLOCK_SHAPE; j++) {
    //         for (k = 0; k < MAX_CU_CNT_IN_LCU; k++) {
    //             AEC_DATA_input.cu_data_split_mode[i][j][k] = ctu_map_cu_data.split_mode[i][j][k];
    //         }
    //     }
    // }

    /* aec_run_input_tv(ctx, &ctu_map_cu_data, ctx->info.sqh, &AEC_FW_data_in, cur_saoPAram,
        AEC_DATA_input.x_pel, AEC_DATA_input.y_pel, 0, AEC_FW_data_in.max_cuwh, AEC_FW_data_in.max_cuwh, 0
        , NO_SPLIT, 0, 0, NO_MODE_CONS, TREE_LC, &AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, srcc_for_aec);*/
    // ret = aec_enc_eco_tree_64_phase2(ctx, &ctu_map_cu_data, cur_saoPAram,
    //     AEC_DATA_input.x_pel, AEC_DATA_input.y_pel, 0, ctx->info.max_cuwh, ctx->info.max_cuwh, 0
    //     , NO_SPLIT, 0, 0, NO_MODE_CONS, TREE_LC, &AEC_DATA_input, FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, srcc_for_aec);
    ret = aec_enc_eco_tree_64_phase2(fetch2aec_firmware, &ctu_map_cu_data, cur_saoPAram, fetch_output_aec_lcu_num, fetch_output_aec_delta_qp,
        fetch_output_pixel_x, fetch_output_pixel_y, 0, fetch2aec_firmware->max_cuwh, fetch2aec_firmware->max_cuwh, 0
        , NO_SPLIT, 0, 0, NO_MODE_CONS, TREE_LC, &FEC_info_local, map_cu_mode_inner, map_scu_inner, min_scu_x, min_scu_y, srcc_for_aec);
    //printf("lcu=%d %d\n", i, aec_sbac_local.bitcounter);

    #if PATCH_DEBUG1 == 0
        Demulate_aec(&AEC_DATA_output.bs, bs);
        if (fetch_output_aec_lcu_cnt - 1 == 0)
        {
            bs->cur = bs->cur + AEC_DATA_output.bs.CurAddress;
            bs->slice_done = 1;
        }
    #else
        Demulate_aec(&AEC_DATA_output.bs, bs);
    #endif

    // if (AEC_DATA_input.x_lcu_idx < (fetch2aec_firmware->pic_width_in_lcu - 1))
    // {
    //    AEC_DATA_input.x_lcu_idx += 1;
    // }
    // else
    // {
    //    AEC_DATA_input.x_lcu_idx = 0;
    //    AEC_DATA_input.y_lcu_idx += 1;
    // }

    for (int i = 0; i < 16; ++i)
    {
        FEC_info_local.map_ptr_map_cu_mode_above_line[x_lcu_idx * 16 + i] = FEC_info_local.map_ptr_map_cu_mode_inner[15 + i * 16];
        FEC_info_local.map_ptr_map_scu_above_line[x_lcu_idx * 16 + i] = FEC_info_local.map_ptr_map_scu_inner[15 + i * 16];
    }

}
#endif