
#include "../inc/iime.h"

#pragma warning(disable:4102)
/**
* ===========================================================================
* IME Util
* ---------------------------------------------------------------------------
*
* Functions for IME utilization
*
* ===========================================================================
*/

//#define PRINT_MV 0
//#define PRINT_PMV 0

/*===============*/
/*  Components	*/
/*==============*/

U8 com_abs8_pl(S9 a) {
#if IME_PRAGMA_ON
#pragma HLS inline
#endif
	if (a < 0)
		return -a;
	else
		return a;
}

#define COM_ABS8(a) com_abs8_pl(a)


S14 com_abs_s14(S14 a)
{

#pragma HLS inline

	if (a >= 0)
	{
		return a;
	}
	else
	{
		return -a;
	}
}
#define COM_ABS_14(a) com_abs_s14(a);

#if BW_DEBUG
U10 com_abs16_test1(U10 a)
#else
pel com_abs16_test1(pel a) 
#endif
{
#pragma HLS inline

	if (a < 0)
		return -a;
	else
		return a;
}

#define COM_ABS16_test1(a) com_abs16_test1(a)


void roundingMvS32(S32 hor, S32 ver, S32* rounded_hor, S32* rounded_ver, U2 right_shift, U2 left_shift)
{
	S3 add;

	if (right_shift > 0)
	{
		add = (1 << (right_shift - 1));
	}
	else
	{
		add = 0;
	}
	if (hor >= 0)
	{
		*rounded_hor = (((hor + add) >> right_shift) << left_shift);
	}
	else
	{
		*rounded_hor = -(((-hor + add) >> right_shift) << left_shift);
	}
	if (ver >= 0)
	{
		*rounded_ver = (((ver + add) >> right_shift) << left_shift);
	}
	else
	{
		*rounded_ver = -(((-ver + add) >> right_shift) << left_shift);
	}
}

void roundingMvS16(s32 hor, s32 ver, s16* rounded_hor, s16* rounded_ver, int right_shift, int left_shift)
{
	int add;

	if (right_shift > 0)
	{
		add = (1 << (right_shift - 1));
	}
	else
	{
		add = 0;
	}
	if (hor >= 0)
	{
		*rounded_hor = (((hor + add) >> right_shift) << left_shift);
	}
	else
	{
		*rounded_hor = -(((-hor + add) >> right_shift) << left_shift);
	}
	if (ver >= 0)
	{
		*rounded_ver = (((ver + add) >> right_shift) << left_shift);
	}
	else
	{
		*rounded_ver = -(((-ver + add) >> right_shift) << left_shift);
	}
}

/* ime mvr_idx=0 */

S14 getEncMvBitsTbl(S14 a)
{
a=a+1;
	if (a == 1)
	{
		return 1;
	}
	//else if (a >= 1 && a < 3)
	else if (a < 4)
	{
		return 4;
	}
	//else if (a >= 3 && a < 7)
	else if ( a < 8)
	{
		return 6;
	}
	//else if (a >= 7 && a < 15)
	else if (a < 16)
	{
		return 8;
	}
	//else if (a >= 15 && a < 31)
	else if (a < 32)
	{
		return 10;
	}
	//else if (a >= 31 && a < 63)
	else if (a < 64)
	{
		return 12;
	}
	//else if (a >= 63 && a < 127)
	else if (a < 128)
	{
		return 14;
	}
	//else if (a >= 127 && a < 255)
	else if (a < 256)
	{
		return 16;
	}
	//else if (a >= 255 && a < 511)
	else if ( a < 512)
	{
		return 18;
	}
	//else if (a >= 511 && a < 1023)
	else if (a < 1024)
	{
		return 20;
	}
	//else if (a >= 1023 && a < 2047)
	else if ( a < 2048)
	{
		return 22;
	}
	//else if (a >= 2047)
	else if (a >= 2048)
	{
		return 24;
	}
	else
	{
		return 1;
	}
}

S14 getMvBitsTb_test1(S14 a)
{

a=a+1;
	if (a >= 1024)
	{
		return 1;
	}
	else if (a >= 512)
	{
		return 20;
	}
	else if (a >= 256)
	{
		return 18;
	}
	else if (a >= 128)
	{
		return 16;
	}
	else if (a >= 64)
	{
		return 14;
	}
	else if (a >= 32)
	{
		return 12;
	}
	else if (a >= 16)
	{
		return 10;
	}
	else if (a >= 8)
	{
		return 8;
	}
	else if (a >= 4)
	{
		return 6;
	}
	else if (a >= 2)
	{
		return 4;
	}
       else 
       {
                return 1;
         }


}

S14 getMvBitsWithMvr(S14 mvd_x, S14 mvd_y, U2 num_refp, S2 refi)
{

	//S14 bits = 0;
	S14 bits = 1;

	if (num_refp == 2)
	{
		bits += 1;
	}
	S14 mvd_x_abs = COM_ABS_14(mvd_x);
	S14 mvd_y_abs = COM_ABS_14(mvd_y);
	//bits += getEncMvBitsTbl(mvd_x_abs);
	//bits += getEncMvBitsTbl(mvd_y_abs);
	bits += getMvBitsTb_test1(mvd_x_abs);
	bits += getMvBitsTb_test1(mvd_y_abs);

	//bits += 1;

	return bits;
}

S14 getMvBitsWithMvr_test1(S14 mvd_x, S14 mvd_y, U2 num_refp, S2 refi)
{

	S14 bits = 1;

	//if (num_refp == 2)
	//{
	//	bits += 1;
	//}

	S14 mvd_x_abs = COM_ABS_14(mvd_x);
	S14 mvd_y_abs = COM_ABS_14(mvd_y);

	//bits += getEncMvBitsTbl(mvd_x_abs);
	//bits += getEncMvBitsTbl(mvd_y_abs);
	bits += getMvBitsTb_test1(mvd_x_abs);
	bits += getMvBitsTb_test1(mvd_y_abs);

	//bits += 1;

	return bits;
}

S14 getMvBitsSimplefied(S14 mvd_x, S14 mvd_y)
{

	S14 bits = 0;
	S14 mvd_x_abs = COM_ABS14(mvd_x);
	S14 mvd_y_abs = COM_ABS14(mvd_y);

	bits += getEncMvBitsTbl(mvd_x_abs);
	bits += getEncMvBitsTbl(mvd_y_abs);

	bits += 2;

	return bits;
}


S14 getMvBits_test1(S14 mvd_x, S14 mvd_y)
{

	S14 bits = 2;	//B frame
	//S14 bits = 1;	//P frame
	S14 mvd_x_abs = COM_ABS_14(mvd_x);
	S14 mvd_y_abs = COM_ABS_14(mvd_y);

	bits += getMvBitsTb_test1(mvd_x_abs);
	bits += getMvBitsTb_test1(mvd_y_abs);

	//bits += 2; //B frame
	//bits += 1;

	return bits;
}

U32 getMvRcost(U32 lambda_mv, S14 mvd_x, S14 mvd_y, U2 num_refp, S2 refi)
{
	S14 bits;
#if SCALE_LAMBDA_MV_16BIT

	//bits = getMvBitsWithMvr_test1(mvd_x, mvd_y, num_refp, refi);
	//bits = getMvBits_test1(mvd_x, mvd_y);
	bits = getMvBitsWithMvr(mvd_x, mvd_y, num_refp, refi);
	return (lambda_mv * bits);
#else

	bits = getMvBitsWithMvr(mvd_x, mvd_y, num_refp, refi);
	return (U32)((lambda_mv * bits + (1 << 15)) >> 16);

#endif	// VIVADO_HLS_IME


}

U32 getMvRcostSimplefied(U32 lambda_mv, S14 mvd_x, S14 mvd_y)
{
#pragma HLS inline
	S14 bits;
	//bits = getMvBitsSimplefied(mvd_x, mvd_y);
	bits = getMvBits_test1(mvd_x, mvd_y);
#if SCALE_LAMBDA_MV_16BIT
	return (lambda_mv * bits);
#else
	return (U32)((lambda_mv * bits + (1 << 15)) >> 16);
#endif
}

#define MV_OFFSET (1 << (MV_SCALE_PREC - 1))

void scalingMV(S16 ptr_cur, S16 ptr_cur_ref, S16 ptr_neb, S16 ptr_neb_ref, S14 mvOrigin[MV_D], S16 mvScaled[MV_D], S2 refi)
{
#if IME_PRAGMA_ON
#pragma HLS INLINE OFF
#endif

	S16 ratio;
	S16 t0 = ptr_neb - ptr_neb_ref;
	S16 t1 = ptr_cur - ptr_cur_ref;

	if (refi < 0 || t0 == 0 || t1 == 0)
	{
		mvScaled[MV_X] = 0;
		mvScaled[MV_Y] = 0;
		return;
	}

	S64 tmp_mv[MV_D] = {};
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=tmp_mv complete dim=0
#endif

	if (t1 != t0)
	{
		ratio = (1 << MV_SCALE_PREC) / t0 * t1;

		tmp_mv[MV_X] = (S64)mvOrigin[MV_X] * ratio;
		if (tmp_mv[MV_X] > 0) {
			tmp_mv[MV_X] += MV_OFFSET;//((tmp_mv[MV_X] + MV_OFFSET) >> MV_SCALE_PREC);
			tmp_mv[MV_X] = tmp_mv[MV_X] >> MV_SCALE_PREC;
		}
		else {
			tmp_mv[MV_X] = -tmp_mv[MV_X];
			tmp_mv[MV_X] += MV_OFFSET;//-((-tmp_mv[MV_X] + MV_OFFSET) >> MV_SCALE_PREC);
			tmp_mv[MV_X] = tmp_mv[MV_X] >> MV_SCALE_PREC;
			tmp_mv[MV_X] = -tmp_mv[MV_X];
		}
		mvScaled[MV_X] = (S16)(COM_CLIP3((S64)COM_INT16_MIN, (S64)COM_INT16_MAX, tmp_mv[MV_X]));

		tmp_mv[MV_Y] = (S64)mvOrigin[MV_Y] * ratio;
		if (tmp_mv[MV_Y] > 0) {
			tmp_mv[MV_Y] += MV_OFFSET;//((tmp_mv[MV_X] + MV_OFFSET) >> MV_SCALE_PREC);
			tmp_mv[MV_Y] = tmp_mv[MV_Y] >> MV_SCALE_PREC;
		}
		else {
			tmp_mv[MV_Y] = -tmp_mv[MV_Y];
			tmp_mv[MV_Y] += MV_OFFSET;//-((-tmp_mv[MV_X] + MV_OFFSET) >> MV_SCALE_PREC);
			tmp_mv[MV_Y] = tmp_mv[MV_Y] >> MV_SCALE_PREC;
			tmp_mv[MV_Y] = -tmp_mv[MV_Y];
		}
		mvScaled[MV_Y] = (S16)(COM_CLIP3((S64)COM_INT16_MIN, (S64)COM_INT16_MAX, tmp_mv[MV_Y]));
		////printf("Scaled\n");
	}
	else
	{
		mvScaled[MV_X] = mvOrigin[MV_X];
		mvScaled[MV_Y] = mvOrigin[MV_Y];
	}

}

U16 sadPel(pel a, pel b, S8 falg)
{
#if IME_PRAGMA_ON
#pragma HLS inline off
#endif

	if (falg <= 0)
	{
		return 0;
	}
	else
	{
		//return  COM_ABS16(a - b);
		return  COM_ABS16_test1(a - b);	
	}

}

u16 sadPelDoubleFlags(pel a, pel b, int flag1, int flag2)
{
#if IME_PRAGMA_ON
#pragma HLS inline off
#endif
	if (flag1 <= 0 && flag2 <= 0)
	{
		return 0;
	}
	else
	{
		return COM_ABS16(a - b);
	}

}

u16 sadPelFour(pel orgA, pel refA, pel orgB, pel refB, pel orgC, pel refC, pel orgD, pel refD)
{
#if IME_PRAGMA_ON
#pragma HLS inline off
#endif
	return COM_ABS16(orgA - refA) + COM_ABS16(orgB - refB) + COM_ABS16(orgC - refC) + COM_ABS16(orgD - refD);
}

int sadPelOct(S16 orgA, S16 refA, S16 orgB, S16 refB, S16 orgC, S16 refC, S16 orgD, S16 refD, S16 orgA1, S16 refA1, S16 orgB1, S16 refB1, S16 orgC1, S16 refC1, S16 orgD1, S16 refD1, U4 bit_depth)
{
#if IME_PRAGMA_ON
#pragma HLS inline off
#endif
	return ((COM_ABS16(orgA - refA) + COM_ABS16(orgB - refB) + COM_ABS16(orgC - refC) + COM_ABS16(orgD - refD) + COM_ABS16(orgA1 - refA1) + COM_ABS16(orgB1 - refB1) + COM_ABS16(orgC1 - refC1) + COM_ABS16(orgD1 - refD1)) >> (bit_depth - 8));
}


pel sadPelOct_test1(pel orgA, pel refA, pel orgB, pel refB, pel orgC, pel refC, pel orgD, pel refD, pel orgA1, pel refA1, pel orgB1, pel refB1, pel orgC1, pel refC1, pel orgD1, pel refD1, U4 bit_depth)
{
#if IME_PRAGMA_ON
#pragma HLS inline //off
#endif
#if BIT_10_ON
	return ((COM_ABS16_test1(orgA - refA) + COM_ABS16_test1(orgB - refB) + COM_ABS16_test1(orgC - refC) + COM_ABS16_test1(orgD - refD) + COM_ABS16_test1(orgA1 - refA1) + COM_ABS16_test1(orgB1 - refB1) + COM_ABS16_test1(orgC1 - refC1) + COM_ABS16_test1(orgD1 - refD1)) >> (bit_depth - 8));
#else
	return (COM_ABS16_test1(orgA - refA) + COM_ABS16_test1(orgB - refB) + COM_ABS16_test1(orgC - refC) + COM_ABS16_test1(orgD - refD) + COM_ABS16_test1(orgA1 - refA1) + COM_ABS16_test1(orgB1 - refB1) + COM_ABS16_test1(orgC1 - refC1) + COM_ABS16_test1(orgD1 - refD1));
#endif

}


pel sadPel_tets1(
#if BW_DEBUG
	U10 a,
	U10 b,
#else
	pel a, 
	pel b, 
#endif
	S6 falg
)
{
#pragma HLS inline

	if (falg <= 0)
	{
		return 0;
	}
	else
	{
		return COM_ABS16_test1(a - b);
	}

}

/*========================*/
void OrgT(
	pel y_org[64][64],
	pel y_orgT[64][64]
)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=y_org complete dim=1//#pragma HLS ARRAY_PARTITION variable=y_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=y_orgT complete dim=2
#endif

	int i, j;
	for (i = 0; i < 64; i++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (j = 0; j < 64; j++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			y_orgT[i][j] = y_org[j][i];
		}
	}
}

void Refwin_OneDimtoTwo(
	pel RefWindowLCU[SWW * SWH],
	pel swOutLv0_org[SWH][SWW]
	//,
	//pel swOutLv0[SWW][SWH]
)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=RefWindowLCU cyclic factor=256 dim=1
#pragma HLS ARRAY_PARTITION variable=swOutLv0_org complete dim=2
//#pragma HLS ARRAY_PARTITION variable=swOutLv0 complete dim=1
#endif

	U16 i, j;
//	for (j = 0; j < SWH; j++)
//	{
//#if IME_PRAGMA_ON
//#pragma HLS pipeline
//#endif
//		for (i = 0;i < SWW; i++)
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//			swOutLv0[i][j] = RefWindowLCU[i + j * SWW];
//			//swOutLv0_org[j][i] = RefWindowLCU[j + i * SWH];
//		}
//	}

	for (j = 0; j < SWH; j++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (i = 0; i < SWW; i++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			swOutLv0_org[j][i] = RefWindowLCU[i + j * SWW];
		}
	}
}
static void mmea_downsample_org(
	pel tmp_y_org[64][64],
	pel y_org_lv1_2d_ime[MAX_CU_SIZE_FETCH >> 1][MAX_CU_SIZE_FETCH >> 1],
	pel y_org_lv2_2d_ime[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2]
)
{
#pragma HLS inline off
	int temp_x = 0, temp_y = 0;
	static pel tmp_y_org_lv1_2d[32][32] = {};
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=tmp_y_org_lv1_2d complete dim=1
#pragma HLS ARRAY_PARTITION variable=tmp_y_org complete dim=1
#pragma HLS ARRAY_PARTITION variable=y_org_lv1_2d_ime complete dim=1
#pragma HLS ARRAY_PARTITION variable=y_org_lv2_2d_ime complete dim=1
#endif
	for (temp_x = 0; temp_x < (FENC_STRIDE >> 1); temp_x++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (temp_y = 0; temp_y < (FENC_STRIDE >> 1); temp_y++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			y_org_lv1_2d_ime[temp_x][temp_y] = ((tmp_y_org[(temp_x << 1)][(temp_y << 1)] + tmp_y_org[(temp_x << 1)][(temp_y << 1) + 1] +
				tmp_y_org[(temp_x << 1) + 1][(temp_y << 1)] + tmp_y_org[(temp_x << 1) + 1][(temp_y << 1) + 1]) / 4);
			tmp_y_org_lv1_2d[temp_x][temp_y] = ((tmp_y_org[(temp_x << 1)][(temp_y << 1)] + tmp_y_org[(temp_x << 1)][(temp_y << 1) + 1] +
				tmp_y_org[(temp_x << 1) + 1][(temp_y << 1)] + tmp_y_org[(temp_x << 1) + 1][(temp_y << 1) + 1]) / 4);
		}
	}
	for (temp_x = 0; temp_x < (FENC_STRIDE >> 2); temp_x++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (temp_y = 0; temp_y < (FENC_STRIDE >> 2); temp_y++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			y_org_lv2_2d_ime[temp_x][temp_y] = ((tmp_y_org_lv1_2d[(temp_x << 1)][(temp_y << 1)] + tmp_y_org_lv1_2d[(temp_x << 1) + 1][(temp_y << 1)] +
				tmp_y_org_lv1_2d[(temp_x << 1)][(temp_y << 1) + 1] + tmp_y_org_lv1_2d[(temp_x << 1) + 1][(temp_y << 1) + 1]) / 4);
		}
	}
}

void mmea_downsample_org_test(
	pel tmp_y_org[64][64],
	pel y_org_lv1_2d_ime_org[MAX_CU_H >> 1][MAX_CU_W >> 1],
	pel y_org_lv2_2d_ime_org[MAX_CU_H >> 2][MAX_CU_W >> 2]
	//,
	//pel y_org_lv1_2d_ime_T[MAX_CU_SIZE_FETCH >> 1][MAX_CU_SIZE_FETCH >> 1],
	//pel y_org_lv2_2d_ime_T[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2]
)
{
#pragma HLS inline off
	U7 temp_x;
	U7 temp_y;
	//static pel tmp_y_org_lv1_2d_T[32][32] = {};
	static pel tmp_y_org_lv1_2d_org[32][32] = {};
#if IME_PRAGMA_ON
//#pragma HLS ARRAY_PARTITION variable=tmp_y_org_lv1_2d complete dim=1
//#pragma HLS ARRAY_PARTITION variable=tmp_y_org complete dim=1
//#pragma HLS ARRAY_PARTITION variable=y_org_lv1_2d_ime complete dim=1
//#pragma HLS ARRAY_PARTITION variable=y_org_lv2_2d_ime complete dim=1
#pragma HLS ARRAY_PARTITION variable=tmp_y_org_lv1_2d_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=tmp_y_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=y_org_lv1_2d_ime_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=y_org_lv2_2d_ime_org complete dim=2
#endif
//	for (temp_x = 0; temp_x < (FENC_STRIDE >> 1); temp_x++)
//	{
//#if IME_PRAGMA_ON
//#pragma HLS pipeline
//#endif
//		for (temp_y = 0; temp_y < (FENC_STRIDE >> 1); temp_y++)
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//			y_org_lv1_2d_ime_T[temp_x][temp_y] = ((tmp_y_org[(temp_y << 1)][(temp_x << 1)] + tmp_y_org[(temp_y << 1)][(temp_x << 1) + 1] +
//				tmp_y_org[(temp_y << 1) + 1][(temp_x << 1)] + tmp_y_org[(temp_y << 1) + 1][(temp_x << 1) + 1]) >> 2);
//			tmp_y_org_lv1_2d_T[temp_x][temp_y] = ((tmp_y_org[(temp_y << 1)][(temp_x << 1)] + tmp_y_org[(temp_y << 1)][(temp_x << 1) + 1] +
//				tmp_y_org[(temp_y << 1) + 1][(temp_x << 1)] + tmp_y_org[(temp_y << 1) + 1][(temp_x << 1) + 1]) >> 2);
//		}
//	}
//
//	for (temp_x = 0; temp_x < (FENC_STRIDE >> 2); temp_x++)
//	{
//#if IME_PRAGMA_ON
//#pragma HLS pipeline
//#endif
//		for (temp_y = 0; temp_y < (FENC_STRIDE >> 2); temp_y++)
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//			y_org_lv2_2d_ime_T[temp_x][temp_y] = ((tmp_y_org_lv1_2d_T[(temp_x << 1)][(temp_y << 1)] + tmp_y_org_lv1_2d_T[(temp_x << 1) + 1][(temp_y << 1)] +
//				tmp_y_org_lv1_2d_T[(temp_x << 1)][(temp_y << 1) + 1] + tmp_y_org_lv1_2d_T[(temp_x << 1) + 1][(temp_y << 1) + 1]) >> 2);
//
//		}
//	}

	for (temp_y = 0; temp_y < (MAX_CU_H >> 1); temp_y++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (temp_x = 0; temp_x < (MAX_CU_W >> 1); temp_x++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			y_org_lv1_2d_ime_org[temp_y][temp_x] = (tmp_y_org[(temp_y << 1)][(temp_x << 1)] + tmp_y_org[(temp_y << 1)][(temp_x << 1) + 1] +
				tmp_y_org[(temp_y << 1) + 1][(temp_x << 1)] + tmp_y_org[(temp_y << 1) + 1][(temp_x << 1) + 1]) >> 2;
			tmp_y_org_lv1_2d_org[temp_y][temp_x] = (tmp_y_org[(temp_y << 1)][(temp_x << 1)] + tmp_y_org[(temp_y << 1)][(temp_x << 1) + 1] +
				tmp_y_org[(temp_y << 1) + 1][(temp_x << 1)] + tmp_y_org[(temp_y << 1) + 1][(temp_x << 1) + 1]) >> 2;
		}
	}

	for (temp_y = 0; temp_y < (MAX_CU_H >> 2); temp_y++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (temp_x = 0; temp_x < (MAX_CU_W >> 2); temp_x++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			y_org_lv2_2d_ime_org[temp_y][temp_x] = (tmp_y_org_lv1_2d_org[(temp_y << 1)][(temp_x << 1)] + tmp_y_org_lv1_2d_org[(temp_y << 1) + 1][(temp_x << 1)] +
				tmp_y_org_lv1_2d_org[(temp_y << 1)][(temp_x << 1) + 1] + tmp_y_org_lv1_2d_org[(temp_y << 1) + 1][(temp_x << 1) + 1]) >> 2;
		}
	}
}

void downsample_org_test1(
#if BW_DEBUG
	U10 y_org[64][64],
	U10 y_org_lv1_2d_t1[16][16],
	U10 y_org_lv2_2d_t1[8][8]
#else
	pel y_org[64][64],
	pel y_org_lv1_2d_t1[16][16],
	pel y_org_lv2_2d_t1[8][8]
#endif
	//,
	//pel y_org_lv2_2d_ime_org[16][16]
)
{
#pragma HLS inline off

	//U7 i;
	//U7 j;
#if 1//VIVADO_HLS_IME
	//pel y_org_tmp2[32][32];
	//pel y_org_tmp1[16][16];
#else
	static pel y_org_tmp2[32][32];
	//static pel y_org_tmp1[16][16];
#endif

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=y_org complete dim=2

#pragma HLS ARRAY_PARTITION variable=y_org_lv1_2d_t1 complete dim=2
#pragma HLS ARRAY_PARTITION variable=y_org_lv2_2d_t1 complete dim=2

//#pragma HLS ARRAY_PARTITION variable=y_org_tmp2 complete dim=2

#endif

#if 1//VIVADO_HLS_IME


	for (U7 j = 0; j < 16; j++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline II=4
#endif
		for (U7 i = 0; i < 16; i++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			//y_org_lv1_2d_t1[j][i] = ( (y_org[(j << 2)][(i << 2)] + y_org[(j << 2)][(i << 2) + 1] + y_org[(j << 2)][(i << 2) + 2] + y_org[(j << 2)][(i << 2) + 3]) 
			//						+ (y_org[(j << 2) + 1][(i << 2)] + y_org[(j << 2) + 1][(i << 2) + 1] + y_org[(j << 2) + 1][(i << 2) + 2] + y_org[(j << 2) + 1][(i << 2) + 3])
			//						+ (y_org[(j << 2) + 2][(i << 2)] + y_org[(j << 2) + 2][(i << 2) + 1] + y_org[(j << 2) + 2][(i << 2) + 2] + y_org[(j << 2) + 2][(i << 2) + 3])
			//						+ (y_org[(j << 2) + 2][(i << 2)] + y_org[(j << 2) + 3][(i << 2) + 1] + y_org[(j << 2) + 3][(i << 2) + 2] + y_org[(j << 2) + 3][(i << 2) + 3]) + 8) >> 4;

			y_org_lv1_2d_t1[j][i] = ((y_org[(j << 2)][(i << 2)] + y_org[(j << 2)][(i << 2) + 1] + y_org[(j << 2)][(i << 2) + 2] + y_org[(j << 2)][(i << 2) + 3])
								   + (y_org[(j << 2) + 1][(i << 2)] + y_org[(j << 2) + 1][(i << 2) + 1] + y_org[(j << 2) + 1][(i << 2) + 2] + y_org[(j << 2) + 1][(i << 2) + 3])
								   + (y_org[(j << 2) + 2][(i << 2)] + y_org[(j << 2) + 2][(i << 2) + 1] + y_org[(j << 2) + 2][(i << 2) + 2] + y_org[(j << 2) + 2][(i << 2) + 3])
								   + (y_org[(j << 2) + 2][(i << 2)] + y_org[(j << 2) + 3][(i << 2) + 1] + y_org[(j << 2) + 3][(i << 2) + 2] + y_org[(j << 2) + 3][(i << 2) + 3])) >> 4;
		}
	}

#else

	for (j = 0; j < 32; j++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (i = 0; i < 32; i++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			y_org_tmp2[j][i] = (y_org[(j << 1)][(i << 1)] + y_org[(j << 1)][(i << 1) + 1] +
				y_org[(j << 1) + 1][(i << 1)] + y_org[(j << 1) + 1][(i << 1) + 1]) >> 2;
		}
	}

	for (U7 j = 0; j < 16; j++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (U7 i = 0; i < 16; i++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			//pel tmp = (y_org_tmp2[(j << 1)][(i << 1)] + y_org_tmp2[(j << 1) + 1][(i << 1)] +
			//	y_org_tmp2[(j << 1)][(i << 1) + 1] + y_org_tmp2[(j << 1) + 1][(i << 1) + 1]) >> 2;
			//y_org_tmp1[j][i] = tmp;
			//y_org_lv1_2d_t1[j][i] = tmp;
			//y_org_lv1_2d_t1[j][i] = y_org_tmp2[(j << 1) + 1][(i << 1) + 1];


			y_org_lv1_2d_t1[j][i] = (y_org_tmp2[(j << 1)][(i << 1)] + y_org_tmp2[(j << 1) + 1][(i << 1)] +
				y_org_tmp2[(j << 1)][(i << 1) + 1] + y_org_tmp2[(j << 1) + 1][(i << 1) + 1]) >> 2;
		}
	}

#endif


	for (U7 j = 0; j < 8; j++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (U7 i = 0; i < 8; i++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			y_org_lv2_2d_t1[j][i] = y_org_lv1_2d_t1[j << 1][i << 1];//y_org_tmp1[(j << 1) + 1][(i << 1) + 1];
		}
	}

}

static void downSampleFetchLv1(
	pel tmp_swOutlv0_org[SWH][SWW],
	//pel tmp_swOutlv1_org[SWH >> 1][SWW >> 1],
	pel swLv1_org[SWH >> 1][SWW >> 1]
	//,
	//pel tmp_swOutlv0[SWW][SWH], 
	//pel tmp_swOutlv1[SWW >> 1][SWH >> 1],
	//pel swLv1[SWW >> 1][SWH >> 1]

)
{
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=tmp_swOutlv0_org complete dim=2
//#pragma HLS array_partition variable=tmp_swOutlv1_org complete dim=2
#pragma HLS array_partition variable=swLv1_org complete dim=2

//#pragma HLS array_partition variable=swLv1 complete dim=1
//#pragma HLS array_partition variable=tmp_swOutlv0 complete dim=1
//#pragma HLS array_partition variable=tmp_swOutlv1 complete dim=1
#endif
	U9 x, y;
//	for (y = 0; y < SWH >> 1; y++)
//	{
//#if IME_PRAGMA_ON
//#pragma HLS pipeline
//#endif
//		for (x = 0; x < SWW >> 1; x++)
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//			swLv1[x][y] = (pel)(((S16)tmp_swOutlv0[(x << 1)][(y << 1)] + (S16)tmp_swOutlv0[(x << 1) + 1][(y << 1)] + (S16)tmp_swOutlv0[(x << 1)][(y << 1) + 1] + (S16)tmp_swOutlv0[(x << 1) + 1][(y << 1) + 1]) >> 2);
//			tmp_swOutlv1[x][y] = (pel)(((S16)tmp_swOutlv0[(x << 1)][(y << 1)] + (S16)tmp_swOutlv0[(x << 1) + 1][(y << 1)] + (S16)tmp_swOutlv0[(x << 1)][(y << 1) + 1] + (S16)tmp_swOutlv0[(x << 1) + 1][(y << 1) + 1]) >> 2);
//
//		}
//	}

	for (y = 0; y < (SWH >> 1); y++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < (SWW >> 1); x++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			swLv1_org[y][x] = (tmp_swOutlv0_org[(y << 1)][(x << 1)] + tmp_swOutlv0_org[(y << 1) + 1][(x << 1)] + tmp_swOutlv0_org[(y << 1)][(x << 1) + 1] + tmp_swOutlv0_org[(y << 1) + 1][(x << 1) + 1]) >> 2;
			//tmp_swOutlv1_org[y][x] = (tmp_swOutlv0_org[(y << 1)][(x << 1)] + tmp_swOutlv0_org[(y << 1) + 1][(x << 1)] + tmp_swOutlv0_org[(y << 1)][(x << 1) + 1] + tmp_swOutlv0_org[(y << 1) + 1][(x << 1) + 1]) >> 2;

		}
	}
}
static void downSampleFetchLv2(
	pel swLv1_org[SWH >> 1][SWW >> 1],
	pel swOutLv2_ime_org[SWH >> 2][SWW >> 2]
	//,
	//pel swLv1[SWW >> 1][SWH >> 1],
	//pel swOutLv2_ime[SWW >> 2][SWH >> 2]
)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=swLv1_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swOutLv2_ime_org complete dim=2

//#pragma HLS ARRAY_PARTITION variable=swLv1 complete dim=1
//#pragma HLS ARRAY_PARTITION variable=swOutLv2_ime complete dim=1
#endif
	U7 x, y;
//	for (y = 0; y < (SWH >> 2); y++)
//	{
//#if IME_PRAGMA_ON
//#pragma HLS pipeline
//#endif
//		for (x = 0; x < (SWW >> 2); x++)
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif           
//			swOutLv2_ime[x][y] = (swLv1[(x << 1)][(y << 1)] + swLv1[(x << 1) + 1][(y << 1)] + swLv1[(x << 1)][(y << 1) + 1] + swLv1[(x << 1) + 1][(y << 1) + 1]) >> 2;
//		}
//	}

	for (y = 0; y < (SWH >> 2); y++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < (SWW >> 2); x++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif           
			swOutLv2_ime_org[y][x] = (swLv1_org[(y << 1)][(x << 1)] + swLv1_org[(y << 1) + 1][(x << 1)] + swLv1_org[(y << 1)][(x << 1) + 1] + swLv1_org[(y << 1) + 1][(x << 1) + 1]) >> 2;
		}
	}
}
void mmea_downsample_refp(
	pel tmp_swOutlv0_org[SWH][SWW],
	pel swOutLv1_org[SWH >> 1][SWW >> 1],
	pel swOutLv2_org[SWH >> 2][SWW >> 2]
	//,
	//pel tmp_swOutlv0[SWW][SWH],
	//pel swOutLv1[SWW >> 1][SWH >> 1],
	//pel swOutLv2[SWW >> 2][SWH >> 2]
)
{
#pragma HLS inline off

	//static pel tmp_swOutlv1_org[SWH >> 1][SWW >> 1];
	
	//static pel tmp_swOutlv1[SWW >> 1][SWH >> 1];

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=tmp_swOutlv1_org complete dim=2
//#pragma HLS array_partition variable=tmp_swOutlv1 complete dim=1
#endif
#endif	//#if !IME_PRAGMA_ON_OP

	downSampleFetchLv1(
		tmp_swOutlv0_org, 
		//tmp_swOutlv1_org, 
		swOutLv1_org
		//, 
		//tmp_swOutlv0, 
		//tmp_swOutlv1, 
		//swOutLv1
	);

	downSampleFetchLv2(
		swOutLv1_org,//tmp_swOutlv1_org,
		swOutLv2_org
		//, 
		//tmp_swOutlv1, 
		//swOutLv2
	);
}

void downsample_refp_test1(
#if BW_DEBUG
	U10 swOutlv0_org[192][256],
	U10 swOutLv1_t1[48][64],
	U10 swOutLv2_t1[24][32]
#else
	pel swOutlv0_org[192][256],
	pel swOutLv1_t1[48][64],
	pel swOutLv2_t1[24][32]
#endif

)
{
#pragma HLS inline off



#if IME_PRAGMA_ON
#pragma HLS array_partition variable=swOutlv0_org complete dim=2
#pragma HLS array_partition variable=swOutLv1_t1 complete dim=2
#pragma HLS array_partition variable=swOutLv2_t1 complete dim=2
#endif

#if 1//VIVADO_HLS_IME
	//pel swOutLv1_t1_tmp[48][64];

	//pel swOutLv1_org[96][128];
	//pel swOutLv2_org[48][64];
#else
	static pel swOutLv1_org[96][128];
	//static pel swOutLv2_org[48][64];
#endif

#if IME_PRAGMA_ON
//#pragma HLS array_partition variable=swOutLv1_org complete dim=2
//#pragma HLS array_partition variable=swOutLv2_org complete dim=2
#endif

	U9 x;
	U8 y;

#if 1//VIVADO_HLS_IME


	for (y = 0; y < 48; y++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline II=3
#endif
		for (x = 0; x < 64; x++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif      
			//swOutLv1_t1[y][x] = ((swOutlv0_org[(y << 2)][(x << 2)] + swOutlv0_org[(y << 2)][(x << 2) + 1] + swOutlv0_org[(y << 2)][(x << 2) + 2] + swOutlv0_org[(y << 2)][(x << 2) + 3])
			//	+ (swOutlv0_org[(y << 2) + 1][(x << 2)] + swOutlv0_org[(y << 2) + 1][(x << 2) + 1] + swOutlv0_org[(y << 2) + 1][(x << 2) + 2] + swOutlv0_org[(y << 2) + 1][(x << 2) + 3])
			//	+ (swOutlv0_org[(y << 2) + 2][(x << 2)] + swOutlv0_org[(y << 2) + 2][(x << 2) + 1] + swOutlv0_org[(y << 2) + 2][(x << 2) + 2] + swOutlv0_org[(y << 2) + 2][(x << 2) + 3])
			//	+ (swOutlv0_org[(y << 2) + 2][(x << 2)] + swOutlv0_org[(y << 2) + 3][(x << 2) + 1] + swOutlv0_org[(y << 2) + 3][(x << 2) + 2] + swOutlv0_org[(y << 2) + 3][(x << 2) + 3]) + 8) >> 4;

			swOutLv1_t1[y][x] = ((swOutlv0_org[(y << 2)][(x << 2)] + swOutlv0_org[(y << 2)][(x << 2) + 1] + swOutlv0_org[(y << 2)][(x << 2) + 2] + swOutlv0_org[(y << 2)][(x << 2) + 3])
							   + (swOutlv0_org[(y << 2) + 1][(x << 2)] + swOutlv0_org[(y << 2) + 1][(x << 2) + 1] + swOutlv0_org[(y << 2) + 1][(x << 2) + 2] + swOutlv0_org[(y << 2) + 1][(x << 2) + 3])
							   + (swOutlv0_org[(y << 2) + 2][(x << 2)] + swOutlv0_org[(y << 2) + 2][(x << 2) + 1] + swOutlv0_org[(y << 2) + 2][(x << 2) + 2] + swOutlv0_org[(y << 2) + 2][(x << 2) + 3])
							   + (swOutlv0_org[(y << 2) + 2][(x << 2)] + swOutlv0_org[(y << 2) + 3][(x << 2) + 1] + swOutlv0_org[(y << 2) + 3][(x << 2) + 2] + swOutlv0_org[(y << 2) + 3][(x << 2) + 3])) >> 4;

			//swOutLv1_t1_tmp[y][x] = ((swOutlv0_org[(y << 2)][(x << 2)] + swOutlv0_org[(y << 2)][(x << 2) + 1] + swOutlv0_org[(y << 2)][(x << 2) + 2] + swOutlv0_org[(y << 2)][(x << 2) + 3])
			//	+ (swOutlv0_org[(y << 2) + 1][(x << 2)] + swOutlv0_org[(y << 2) + 1][(x << 2) + 1] + swOutlv0_org[(y << 2) + 1][(x << 2) + 2] + swOutlv0_org[(y << 2) + 1][(x << 2) + 3])
			//	+ (swOutlv0_org[(y << 2) + 2][(x << 2)] + swOutlv0_org[(y << 2) + 2][(x << 2) + 1] + swOutlv0_org[(y << 2) + 2][(x << 2) + 2] + swOutlv0_org[(y << 2) + 2][(x << 2) + 3])
			//	+ (swOutlv0_org[(y << 2) + 2][(x << 2)] + swOutlv0_org[(y << 2) + 3][(x << 2) + 1] + swOutlv0_org[(y << 2) + 3][(x << 2) + 2] + swOutlv0_org[(y << 2) + 3][(x << 2) + 3])) >> 4;

			////check
			//if (swOutLv1_t1[y][x] != swOutLv1_t1_tmp[y][x])
			//{
			//	printf("error!!! swOutLv1_t1_tmp[%d][%d] = %d swOutLv1_t1[%d][%d] = %d \n ", y, x, swOutLv1_t1_tmp[y][x], y, x, swOutLv1_t1[y][x]);
			//}

		}
	}

#else

	for (y = 0; y < 96; y++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < 128; x++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			swOutLv1_org[y][x] = (swOutlv0_org[(y << 1)][(x << 1)] + swOutlv0_org[(y << 1) + 1][(x << 1)] + swOutlv0_org[(y << 1)][(x << 1) + 1] + swOutlv0_org[(y << 1) + 1][(x << 1) + 1]) >> 2;			

		}
	}


	for (y = 0; y < 48; y++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < 64; x++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif           
			//pel tmp1 = (swOutLv1_org[(y << 1)][(x << 1)] + swOutLv1_org[(y << 1) + 1][(x << 1)] + swOutLv1_org[(y << 1)][(x << 1) + 1] + swOutLv1_org[(y << 1) + 1][(x << 1) + 1]) >> 2;
			//swOutLv2_org[y][x] = tmp1;
			//swOutLv1_t1[y][x] = tmp1;
			////swOutLv1_t1[y][x] = swOutLv1_org[(y << 1) + 1][(x << 1) + 1];

			swOutLv1_t1[y][x] = (swOutLv1_org[(y << 1)][(x << 1)] + swOutLv1_org[(y << 1) + 1][(x << 1)] + swOutLv1_org[(y << 1)][(x << 1) + 1] + swOutLv1_org[(y << 1) + 1][(x << 1) + 1]) >> 2;
		}
	}

#endif


	for (y = 0; y < 24; y++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < 32; x++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif           
			swOutLv2_t1[y][x] = swOutLv1_t1[y << 1][x << 1];//swOutLv2_org[(y << 1) + 1][(x << 1) + 1];
		}
	}

}

/*	Fetch re-organization */
/*=======================*/

#if ENABLE_BFRAME
void copyLine(
	S14 me_line_map_ptr_co_left_mv[SCU_IN_LCU_NUMS_LEN][MV_D], S2 me_line_map_ptr_co_left_refi[SCU_IN_LCU_NUMS_LEN], S16 ptrRefCoLeftLine[SCU_IN_LCU_NUMS_LEN],
	ENC_ME_NEB_INFO new_above_nebs_line[ABOVE_LINE_LEN], U32 me_line_map_ptr_new_map_scu_above_line[ABOVE_LINE_LEN],
	S14 me_line_map_ptr_co_left_mv_cp[SCU_IN_LCU_NUMS_LEN][MV_D], S2 me_line_map_ptr_co_left_refi_cp[SCU_IN_LCU_NUMS_LEN], S16 ptrRefCoLeftLine_cp[SCU_IN_LCU_NUMS_LEN],
	ENC_ME_NEB_INFO new_above_nebs_line_cp[ABOVE_LINE_LEN], U32 me_line_map_ptr_new_map_scu_above_line_cp[ABOVE_LINE_LEN])
{
	int x, i, j;

	for (x = 0; x < SCU_IN_LCU_NUMS_LEN; x++)
	{
		me_line_map_ptr_co_left_mv_cp[x][0] = me_line_map_ptr_co_left_mv[x][0];
		me_line_map_ptr_co_left_mv_cp[x][1] = me_line_map_ptr_co_left_mv[x][1];
		me_line_map_ptr_co_left_refi_cp[x] = me_line_map_ptr_co_left_refi[x];
		ptrRefCoLeftLine_cp[x] = ptrRefCoLeftLine[x];
	}
	for (x = 0; x < ABOVE_LINE_LEN; x++)
	{
		me_line_map_ptr_new_map_scu_above_line_cp[x] = me_line_map_ptr_new_map_scu_above_line[x];
		for (i = 0; i < 2; i++)
		{
			new_above_nebs_line_cp[x].refi[i] = new_above_nebs_line[x].refi[i];
			for (j = 0; j < 2; j++)
			{
				new_above_nebs_line_cp[x].mv[i][j] = new_above_nebs_line[x].mv[i][j];
			}
		}

	}

}
#endif

void deriveSearchRangeLv0(S14 centerPos[MV_D], S14 posLT[DIR_DIM], S14 rangeLv0[2][2], S14 swSubLv0TopLeft[MV_D], S14 swSubLv0TopLeftCp[MV_D])
{

#if IME_PRAGMA_ON
#pragma HLS INLINE off
#endif

	S14 ltPosX, ltPosY;
	S14 rbPosX, rbPosY;

	ltPosX = centerPos[0] - MMEA_LEVEL0_SR;
	ltPosY = centerPos[1] - MMEA_LEVEL0_SR;
	rbPosX = centerPos[0] + MMEA_LEVEL0_SR + MAX_CU_SIZE2;
	rbPosY = centerPos[1] + MMEA_LEVEL0_SR + MAX_CU_SIZE2;

	if (ltPosX < 0)
	{
		centerPos[0] -= ltPosX;
	}
	if (ltPosY < 0)
	{
		centerPos[1] -= ltPosY;
		if (centerPos[1] % 2 != 0)
			centerPos[1]++;
	}
	if (rbPosX > SW_LEN_LV0_V - 1)
	{
		centerPos[0] -= (rbPosX - SW_LEN_LV0_V + 1);

	}
	if (rbPosY > SW_LEN_LV0_H - 1)
	{
		centerPos[1] -= (rbPosY - SW_LEN_LV0_H + 1);
	}

	posLT[0] = centerPos[0] - MMEA_LEVEL0_SR;
	posLT[1] = centerPos[1] - MMEA_LEVEL0_SR;

	rangeLv0[0][0] = posLT[0];
	rangeLv0[0][1] = posLT[1];
	rangeLv0[1][0] = min_ime(posLT[0] + 2 * MMEA_LEVEL0_SR + MAX_CU_SIZE2, (SWW - 1), S14);
	rangeLv0[1][1] = min_ime(posLT[1] + 2 * MMEA_LEVEL0_SR + MAX_CU_SIZE2, (SWH - 1), S14);

	swSubLv0TopLeft[MV_X] = rangeLv0[0][MV_X];
	swSubLv0TopLeft[MV_Y] = rangeLv0[0][MV_Y];
	swSubLv0TopLeftCp[MV_X] = rangeLv0[0][MV_X];
	swSubLv0TopLeftCp[MV_Y] = rangeLv0[0][MV_Y];

	posLT[0] = (posLT[0] << 2) - (MMEA_LEVEL2_SR_V << 2);
	posLT[1] = (posLT[1] << 2) - (MMEA_LEVEL2_SR_H << 2);
}

void deriveSRLv0_test(
	S14 centerPos[MV_D], 
	S14 posLT[DIR_DIM], 
#if VIVADO_HLS_IME
	S14 swSubLv0TopLeft_cp[MV_D],
	S14 swSubLv0TopLeft_cp_1[MV_D],
#endif
	S14 swSubLv0TopLeft[MV_D]
)
{

#if IME_PRAGMA_ON
#pragma HLS INLINE off
#endif

	S14 ltPosX, ltPosY, rbPosX, rbPosY;
#if VIVADO_HLS_IME

	ltPosX = centerPos[0] - 12;
	ltPosY = centerPos[1] - 12;
	rbPosX = centerPos[0] + 76;
	rbPosY = centerPos[1] + 76;

	if (ltPosX < 0)
	{
		//centerPos[0] = 12;
		swSubLv0TopLeft[0] = 4;
		swSubLv0TopLeft_cp[0] = 4;
		swSubLv0TopLeft_cp_1[0] = 4;
		posLT[0] = -368;

	}
	else if (rbPosX > 255)
	{
		//centerPos[0] = 179;
		swSubLv0TopLeft[0] = 171;
		swSubLv0TopLeft_cp[0] = 171;
		swSubLv0TopLeft_cp_1[0] = 171;
		posLT[0] = 300;
	}
	else
	{
		//centerPos[0] = centerPos[0];
		swSubLv0TopLeft[0] = centerPos[0] - 8;
		swSubLv0TopLeft_cp[0] = centerPos[0] - 8;
		swSubLv0TopLeft_cp_1[0] = centerPos[0] - 8;
		posLT[0] = (swSubLv0TopLeft_cp[0] << 2) - 384;
	}

	if (ltPosY < 0)
	{
		//centerPos[1] = 12;
		swSubLv0TopLeft[1] = 4;
		swSubLv0TopLeft_cp[1] = 4;
		swSubLv0TopLeft_cp_1[1] = 4;
		posLT[1] = -240;
	}
	else if (rbPosY > 191)
	{
		//centerPos[1] = 115;
		swSubLv0TopLeft[1] = 107;
		swSubLv0TopLeft_cp[1] = 107;
		swSubLv0TopLeft_cp_1[1] = 107;
		posLT[1] = 172;
	}
	else
	{
		//centerPos[1] = centerPos[1];
		swSubLv0TopLeft[1] = centerPos[1] - 8;
		swSubLv0TopLeft_cp[1] = centerPos[1] - 8;
		swSubLv0TopLeft_cp_1[1] = centerPos[1] - 8;
		posLT[1] = (swSubLv0TopLeft_cp[1] << 2) - 256;
	}


	//swSubLv0TopLeft[MV_X] = centerPos[0] - 8;
	//swSubLv0TopLeft[MV_Y] = centerPos[1] - 8;

	//posLT[0] = (swSubLv0TopLeft[0] << 2) - 384;
	//posLT[1] = (swSubLv0TopLeft[1] << 2) - 256;

#else

#if OFFSET_LV1_LV0_ON

#if 0//PATCH_DIVIDE

	ltPosX = centerPos[0] - MMEA_LEVEL0_SR - OFFSET_LV0 - MMEA_LEVEL2_SR_V - OFFSET_FME_SWW;
	ltPosY = centerPos[1] - MMEA_LEVEL0_SR - OFFSET_LV0 - MMEA_LEVEL2_SR_H - OFFSET_FME_SWH;
	rbPosX = centerPos[0] + MMEA_LEVEL0_SR + MAX_CU_SIZE2 + OFFSET_LV0 + MMEA_LEVEL2_SR_V + OFFSET_FME_SWW;
	rbPosY = centerPos[1] + MMEA_LEVEL0_SR + MAX_CU_SIZE2 + OFFSET_LV0 + MMEA_LEVEL2_SR_H + OFFSET_FME_SWH;

#else
	ltPosX = centerPos[0] - MMEA_LEVEL0_SR - OFFSET_LV0;
	ltPosY = centerPos[1] - MMEA_LEVEL0_SR - OFFSET_LV0;
	rbPosX = centerPos[0] + MMEA_LEVEL0_SR + MAX_CU_SIZE2 + OFFSET_LV0;
	rbPosY = centerPos[1] + MMEA_LEVEL0_SR + MAX_CU_SIZE2 + OFFSET_LV0;
#endif	// #if PATCH_DIVIDE

#else
	ltPosX = centerPos[0] - MMEA_LEVEL0_SR;
	ltPosY = centerPos[1] - MMEA_LEVEL0_SR;
	rbPosX = centerPos[0] + MMEA_LEVEL0_SR + MAX_CU_SIZE2;
	rbPosY = centerPos[1] + MMEA_LEVEL0_SR + MAX_CU_SIZE2;
#endif
	if (ltPosX < 0)
	{
		centerPos[0] -= ltPosX;
	}
	if (ltPosY < 0)
	{
		centerPos[1] -= ltPosY;
		if (centerPos[1] % 2 != 0)
			centerPos[1]++;
	}
	if (rbPosX > SW_LEN_LV0_V - 1)
	{
		centerPos[0] -= (rbPosX - SW_LEN_LV0_V + 1);

	}
	if (rbPosY > SW_LEN_LV0_H - 1)
	{
		centerPos[1] -= (rbPosY - SW_LEN_LV0_H + 1);
	}

	posLT[0] = centerPos[0] - MMEA_LEVEL0_SR;
	posLT[1] = centerPos[1] - MMEA_LEVEL0_SR;

	//rangeLv0[0][0] = posLT[0];
	//rangeLv0[0][1] = posLT[1];
	//rangeLv0[1][0] = min_ime(posLT[0] + 2 * MMEA_LEVEL0_SR + MAX_CU_SIZE2, (SWW - 1), S14);
	//rangeLv0[1][1] = min_ime(posLT[1] + 2 * MMEA_LEVEL0_SR + MAX_CU_SIZE2, (SWH - 1), S14);

	swSubLv0TopLeft[MV_X] = posLT[MV_X];
	swSubLv0TopLeft[MV_Y] = posLT[MV_Y];
	//swSubLv0TopLeftCp[MV_X] = posLT[MV_X];
	//swSubLv0TopLeftCp[MV_Y] = posLT[MV_Y];

	posLT[0] = (posLT[0] << 2) - (MMEA_LEVEL2_SR_V << 2);
	posLT[1] = (posLT[1] << 2) - (MMEA_LEVEL2_SR_H << 2);
#endif	// #if VIVADO_HLS_IME
}

void fetchAboveMvLineOrg(U11 min_scu_x, U11 min_scu_y, ENC_ME_NEB_INFO above_nebs_line[MAX_WIDTH >> MIN_CU_LOG2], U32 map_scu_above_line[MAX_WIDTH >> MIN_CU_LOG2],
	U32 mapScuAboveLine[SCU_IN_LCU_NUMS_LEN + 2], S14 mvScuAboveLine[SCU_IN_LCU_NUMS_LEN + 2][MV_D], S2 refiScuAboveLine[SCU_IN_LCU_NUMS_LEN + 2], U1 lidx, U11 picWidthInScu)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=mapScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=mvScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=refiScuAboveLine complete dim=1
#endif
	U11 xScuOffset;

	if (min_scu_x >= 1)
	{
		mapScuAboveLine[0] = map_scu_above_line[min_scu_x - 1];
		mvScuAboveLine[0][0] = above_nebs_line[min_scu_x - 1].mv[lidx][0];
		mvScuAboveLine[0][1] = above_nebs_line[min_scu_x - 1].mv[lidx][1];
		refiScuAboveLine[0] = above_nebs_line[min_scu_x - 1].refi[lidx];
		if (MCU_GET_INTRA_FLAG_IME(mapScuAboveLine[0]) && MCU_GET_CODED_FLAG_IME(mapScuAboveLine[0]))
		{
			refiScuAboveLine[0] = -1;
			mvScuAboveLine[0][0] = 0;
			mvScuAboveLine[0][1] = 0;
		}
	}
	else
	{
		refiScuAboveLine[0] = -1;
		mvScuAboveLine[0][0] = 0;
		mvScuAboveLine[0][1] = 0;
	}

	for (xScuOffset = 0; xScuOffset < SCU_IN_LCU_NUMS_LEN + 1; xScuOffset++)
	{
#pragma HLS loop_tripcount max=18
		if (min_scu_x + xScuOffset <= picWidthInScu - 1)
		{
			mapScuAboveLine[xScuOffset + 1] = map_scu_above_line[min_scu_x + xScuOffset];
			mvScuAboveLine[xScuOffset + 1][0] = above_nebs_line[min_scu_x + xScuOffset].mv[lidx][0];
			mvScuAboveLine[xScuOffset + 1][1] = above_nebs_line[min_scu_x + xScuOffset].mv[lidx][1];
			refiScuAboveLine[xScuOffset + 1] = above_nebs_line[min_scu_x + xScuOffset].refi[lidx];
			if (MCU_GET_INTRA_FLAG_IME(mapScuAboveLine[xScuOffset + 1]) && MCU_GET_CODED_FLAG_IME(mapScuAboveLine[xScuOffset + 1]))
			{
				refiScuAboveLine[xScuOffset + 1] = -1;
				mvScuAboveLine[xScuOffset + 1][0] = 0;
				mvScuAboveLine[xScuOffset + 1][1] = 0;
			}
		}
		else
		{
			refiScuAboveLine[xScuOffset + 1] = -1;
			mvScuAboveLine[xScuOffset + 1][0] = 0;
			mvScuAboveLine[xScuOffset + 1][1] = 0;
		}
	}
}



void fetchAboveMvLine(
	U11 min_scu_x, 
	S16 refp_ptr[17][2], 
	ENC_ME_NEB_INFO above_nebs_line[ABOVE_LINE_LEN], 
	U32 map_scu_above_line[ABOVE_LINE_LEN],
	U32 mapScuAboveLine[SCU_IN_LCU_NUMS_LEN + 2], 
	S14 mvScuAboveLine[SCU_IN_LCU_NUMS_LEN + 2][MV_D], 
	S2 refiScuAboveLine[SCU_IN_LCU_NUMS_LEN + 2], 
	S16 ptrRefAboveLine[SCU_IN_LCU_NUMS_LEN + 2], 
	S2 co_left_refi[SCU_IN_LCU_NUMS_LEN], 
	U1 lidx, 
	U11 picWidthInScu
)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=mapScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=mvScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=refiScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=ptrRefAboveLine complete dim=1
#endif
	U11 xScuOffset;

	if (min_scu_x >= 1)
	{
		mapScuAboveLine[0] = map_scu_above_line[SCU_IN_LCU_NUMS_LEN - 1];
		mvScuAboveLine[0][0] = above_nebs_line[SCU_IN_LCU_NUMS_LEN - 1].mv[lidx][0];
		mvScuAboveLine[0][1] = above_nebs_line[SCU_IN_LCU_NUMS_LEN - 1].mv[lidx][1];
		refiScuAboveLine[0] = above_nebs_line[SCU_IN_LCU_NUMS_LEN - 1].refi[lidx];

		if (MCU_GET_INTRA_FLAG_IME(mapScuAboveLine[0]) && MCU_GET_CODED_FLAG_IME(mapScuAboveLine[0]))
		{
			refiScuAboveLine[0] = -1;
			mvScuAboveLine[0][0] = 0;
			mvScuAboveLine[0][1] = 0;
			ptrRefAboveLine[0] = 0;
		}
		if (refiScuAboveLine[0] >= 0)
			ptrRefAboveLine[0] = refp_ptr[refiScuAboveLine[0]][lidx];
	}
	else
	{
		refiScuAboveLine[0] = -1;
		mvScuAboveLine[0][0] = 0;
		mvScuAboveLine[0][1] = 0;
		ptrRefAboveLine[0] = 0;
	}

	for (xScuOffset = 0; xScuOffset < SCU_IN_LCU_NUMS_LEN + 1; xScuOffset++)
	{
#pragma HLS loop_tripcount max=18
		//if (min_scu_x + xScuOffset <= picWidthInScu - 1)
		if ((min_scu_x + xScuOffset +1)<= picWidthInScu )
		{
			mapScuAboveLine[xScuOffset + 1] = map_scu_above_line[SCU_IN_LCU_NUMS_LEN + xScuOffset];
			mvScuAboveLine[xScuOffset + 1][0] = above_nebs_line[SCU_IN_LCU_NUMS_LEN + xScuOffset].mv[lidx][0];
			mvScuAboveLine[xScuOffset + 1][1] = above_nebs_line[SCU_IN_LCU_NUMS_LEN + xScuOffset].mv[lidx][1];
			refiScuAboveLine[xScuOffset + 1] = above_nebs_line[SCU_IN_LCU_NUMS_LEN + xScuOffset].refi[lidx];

			if (MCU_GET_INTRA_FLAG_IME(mapScuAboveLine[xScuOffset + 1]) && MCU_GET_CODED_FLAG_IME(mapScuAboveLine[xScuOffset + 1]))
			{
				refiScuAboveLine[xScuOffset + 1] = -1;
				mvScuAboveLine[xScuOffset + 1][0] = 0;
				mvScuAboveLine[xScuOffset + 1][1] = 0;
				ptrRefAboveLine[xScuOffset + 1] = 0;
			}
			if (refiScuAboveLine[xScuOffset + 1] >= 0)
				ptrRefAboveLine[xScuOffset + 1] = refp_ptr[refiScuAboveLine[xScuOffset + 1]][lidx];
		}
		else
		{
			refiScuAboveLine[xScuOffset + 1] = -1;
			mvScuAboveLine[xScuOffset + 1][0] = 0;
			mvScuAboveLine[xScuOffset + 1][1] = 0;
		}
	}

}


	//for (xScuOffset = 0; xScuOffset < SCU_IN_LCU_NUMS_LEN + 1; xScuOffset++)
            

		//if (min_scu_x + xScuOffset <= picWidthInScu - 1)


/*====================*/
/*	  MVP process	  */
/*====================*/

void deriveMvpFromLcu2(S16 ptr_cur_ref, S16 ptr_cur, U11 pic_width_in_scu, U11 h_scu, S14 mvp[MV_D], U12 x_scu, U12 y_scu, U7 cu_width, U7 cu_height, U11 min_scu_x, U11 min_scu_y,
	S14 co_left_mv[SCU_IN_LCU_NUMS_LEN][MV_D], S2 co_left_refi[SCU_IN_LCU_NUMS_LEN],
	U32 mapScuAboveLine[SCU_IN_LCU_NUMS_LEN + 2], S14 mvScuAboveLine[SCU_IN_LCU_NUMS_LEN + 2][MV_D], S2 refiScuAboveLine[SCU_IN_LCU_NUMS_LEN + 2],
	S16 ptrRefAboveLine[SCU_IN_LCU_NUMS_LEN + 2], S16 ptrRefCoLeftLine[SCU_IN_LCU_NUMS_LEN])
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=mapScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=mvScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=refiScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=ptrRefAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=ptrRefCoLeftLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=mvp cyclic factor=2 dim=1
#endif
	U11 cu_width_in_scu = cu_width >> MIN_CU_LOG2;
	U3 cnt;
	U2 mvPredType = MVPRED_xy_MIN;
	S2 rFrameL, rFrameU, rFrameUR;
	U2 hv;
	S32 mvp_x, mvp_y;

	S2 refi[NUM_AVS2_SPATIAL_MV] = { -1, -1, -1 };
	S32 MVPs[NUM_AVS2_SPATIAL_MV][MV_D] = {};
	S14 neb_addr[NUM_AVS2_SPATIAL_MV + 1] = {};
	S32 valid_flag[NUM_AVS2_SPATIAL_MV + 1] = {};
	S2 refi_nebs[NUM_AVS2_SPATIAL_MV + 1] = { -1, -1, -1, -1 };
	S14 mv_nebs[NUM_AVS2_SPATIAL_MV + 1][MV_D] = {};
	S16 mv_nebs_scaled[NUM_AVS2_SPATIAL_MV + 1][MV_D] = {};

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=refi cyclic factor=3 dim=1
#pragma HLS ARRAY_PARTITION variable=mv_nebs cyclic factor=4 dim=1
#pragma HLS ARRAY_PARTITION variable=MVPs complete dim=0
#pragma HLS ARRAY_PARTITION variable=neb_addr cyclic factor=4 dim=1
#pragma HLS ARRAY_PARTITION variable=valid_flag_nebs cyclic factor=4 dim=1
#pragma HLS ARRAY_PARTITION variable=refi_nebs cyclic factor=4 dim=1
#endif


	// A
	neb_addr[0] = y_scu - min_scu_y;
	//assert(neb_addr[0] < 16 && neb_addr[0] >= 0);
	valid_flag[0] = x_scu > 0;
	if (valid_flag[0])
	{
		if (REFI_IS_VALID(co_left_refi[neb_addr[0]])) {
			refi_nebs[0] = co_left_refi[neb_addr[0]];
			mv_nebs[0][0] = co_left_mv[neb_addr[0]][0];
			mv_nebs[0][1] = co_left_mv[neb_addr[0]][1];;
		}
		else
		{
			valid_flag[0] = 0;
		}
	}

	// B
	valid_flag[1] = y_scu > 0;
	if (valid_flag[1])
	{
		neb_addr[1] = x_scu - min_scu_x + 1;
		refi_nebs[1] = refiScuAboveLine[neb_addr[1]];
		valid_flag[1] = valid_flag[1] && MCU_GET_CODED_FLAG_IME(mapScuAboveLine[neb_addr[1]])
			&& !MCU_GET_INTRA_FLAG_IME(mapScuAboveLine[neb_addr[1]]) && REFI_IS_VALID(refi_nebs[1]);
		if (valid_flag[1]) {
			mv_nebs[1][0] = mvScuAboveLine[neb_addr[1]][0];
			mv_nebs[1][1] = mvScuAboveLine[neb_addr[1]][1];
		}
	}

	// C
	valid_flag[2] = y_scu > 0 && x_scu + cu_width_in_scu < pic_width_in_scu;
	if (valid_flag[2])
	{
		neb_addr[2] = x_scu - min_scu_x + 1 + cu_width_in_scu;
		refi_nebs[2] = refiScuAboveLine[neb_addr[2]];
		valid_flag[2] = valid_flag[2] && MCU_GET_CODED_FLAG_IME(mapScuAboveLine[neb_addr[2]])
			&& !MCU_GET_INTRA_FLAG_IME(mapScuAboveLine[neb_addr[2]]) && REFI_IS_VALID(refi_nebs[2]);
		if (valid_flag[2]) {
			mv_nebs[2][0] = mvScuAboveLine[neb_addr[2]][0];
			mv_nebs[2][1] = mvScuAboveLine[neb_addr[2]][1];
		}
	}

	//D
	valid_flag[3] = x_scu > 0 && y_scu > 0;
	if (valid_flag[3])
	{
		if (y_scu != min_scu_y) {
			neb_addr[3] = y_scu - min_scu_y - 1;
			//assert(neb_addr[3] < 16 && neb_addr[3] >= 0);
			refi_nebs[3] = co_left_refi[neb_addr[3]];
			valid_flag[3] = REFI_IS_VALID(co_left_refi[neb_addr[3]]);
			if (valid_flag[3]) {
				mv_nebs[3][0] = co_left_mv[neb_addr[3]][0];
				mv_nebs[3][1] = co_left_mv[neb_addr[3]][1];;
			}
		}
		else
		{
			neb_addr[3] = x_scu - min_scu_x;
			refi_nebs[3] = refiScuAboveLine[neb_addr[3]];
			valid_flag[3] = valid_flag[3] && MCU_GET_CODED_FLAG_IME(mapScuAboveLine[neb_addr[3]])
				&& !MCU_GET_INTRA_FLAG_IME(mapScuAboveLine[neb_addr[3]]) && REFI_IS_VALID(refi_nebs[3]);
			if (valid_flag[3]) {
				mv_nebs[3][0] = mvScuAboveLine[neb_addr[3]][0];
				mv_nebs[3][1] = mvScuAboveLine[neb_addr[3]][1];
			}
		}

	}
	if (valid_flag[0])
		scalingMV(ptr_cur, ptr_cur_ref, ptr_cur_ref, ptrRefCoLeftLine[0], mv_nebs[0], mv_nebs_scaled[0], refi_nebs[0]);
	if (valid_flag[1])
		scalingMV(ptr_cur, ptr_cur_ref, ptr_cur, ptrRefAboveLine[neb_addr[1]], mv_nebs[1], mv_nebs_scaled[1], refi_nebs[1]);
	if (valid_flag[2])
		scalingMV(ptr_cur, ptr_cur_ref, ptr_cur, ptrRefAboveLine[neb_addr[2]], mv_nebs[2], mv_nebs_scaled[2], refi_nebs[2]);
	if (valid_flag[3])
		scalingMV(ptr_cur, ptr_cur_ref, ptr_cur, ptrRefAboveLine[neb_addr[3]], mv_nebs[3], mv_nebs_scaled[3], refi_nebs[3]);



	if (!valid_flag[2])
	{
		neb_addr[2] = neb_addr[3];              // D
		valid_flag[2] = valid_flag[3];
		refi_nebs[2] = refi_nebs[3];
		mv_nebs_scaled[2][0] = mv_nebs_scaled[3][0];
		mv_nebs_scaled[2][1] = mv_nebs_scaled[3][1];
	}


	for (cnt = 0; cnt < NUM_AVS2_SPATIAL_MV; cnt++)
	{
#pragma HLS loop_tripcount max = 3
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		if (!valid_flag[cnt]) {
			refi[cnt] = -1;
			MVPs[cnt][0] = 0;
			MVPs[cnt][1] = 0;
		}
		else {
			refi[cnt] = refi_nebs[cnt];
			MVPs[cnt][0] = (S32)mv_nebs_scaled[cnt][0];
			MVPs[cnt][1] = (S32)mv_nebs_scaled[cnt][1];
		}
	}


	rFrameL = refi[0];
	rFrameU = refi[1];
	rFrameUR = refi[2];
	if ((rFrameL != -1) && (rFrameU == -1) && (rFrameUR == -1))
	{
		mvPredType = MVPRED_L;
	}
	else if ((rFrameL == -1) && (rFrameU != -1) && (rFrameUR == -1))
	{
		mvPredType = MVPRED_U;
	}
	else if ((rFrameL == -1) && (rFrameU == -1) && (rFrameUR != -1))
	{
		mvPredType = MVPRED_UR;
	}

	for (hv = 0; hv < MV_D; hv++)
	{
#pragma HLS loop_tripcount max = 2
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

		if (mvPredType == MVPRED_xy_MIN)
		{
			if ((MVPs[0][hv] < 0 && MVPs[1][hv] > 0 && MVPs[2][hv] > 0) || (MVPs[0][hv] > 0 && MVPs[1][hv] < 0 && MVPs[2][hv] < 0))
			{
				mvp[hv] = (S14)((MVPs[1][hv] + MVPs[2][hv]) / 2);
			}
			else if ((MVPs[1][hv] < 0 && MVPs[0][hv] > 0 && MVPs[2][hv] > 0) || (MVPs[1][hv] > 0 && MVPs[0][hv] < 0 && MVPs[2][hv] < 0))
			{
				mvp[hv] = (S14)((MVPs[2][hv] + MVPs[0][hv]) / 2);
			}
			else if ((MVPs[2][hv] < 0 && MVPs[0][hv] > 0 && MVPs[1][hv] > 0) || (MVPs[2][hv] > 0 && MVPs[0][hv] < 0 && MVPs[1][hv] < 0))
			{
				mvp[hv] = (S14)((MVPs[0][hv] + MVPs[1][hv]) / 2);
			}
			else
			{
				if (COM_ABS32(MVPs[0][hv] - MVPs[1][hv]) <= COM_ABS32(MVPs[1][hv] - MVPs[2][hv]) && COM_ABS32(MVPs[0][hv] - MVPs[1][hv]) <= COM_ABS32(MVPs[2][hv] - MVPs[0][hv]))
				{
					mvp[hv] = (S14)((MVPs[0][hv] + MVPs[1][hv]) / 2);
				}
				else if (COM_ABS32(MVPs[1][hv] - MVPs[2][hv]) <= COM_ABS32(MVPs[0][hv] - MVPs[1][hv]) && COM_ABS32(MVPs[1][hv] - MVPs[2][hv]) <= COM_ABS32(MVPs[2][hv] - MVPs[0][hv]))
				{
					mvp[hv] = (S14)((MVPs[1][hv] + MVPs[2][hv]) / 2);
				}
				else
				{
					mvp[hv] = (S14)((MVPs[2][hv] + MVPs[0][hv]) / 2);
				}
			}
		}
		else if (mvPredType == MVPRED_L)
		{
			mvp[hv] = (S14)MVPs[0][hv];
		}
		else if (mvPredType == MVPRED_U)
		{
			mvp[hv] = (S14)MVPs[1][hv];
		}
		else //if(mvPredType == MVPRED_UR)
		{
			mvp[hv] = (S14)MVPs[2][hv];
		}
	}

	// clip MVP after rounding (rounding process might result in 32768)

	roundingMvS32((S32)mvp[0], (S32)mvp[1], &mvp_x, &mvp_y, 2, 2);
	mvp[0] = (S14)COM_CLIP3_IME(COM_INT16_MIN, COM_INT16_MAX, mvp_x, S32);
	mvp[1] = (S14)COM_CLIP3_IME(COM_INT16_MIN, COM_INT16_MAX, mvp_y, S32);
}

#define USE_16S_MVP 0

#if USE_16S_MVP
void deriveMvpFromCandi(s16 mvp[2], s16 mvA[2], s16 mvB[2], s16 mvC[2], s16 mvD[2], s8 refiA, s8 refiB, s8 refiC, s8 refiD)
{

#pragma HLS INLINE OFF
	s32 mvNeb[3][2];
	s8 refiNeb[3];
	int hv;
	s32 mvpCom[2];
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=mvNeb complete dim=0
#pragma HLS ARRAY_PARTITION variable=refiNeb complete dim=0
#pragma HLS ARRAY_PARTITION variable=mvpCom complete dim=0
#endif
	refiNeb[0] = refiA;
	mvNeb[0][0] = (s32)mvA[0];
	mvNeb[0][1] = (s32)mvA[1];

	refiNeb[1] = refiB;
	mvNeb[1][0] = (s32)mvB[0];
	mvNeb[1][1] = (s32)mvB[1];

	if (refiC < 0)
	{
		refiNeb[2] = refiD;
		mvNeb[2][0] = (s32)mvD[0];
		mvNeb[2][1] = (s32)mvD[1];
	}
	else
	{
		refiNeb[2] = refiC;
		mvNeb[2][0] = (s32)mvC[0];
		mvNeb[2][1] = (s32)mvC[1];
	}

	if ((refiNeb[0] != -1) && (refiNeb[1] == -1) && (refiNeb[2] == -1))
	{
		mvpCom[0] = mvNeb[0][0];
		mvpCom[1] = mvNeb[0][1];
	}
	else if ((refiNeb[0] == -1) && (refiNeb[1] != -1) && (refiNeb[2] == -1))
	{
		mvpCom[0] = mvNeb[1][0];
		mvpCom[1] = mvNeb[1][1];
	}
	else if ((refiNeb[0] == -1) && (refiNeb[1] == -1) && (refiNeb[2] != -1))
	{
		mvpCom[0] = mvNeb[2][0];
		mvpCom[1] = mvNeb[2][1];
	}
	else
	{
		for (hv = 0; hv < 2; hv++)
		{
#pragma HLS loop_tripcount max = 2
#pragma HLS unroll
			if ((mvNeb[0][hv] < 0 && mvNeb[1][hv] > 0 && mvNeb[2][hv] > 0) || (mvNeb[0][hv] > 0 && mvNeb[1][hv] < 0 && mvNeb[2][hv] < 0))
			{
				mvpCom[hv] = ((mvNeb[1][hv] + mvNeb[2][hv]) / 2);
			}
			else if ((mvNeb[1][hv] < 0 && mvNeb[0][hv] > 0 && mvNeb[2][hv] > 0) || (mvNeb[1][hv] > 0 && mvNeb[0][hv] < 0 && mvNeb[2][hv] < 0))
			{
				mvpCom[hv] = ((mvNeb[2][hv] + mvNeb[0][hv]) / 2);
			}
			else if ((mvNeb[2][hv] < 0 && mvNeb[0][hv] > 0 && mvNeb[1][hv] > 0) || (mvNeb[2][hv] > 0 && mvNeb[0][hv] < 0 && mvNeb[1][hv] < 0))
			{
				mvpCom[hv] = ((mvNeb[0][hv] + mvNeb[1][hv]) / 2);
			}
			else
			{
				if (COM_ABS32(mvNeb[0][hv] - mvNeb[1][hv]) <= COM_ABS32(mvNeb[1][hv] - mvNeb[2][hv]) && COM_ABS32(mvNeb[0][hv] - mvNeb[1][hv]) <= COM_ABS32(mvNeb[2][hv] - mvNeb[0][hv]))
				{
					mvpCom[hv] = ((mvNeb[0][hv] + mvNeb[1][hv]) / 2);
				}
				else if (COM_ABS32(mvNeb[1][hv] - mvNeb[2][hv]) <= COM_ABS32(mvNeb[0][hv] - mvNeb[1][hv]) && COM_ABS32(mvNeb[1][hv] - mvNeb[2][hv]) <= COM_ABS32(mvNeb[2][hv] - mvNeb[0][hv]))
				{
					mvpCom[hv] = ((mvNeb[1][hv] + mvNeb[2][hv]) / 2);
				}
				else
				{
					mvpCom[hv] = ((mvNeb[2][hv] + mvNeb[0][hv]) / 2);
				}
			}
		}
	}

	roundingMvS16(mvpCom[0], mvpCom[1], &mvp[0], &mvp[1], 2, 2);

	mvp[0] = (s16)COM_CLIP3_IME(COM_INT16_MIN, COM_INT16_MAX, mvp[0]);
	mvp[1] = (s16)COM_CLIP3_IME(COM_INT16_MIN, COM_INT16_MAX, mvp[1]);

}
#else

void deriveMvpLCU(
	S16 ptr_cur_ref, 
	S16 ptr_cur, 
	S14 mvp[2], 
	S14 mvA[2], 
	S14 mvB[2], 
	S14 mvC[2], 
	S14 mvD[2], 
	S2 refiA, 
	S2 refiB, 
	S2 refiC, 
	S2 refiD, 
	S16  ptr_neb_ref_A, 
	S16  ptr_neb_ref_B, 
	S16  ptr_neb_ref_C, 
	S16  ptr_neb_ref_D
)
{
#if IME_PRAGMA_ON
#pragma HLS INLINE OFF
#endif

	S16 mvNeb[3][2];
	S2 refiNeb[3];
	U2 hv;
	S16 mvpCom[2];
	S16 scaledMvA[2], scaledMvB[2], scaledMvC[2], scaledMvD[2];
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=mvNeb complete dim=0
#pragma HLS ARRAY_PARTITION variable=refiNeb complete dim=0
#pragma HLS ARRAY_PARTITION variable=mvpCom complete dim=0
#pragma HLS ARRAY_PARTITION variable=scaledMvA complete dim=0
#pragma HLS ARRAY_PARTITION variable=scaledMvB complete dim=0
#pragma HLS ARRAY_PARTITION variable=scaledMvC complete dim=0
#pragma HLS ARRAY_PARTITION variable=scaledMvD complete dim=0
#endif

	scalingMV(ptr_cur, ptr_cur_ref, ptr_cur_ref, ptr_neb_ref_A, mvA, scaledMvA, refiA);
	scalingMV(ptr_cur, ptr_cur_ref, ptr_cur, ptr_neb_ref_B, mvB, scaledMvB, refiB);
	scalingMV(ptr_cur, ptr_cur_ref, ptr_cur, ptr_neb_ref_C, mvC, scaledMvC, refiC);
	scalingMV(ptr_cur, ptr_cur_ref, ptr_cur, ptr_neb_ref_D, mvD, scaledMvD, refiD);

	refiNeb[0] = refiA;
	mvNeb[0][0] = (S16)scaledMvA[0];
	mvNeb[0][1] = (S16)scaledMvA[1];

	refiNeb[1] = refiB;
	mvNeb[1][0] = (S16)scaledMvB[0];
	mvNeb[1][1] = (S16)scaledMvB[1];

	if (refiC < 0)
	{
		refiNeb[2] = refiD;
		mvNeb[2][0] = scaledMvD[0];
		mvNeb[2][1] = scaledMvD[1];
	}
	else
	{
		refiNeb[2] = refiC;
		mvNeb[2][0] = (S16)scaledMvC[0];
		mvNeb[2][1] = (S16)scaledMvC[1];
	}

	if ((refiNeb[0] != -1) && (refiNeb[1] == -1) && (refiNeb[2] == -1))
	{
		mvpCom[0] = mvNeb[0][0];
		mvpCom[1] = mvNeb[0][1];
	}
	else if ((refiNeb[0] == -1) && (refiNeb[1] != -1) && (refiNeb[2] == -1))
	{
		mvpCom[0] = mvNeb[1][0];
		mvpCom[1] = mvNeb[1][1];
	}
	else if ((refiNeb[0] == -1) && (refiNeb[1] == -1) && (refiNeb[2] != -1))
	{
		mvpCom[0] = mvNeb[2][0];
		mvpCom[1] = mvNeb[2][1];
	}
	else
	{
		for (hv = 0; hv < 2; hv++)
		{
#pragma HLS loop_tripcount max = 2
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			if ((mvNeb[0][hv] < 0 && mvNeb[1][hv] > 0 && mvNeb[2][hv] > 0)
				|| (mvNeb[0][hv] > 0 && mvNeb[1][hv] < 0 && mvNeb[2][hv] < 0))
			{
				mvpCom[hv] = ((mvNeb[1][hv] + mvNeb[2][hv]) >> 1);
			}
			else if ((mvNeb[1][hv] < 0 && mvNeb[0][hv] > 0 && mvNeb[2][hv] > 0) || (mvNeb[1][hv] > 0 && mvNeb[0][hv] < 0 && mvNeb[2][hv] < 0))
			{
				mvpCom[hv] = ((mvNeb[2][hv] + mvNeb[0][hv]) >> 1);
			}
			else if ((mvNeb[2][hv] < 0 && mvNeb[0][hv] > 0 && mvNeb[1][hv] > 0) || (mvNeb[2][hv] > 0 && mvNeb[0][hv] < 0 && mvNeb[1][hv] < 0))
			{
				mvpCom[hv] = ((mvNeb[0][hv] + mvNeb[1][hv]) >> 1);
			}
			else
			{
				if (COM_ABS16_test1(mvNeb[0][hv] - mvNeb[1][hv]) <= COM_ABS16_test1(mvNeb[1][hv] - mvNeb[2][hv]) && COM_ABS16_test1(mvNeb[0][hv] - mvNeb[1][hv]) <= COM_ABS16_test1(mvNeb[2][hv] - mvNeb[0][hv]))
				{
					mvpCom[hv] = ((mvNeb[0][hv] + mvNeb[1][hv]) >> 1);
				}
				else if (COM_ABS16_test1(mvNeb[1][hv] - mvNeb[2][hv]) <= COM_ABS16_test1(mvNeb[0][hv] - mvNeb[1][hv]) && COM_ABS16_test1(mvNeb[1][hv] - mvNeb[2][hv]) <= COM_ABS16_test1(mvNeb[2][hv] - mvNeb[0][hv]))
				{
					mvpCom[hv] = ((mvNeb[1][hv] + mvNeb[2][hv]) >> 1);
				}
				else
				{
					mvpCom[hv] = ((mvNeb[2][hv] + mvNeb[0][hv]) >> 1);
				}
			}
		}
	}

	//roundingMvS16(mvpCom[0], mvpCom[1], &mvp[0], &mvp[1], 2, 2);

	mvp[0] = (S14)COM_CLIP3_IME(COM_INT16_MIN, COM_INT16_MAX, mvpCom[0], S16);
	mvp[1] = (S14)COM_CLIP3_IME(COM_INT16_MIN, COM_INT16_MAX, mvpCom[1], S16);

}


void deriveMvpFromCandiScaled(S14 mvp[2], S16 mvA[2], S16 mvB[2], S16 mvC[2], S16 mvD[2], S2 refiA, S2 refiB, S2 refiC, S2 refiD)
{

#pragma HLS INLINE OFF


	S16 mvNeb[3][2];
	S2 refiNeb[3];
	U2 hv;
	S16 mvpCom[2];

//#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=mvp complete dim=0

#pragma HLS ARRAY_PARTITION variable=mvNeb complete dim=0
#pragma HLS ARRAY_PARTITION variable=refiNeb complete dim=0
#pragma HLS ARRAY_PARTITION variable=mvpCom complete dim=0
#endif
//#endif	// #if !IME_PRAGMA_ON_OP

	refiNeb[0] = refiA;
	mvNeb[0][0] = (S16)mvA[0];
	mvNeb[0][1] = (S16)mvA[1];

	refiNeb[1] = refiB;
	mvNeb[1][0] = (S16)mvB[0];
	mvNeb[1][1] = (S16)mvB[1];

	if (refiC < 0)
	{
		refiNeb[2] = refiD;
		mvNeb[2][0] = mvD[0];
		mvNeb[2][1] = mvD[1];
	}
	else
	{
		refiNeb[2] = refiC;
		mvNeb[2][0] = (S16)mvC[0];
		mvNeb[2][1] = (S16)mvC[1];
	}

	if ((refiNeb[0] != -1) && (refiNeb[1] == -1) && (refiNeb[2] == -1))
	{
		mvpCom[0] = mvNeb[0][0];
		mvpCom[1] = mvNeb[0][1];
	}
	else if ((refiNeb[0] == -1) && (refiNeb[1] != -1) && (refiNeb[2] == -1))
	{
		mvpCom[0] = mvNeb[1][0];
		mvpCom[1] = mvNeb[1][1];
	}
	else if ((refiNeb[0] == -1) && (refiNeb[1] == -1) && (refiNeb[2] != -1))
	{
		mvpCom[0] = mvNeb[2][0];
		mvpCom[1] = mvNeb[2][1];
	}
	else
	{
		for (hv = 0; hv < 2; hv++)
		{
#pragma HLS loop_tripcount max = 2
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			if ((mvNeb[0][hv] < 0 && mvNeb[1][hv] > 0 && mvNeb[2][hv] > 0)
				|| (mvNeb[0][hv] > 0 && mvNeb[1][hv] < 0 && mvNeb[2][hv] < 0)) {
				mvpCom[hv] = ((mvNeb[1][hv] + mvNeb[2][hv]) >> 1);
			}
			else if ((mvNeb[1][hv] < 0 && mvNeb[0][hv] > 0 && mvNeb[2][hv] > 0) || (mvNeb[1][hv] > 0 && mvNeb[0][hv] < 0 && mvNeb[2][hv] < 0))
			{
				mvpCom[hv] = ((mvNeb[2][hv] + mvNeb[0][hv]) >> 1);
			}
			else if ((mvNeb[2][hv] < 0 && mvNeb[0][hv] > 0 && mvNeb[1][hv] > 0) || (mvNeb[2][hv] > 0 && mvNeb[0][hv] < 0 && mvNeb[1][hv] < 0))
			{
				mvpCom[hv] = ((mvNeb[0][hv] + mvNeb[1][hv]) >> 1);
			}
			else
			{
				if (COM_ABS16_test1(mvNeb[0][hv] - mvNeb[1][hv]) <= COM_ABS16_test1(mvNeb[1][hv] - mvNeb[2][hv]) && COM_ABS16_test1(mvNeb[0][hv] - mvNeb[1][hv]) <= COM_ABS16_test1(mvNeb[2][hv] - mvNeb[0][hv]))
				{
					mvpCom[hv] = ((mvNeb[0][hv] + mvNeb[1][hv]) >> 1);
				}
				else if (COM_ABS16_test1(mvNeb[1][hv] - mvNeb[2][hv]) <= COM_ABS16_test1(mvNeb[0][hv] - mvNeb[1][hv]) && COM_ABS16_test1(mvNeb[1][hv] - mvNeb[2][hv]) <= COM_ABS16_test1(mvNeb[2][hv] - mvNeb[0][hv]))
				{
					mvpCom[hv] = ((mvNeb[1][hv] + mvNeb[2][hv]) >> 1);
				}
				else
				{
					mvpCom[hv] = ((mvNeb[2][hv] + mvNeb[0][hv]) >> 1);
				}
			}
		}
	}

	//roundingMvS16(mvpCom[0], mvpCom[1], &mvp[0], &mvp[1], 2, 2);

	mvp[0] = (S14)COM_CLIP3_IME(COM_INT16_MIN, COM_INT16_MAX, mvpCom[0], S16);
	mvp[1] = (S14)COM_CLIP3_IME(COM_INT16_MIN, COM_INT16_MAX, mvpCom[1], S16);

}


#endif

void scaleMvBatch(S16 ptr_cur_ref, S16 ptr_cur, S14 co_left_mv[16][2], S2 co_left_refi[16], S14 mvScuAboveLine[18][2], S2 refiScuAboveLine[18], S16 ptrRefAboveLine[SCU_IN_LCU_NUMS_LEN + 2], S16 ptrRefCoLeftLine[SCU_IN_LCU_NUMS_LEN], S16 scaledCoLeftMv[16][2], S16 scaledMvScuAboveLine[18][2])
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=mapScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=mvScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=refiScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=ptrRefAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=ptrRefCoLeftLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=scaledCoLeftMv complete dim=1
#pragma HLS ARRAY_PARTITION variable=scaledMvScuAboveLine complete dim=1
#endif

	U5 x1, x2;

	for (x1 = 0; x1 < SCU_IN_LCU_NUMS_LEN + 2; x1++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		scalingMV(ptr_cur, ptr_cur_ref, ptr_cur, ptrRefAboveLine[x1], mvScuAboveLine[x1], scaledMvScuAboveLine[x1], refiScuAboveLine[x1]);
	}

	for (x2 = 0; x2 < SCU_IN_LCU_NUMS_LEN; x2++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		scalingMV(ptr_cur, ptr_cur_ref, ptr_cur_ref, ptrRefCoLeftLine[x2], co_left_mv[x2], scaledCoLeftMv[x2], co_left_refi[x2]);
	}
}


void deriveMvpAllCu(S16 ptr_cur_ref, S16 ptr_cur, S14 co_left_mv[16][2], S2 co_left_refi[16], S14 mvScuAboveLine[18][2], S2 refiScuAboveLine[18], S16 ptrRefAboveLine[SCU_IN_LCU_NUMS_LEN + 2], S16 ptrRefCoLeftLine[SCU_IN_LCU_NUMS_LEN],
	S14 sadTree32x32PMv[2][2][2], S14 sadTree64x32PMv[1][2][2], S14 sadTree32x64PMv[2][1][2],
	S14 sadTree16x16PMv[4][4][2], S14 sadTree32x16PMv[2][4][2], S14 sadTree16x32PMv[4][2][2], S14 sadTree64x16PMv[1][4][2], S14 sadTree16x64PMv[4][1][2],
	S14 sadTree8x8PMv[8][8][2], S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2])
{
#if !IME_PRAGMA_ON_OP

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=mapScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=mvScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=refiScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=ptrRefAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=ptrRefCoLeftLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=sadTree32x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64PMv complete dim=0
#endif

#endif

	S16 scaledCoLeftMv[16][2];
	S16 scaledMvScuAboveLine[18][2];

#if !IME_PRAGMA_ON_OP

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=scaledCoLeftMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=scaledMvScuAboveLine complete dim=0
#endif

#endif
	U9 i, j;

	scaleMvBatch(ptr_cur_ref, ptr_cur, co_left_mv, co_left_refi, mvScuAboveLine, refiScuAboveLine, ptrRefAboveLine, ptrRefCoLeftLine, scaledCoLeftMv, scaledMvScuAboveLine);

#if VIVADO_HLS_IME
	for (i = 0; i < 8; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree8x8PMv[i][j], scaledCoLeftMv[j << 1], scaledMvScuAboveLine[1 + (i << 1)], scaledMvScuAboveLine[1 + ((i + 1) << 1)], scaledMvScuAboveLine[i << 1], co_left_refi[j << 1], refiScuAboveLine[1 + (i <<1)], refiScuAboveLine[1 + ((i + 1) << 1)], refiScuAboveLine[i <<1]);
	for (i = 0; i < 8; i++)
		for (j = 0; j < 4; j++)
			deriveMvpFromCandiScaled(sadTree8x16PMv[i][j], scaledCoLeftMv[j << 2], scaledMvScuAboveLine[1 + (i << 1)], scaledMvScuAboveLine[1 + ((i + 1) << 1)], scaledMvScuAboveLine[i << 1], co_left_refi[j << 2], refiScuAboveLine[1 + (i <<1)], refiScuAboveLine[1 + ((i + 1) << 1)], refiScuAboveLine[i <<1]);
	for (i = 0; i < 8; i++)
		for (j = 0; j < 2; j++)
			deriveMvpFromCandiScaled(sadTree8x32PMv[i][j], scaledCoLeftMv[j << 3], scaledMvScuAboveLine[1 + (i << 1)], scaledMvScuAboveLine[1 + ((i + 1) << 1)], scaledMvScuAboveLine[i << 1], co_left_refi[j << 3], refiScuAboveLine[1 + (i <<1)], refiScuAboveLine[1 + ((i + 1) << 1)], refiScuAboveLine[i <<1]);
	for (i = 0; i < 8; i++)
		for (j = 0; j < 1; j++)
			deriveMvpFromCandiScaled(sadTree8x64PMv[i][j], scaledCoLeftMv[j << 4], scaledMvScuAboveLine[1 + (i << 1)], scaledMvScuAboveLine[1 + ((i + 1) << 1)], scaledMvScuAboveLine[i << 1], co_left_refi[j << 4], refiScuAboveLine[1 + (i <<1)], refiScuAboveLine[1 + ((i + 1) << 1)], refiScuAboveLine[i <<1]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree16x8PMv[i][j], scaledCoLeftMv[j << 1], scaledMvScuAboveLine[1 + (i << 2)], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i << 2], co_left_refi[j << 1], refiScuAboveLine[1 + (i << 2)], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i << 2]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
			deriveMvpFromCandiScaled(sadTree16x16PMv[i][j], scaledCoLeftMv[j << 2], scaledMvScuAboveLine[1 + (i << 2)], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i << 2], co_left_refi[j << 2], refiScuAboveLine[1 + (i << 2)], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i << 2]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 2; j++)
			deriveMvpFromCandiScaled(sadTree16x32PMv[i][j], scaledCoLeftMv[j << 3], scaledMvScuAboveLine[1 + (i << 2)], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i << 2], co_left_refi[j << 3], refiScuAboveLine[1 + (i << 2)], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i << 2]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 1; j++)
			deriveMvpFromCandiScaled(sadTree16x64PMv[i][j], scaledCoLeftMv[j << 4], scaledMvScuAboveLine[1 + (i << 2)], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i << 2], co_left_refi[j << 4], refiScuAboveLine[1 + (i << 2)], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i << 2]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree32x8PMv[i][j], scaledCoLeftMv[j << 1], scaledMvScuAboveLine[1 + (i << 3)], scaledMvScuAboveLine[1 + ((i + 1) << 3)], scaledMvScuAboveLine[i << 3], co_left_refi[j << 1], refiScuAboveLine[1 + (i << 3)], refiScuAboveLine[1 + ((i + 1) << 3)], refiScuAboveLine[i << 3]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 4; j++)
			deriveMvpFromCandiScaled(sadTree32x16PMv[i][j], scaledCoLeftMv[j << 2], scaledMvScuAboveLine[1 + (i << 3)], scaledMvScuAboveLine[1 + ((i + 1) << 3)], scaledMvScuAboveLine[i << 3], co_left_refi[j << 2], refiScuAboveLine[1 + (i << 3)], refiScuAboveLine[1 + ((i + 1) << 3)], refiScuAboveLine[i << 3]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 2; j++)
			deriveMvpFromCandiScaled(sadTree32x32PMv[i][j], scaledCoLeftMv[j << 3], scaledMvScuAboveLine[1 + (i << 3)], scaledMvScuAboveLine[1 + ((i + 1) << 3)], scaledMvScuAboveLine[i << 3], co_left_refi[j << 3], refiScuAboveLine[1 + (i << 3)], refiScuAboveLine[1 + ((i + 1) << 3)], refiScuAboveLine[i << 3]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 1; j++)
			deriveMvpFromCandiScaled(sadTree32x64PMv[i][j], scaledCoLeftMv[j << 4], scaledMvScuAboveLine[1 + (i << 3)], scaledMvScuAboveLine[1 + ((i + 1) << 3)], scaledMvScuAboveLine[i << 3], co_left_refi[j << 4], refiScuAboveLine[1 + (i << 3)], refiScuAboveLine[1 + ((i + 1) << 3)], refiScuAboveLine[i << 3]);
	for (i = 0; i < 1; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree64x8PMv[i][j], scaledCoLeftMv[j << 1], scaledMvScuAboveLine[1 + (i << 4)], scaledMvScuAboveLine[1 + ((i + 1) << 4)], scaledMvScuAboveLine[i << 4], co_left_refi[j << 1], refiScuAboveLine[1 + (i << 4)], refiScuAboveLine[1 + ((i + 1) << 4)], refiScuAboveLine[i << 4]);
	for (i = 0; i < 1; i++)
		for (j = 0; j < 4; j++)
			deriveMvpFromCandiScaled(sadTree64x16PMv[i][j], scaledCoLeftMv[j << 2], scaledMvScuAboveLine[1 + (i << 4)], scaledMvScuAboveLine[1 + ((i + 1) << 4)], scaledMvScuAboveLine[i << 4], co_left_refi[j << 2], refiScuAboveLine[1 + (i << 4)], refiScuAboveLine[1 + ((i + 1) << 4)], refiScuAboveLine[i << 4]);
	for (i = 0; i < 1; i++)
		for (j = 0; j < 2; j++)
			deriveMvpFromCandiScaled(sadTree64x32PMv[i][j], scaledCoLeftMv[j << 3], scaledMvScuAboveLine[1 + (i << 4)], scaledMvScuAboveLine[1 + ((i + 1) << 4)], scaledMvScuAboveLine[i << 4], co_left_refi[j << 3], refiScuAboveLine[1 + (i << 4)], refiScuAboveLine[1 + ((i + 1) << 4)], refiScuAboveLine[i << 4]);
#else
	for (i = 0; i < 8; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree8x8PMv[i][j], scaledCoLeftMv[j * 2], scaledMvScuAboveLine[1 + i * 2], scaledMvScuAboveLine[1 + (i + 1) * 2], scaledMvScuAboveLine[i * 2], co_left_refi[j * 2], refiScuAboveLine[1 + i * 2], refiScuAboveLine[1 + (i + 1) * 2], refiScuAboveLine[i * 2]);
	for (i = 0; i < 8; i++)
		for (j = 0; j < 4; j++)
			deriveMvpFromCandiScaled(sadTree8x16PMv[i][j], scaledCoLeftMv[j * 4], scaledMvScuAboveLine[1 + i * 2], scaledMvScuAboveLine[1 + (i + 1) * 2], scaledMvScuAboveLine[i * 2], co_left_refi[j * 4], refiScuAboveLine[1 + i * 2], refiScuAboveLine[1 + (i + 1) * 2], refiScuAboveLine[i * 2]);
	for (i = 0; i < 8; i++)
		for (j = 0; j < 2; j++)
			deriveMvpFromCandiScaled(sadTree8x32PMv[i][j], scaledCoLeftMv[j * 8], scaledMvScuAboveLine[1 + i * 2], scaledMvScuAboveLine[1 + (i + 1) * 2], scaledMvScuAboveLine[i * 2], co_left_refi[j * 8], refiScuAboveLine[1 + i * 2], refiScuAboveLine[1 + (i + 1) * 2], refiScuAboveLine[i * 2]);
	for (i = 0; i < 8; i++)
		for (j = 0; j < 1; j++)
			deriveMvpFromCandiScaled(sadTree8x64PMv[i][j], scaledCoLeftMv[j * 16], scaledMvScuAboveLine[1 + i * 2], scaledMvScuAboveLine[1 + (i + 1) * 2], scaledMvScuAboveLine[i * 2], co_left_refi[j * 16], refiScuAboveLine[1 + i * 2], refiScuAboveLine[1 + (i + 1) * 2], refiScuAboveLine[i * 2]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree16x8PMv[i][j], scaledCoLeftMv[j * 2], scaledMvScuAboveLine[1 + i * 4], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i * 4], co_left_refi[j * 2], refiScuAboveLine[1 + i * 4], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i * 4]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
			deriveMvpFromCandiScaled(sadTree16x16PMv[i][j], scaledCoLeftMv[j * 4], scaledMvScuAboveLine[1 + i * 4], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i * 4], co_left_refi[j * 4], refiScuAboveLine[1 + i * 4], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i * 4]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 2; j++)
			deriveMvpFromCandiScaled(sadTree16x32PMv[i][j], scaledCoLeftMv[j * 8], scaledMvScuAboveLine[1 + i * 4], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i * 4], co_left_refi[j * 8], refiScuAboveLine[1 + i * 4], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i * 4]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 1; j++)
			deriveMvpFromCandiScaled(sadTree16x64PMv[i][j], scaledCoLeftMv[j * 16], scaledMvScuAboveLine[1 + i * 4], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i * 4], co_left_refi[j * 16], refiScuAboveLine[1 + i * 4], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i * 4]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree32x8PMv[i][j], scaledCoLeftMv[j * 2], scaledMvScuAboveLine[1 + i * 8], scaledMvScuAboveLine[1 + (i + 1) * 8], scaledMvScuAboveLine[i * 8], co_left_refi[j * 2], refiScuAboveLine[1 + i * 8], refiScuAboveLine[1 + (i + 1) * 8], refiScuAboveLine[i * 8]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 4; j++)
			deriveMvpFromCandiScaled(sadTree32x16PMv[i][j], scaledCoLeftMv[j * 4], scaledMvScuAboveLine[1 + i * 8], scaledMvScuAboveLine[1 + (i + 1) * 8], scaledMvScuAboveLine[i * 8], co_left_refi[j * 4], refiScuAboveLine[1 + i * 8], refiScuAboveLine[1 + (i + 1) * 8], refiScuAboveLine[i * 8]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 2; j++)
			deriveMvpFromCandiScaled(sadTree32x32PMv[i][j], scaledCoLeftMv[j * 8], scaledMvScuAboveLine[1 + i * 8], scaledMvScuAboveLine[1 + (i + 1) * 8], scaledMvScuAboveLine[i * 8], co_left_refi[j * 8], refiScuAboveLine[1 + i * 8], refiScuAboveLine[1 + (i + 1) * 8], refiScuAboveLine[i * 8]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 1; j++)
			deriveMvpFromCandiScaled(sadTree32x64PMv[i][j], scaledCoLeftMv[j * 16], scaledMvScuAboveLine[1 + i * 8], scaledMvScuAboveLine[1 + (i + 1) * 8], scaledMvScuAboveLine[i * 8], co_left_refi[j * 16], refiScuAboveLine[1 + i * 8], refiScuAboveLine[1 + (i + 1) * 8], refiScuAboveLine[i * 8]);
	for (i = 0; i < 1; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree64x8PMv[i][j], scaledCoLeftMv[j * 2], scaledMvScuAboveLine[1 + i * 16], scaledMvScuAboveLine[1 + (i + 1) * 16], scaledMvScuAboveLine[i * 16], co_left_refi[j * 2], refiScuAboveLine[1 + i * 16], refiScuAboveLine[1 + (i + 1) * 16], refiScuAboveLine[i * 16]);
	for (i = 0; i < 1; i++)
		for (j = 0; j < 4; j++)
			deriveMvpFromCandiScaled(sadTree64x16PMv[i][j], scaledCoLeftMv[j * 4], scaledMvScuAboveLine[1 + i * 16], scaledMvScuAboveLine[1 + (i + 1) * 16], scaledMvScuAboveLine[i * 16], co_left_refi[j * 4], refiScuAboveLine[1 + i * 16], refiScuAboveLine[1 + (i + 1) * 16], refiScuAboveLine[i * 16]);
	for (i = 0; i < 1; i++)
		for (j = 0; j < 2; j++)
			deriveMvpFromCandiScaled(sadTree64x32PMv[i][j], scaledCoLeftMv[j * 8], scaledMvScuAboveLine[1 + i * 16], scaledMvScuAboveLine[1 + (i + 1) * 16], scaledMvScuAboveLine[i * 16], co_left_refi[j * 8], refiScuAboveLine[1 + i * 16], refiScuAboveLine[1 + (i + 1) * 16], refiScuAboveLine[i * 16]);
#endif

}

void deriveMvpAllCu_OP(S16 ptr_cur_ref, S16 ptr_cur, S14 co_left_mv[16][2], S2 co_left_refi[16], S14 mvScuAboveLine[18][2], S2 refiScuAboveLine[18], S16 ptrRefAboveLine[SCU_IN_LCU_NUMS_LEN + 2], S16 ptrRefCoLeftLine[SCU_IN_LCU_NUMS_LEN],
	S14 sadTree32x32PMv[2][2][2], S14 sadTree64x32PMv[1][2][2], S14 sadTree32x64PMv[2][1][2],
	S14 sadTree16x16PMv[4][4][2], S14 sadTree32x16PMv[2][4][2], S14 sadTree16x32PMv[4][2][2], S14 sadTree64x16PMv[1][4][2], S14 sadTree16x64PMv[4][1][2],
	S14 sadTree8x8PMv[8][8][2], S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2])
{
#if !IME_PRAGMA_ON_OP

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=mapScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=mvScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=refiScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=ptrRefAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=ptrRefCoLeftLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=sadTree32x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8PMv_pre complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8PMv_pre complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8PMv_pre complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8PMv_pre complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree8x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64PMv complete dim=0
#endif

#endif
	//S14 sadTree8x8PMv_pre[8][8][2];
	//S14 sadTree16x8PMv_pre[8][8][2];
	//S14 sadTree32x8PMv_pre[8][8][2];
	//S14 sadTree64x8PMv_pre[8][8][2];
	S16 scaledCoLeftMv[16][2];
	S16 scaledMvScuAboveLine[18][2];

#if !IME_PRAGMA_ON_OP

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=scaledCoLeftMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=scaledMvScuAboveLine complete dim=0
#endif

#endif
	U9 i, j;

	scaleMvBatch(ptr_cur_ref, ptr_cur, co_left_mv, co_left_refi, mvScuAboveLine, refiScuAboveLine, ptrRefAboveLine, ptrRefCoLeftLine, scaledCoLeftMv, scaledMvScuAboveLine);

#if VIVADO_HLS_IME
	for (i = 0; i < 8; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree8x8PMv[i][j], scaledCoLeftMv[j << 1], scaledMvScuAboveLine[1 + (i << 1)], scaledMvScuAboveLine[1 + ((i + 1) << 1)], scaledMvScuAboveLine[i << 1], co_left_refi[j << 1], refiScuAboveLine[1 + (i << 1)], refiScuAboveLine[1 + ((i + 1) << 1)], refiScuAboveLine[i << 1]);

	for (i = 0; i < 8; i++)
		for (j = 0; j < 4; j++)
		{
			sadTree8x16PMv[i][j][0] = sadTree8x8PMv[i][j << 1][0];
			sadTree8x16PMv[i][j][1] = sadTree8x8PMv[i][j << 1][1];
		}
	for (i = 0; i < 8; i++)
		for (j = 0; j < 2; j++)
		{
			sadTree8x32PMv[i][j][0] = sadTree8x8PMv[i][j << 2][0];
			sadTree8x32PMv[i][j][1] = sadTree8x8PMv[i][j << 2][1];
		}
	for (i = 0; i < 8; i++)
		for (j = 0; j < 1; j++)
		{
			sadTree8x64PMv[i][j][0] = sadTree8x8PMv[i][j << 3][0];
			sadTree8x64PMv[i][j][1] = sadTree8x8PMv[i][j << 3][1];
		}
	for (i = 0; i < 4; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree16x8PMv[i][j], scaledCoLeftMv[j << 1], scaledMvScuAboveLine[1 + (i << 2)], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i << 2], co_left_refi[j << 1], refiScuAboveLine[1 + (i << 2)], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i << 2]);

	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
		{
			sadTree16x16PMv[i][j][0] = sadTree16x8PMv[i][j << 1][0];
			sadTree16x16PMv[i][j][1] = sadTree16x8PMv[i][j << 1][1];
		}
	for (i = 0; i < 4; i++)
		for (j = 0; j < 2; j++)
		{
			sadTree16x32PMv[i][j][0] = sadTree16x8PMv[i][j << 2][0];
			sadTree16x32PMv[i][j][1] = sadTree16x8PMv[i][j << 2][1];
		}
	for (i = 0; i < 4; i++)
		for (j = 0; j < 1; j++)
		{
			sadTree16x64PMv[i][j][0] = sadTree16x8PMv[i][j << 3][0];
			sadTree16x64PMv[i][j][1] = sadTree16x8PMv[i][j << 3][1];
		}
	for (i = 0; i < 2; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree32x8PMv[i][j], scaledCoLeftMv[j << 1], scaledMvScuAboveLine[1 + (i << 3)], scaledMvScuAboveLine[1 + ((i + 1) << 3)], scaledMvScuAboveLine[i << 3], co_left_refi[j << 1], refiScuAboveLine[1 + (i << 3)], refiScuAboveLine[1 + ((i + 1) << 3)], refiScuAboveLine[i << 3]);

	for (i = 0; i < 2; i++)
		for (j = 0; j < 4; j++)
		{
			sadTree32x16PMv[i][j][0] = sadTree32x8PMv[i][j << 1][0];
			sadTree32x16PMv[i][j][1] = sadTree32x8PMv[i][j << 1][1];
		}
	for (i = 0; i < 2; i++)
		for (j = 0; j < 2; j++)
		{
			sadTree32x32PMv[i][j][0] = sadTree32x8PMv[i][j << 2][0];
			sadTree32x32PMv[i][j][1] = sadTree32x8PMv[i][j << 2][1];
		}
	for (i = 0; i < 2; i++)
		for (j = 0; j < 1; j++)
		{
			sadTree32x64PMv[i][j][0] = sadTree32x8PMv[i][j << 3][0];
			sadTree32x64PMv[i][j][1] = sadTree32x8PMv[i][j << 3][1];
		}
	for (i = 0; i < 1; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree64x8PMv[i][j], scaledCoLeftMv[j << 1], scaledMvScuAboveLine[1 + (i << 4)], scaledMvScuAboveLine[1 + ((i + 1) << 4)], scaledMvScuAboveLine[i << 4], co_left_refi[j << 1], refiScuAboveLine[1 + (i << 4)], refiScuAboveLine[1 + ((i + 1) << 4)], refiScuAboveLine[i << 4]);

	for (i = 0; i < 1; i++)
		for (j = 0; j < 4; j++)
		{
			sadTree64x16PMv[i][j][0] = sadTree64x8PMv[i][j << 1][0];
			sadTree64x16PMv[i][j][1] = sadTree64x8PMv[i][j << 1][1];
		}
	for (i = 0; i < 1; i++)
		for (j = 0; j < 2; j++)
		{
			sadTree64x32PMv[i][j][0] = sadTree64x8PMv[i][j << 2][0];
			sadTree64x32PMv[i][j][1] = sadTree64x8PMv[i][j << 2][1];
		}
#else
	for (i = 0; i < 8; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree8x8PMv[i][j], scaledCoLeftMv[j * 2], scaledMvScuAboveLine[1 + i * 2], scaledMvScuAboveLine[1 + (i + 1) * 2], scaledMvScuAboveLine[i * 2], co_left_refi[j * 2], refiScuAboveLine[1 + i * 2], refiScuAboveLine[1 + (i + 1) * 2], refiScuAboveLine[i * 2]);
	for (i = 0; i < 8; i++)
		for (j = 0; j < 4; j++)
			deriveMvpFromCandiScaled(sadTree8x16PMv[i][j], scaledCoLeftMv[j * 4], scaledMvScuAboveLine[1 + i * 2], scaledMvScuAboveLine[1 + (i + 1) * 2], scaledMvScuAboveLine[i * 2], co_left_refi[j * 4], refiScuAboveLine[1 + i * 2], refiScuAboveLine[1 + (i + 1) * 2], refiScuAboveLine[i * 2]);
	for (i = 0; i < 8; i++)
		for (j = 0; j < 2; j++)
			deriveMvpFromCandiScaled(sadTree8x32PMv[i][j], scaledCoLeftMv[j * 8], scaledMvScuAboveLine[1 + i * 2], scaledMvScuAboveLine[1 + (i + 1) * 2], scaledMvScuAboveLine[i * 2], co_left_refi[j * 8], refiScuAboveLine[1 + i * 2], refiScuAboveLine[1 + (i + 1) * 2], refiScuAboveLine[i * 2]);
	for (i = 0; i < 8; i++)
		for (j = 0; j < 1; j++)
			deriveMvpFromCandiScaled(sadTree8x64PMv[i][j], scaledCoLeftMv[j * 16], scaledMvScuAboveLine[1 + i * 2], scaledMvScuAboveLine[1 + (i + 1) * 2], scaledMvScuAboveLine[i * 2], co_left_refi[j * 16], refiScuAboveLine[1 + i * 2], refiScuAboveLine[1 + (i + 1) * 2], refiScuAboveLine[i * 2]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree16x8PMv[i][j], scaledCoLeftMv[j * 2], scaledMvScuAboveLine[1 + i * 4], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i * 4], co_left_refi[j * 2], refiScuAboveLine[1 + i * 4], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i * 4]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
			deriveMvpFromCandiScaled(sadTree16x16PMv[i][j], scaledCoLeftMv[j * 4], scaledMvScuAboveLine[1 + i * 4], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i * 4], co_left_refi[j * 4], refiScuAboveLine[1 + i * 4], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i * 4]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 2; j++)
			deriveMvpFromCandiScaled(sadTree16x32PMv[i][j], scaledCoLeftMv[j * 8], scaledMvScuAboveLine[1 + i * 4], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i * 4], co_left_refi[j * 8], refiScuAboveLine[1 + i * 4], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i * 4]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 1; j++)
			deriveMvpFromCandiScaled(sadTree16x64PMv[i][j], scaledCoLeftMv[j * 16], scaledMvScuAboveLine[1 + i * 4], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i * 4], co_left_refi[j * 16], refiScuAboveLine[1 + i * 4], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i * 4]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree32x8PMv[i][j], scaledCoLeftMv[j * 2], scaledMvScuAboveLine[1 + i * 8], scaledMvScuAboveLine[1 + (i + 1) * 8], scaledMvScuAboveLine[i * 8], co_left_refi[j * 2], refiScuAboveLine[1 + i * 8], refiScuAboveLine[1 + (i + 1) * 8], refiScuAboveLine[i * 8]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 4; j++)
			deriveMvpFromCandiScaled(sadTree32x16PMv[i][j], scaledCoLeftMv[j * 4], scaledMvScuAboveLine[1 + i * 8], scaledMvScuAboveLine[1 + (i + 1) * 8], scaledMvScuAboveLine[i * 8], co_left_refi[j * 4], refiScuAboveLine[1 + i * 8], refiScuAboveLine[1 + (i + 1) * 8], refiScuAboveLine[i * 8]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 2; j++)
			deriveMvpFromCandiScaled(sadTree32x32PMv[i][j], scaledCoLeftMv[j * 8], scaledMvScuAboveLine[1 + i * 8], scaledMvScuAboveLine[1 + (i + 1) * 8], scaledMvScuAboveLine[i * 8], co_left_refi[j * 8], refiScuAboveLine[1 + i * 8], refiScuAboveLine[1 + (i + 1) * 8], refiScuAboveLine[i * 8]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 1; j++)
			deriveMvpFromCandiScaled(sadTree32x64PMv[i][j], scaledCoLeftMv[j * 16], scaledMvScuAboveLine[1 + i * 8], scaledMvScuAboveLine[1 + (i + 1) * 8], scaledMvScuAboveLine[i * 8], co_left_refi[j * 16], refiScuAboveLine[1 + i * 8], refiScuAboveLine[1 + (i + 1) * 8], refiScuAboveLine[i * 8]);
	for (i = 0; i < 1; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree64x8PMv[i][j], scaledCoLeftMv[j * 2], scaledMvScuAboveLine[1 + i * 16], scaledMvScuAboveLine[1 + (i + 1) * 16], scaledMvScuAboveLine[i * 16], co_left_refi[j * 2], refiScuAboveLine[1 + i * 16], refiScuAboveLine[1 + (i + 1) * 16], refiScuAboveLine[i * 16]);
	for (i = 0; i < 1; i++)
		for (j = 0; j < 4; j++)
			deriveMvpFromCandiScaled(sadTree64x16PMv[i][j], scaledCoLeftMv[j * 4], scaledMvScuAboveLine[1 + i * 16], scaledMvScuAboveLine[1 + (i + 1) * 16], scaledMvScuAboveLine[i * 16], co_left_refi[j * 4], refiScuAboveLine[1 + i * 16], refiScuAboveLine[1 + (i + 1) * 16], refiScuAboveLine[i * 16]);
	for (i = 0; i < 1; i++)
		for (j = 0; j < 2; j++)
			deriveMvpFromCandiScaled(sadTree64x32PMv[i][j], scaledCoLeftMv[j * 8], scaledMvScuAboveLine[1 + i * 16], scaledMvScuAboveLine[1 + (i + 1) * 16], scaledMvScuAboveLine[i * 16], co_left_refi[j * 8], refiScuAboveLine[1 + i * 16], refiScuAboveLine[1 + (i + 1) * 16], refiScuAboveLine[i * 16]);
#endif

}

void deriveMvpAllCu_zjj(S16 ptr_cur_ref, S16 ptr_cur, S14 co_left_mv[16][2], S2 co_left_refi[16], S14 mvScuAboveLine[18][2], S2 refiScuAboveLine[18], S16 ptrRefAboveLine[SCU_IN_LCU_NUMS_LEN + 2], S16 ptrRefCoLeftLine[SCU_IN_LCU_NUMS_LEN],
	S14 sadTree32x32PMv[2][2][2], S14 sadTree64x32PMv[1][2][2], S14 sadTree32x64PMv[2][1][2],
	S14 sadTree16x16PMv[4][4][2], S14 sadTree32x16PMv[2][4][2], S14 sadTree16x32PMv[4][2][2], S14 sadTree64x16PMv[1][4][2], S14 sadTree16x64PMv[4][1][2],
	S14 sadTree8x8PMv[8][8][2], S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2])
{
#if !IME_PRAGMA_ON_OP

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=mapScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=mvScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=refiScuAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=ptrRefAboveLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=ptrRefCoLeftLine complete dim=1
#pragma HLS ARRAY_PARTITION variable=sadTree32x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8PMv_pre complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8PMv_pre complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8PMv_pre complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8PMv_pre complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree8x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64PMv complete dim=0
#endif

#endif
S14 sadTree8x8PMv_pre[8][8][2];
S14 sadTree16x8PMv_pre[8][8][2];
S14 sadTree32x8PMv_pre[8][8][2];
S14 sadTree64x8PMv_pre[8][8][2];
	S16 scaledCoLeftMv[16][2];
	S16 scaledMvScuAboveLine[18][2];

#if !IME_PRAGMA_ON_OP

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=scaledCoLeftMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=scaledMvScuAboveLine complete dim=0
#endif

#endif
	U9 i, j;

	scaleMvBatch(ptr_cur_ref, ptr_cur, co_left_mv, co_left_refi, mvScuAboveLine, refiScuAboveLine, ptrRefAboveLine, ptrRefCoLeftLine, scaledCoLeftMv, scaledMvScuAboveLine);

#if VIVADO_HLS_IME
	for (i = 0; i < 8; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree8x8PMv_pre[i][j], scaledCoLeftMv[j << 1], scaledMvScuAboveLine[1 + (i << 1)], scaledMvScuAboveLine[1 + ((i + 1) << 1)], scaledMvScuAboveLine[i << 1], co_left_refi[j << 1], refiScuAboveLine[1 + (i <<1)], refiScuAboveLine[1 + ((i + 1) << 1)], refiScuAboveLine[i <<1]);
	for (i = 0; i < 8; i++)
		for (j = 0; j < 8; j++)
                 {
			sadTree8x8PMv[i][j][0]=sadTree8x8PMv_pre[i][j][0];
			sadTree8x8PMv[i][j][1]=sadTree8x8PMv_pre[i][j][1];
                 }
        for (i = 0; i < 8; i++)
		for (j = 0; j < 4; j++)
{
			sadTree8x16PMv[i][j][0]=sadTree8x8PMv_pre[i][j<<1][0];
			sadTree8x16PMv[i][j][1]=sadTree8x8PMv_pre[i][j<<1][1];
} 
       for (i = 0; i < 8; i++)
		for (j = 0; j < 2; j++)
{
			sadTree8x32PMv[i][j][0]=sadTree8x8PMv_pre[i][j<<2][0];
			sadTree8x32PMv[i][j][1]=sadTree8x8PMv_pre[i][j<<2][1];
} 
       for (i = 0; i < 8; i++)
		for (j = 0; j < 1; j++)
{
			sadTree8x64PMv[i][j][0]=sadTree8x8PMv_pre[i][j<<3][0];
			sadTree8x64PMv[i][j][1]=sadTree8x8PMv_pre[i][j<<3][1];
}
	for (i = 0; i < 4; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree16x8PMv_pre[i][j], scaledCoLeftMv[j << 1], scaledMvScuAboveLine[1 + (i << 2)], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i << 2], co_left_refi[j << 1], refiScuAboveLine[1 + (i << 2)], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i << 2]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 8; j++)
{
                        sadTree16x8PMv[i][j][0] = sadTree16x8PMv_pre[i][j][0];
                        sadTree16x8PMv[i][j][1] = sadTree16x8PMv_pre[i][j][1];
}
	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
{
                        sadTree16x16PMv[i][j][0] = sadTree16x8PMv_pre[i][j<<1][0];
                        sadTree16x16PMv[i][j][1] = sadTree16x8PMv_pre[i][j<<1][1];
}
	for (i = 0; i < 4; i++)
		for (j = 0; j < 2; j++)
{
                        sadTree16x32PMv[i][j][0] = sadTree16x8PMv_pre[i][j<<2][0];
                        sadTree16x32PMv[i][j][1] = sadTree16x8PMv_pre[i][j<<2][1];
} 
       for (i = 0; i < 4; i++)
		for (j = 0; j < 1; j++)
{
                        sadTree16x64PMv[i][j][0] = sadTree16x8PMv_pre[i][j<<3][0];
                        sadTree16x64PMv[i][j][1] = sadTree16x8PMv_pre[i][j<<3][1];
 }           
	for (i = 0; i < 2; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree32x8PMv_pre[i][j], scaledCoLeftMv[j << 1], scaledMvScuAboveLine[1 + (i << 3)], scaledMvScuAboveLine[1 + ((i + 1) << 3)], scaledMvScuAboveLine[i << 3], co_left_refi[j << 1], refiScuAboveLine[1 + (i << 3)], refiScuAboveLine[1 + ((i + 1) << 3)], refiScuAboveLine[i << 3]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 8; j++)
{
                        sadTree32x8PMv[i][j][0]=sadTree32x8PMv_pre[i][j][0];
                        sadTree32x8PMv[i][j][1]=sadTree32x8PMv_pre[i][j][1];
} 
       for (i = 0; i < 2; i++)
		for (j = 0; j < 4; j++)
{
                        sadTree32x16PMv[i][j][0]=sadTree32x8PMv_pre[i][j<<1][0];
                        sadTree32x16PMv[i][j][1]=sadTree32x8PMv_pre[i][j<<1][1];
}
	for (i = 0; i < 2; i++)
		for (j = 0; j < 2; j++)
{
                        sadTree32x32PMv[i][j][0]=sadTree32x8PMv_pre[i][j<<2][0];
                        sadTree32x32PMv[i][j][1]=sadTree32x8PMv_pre[i][j<<2][1];
}
	for (i = 0; i < 2; i++)
		for (j = 0; j < 1; j++)
{
                        sadTree32x64PMv[i][j][0]=sadTree32x8PMv_pre[i][j<<3][0];
                        sadTree32x64PMv[i][j][1]=sadTree32x8PMv_pre[i][j<<3][1];
}
	for (i = 0; i < 1; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree64x8PMv_pre[i][j], scaledCoLeftMv[j << 1], scaledMvScuAboveLine[1 + (i << 4)], scaledMvScuAboveLine[1 + ((i + 1) << 4)], scaledMvScuAboveLine[i << 4], co_left_refi[j << 1], refiScuAboveLine[1 + (i << 4)], refiScuAboveLine[1 + ((i + 1) << 4)], refiScuAboveLine[i << 4]);
	for (i = 0; i < 1; i++)
		for (j = 0; j < 8; j++)
{
                        sadTree64x8PMv[i][j][0]=sadTree64x8PMv_pre[i][j][0];
                        sadTree64x8PMv[i][j][1]=sadTree64x8PMv_pre[i][j][1];
}
	for (i = 0; i < 1; i++)
		for (j = 0; j < 4; j++)
{
                        sadTree64x16PMv[i][j][0]=sadTree64x8PMv_pre[i][j<<1][0];
                        sadTree64x16PMv[i][j][1]=sadTree64x8PMv_pre[i][j<<1][1];
}
	for (i = 0; i < 1; i++)
		for (j = 0; j < 2; j++)
{
                        sadTree64x32PMv[i][j][0]=sadTree64x8PMv_pre[i][j<<2][0];
                        sadTree64x32PMv[i][j][1]=sadTree64x8PMv_pre[i][j<<2][1];
}
#else
	for (i = 0; i < 8; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree8x8PMv[i][j], scaledCoLeftMv[j * 2], scaledMvScuAboveLine[1 + i * 2], scaledMvScuAboveLine[1 + (i + 1) * 2], scaledMvScuAboveLine[i * 2], co_left_refi[j * 2], refiScuAboveLine[1 + i * 2], refiScuAboveLine[1 + (i + 1) * 2], refiScuAboveLine[i * 2]);
	for (i = 0; i < 8; i++)
		for (j = 0; j < 4; j++)
			deriveMvpFromCandiScaled(sadTree8x16PMv[i][j], scaledCoLeftMv[j * 4], scaledMvScuAboveLine[1 + i * 2], scaledMvScuAboveLine[1 + (i + 1) * 2], scaledMvScuAboveLine[i * 2], co_left_refi[j * 4], refiScuAboveLine[1 + i * 2], refiScuAboveLine[1 + (i + 1) * 2], refiScuAboveLine[i * 2]);
	for (i = 0; i < 8; i++)
		for (j = 0; j < 2; j++)
			deriveMvpFromCandiScaled(sadTree8x32PMv[i][j], scaledCoLeftMv[j * 8], scaledMvScuAboveLine[1 + i * 2], scaledMvScuAboveLine[1 + (i + 1) * 2], scaledMvScuAboveLine[i * 2], co_left_refi[j * 8], refiScuAboveLine[1 + i * 2], refiScuAboveLine[1 + (i + 1) * 2], refiScuAboveLine[i * 2]);
	for (i = 0; i < 8; i++)
		for (j = 0; j < 1; j++)
			deriveMvpFromCandiScaled(sadTree8x64PMv[i][j], scaledCoLeftMv[j * 16], scaledMvScuAboveLine[1 + i * 2], scaledMvScuAboveLine[1 + (i + 1) * 2], scaledMvScuAboveLine[i * 2], co_left_refi[j * 16], refiScuAboveLine[1 + i * 2], refiScuAboveLine[1 + (i + 1) * 2], refiScuAboveLine[i * 2]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree16x8PMv[i][j], scaledCoLeftMv[j * 2], scaledMvScuAboveLine[1 + i * 4], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i * 4], co_left_refi[j * 2], refiScuAboveLine[1 + i * 4], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i * 4]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
			deriveMvpFromCandiScaled(sadTree16x16PMv[i][j], scaledCoLeftMv[j * 4], scaledMvScuAboveLine[1 + i * 4], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i * 4], co_left_refi[j * 4], refiScuAboveLine[1 + i * 4], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i * 4]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 2; j++)
			deriveMvpFromCandiScaled(sadTree16x32PMv[i][j], scaledCoLeftMv[j * 8], scaledMvScuAboveLine[1 + i * 4], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i * 4], co_left_refi[j * 8], refiScuAboveLine[1 + i * 4], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i * 4]);
	for (i = 0; i < 4; i++)
		for (j = 0; j < 1; j++)
			deriveMvpFromCandiScaled(sadTree16x64PMv[i][j], scaledCoLeftMv[j * 16], scaledMvScuAboveLine[1 + i * 4], scaledMvScuAboveLine[1 + ((i + 1) << 2)], scaledMvScuAboveLine[i * 4], co_left_refi[j * 16], refiScuAboveLine[1 + i * 4], refiScuAboveLine[1 + ((i + 1) << 2)], refiScuAboveLine[i * 4]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree32x8PMv[i][j], scaledCoLeftMv[j * 2], scaledMvScuAboveLine[1 + i * 8], scaledMvScuAboveLine[1 + (i + 1) * 8], scaledMvScuAboveLine[i * 8], co_left_refi[j * 2], refiScuAboveLine[1 + i * 8], refiScuAboveLine[1 + (i + 1) * 8], refiScuAboveLine[i * 8]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 4; j++)
			deriveMvpFromCandiScaled(sadTree32x16PMv[i][j], scaledCoLeftMv[j * 4], scaledMvScuAboveLine[1 + i * 8], scaledMvScuAboveLine[1 + (i + 1) * 8], scaledMvScuAboveLine[i * 8], co_left_refi[j * 4], refiScuAboveLine[1 + i * 8], refiScuAboveLine[1 + (i + 1) * 8], refiScuAboveLine[i * 8]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 2; j++)
			deriveMvpFromCandiScaled(sadTree32x32PMv[i][j], scaledCoLeftMv[j * 8], scaledMvScuAboveLine[1 + i * 8], scaledMvScuAboveLine[1 + (i + 1) * 8], scaledMvScuAboveLine[i * 8], co_left_refi[j * 8], refiScuAboveLine[1 + i * 8], refiScuAboveLine[1 + (i + 1) * 8], refiScuAboveLine[i * 8]);
	for (i = 0; i < 2; i++)
		for (j = 0; j < 1; j++)
			deriveMvpFromCandiScaled(sadTree32x64PMv[i][j], scaledCoLeftMv[j * 16], scaledMvScuAboveLine[1 + i * 8], scaledMvScuAboveLine[1 + (i + 1) * 8], scaledMvScuAboveLine[i * 8], co_left_refi[j * 16], refiScuAboveLine[1 + i * 8], refiScuAboveLine[1 + (i + 1) * 8], refiScuAboveLine[i * 8]);
	for (i = 0; i < 1; i++)
		for (j = 0; j < 8; j++)
			deriveMvpFromCandiScaled(sadTree64x8PMv[i][j], scaledCoLeftMv[j * 2], scaledMvScuAboveLine[1 + i * 16], scaledMvScuAboveLine[1 + (i + 1) * 16], scaledMvScuAboveLine[i * 16], co_left_refi[j * 2], refiScuAboveLine[1 + i * 16], refiScuAboveLine[1 + (i + 1) * 16], refiScuAboveLine[i * 16]);
	for (i = 0; i < 1; i++)
		for (j = 0; j < 4; j++)
			deriveMvpFromCandiScaled(sadTree64x16PMv[i][j], scaledCoLeftMv[j * 4], scaledMvScuAboveLine[1 + i * 16], scaledMvScuAboveLine[1 + (i + 1) * 16], scaledMvScuAboveLine[i * 16], co_left_refi[j * 4], refiScuAboveLine[1 + i * 16], refiScuAboveLine[1 + (i + 1) * 16], refiScuAboveLine[i * 16]);
	for (i = 0; i < 1; i++)
		for (j = 0; j < 2; j++)
			deriveMvpFromCandiScaled(sadTree64x32PMv[i][j], scaledCoLeftMv[j * 8], scaledMvScuAboveLine[1 + i * 16], scaledMvScuAboveLine[1 + (i + 1) * 16], scaledMvScuAboveLine[i * 16], co_left_refi[j * 8], refiScuAboveLine[1 + i * 16], refiScuAboveLine[1 + (i + 1) * 16], refiScuAboveLine[i * 16]);
#endif

}

void copyMvpAllCu(
	S14 sadTree64x64PMv[1][1][2],
	S14 sadTree32x32PMv[2][2][2], S14 sadTree64x32PMv[1][2][2], S14 sadTree32x64PMv[2][1][2],
	S14 sadTree16x16PMv[4][4][2], S14 sadTree32x16PMv[2][4][2], S14 sadTree16x32PMv[4][2][2], S14 sadTree64x16PMv[1][4][2], S14 sadTree16x64PMv[4][1][2],
	S14 sadTree8x8PMv[8][8][2], S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2],
	S14 sadTree64x64PMvDst[1][1][2],
	S14 sadTree32x32PMvDst[2][2][2], S14 sadTree64x32PMvDst[1][2][2], S14 sadTree32x64PMvDst[2][1][2],
	S14 sadTree16x16PMvDst[4][4][2], S14 sadTree32x16PMvDst[2][4][2], S14 sadTree16x32PMvDst[4][2][2], S14 sadTree64x16PMvDst[1][4][2], S14 sadTree16x64PMvDst[4][1][2],
	S14 sadTree8x8PMvDst[8][8][2], S14 sadTree16x8PMvDst[4][8][2], S14 sadTree8x16PMvDst[8][4][2], S14 sadTree32x8PMvDst[2][8][2], S14 sadTree8x32PMvDst[8][2][2], S14 sadTree64x8PMvDst[1][8][2], S14 sadTree8x64PMvDst[8][1][2])
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadTree64x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64PMv complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree64x64PMvDst complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32PMvDst complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32PMvDst complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64PMvDst complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16PMvDst complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16PMvDst complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32PMvDst complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16PMvDst complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64PMvDst complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8PMvDst complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8PMvDst complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16PMvDst complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8PMvDst complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32PMvDst complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8PMvDst complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64PMvDst complete dim=0
#endif

	int i, j;

	for (i = 0; i < 8; i++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (j = 0; j < 8; j++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree8x8PMvDst[i][j][0] = sadTree8x8PMv[i][j][0];
			sadTree8x8PMvDst[i][j][1] = sadTree8x8PMv[i][j][1];
		}
	}

	for (i = 0; i < 8; i++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (j = 0; j < 4; j++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree8x16PMvDst[i][j][0] = sadTree8x16PMv[i][j][0];
			sadTree8x16PMvDst[i][j][1] = sadTree8x16PMv[i][j][1];
		}
	}

	for (i = 0; i < 8; i++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (j = 0; j < 2; j++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree8x32PMvDst[i][j][0] = sadTree8x32PMv[i][j][0];
			sadTree8x32PMvDst[i][j][1] = sadTree8x32PMv[i][j][1];
		}
	}

	for (i = 0; i < 8; i++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (j = 0; j < 1; j++) {
			sadTree8x64PMvDst[i][j][0] = sadTree8x64PMv[i][j][0];
			sadTree8x64PMvDst[i][j][1] = sadTree8x64PMv[i][j][1];
		}
	}

	for (i = 0; i < 4; i++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (j = 0; j < 8; j++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree16x8PMvDst[i][j][0] = sadTree16x8PMv[i][j][0];
			sadTree16x8PMvDst[i][j][1] = sadTree16x8PMv[i][j][1];
		}
	}

	for (i = 0; i < 4; i++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (j = 0; j < 4; j++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree16x16PMvDst[i][j][0] = sadTree16x16PMv[i][j][0];
			sadTree16x16PMvDst[i][j][1] = sadTree16x16PMv[i][j][1];
		}
	}

	for (i = 0; i < 4; i++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (j = 0; j < 2; j++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree16x32PMvDst[i][j][0] = sadTree16x32PMv[i][j][0];
			sadTree16x32PMvDst[i][j][1] = sadTree16x32PMv[i][j][1];
		}
	}


	for (i = 0; i < 4; i++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (j = 0; j < 1; j++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree16x64PMvDst[i][j][0] = sadTree16x64PMv[i][j][0];
			sadTree16x64PMvDst[i][j][1] = sadTree16x64PMv[i][j][1];
		}
	}

	for (i = 0; i < 2; i++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (j = 0; j < 8; j++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree32x8PMvDst[i][j][0] = sadTree32x8PMv[i][j][0];
			sadTree32x8PMvDst[i][j][1] = sadTree32x8PMv[i][j][1];
		}
	}

	for (i = 0; i < 2; i++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (j = 0; j < 4; j++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree32x16PMvDst[i][j][0] = sadTree32x16PMv[i][j][0];
			sadTree32x16PMvDst[i][j][1] = sadTree32x16PMv[i][j][1];
		}
	}

	for (i = 0; i < 2; i++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (j = 0; j < 2; j++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree32x32PMvDst[i][j][0] = sadTree32x32PMv[i][j][0];
			sadTree32x32PMvDst[i][j][1] = sadTree32x32PMv[i][j][1];
		}
	}

	for (i = 0; i < 2; i++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (j = 0; j < 1; j++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree32x64PMvDst[i][j][0] = sadTree32x64PMv[i][j][0];
			sadTree32x64PMvDst[i][j][1] = sadTree32x64PMv[i][j][1];
		}
	}

	for (i = 0; i < 1; i++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (j = 0; j < 8; j++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree64x8PMvDst[i][j][0] = sadTree64x8PMv[i][j][0];
			sadTree64x8PMvDst[i][j][1] = sadTree64x8PMv[i][j][1];
		}
	}

	for (i = 0; i < 1; i++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (j = 0; j < 4; j++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree64x16PMvDst[i][j][0] = sadTree64x16PMv[i][j][0];
			sadTree64x16PMvDst[i][j][1] = sadTree64x16PMv[i][j][1];
		}
	}

	for (i = 0; i < 1; i++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (j = 0; j < 2; j++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree64x32PMvDst[i][j][0] = sadTree64x32PMv[i][j][0];
			sadTree64x32PMvDst[i][j][1] = sadTree64x32PMv[i][j][1];
		}
	}

	sadTree64x64PMvDst[0][0][0] = sadTree64x64PMv[0][0][0];
	sadTree64x64PMvDst[0][0][1] = sadTree64x64PMv[0][0][1];
}


/*======================*/
/*  Coarse ME Unity 	*/
/*======================*/


void sadLineLv2(U8 subSw[32][32], U8 org[16][16], U32 lineSad[16], S14 baseH, U5 maxWidthScu, U5 maxHeightScu, U5 calcH)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=subSw cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=org cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=lineSad complete dim=0
#endif
	//U32 sad = 0;
	U5 calcW;
	U5 searchPosX;

	if (maxHeightScu - calcH <= 0)
	{
		return;
	}

	for (calcW = 0; calcW < 16; calcW++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (searchPosX = 0; searchPosX < 16; searchPosX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			lineSad[searchPosX] += sadPel(subSw[calcW + searchPosX][calcH + baseH], org[calcW][calcH], maxWidthScu - calcW);
		}

	}
}


void searchLineHorLv2(U8 subSw[32][32], U8 org[16][16], U32 lineSad[16], S14 baseH, U5 maxWidthScu, U5 maxHeightScu)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=subSw cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=org cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=lineSad complete dim=0
#endif
	U5 calcH;

	for (calcH = 0; calcH < 16; calcH++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		sadLineLv2(subSw, org, lineSad, baseH, maxWidthScu, maxHeightScu,
			calcH);
	}

}


void copyOrgLv2(U8 org[16][16], U8 orgCp0[16][16], U8 orgCp1[16][16], U8 orgCp2[16][16], U8 orgCp3[16][16], U8 orgCp4[16][16], U8 orgCp5[16][16], U8 orgCp6[16][16], U8 orgCp7[16][16], U8 orgCp8[16][16]
	, U8 orgCp9[16][16], U8 orgCp10[16][16], U8 orgCp11[16][16], U8 orgCp12[16][16], U8 orgCp13[16][16], U8 orgCp14[16][16], U8 orgCp15[16][16])
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=org cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp4 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp5 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp6 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp7 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp8 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp9 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp10 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp11 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp12 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp13 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp14 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp15 cyclic factor=16 dim=1
#endif
	int loadY, loadX;
	for (loadY = 0; loadY < 16; loadY++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (loadX = 0; loadX < 16; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			orgCp0[loadX][loadY] = org[loadX][loadY];
			orgCp1[loadX][loadY] = org[loadX][loadY];
			orgCp2[loadX][loadY] = org[loadX][loadY];
			orgCp3[loadX][loadY] = org[loadX][loadY];
			orgCp4[loadX][loadY] = org[loadX][loadY];
			orgCp5[loadX][loadY] = org[loadX][loadY];
			orgCp6[loadX][loadY] = org[loadX][loadY];
			orgCp7[loadX][loadY] = org[loadX][loadY];
			orgCp8[loadX][loadY] = org[loadX][loadY];
			orgCp9[loadX][loadY] = org[loadX][loadY];
			orgCp10[loadX][loadY] = org[loadX][loadY];
			orgCp11[loadX][loadY] = org[loadX][loadY];
			orgCp12[loadX][loadY] = org[loadX][loadY];
			orgCp13[loadX][loadY] = org[loadX][loadY];
			orgCp14[loadX][loadY] = org[loadX][loadY];
			orgCp15[loadX][loadY] = org[loadX][loadY];
		}
	}
}


void constructSubWindowLv2(U8 swLv2[80][80],
	U8 subSw0[32][32], U8 subSw1[32][32], U8 subSw2[32][32], U8 subSw3[32][32],
	U8 subSw4[32][32], U8 subSw5[32][32], U8 subSw6[32][32], U8 subSw7[32][32],
	U8 subSw8[32][32], U8 subSw9[32][32], U8 subSw10[32][32], U8 subSw11[32][32],
	U8 subSw12[32][32], U8 subSw13[32][32], U8 subSw14[32][32], U8 subSw15[32][32])
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=swLv2 complete dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw4 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw5 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw6 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw7 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw8 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw9 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw10 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw11 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw12 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw13 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw14 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw15 cyclic factor=32 dim=1
#endif
	int loadY, loadX;

	for (loadY = 0; loadY < 32; loadY++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (loadX = 0; loadX < 16; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw0[loadX][loadY] = swLv2[loadX][loadY];
		}
		for (loadX = 16; loadX < 32; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw0[loadX][loadY] = swLv2[loadX][loadY];
			subSw1[loadX - 16][loadY] = swLv2[loadX][loadY];
		}
		for (loadX = 32; loadX < 48; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw1[loadX - 16][loadY] = swLv2[loadX][loadY];
			subSw2[loadX - 32][loadY] = swLv2[loadX][loadY];
		}
		for (loadX = 48; loadX < 64; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw2[loadX - 32][loadY] = swLv2[loadX][loadY];
			subSw3[loadX - 48][loadY] = swLv2[loadX][loadY];
		}
		for (loadX = 64; loadX < 80; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw3[loadX - 48][loadY] = swLv2[loadX][loadY];
		}
	}

	for (loadY = 16; loadY < 48; loadY++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (loadX = 0; loadX < 16; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw4[loadX][loadY - 16] = swLv2[loadX][loadY];
		}
		for (loadX = 16; loadX < 32; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw4[loadX][loadY - 16] = swLv2[loadX][loadY];
			subSw5[loadX - 16][loadY - 16] = swLv2[loadX][loadY];
		}
		for (loadX = 32; loadX < 48; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw5[loadX - 16][loadY - 16] = swLv2[loadX][loadY];
			subSw6[loadX - 32][loadY - 16] = swLv2[loadX][loadY];
		}
		for (loadX = 48; loadX < 64; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw6[loadX - 32][loadY - 16] = swLv2[loadX][loadY];
			subSw7[loadX - 48][loadY - 16] = swLv2[loadX][loadY];
		}
		for (loadX = 64; loadX < 80; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw7[loadX - 48][loadY - 16] = swLv2[loadX][loadY];
		}
	}

	for (loadY = 32; loadY < 64; loadY++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (loadX = 0; loadX < 16; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw8[loadX][loadY - 32] = swLv2[loadX][loadY];
		}
		for (loadX = 16; loadX < 32; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw8[loadX][loadY - 32] = swLv2[loadX][loadY];
			subSw9[loadX - 16][loadY - 32] = swLv2[loadX][loadY];
		}
		for (loadX = 32; loadX < 48; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw9[loadX - 16][loadY - 32] = swLv2[loadX][loadY];
			subSw10[loadX - 32][loadY - 32] = swLv2[loadX][loadY];
		}
		for (loadX = 48; loadX < 64; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw10[loadX - 32][loadY - 32] = swLv2[loadX][loadY];
			subSw11[loadX - 48][loadY - 32] = swLv2[loadX][loadY];
		}
		for (loadX = 64; loadX < 80; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw11[loadX - 48][loadY - 32] = swLv2[loadX][loadY];
		}
	}

	for (loadY = 48; loadY < 80; loadY++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (loadX = 0; loadX < 16; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw12[loadX][loadY - 48] = swLv2[loadX][loadY];
		}
		for (loadX = 16; loadX < 32; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw12[loadX][loadY - 48] = swLv2[loadX][loadY];
			subSw13[loadX - 16][loadY - 48] = swLv2[loadX][loadY];
		}
		for (loadX = 32; loadX < 48; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw13[loadX - 16][loadY - 48] = swLv2[loadX][loadY];
			subSw14[loadX - 32][loadY - 48] = swLv2[loadX][loadY];
		}
		for (loadX = 48; loadX < 64; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw14[loadX - 32][loadY - 48] = swLv2[loadX][loadY];
			subSw15[loadX - 48][loadY - 48] = swLv2[loadX][loadY];
		}
		for (loadX = 64; loadX < 80; loadX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw15[loadX - 48][loadY - 48] = swLv2[loadX][loadY];
		}
	}
}


void constructRefWindowLv2(
	U8 swLv2[80][80], U8 orgLv2[16][16],
	U8 orgCp0[16][16], U8 orgCp1[16][16], U8 orgCp2[16][16], U8 orgCp3[16][16],
	U8 orgCp4[16][16], U8 orgCp5[16][16], U8 orgCp6[16][16], U8 orgCp7[16][16],
	U8 orgCp8[16][16], U8 orgCp9[16][16], U8 orgCp10[16][16], U8 orgCp11[16][16],
	U8 orgCp12[16][16], U8 orgCp13[16][16], U8 orgCp14[16][16], U8 orgCp15[16][16],
	U8 subSw0[32][32], U8 subSw1[32][32], U8 subSw2[32][32], U8 subSw3[32][32],
	U8 subSw4[32][32], U8 subSw5[32][32], U8 subSw6[32][32], U8 subSw7[32][32],
	U8 subSw8[32][32], U8 subSw9[32][32], U8 subSw10[32][32], U8 subSw11[32][32],
	U8 subSw12[32][32], U8 subSw13[32][32], U8 subSw14[32][32], U8 subSw15[32][32])
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=swLv2 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgLv2 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp4 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp5 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp6 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp7 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp8 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp9 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp10 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp11 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp12 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp13 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp14 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp15 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw4 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw5 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw6 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw7 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw8 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw9 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw10 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw11 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw12 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw13 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw14 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw15 cyclic factor=32 dim=1
#endif
	constructSubWindowLv2(swLv2, subSw0, subSw1, subSw2, subSw3, subSw4, subSw5, subSw6, subSw7,
		subSw8, subSw9, subSw10, subSw11, subSw12, subSw13, subSw14, subSw15);

	copyOrgLv2(orgLv2, orgCp0, orgCp1, orgCp2, orgCp3, orgCp4, orgCp5, orgCp6, orgCp7, orgCp8, orgCp9, orgCp10, orgCp11, orgCp12, orgCp13, orgCp14, orgCp15);

}

void deriveSearchWindowLv1(S14 centerPos[2], S14 posLT[2])
{
#pragma HLS inline off
	S14 ltPosX, ltPosY;
	S14 rbPosX, rbPosY;
	ltPosX = centerPos[0] - MMEA_LEVEL1_SR_UNI;
	ltPosY = centerPos[1] - MMEA_LEVEL1_SR_UNI;
	rbPosX = centerPos[0] + MMEA_LEVEL1_SR_UNI + MAX_CU_SIZE2;
	rbPosY = centerPos[1] + MMEA_LEVEL1_SR_UNI + MAX_CU_SIZE2;
	if (ltPosX < 0)
	{
		centerPos[0] -= ltPosX;
	}
	if (ltPosY < 0)
	{
		centerPos[1] -= ltPosY;
	}
	if (rbPosX > SW_LEN_LV0 - 1)
	{
		centerPos[0] -= (rbPosX - SW_LEN_LV0 + 1);
	}
	if (rbPosY > SW_LEN_LV0 - 1)
	{
		centerPos[1] -= (rbPosY - SW_LEN_LV0 + 1);
	}
	posLT[0] = centerPos[0] - MMEA_LEVEL1_SR_UNI;
	posLT[1] = centerPos[1] - MMEA_LEVEL1_SR_UNI;

	posLT[0] = posLT[0] >> 1;
	posLT[1] = posLT[1] >> 1;
}

/* orgCpN_M	:	M is the M-th quarter part of a 32x32 CU */
/*              N is the N-th copy of 32x32 CU			 */

void copyOrgLv1(U8 orgLv1[32][32],
	U8 orgCp0_0[16][16], U8 orgCp0_1[16][16], U8 orgCp0_2[16][16], U8 orgCp0_3[16][16],
	U8 orgCp1_0[16][16], U8 orgCp1_1[16][16], U8 orgCp1_2[16][16], U8 orgCp1_3[16][16],
	U8 orgCp2_0[16][16], U8 orgCp2_1[16][16], U8 orgCp2_2[16][16], U8 orgCp2_3[16][16],
	U8 orgCp3_0[16][16], U8 orgCp3_1[16][16], U8 orgCp3_2[16][16], U8 orgCp3_3[16][16])
{
#pragma HLS inline off
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=orgLv1 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp1_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp2_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp3_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_3 cyclic factor=16 dim=1
#endif
	int y, x;

	for (y = 0; y < 16; y++)
	{
		for (x = 0; x < 16; x++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			orgCp0_0[x][y] = orgLv1[x][y];
			orgCp0_1[x][y] = orgLv1[x + 16][y];
			orgCp1_0[x][y] = orgLv1[x][y];
			orgCp1_1[x][y] = orgLv1[x + 16][y];
			orgCp2_0[x][y] = orgLv1[x][y];
			orgCp2_1[x][y] = orgLv1[x + 16][y];
			orgCp3_0[x][y] = orgLv1[x][y];
			orgCp3_1[x][y] = orgLv1[x + 16][y];
		}
	}

	for (y = 0; y < 16; y++)
	{
		for (x = 0; x < 16; x++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			orgCp0_2[x][y] = orgLv1[x][y + 16];
			orgCp0_3[x][y] = orgLv1[x + 16][y + 16];
			orgCp1_2[x][y] = orgLv1[x][y + 16];
			orgCp1_3[x][y] = orgLv1[x + 16][y + 16];
			orgCp2_2[x][y] = orgLv1[x][y + 16];
			orgCp2_3[x][y] = orgLv1[x + 16][y + 16];
			orgCp3_2[x][y] = orgLv1[x][y + 16];
			orgCp3_3[x][y] = orgLv1[x + 16][y + 16];
		}
	}
}


void constructSubWindowLv1(
	U8 swLv1[160][160], S14 refWindowLtPos[2],
	U8 subSw0_0[32][32], U8 subSw0_1[32][32], U8 subSw0_2[32][32], U8 subSw0_3[32][32],
	U8 subSw1_0[32][32], U8 subSw1_1[32][32], U8 subSw1_2[32][32], U8 subSw1_3[32][32],
	U8 subSw2_0[32][32], U8 subSw2_1[32][32], U8 subSw2_2[32][32], U8 subSw2_3[32][32],
	U8 subSw3_0[32][32], U8 subSw3_1[32][32], U8 subSw3_2[32][32], U8 subSw3_3[32][32])
{
#pragma HLS inline off
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=swLv1 complete dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw1_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw2_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw3_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_3 cyclic factor=32 dim=1
#endif
	S14 x_in_sw = refWindowLtPos[0];
	S14 y_in_sw = refWindowLtPos[1];

	S14 x, y;



	/*                 |----1_1----| */
	/*           |----0_1----|       */
	/*           |----1_0----|       */
	/*     |----0_0----|             */
	/*  Y  |=====|=====|=====|=====| */
	/*  1  1    16    32    48    64 */
	/*  -  .     .     .     .     . */
	/*  -  .     .     .     .     . */
	/*  -  .     .     .     .     . */
	/* 32  1    16    32    48    64 */

	for (y = 0; y < 32; y++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < 16; x++) {
			subSw0_0[x][y] = swLv1[x + x_in_sw][y + y_in_sw];
		}
		for (x = 16; x < 32; x++) {
			subSw0_0[x][y] = swLv1[x + x_in_sw][y + y_in_sw];
			subSw1_0[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw];

			subSw0_1[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw];
		}
		for (x = 32; x < 48; x++) {
			subSw1_0[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw];

			subSw0_1[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw];
			subSw1_1[x - 32][y] = swLv1[x + x_in_sw][y + y_in_sw];
		}
		for (x = 48; x < 64; x++) {
			subSw1_1[x - 32][y] = swLv1[x + x_in_sw][y + y_in_sw];
		}

	}


	/*                 |----3_1----| */
	/*           |----2_1----|       */
	/*           |----3_0----|       */
	/*     |----2_0----|             */
	/*                 |----1_3----| */
	/*           |----0_3----|       */
	/*           |----1_2----|       */
	/*     |----0_2----|             */
	/*  Y  |=====|=====|=====|=====| */
	/* 17  1    16    32    48    64 */
	/*  -  .     .     .     .     . */
	/*  -  .     .     .     .     . */
	/*  -  .     .     .     .     . */
	/* 48  1    16    32    48    64 */


	for (y = 0; y < 32; y++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < 16; x++) {
			subSw0_2[x][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

			subSw2_0[x][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];
		}
		for (x = 16; x < 32; x++) {
			subSw0_2[x][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];
			subSw1_2[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

			subSw0_3[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

			subSw2_0[x][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];
			subSw3_0[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

			subSw2_1[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];
		}
		for (x = 32; x < 48; x++) {
			subSw1_2[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

			subSw0_3[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];
			subSw1_3[x - 32][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

			subSw3_0[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

			subSw2_1[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];
			subSw3_1[x - 32][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];
		}
		for (x = 48; x < 64; x++) {
			subSw1_3[x - 32][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

			subSw3_1[x - 32][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];
		}
	}

	/*                 |----3_3----| */
	/*           |----2_3----|       */
	/*           |----3_2----|       */
	/*     |----2_2----|             */
	/*  Y  |=====|=====|=====|=====| */
	/* 32  1    16    32    48    64 */
	/*  -  .     .     .     .     . */
	/*  -  .     .     .     .     . */
	/*  -  .     .     .     .     . */
	/* 64  1    16    32    48    64 */

	for (y = 0; y < 32; y++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < 16; x++) {
			subSw2_2[x][y] = swLv1[x + x_in_sw][y + y_in_sw + 32];
		}
		for (x = 16; x < 32; x++) {
			subSw2_2[x][y] = swLv1[x + x_in_sw][y + y_in_sw + 32];
			subSw3_2[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 32];

			subSw2_3[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 32];
		}
		for (x = 32; x < 48; x++) {
			subSw3_2[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 32];

			subSw2_3[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 32];
			subSw3_3[x - 32][y] = swLv1[x + x_in_sw][y + y_in_sw + 32];
		}
		for (x = 48; x < 64; x++) {
			subSw3_3[x - 32][y] = swLv1[x + x_in_sw][y + y_in_sw + 32];
		}
	}

}


void constructRefWindowLv1(
	U8 swLv1[160][160], U8 orgLv1[32][32], S14 posLT[2],
	U8 orgCp0_0[16][16], U8 orgCp0_1[16][16], U8 orgCp0_2[16][16], U8 orgCp0_3[16][16],
	U8 orgCp1_0[16][16], U8 orgCp1_1[16][16], U8 orgCp1_2[16][16], U8 orgCp1_3[16][16],
	U8 orgCp2_0[16][16], U8 orgCp2_1[16][16], U8 orgCp2_2[16][16], U8 orgCp2_3[16][16],
	U8 orgCp3_0[16][16], U8 orgCp3_1[16][16], U8 orgCp3_2[16][16], U8 orgCp3_3[16][16],
	U8 subSw0_0[32][32], U8 subSw0_1[32][32], U8 subSw0_2[32][32], U8 subSw0_3[32][32],
	U8 subSw1_0[32][32], U8 subSw1_1[32][32], U8 subSw1_2[32][32], U8 subSw1_3[32][32],
	U8 subSw2_0[32][32], U8 subSw2_1[32][32], U8 subSw2_2[32][32], U8 subSw2_3[32][32],
	U8 subSw3_0[32][32], U8 subSw3_1[32][32], U8 subSw3_2[32][32], U8 subSw3_3[32][32])
{
#pragma HLS inline off
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=swLv1 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgLv1 complete dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp0_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp1_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp2_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp3_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw0_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw1_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw2_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw3_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_3 cyclic factor=32 dim=1
#endif


	copyOrgLv1(orgLv1, orgCp0_0, orgCp0_1, orgCp0_2, orgCp0_3, orgCp1_0, orgCp1_1, orgCp1_2, orgCp1_3, orgCp2_0, orgCp2_1, orgCp2_2, orgCp2_3, orgCp3_0, orgCp3_1, orgCp3_2, orgCp3_3);

	constructSubWindowLv1(
		swLv1, posLT,
		subSw0_0, subSw0_1, subSw0_2, subSw0_3,
		subSw1_0, subSw1_1, subSw1_2, subSw1_3,
		subSw2_0, subSw2_1, subSw2_2, subSw2_3,
		subSw3_0, subSw3_1, subSw3_2, subSw3_3);
}


void constructRefWindow(U8 searchLv, S14 posLT[3][2],
	U8 swLv2[80][80], U8 orgLv2[16][16], U8 swLv1[160][160], U8 orgLv1[32][32],
	U8 orgCp0_0[16][16], U8 orgCp0_1[16][16], U8 orgCp0_2[16][16], U8 orgCp0_3[16][16],
	U8 orgCp1_0[16][16], U8 orgCp1_1[16][16], U8 orgCp1_2[16][16], U8 orgCp1_3[16][16],
	U8 orgCp2_0[16][16], U8 orgCp2_1[16][16], U8 orgCp2_2[16][16], U8 orgCp2_3[16][16],
	U8 orgCp3_0[16][16], U8 orgCp3_1[16][16], U8 orgCp3_2[16][16], U8 orgCp3_3[16][16],
	U8 subSw0_0[32][32], U8 subSw0_1[32][32], U8 subSw0_2[32][32], U8 subSw0_3[32][32],
	U8 subSw1_0[32][32], U8 subSw1_1[32][32], U8 subSw1_2[32][32], U8 subSw1_3[32][32],
	U8 subSw2_0[32][32], U8 subSw2_1[32][32], U8 subSw2_2[32][32], U8 subSw2_3[32][32],
	U8 subSw3_0[32][32], U8 subSw3_1[32][32], U8 subSw3_2[32][32], U8 subSw3_3[32][32])
{
#pragma HLS inline off
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=swLv2 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgLv2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=swLv1 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgLv1 complete dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp0_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp1_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp2_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp3_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw0_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw1_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw2_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw3_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_3 cyclic factor=32 dim=1
#endif

	/* search Lv2 */
	if (searchLv == 0)
	{
		constructRefWindowLv2(
			swLv2, orgLv2,
			orgCp0_0, orgCp1_0, orgCp2_0, orgCp3_0, orgCp0_1, orgCp1_1, orgCp2_1, orgCp3_1, orgCp0_2, orgCp1_2, orgCp2_2, orgCp3_2, orgCp0_3, orgCp1_3, orgCp2_3, orgCp3_3,
			subSw0_0, subSw1_0, subSw2_0, subSw3_0, subSw0_1, subSw1_1, subSw2_1, subSw3_1, subSw0_2, subSw1_2, subSw2_2, subSw3_2, subSw0_3, subSw1_3, subSw2_3, subSw3_3);
	}
	/* search Lv1 */
	else
	{
		constructRefWindowLv1(
			swLv1, orgLv1, posLT[searchLv - 1],
			orgCp0_0, orgCp0_1, orgCp0_2, orgCp0_3,
			orgCp1_0, orgCp1_1, orgCp1_2, orgCp1_3,
			orgCp2_0, orgCp2_1, orgCp2_2, orgCp2_3,
			orgCp3_0, orgCp3_1, orgCp3_2, orgCp3_3,
			subSw0_0, subSw0_1, subSw0_2, subSw0_3,
			subSw1_0, subSw1_1, subSw1_2, subSw1_3,
			subSw2_0, subSw2_1, subSw2_2, subSw2_3,
			subSw3_0, subSw3_1, subSw3_2, subSw3_3);
	}

}

void sadLineWindowUnity(U8 subSw[32][32], U8 org[16][16], U32 lineSad[16], S14 baseH, U5 maxWidthScu, U5 maxHeightScu, U5 calcH)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=subSw cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=org cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=lineSad complete dim=0
#endif
	U32 sad = 0;
	U5 calcW;
	U5 searchPosX;

	if (maxHeightScu - calcH <= 0)
	{
		return;
	}

	for (calcW = 0; calcW < 16; calcW++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (searchPosX = 0; searchPosX < 16; searchPosX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			lineSad[searchPosX] += sadPel(subSw[calcW + searchPosX][calcH + baseH], org[calcW][calcH], maxWidthScu - calcW);
		}

	}
}

void searchLineWindowUnity(U8 subSw[32][32], U8 org[16][16], U32 lineSad[16], S14 baseH, U5 maxWidthScu, U5 maxHeightScu)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=subSw cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=org cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=lineSad complete dim=0
#endif
	U5 calcH;

	for (calcH = 0; calcH < 16; calcH++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		sadLineLv2(subSw, org, lineSad, baseH, maxWidthScu, maxHeightScu,
			calcH);
	}

}


void searchSubWindowsInLine(
	U8 searchLv, S14 searchPosY, U32 lamdaMv, U5 maxWidth, U5 maxHeight, U32 sadRow[4][4][16],
	U8 orgCp0_0[16][16], U8 orgCp0_1[16][16], U8 orgCp0_2[16][16], U8 orgCp0_3[16][16],
	U8 orgCp1_0[16][16], U8 orgCp1_1[16][16], U8 orgCp1_2[16][16], U8 orgCp1_3[16][16],
	U8 orgCp2_0[16][16], U8 orgCp2_1[16][16], U8 orgCp2_2[16][16], U8 orgCp2_3[16][16],
	U8 orgCp3_0[16][16], U8 orgCp3_1[16][16], U8 orgCp3_2[16][16], U8 orgCp3_3[16][16],
	U8 subSw0_0[32][32], U8 subSw0_1[32][32], U8 subSw0_2[32][32], U8 subSw0_3[32][32],
	U8 subSw1_0[32][32], U8 subSw1_1[32][32], U8 subSw1_2[32][32], U8 subSw1_3[32][32],
	U8 subSw2_0[32][32], U8 subSw2_1[32][32], U8 subSw2_2[32][32], U8 subSw2_3[32][32],
	U8 subSw3_0[32][32], U8 subSw3_1[32][32], U8 subSw3_2[32][32], U8 subSw3_3[32][32])
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadRow complete dim=0

#pragma HLS ARRAY_PARTITION variable=orgCp0_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp1_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp2_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp3_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw0_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw1_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw2_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw3_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_3 cyclic factor=32 dim=1
#endif

	U5 maxSubWidth[4][4] = {};
	U5 maxSubHeight[4][4] = {};
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=maxSubWidth complete dim=0
#pragma HLS ARRAY_PARTITION variable=maxSubHeight complete dim=0
#endif
	U8 compX, compY;

	if (searchLv == 0)
	{
		for (compX = 0; compX < 4; compX++)
		{
#if IME_PRAGMA_ON
#pragma HLS UNROLL
#endif
			for (compY = 0; compY < 4; compY++)
			{
#if IME_PRAGMA_ON
#pragma HLS UNROLL
#endif
				maxSubWidth[compX][compY] = maxWidth >> 2;
				maxSubHeight[compX][compY] = maxHeight >> 2;
			}
		}
	}
	else
	{
		for (compX = 0; compX < 4; compX++)
		{
#if IME_PRAGMA_ON
#pragma HLS UNROLL
#endif
			maxSubWidth[compX][0] = (U5)min_ime((maxWidth >> 1), 16, S6);		maxSubHeight[compX][0] = (U5)min_ime((maxHeight >> 1), 16, S6);
			maxSubWidth[compX][1] = (U5)max_ime((maxWidth >> 1) - 16, 16, S6);	maxSubHeight[compX][1] = (U5)min_ime((maxHeight >> 1), 16, S6);
			maxSubWidth[compX][2] = (U5)min_ime((maxWidth >> 1), 16, S6);		maxSubHeight[compX][2] = (U5)max_ime((maxHeight >> 1) - 16, 0, S6);
			maxSubWidth[compX][3] = (U5)max_ime((maxWidth >> 1) - 16, 0, S6);	maxSubHeight[compX][3] = (U5)max_ime((maxHeight >> 1) - 16, 0, S6);
		}
	}

	searchLineHorLv2(subSw0_0, orgCp0_0, sadRow[0][0], searchPosY, maxSubWidth[0][0], maxSubHeight[0][0]);
	searchLineHorLv2(subSw0_1, orgCp0_1, sadRow[0][1], searchPosY, maxSubWidth[0][1], maxSubHeight[0][1]);
	searchLineHorLv2(subSw0_2, orgCp0_2, sadRow[0][2], searchPosY, maxSubWidth[0][2], maxSubHeight[0][2]);
	searchLineHorLv2(subSw0_3, orgCp0_3, sadRow[0][3], searchPosY, maxSubWidth[0][3], maxSubHeight[0][3]);

	searchLineHorLv2(subSw1_0, orgCp1_0, sadRow[1][0], searchPosY, maxSubWidth[1][0], maxSubHeight[1][0]);
	searchLineHorLv2(subSw1_1, orgCp1_1, sadRow[1][1], searchPosY, maxSubWidth[1][1], maxSubHeight[1][1]);
	searchLineHorLv2(subSw1_2, orgCp1_2, sadRow[1][2], searchPosY, maxSubWidth[1][2], maxSubHeight[1][2]);
	searchLineHorLv2(subSw1_3, orgCp1_3, sadRow[1][3], searchPosY, maxSubWidth[1][3], maxSubHeight[1][3]);

	searchLineHorLv2(subSw2_0, orgCp2_0, sadRow[2][0], searchPosY, maxSubWidth[2][0], maxSubHeight[2][0]);
	searchLineHorLv2(subSw2_1, orgCp2_1, sadRow[2][1], searchPosY, maxSubWidth[2][1], maxSubHeight[2][1]);
	searchLineHorLv2(subSw2_2, orgCp2_2, sadRow[2][2], searchPosY, maxSubWidth[2][2], maxSubHeight[2][2]);
	searchLineHorLv2(subSw2_3, orgCp2_3, sadRow[2][3], searchPosY, maxSubWidth[2][3], maxSubHeight[2][3]);

	searchLineHorLv2(subSw3_0, orgCp3_0, sadRow[3][0], searchPosY, maxSubWidth[3][0], maxSubHeight[3][0]);
	searchLineHorLv2(subSw3_1, orgCp3_1, sadRow[3][1], searchPosY, maxSubWidth[3][1], maxSubHeight[3][1]);
	searchLineHorLv2(subSw3_2, orgCp3_2, sadRow[3][2], searchPosY, maxSubWidth[3][2], maxSubHeight[3][2]);
	searchLineHorLv2(subSw3_3, orgCp3_3, sadRow[3][3], searchPosY, maxSubWidth[3][3], maxSubHeight[3][3]);

}

void initSadRows(U8 searchLv, S14 searchPosY, S14 gmvp[2], S14 posLT[3][2], U32 lamdaMv, U32 sadRow[4][4][16])
{
#pragma HLS inline off
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadRow complete dim=0
#endif
	S14 searchPosX;

	U8 compX, compY;
	if (searchLv == 0)
	{
		for (searchPosX = 0; searchPosX < 16; searchPosX++) {
#pragma HLS unroll

			for (compX = 0; compX < 4; compX++)
			{
#pragma HLS UNROLL
				for (compY = 0; compY < 4; compY++)
				{
#pragma HLS UNROLL
					sadRow[compX][compY][searchPosX] = getMvRcostSimplefied(lamdaMv, (256 * compX) - gmvp[0] + (searchPosX << 4), (256 * compY) - gmvp[1] + (searchPosY << 4));
				}
			}
		}
	}
	else
	{
		for (searchPosX = 0; searchPosX < 16; searchPosX++) {
#pragma HLS unroll
			sadRow[0][0][searchPosX] = getMvRcostSimplefied(lamdaMv, 0 + (posLT[searchLv - 1][0] << 2) - gmvp[0] + (searchPosX << 3), 0 + (posLT[searchLv - 1][1] << 2) - gmvp[1] + (searchPosY << 3));
			sadRow[0][1][searchPosX] = 0;
			sadRow[0][2][searchPosX] = 0;
			sadRow[0][3][searchPosX] = 0;

			sadRow[1][0][searchPosX] = getMvRcostSimplefied(lamdaMv, 128 + (posLT[searchLv - 1][0] << 2) - gmvp[0] + (searchPosX << 3), 0 + (posLT[searchLv - 1][1] << 2) - gmvp[1] + (searchPosY << 3));
			sadRow[1][1][searchPosX] = 0;
			sadRow[1][2][searchPosX] = 0;
			sadRow[1][3][searchPosX] = 0;

			sadRow[2][0][searchPosX] = getMvRcostSimplefied(lamdaMv, 0 + (posLT[searchLv - 1][0] << 2) - gmvp[0] + (searchPosX << 3), 128 + (posLT[searchLv - 1][1] << 2) - gmvp[1] + (searchPosY << 3));
			sadRow[2][1][searchPosX] = 0;
			sadRow[2][2][searchPosX] = 0;
			sadRow[2][3][searchPosX] = 0;

			sadRow[3][0][searchPosX] = getMvRcostSimplefied(lamdaMv, 128 + (posLT[searchLv - 1][0] << 2) - gmvp[0] + (searchPosX << 3), 128 + (posLT[searchLv - 1][1] << 2) - gmvp[1] + (searchPosY << 3));
			sadRow[3][1][searchPosX] = 0;
			sadRow[3][2][searchPosX] = 0;
			sadRow[3][3][searchPosX] = 0;
		}
	}


}

void compareBestSadLine(U8 searchLv, S14 searchPosY, U32 bestCost[4][4], S14 bestMvSubSw[4][4][2], U32 sadRow[4][4][16])
{
#pragma HLS inline off
#pragma HLS ARRAY_PARTITION variable=bestCost complete dim=0	
#pragma HLS ARRAY_PARTITION variable=bestMVSubSw complete dim=0

	S14 searchPosX;
	U8 compX, compY;

	if (searchLv == 0)
	{
		for (searchPosX = 0; searchPosX < 16; searchPosX++) {
#pragma HLS unroll
			for (compX = 0; compX < 4; compX++)
			{
#pragma HLS UNROLL
				for (compY = 0; compY < 4; compY++)
				{
#pragma HLS UNROLL
					if (bestCost[compX][compY] > sadRow[compX][compY][searchPosX]) {
						bestCost[compX][compY] = sadRow[compX][compY][searchPosX];
						bestMvSubSw[compX][compY][0] = searchPosX;
						bestMvSubSw[compX][compY][1] = searchPosY;
					}
				}
			}
		}
	}
	else
	{
		for (searchPosX = 0; searchPosX < 16; searchPosX++) {
#pragma HLS unroll

			for (compX = 0; compX < 4; compX++)
			{
#pragma HLS unroll
				if (bestCost[compX][0] > sadRow[compX][0][searchPosX] + sadRow[compX][1][searchPosX] + sadRow[compX][2][searchPosX] + sadRow[compX][3][searchPosX]) {
					bestCost[compX][0] = sadRow[compX][0][searchPosX] + sadRow[compX][1][searchPosX] + sadRow[compX][2][searchPosX] + sadRow[compX][3][searchPosX];
					if (compX == 0)
					{
						bestMvSubSw[compX][0][0] = searchPosX;
						bestMvSubSw[compX][0][1] = searchPosY;
					}
					else if (compX == 1)
					{
						bestMvSubSw[compX][0][0] = searchPosX + 16;
						bestMvSubSw[compX][0][1] = searchPosY;
					}
					else if (compX == 2)
					{
						bestMvSubSw[compX][0][0] = searchPosX;
						bestMvSubSw[compX][0][1] = searchPosY + 16;
					}
					else //if (compX == 3)
					{
						bestMvSubSw[compX][0][0] = searchPosX + 16;
						bestMvSubSw[compX][0][1] = searchPosY + 16;
					}
				}
			}
		}
	}
}

void searchWindows(
	U8 searchLv, S14 gmvp[2], S14 posLT[3][2], U32 lamdaMv, U5 maxWidth, U5 maxHeight,
	U32 bestCost[4][4], S14 bestMvSubSw[4][4][2],
	U8 orgCp0_0[16][16], U8 orgCp0_1[16][16], U8 orgCp0_2[16][16], U8 orgCp0_3[16][16],
	U8 orgCp1_0[16][16], U8 orgCp1_1[16][16], U8 orgCp1_2[16][16], U8 orgCp1_3[16][16],
	U8 orgCp2_0[16][16], U8 orgCp2_1[16][16], U8 orgCp2_2[16][16], U8 orgCp2_3[16][16],
	U8 orgCp3_0[16][16], U8 orgCp3_1[16][16], U8 orgCp3_2[16][16], U8 orgCp3_3[16][16],
	U8 subSw0_0[32][32], U8 subSw0_1[32][32], U8 subSw0_2[32][32], U8 subSw0_3[32][32],
	U8 subSw1_0[32][32], U8 subSw1_1[32][32], U8 subSw1_2[32][32], U8 subSw1_3[32][32],
	U8 subSw2_0[32][32], U8 subSw2_1[32][32], U8 subSw2_2[32][32], U8 subSw2_3[32][32],
	U8 subSw3_0[32][32], U8 subSw3_1[32][32], U8 subSw3_2[32][32], U8 subSw3_3[32][32])
{

#pragma HLS ARRAY_PARTITION variable=bestCost complete dim=0
#pragma HLS ARRAY_PARTITION variable=bestMVSubSw complete dim=0

#pragma HLS ARRAY_PARTITION variable=orgCp0_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp1_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp2_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp3_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw0_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw1_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw2_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw3_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_3 cyclic factor=32 dim=1


	S14 searchPosY;
	U32 sadRow[4][4][16];
#pragma HLS ARRAY_PARTITION variable=sadRow complete dim=0

	U8 compX, compY;

	for (compX = 0; compX < 4; compX++)
	{
#pragma HLS UNROLL
		for (compY = 0; compY < 4; compY++)
		{
#pragma HLS UNROLL
			bestCost[compX][compY] = 0xFFFFFFFF;
			bestMvSubSw[compX][compY][0] = 0;
			bestMvSubSw[compX][compY][1] = 0;
		}
	}

	for (searchPosY = 0; searchPosY < 16; searchPosY++) {

#pragma HLS pipeline

		initSadRows(searchLv, searchPosY, gmvp, posLT, lamdaMv, sadRow);

		searchSubWindowsInLine(
			searchLv, searchPosY, lamdaMv, maxWidth, maxHeight, sadRow,
			orgCp0_0, orgCp0_1, orgCp0_2, orgCp0_3, orgCp1_0, orgCp1_1, orgCp1_2, orgCp1_3, orgCp2_0, orgCp2_1, orgCp2_2, orgCp2_3, orgCp3_0, orgCp3_1, orgCp3_2, orgCp3_3,
			subSw0_0, subSw0_1, subSw0_2, subSw0_3, subSw1_0, subSw1_1, subSw1_2, subSw1_3, subSw2_0, subSw2_1, subSw2_2, subSw2_3, subSw3_0, subSw3_1, subSw3_2, subSw3_3);

		compareBestSadLine(searchLv, searchPosY, bestCost, bestMvSubSw, sadRow);
	}

	if (searchLv == 0)
	{
		//printf("Lv 2 16 Window Cost\n");
		for (compX = 0; compX < 4; compX++)
		{
#pragma HLS UNROLL
			for (compY = 0; compY < 4; compY++)
			{
				//printf("%d,", bestCost[compY][compX]);
			}
			//printf("\n");
		}
	}

}

	void compareSearchResult(
		//U8 searchLv, 
		S14 gmvp[2], 
		S14 posLT[3][2],
		U32 bestTriCost[3], 
		S14 bestTriMv[3][2], 
		//U32 bestCostSubSw_org[4][4],
		//S14 bestMvSubSw_org[4][4][2],
		U32 bestCostSubSw[4][4], 
		S14 bestMvSubSw[4][4][2]
	)
	{
#pragma HLS inline off

		S14 horIdx, verIdx;
#if SEARCH_FULLLV1==0
		U32 bestCost = 0xFFFFFFFF;
		S14 bestMv[2] = { 0,0 };
		S14 gmvpQ[2] = { 0,0 };
//#if SEARCH_FULLLV1==0
		if (searchLv == 0)
		{
#endif
			/* select the best three MVs in 16 sub search window */
			//for (verIdx = 0; verIdx < 4; verIdx++)
			//{
			//	for (horIdx = 0; horIdx < 4; horIdx++)
			//	{
			//		bestMvSubSw_org[verIdx][horIdx][0] = (bestMvSubSw_org[verIdx][horIdx][0] << 2) + (horIdx * (MMEA_LEVEL2_SR_V >> 1));
			//		bestMvSubSw_org[verIdx][horIdx][1] = (bestMvSubSw_org[verIdx][horIdx][1] << 2) + (verIdx * (MMEA_LEVEL2_SR_H >> 1));

			//		if (bestTriCost[2] > bestCostSubSw_org[verIdx][horIdx])
			//		{
			//			if (bestTriCost[1] > bestCostSubSw_org[verIdx][horIdx])
			//			{
			//				bestTriCost[2] = bestTriCost[1];
			//				bestTriMv[2][0] = bestTriMv[1][0];
			//				bestTriMv[2][1] = bestTriMv[1][1];

			//				if (bestTriCost[0] > bestCostSubSw_org[verIdx][horIdx])
			//				{
			//					bestTriCost[1] = bestTriCost[0];
			//					bestTriMv[1][0] = bestTriMv[0][0];
			//					bestTriMv[1][1] = bestTriMv[0][1];
			//					bestTriCost[0] = bestCostSubSw_org[verIdx][horIdx];
			//					bestTriMv[0][0] = bestMvSubSw[horIdx][verIdx][0];
			//					bestTriMv[0][1] = bestMvSubSw[horIdx][verIdx][1];
			//				}
			//				else
			//				{
			//					bestTriCost[1] = bestCostSubSw_org[verIdx][horIdx];
			//					bestTriMv[1][0] = bestMvSubSw[horIdx][verIdx][0];
			//					bestTriMv[1][1] = bestMvSubSw[horIdx][verIdx][1];
			//				}
			//			}
			//			else
			//			{
			//				bestTriCost[2] = bestCostSubSw_org[verIdx][horIdx];
			//				bestTriMv[2][0] = bestMvSubSw[horIdx][verIdx][0];
			//				bestTriMv[2][1] = bestMvSubSw[horIdx][verIdx][1];
			//			}
			//		}
			//	}
			//}
#if 1//0
			for (verIdx = 0; verIdx < 4; verIdx++)
			{
				for (horIdx = 0; horIdx < 4; horIdx++)
				{
					bestMvSubSw[horIdx][verIdx][0] = (bestMvSubSw[horIdx][verIdx][0] << 2) + (horIdx * (MMEA_LEVEL2_SR_V >> 1));
					bestMvSubSw[horIdx][verIdx][1] = (bestMvSubSw[horIdx][verIdx][1] << 2) + (verIdx * (MMEA_LEVEL2_SR_H >> 1));

					if (bestTriCost[2] > bestCostSubSw[horIdx][verIdx])
					{
						if (bestTriCost[1] > bestCostSubSw[horIdx][verIdx])
						{
							bestTriCost[2] = bestTriCost[1];
							bestTriMv[2][0] = bestTriMv[1][0];
							bestTriMv[2][1] = bestTriMv[1][1];

							if (bestTriCost[0] > bestCostSubSw[horIdx][verIdx])
							{
								bestTriCost[1] = bestTriCost[0];
								bestTriMv[1][0] = bestTriMv[0][0];
								bestTriMv[1][1] = bestTriMv[0][1];
								bestTriCost[0] = bestCostSubSw[horIdx][verIdx];
								bestTriMv[0][0] = bestMvSubSw[horIdx][verIdx][0];
								bestTriMv[0][1] = bestMvSubSw[horIdx][verIdx][1];
							}
							else
							{
								bestTriCost[1] = bestCostSubSw[horIdx][verIdx];
								bestTriMv[1][0] = bestMvSubSw[horIdx][verIdx][0];
								bestTriMv[1][1] = bestMvSubSw[horIdx][verIdx][1];
							}
						}
						else
						{
							bestTriCost[2] = bestCostSubSw[horIdx][verIdx];
							bestTriMv[2][0] = bestMvSubSw[horIdx][verIdx][0];
							bestTriMv[2][1] = bestMvSubSw[horIdx][verIdx][1];
						}
					}
				}
			}
#else

			for (horIdx = 0; horIdx < 4; horIdx++)
			{
				for (verIdx = 0; verIdx < 4; verIdx++)
				{
					bestMvSubSw[verIdx][horIdx][0] = (bestMvSubSw[verIdx][horIdx][0] << 2) + (horIdx * (MMEA_LEVEL2_SR_V >> 1));
					bestMvSubSw[verIdx][horIdx][1] = (bestMvSubSw[verIdx][horIdx][1] << 2) + (verIdx * (MMEA_LEVEL2_SR_H >> 1));

					if (bestTriCost[2] > bestCostSubSw[verIdx][horIdx])
					{
						if (bestTriCost[1] > bestCostSubSw[verIdx][horIdx])
						{
							bestTriCost[2] = bestTriCost[1];
							bestTriMv[2][0] = bestTriMv[1][0];
							bestTriMv[2][1] = bestTriMv[1][1];

							if (bestTriCost[0] > bestCostSubSw[verIdx][horIdx])
							{
								bestTriCost[1] = bestTriCost[0];
								bestTriMv[1][0] = bestTriMv[0][0];
								bestTriMv[1][1] = bestTriMv[0][1];
								bestTriCost[0] = bestCostSubSw[verIdx][horIdx];
								bestTriMv[0][0] = bestMvSubSw[verIdx][horIdx][0];
								bestTriMv[0][1] = bestMvSubSw[verIdx][horIdx][1];
							}
							else
							{
								bestTriCost[1] = bestCostSubSw[verIdx][horIdx];
								bestTriMv[1][0] = bestMvSubSw[verIdx][horIdx][0];
								bestTriMv[1][1] = bestMvSubSw[verIdx][horIdx][1];
							}
						}
						else
						{
							bestTriCost[2] = bestCostSubSw[verIdx][horIdx];
							bestTriMv[2][0] = bestMvSubSw[verIdx][horIdx][0];
							bestTriMv[2][1] = bestMvSubSw[verIdx][horIdx][1];
						}
					}
				}
			}
#endif
#if PRINT_IME_MV
			printf("Lv2:[%d,%d][%d,%d]\n", bestTriMv[0][0] - MMEA_LEVEL2_SR_V, bestTriMv[0][1] - MMEA_LEVEL2_SR_H, bestTriMv[1][0] - MMEA_LEVEL2_SR_V, bestTriMv[1][1] - MMEA_LEVEL2_SR_H);
			//if (bestTriMv[0][0] - MMEA_LEVEL2_SR_V != 0 || bestTriMv[0][1] - MMEA_LEVEL2_SR_H != 0)
			//{
			//	printf("Lv2:[%d %d]\n", bestTriMv[0][0], bestTriMv[0][1]);
			//}

#endif
#if SEARCH_FULLLV1==0
			deriveSearchWindowLv1(bestTriMv[0], posLT[0]);
			deriveSearchWindowLv1(bestTriMv[1], posLT[1]);
			gmvpQ[0] = gmvp[0] >> 2;
			gmvpQ[1] = gmvp[1] >> 2;
			deriveSearchWindowLv1(gmvpQ, posLT[2]);
		}
		else
		{
			bestTriCost[searchLv - 1] = 0xFFFFFFFF;

			for (verIdx = 0; verIdx < 4; verIdx++)
			{
				if (bestCost > bestCostSubSw[verIdx][0])
				{
					bestCost = bestCostSubSw[verIdx][0];
					bestMv[0] = bestMvSubSw[verIdx][0][0];
					bestMv[1] = bestMvSubSw[verIdx][0][1];
				}
			}
			bestTriCost[searchLv - 1] = bestCost;
			bestTriMv[searchLv - 1][0] = (bestMv[0] + posLT[searchLv - 1][0]) << 1;
			bestTriMv[searchLv - 1][1] = (bestMv[1] + posLT[searchLv - 1][1]) << 1;

			//bestTriMv[searchLv - 1][0] = (bestMv[0] << 1) + (posLT[searchLv - 1][0] /*<< 1*/);
			//bestTriMv[searchLv - 1][1] = (bestMv[1] << 1) + (posLT[searchLv - 1][1] /*<< 1*/);
		}
#endif
	}

	void constructSubWindowDoubleLv2_org(
		pel swLv2_org[SWH >> 2][SWW >> 2],

		pel subSw0_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw1_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw2_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw3_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw4_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw5_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw6_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw7_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw8_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw9_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw10_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw11_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw12_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw13_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw14_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw15_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw0Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw1Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw2Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw3Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw4Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw5Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw6Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw7Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw8Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw9Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw10Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw11Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw12Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw13Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw14Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
		pel subSw15Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)]
		//,
		////========================================================================================================================
		//pel swLv2[SWW >> 2][SWH >> 2],
		//pel subSw0[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw1[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw2[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw3[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw4[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw5[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw6[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw7[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw8[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw9[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw10[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw11[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw12[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw13[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw14[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw15[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw0Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw1Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw2Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw3Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw4Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw5Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw6Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw7Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw8Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw9Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw10Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw11Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw12Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw13Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw14Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
		//pel subSw15Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)]
	)
	{

#pragma HLS inline off

#if IME_PRAGMA_ON

#pragma HLS array_partition variable=swLv2_org complete dim=2

#pragma HLS array_partition variable=subSw0_org complete dim=2
#pragma HLS array_partition variable=subSw1_org complete dim=2
#pragma HLS array_partition variable=subSw2_org complete dim=2
#pragma HLS array_partition variable=subSw3_org complete dim=2
#pragma HLS array_partition variable=subSw4_org complete dim=2
#pragma HLS array_partition variable=subSw5_org complete dim=2
#pragma HLS array_partition variable=subSw6_org complete dim=2
#pragma HLS array_partition variable=subSw7_org complete dim=2
#pragma HLS array_partition variable=subSw8_org complete dim=2
#pragma HLS array_partition variable=subSw9_org complete dim=2
#pragma HLS array_partition variable=subSw10_org complete dim=2
#pragma HLS array_partition variable=subSw11_org complete dim=2
#pragma HLS array_partition variable=subSw12_org complete dim=2
#pragma HLS array_partition variable=subSw13_org complete dim=2
#pragma HLS array_partition variable=subSw14_org complete dim=2
#pragma HLS array_partition variable=subSw15_org complete dim=2

#pragma HLS array_partition variable=subSw0Down_org complete dim=2
#pragma HLS array_partition variable=subSw1Down_org complete dim=2
#pragma HLS array_partition variable=subSw2Down_org complete dim=2
#pragma HLS array_partition variable=subSw3Down_org complete dim=2
#pragma HLS array_partition variable=subSw4Down_org complete dim=2
#pragma HLS array_partition variable=subSw5Down_org complete dim=2
#pragma HLS array_partition variable=subSw6Down_org complete dim=2
#pragma HLS array_partition variable=subSw7Down_org complete dim=2
#pragma HLS array_partition variable=subSw8Down_org complete dim=2
#pragma HLS array_partition variable=subSw9Down_org complete dim=2
#pragma HLS array_partition variable=subSw10Down_org complete dim=2
#pragma HLS array_partition variable=subSw11Down_org complete dim=2
#pragma HLS array_partition variable=subSw12Down_org complete dim=2
#pragma HLS array_partition variable=subSw13Down_org complete dim=2
#pragma HLS array_partition variable=subSw14Down_org complete dim=2
#pragma HLS array_partition variable=subSw15Down_org complete dim=2

		////======================================================================
		//
		//#pragma HLS array_partition variable=swLv2 complete dim=1
		//#pragma HLS array_partition variable=subSw0 complete dim=1
		//#pragma HLS array_partition variable=subSw1 complete dim=1
		//#pragma HLS array_partition variable=subSw2 complete dim=1
		//#pragma HLS array_partition variable=subSw3 complete dim=1
		//#pragma HLS array_partition variable=subSw4 complete dim=1
		//#pragma HLS array_partition variable=subSw5 complete dim=1
		//#pragma HLS array_partition variable=subSw6 complete dim=1
		//#pragma HLS array_partition variable=subSw7 complete dim=1
		//#pragma HLS array_partition variable=subSw8 complete dim=1
		//#pragma HLS array_partition variable=subSw9 complete dim=1
		//#pragma HLS array_partition variable=subSw10 complete dim=1
		//#pragma HLS array_partition variable=subSw11 complete dim=1
		//#pragma HLS array_partition variable=subSw12 complete dim=1
		//#pragma HLS array_partition variable=subSw13 complete dim=1
		//#pragma HLS array_partition variable=subSw14 complete dim=1
		//#pragma HLS array_partition variable=subSw15 complete dim=1
		//
		//#pragma HLS array_partition variable=subSw0Down complete dim=1
		//#pragma HLS array_partition variable=subSw1Down complete dim=1
		//#pragma HLS array_partition variable=subSw2Down complete dim=1
		//#pragma HLS array_partition variable=subSw3Down complete dim=1
		//#pragma HLS array_partition variable=subSw4Down complete dim=1
		//#pragma HLS array_partition variable=subSw5Down complete dim=1
		//#pragma HLS array_partition variable=subSw6Down complete dim=1
		//#pragma HLS array_partition variable=subSw7Down complete dim=1
		//#pragma HLS array_partition variable=subSw8Down complete dim=1
		//#pragma HLS array_partition variable=subSw9Down complete dim=1
		//#pragma HLS array_partition variable=subSw10Down complete dim=1
		//#pragma HLS array_partition variable=subSw11Down complete dim=1
		//#pragma HLS array_partition variable=subSw12Down complete dim=1
		//#pragma HLS array_partition variable=subSw13Down complete dim=1
		//#pragma HLS array_partition variable=subSw14Down complete dim=1
		//#pragma HLS array_partition variable=subSw15Down complete dim=1

#endif
	//int loadY, loadX;
		U7 loadY, loadX;
#if 0//1
		for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
		{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
			if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2) - 1))
			{
				for (loadX = 0; loadX < (MMEA_LEVEL2_SR_V >> 3); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw0_org[loadY][loadX] = swLv2_org[loadY][loadX];
				}

				for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw0_org[loadY][loadX] = swLv2_org[loadY][loadX];
					subSw1_org[loadY][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY][loadX];
				}

				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw1_org[loadY][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY][loadX];

				}

				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw2_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY][loadX];
				}
				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw3_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY][loadX];
				}
			}

			if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
			{
				for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw0Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX] = swLv2_org[loadY][loadX];
				}
				for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw1Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY][loadX];

				}
				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw2Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY][loadX];
				}
				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw3Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY][loadX];
				}
			}

		}

		for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
		{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
			if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
			{
				for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw4_org[loadY][loadX] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
				}
				for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw5_org[loadY][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];

				}
				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw6_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
				}
				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw7_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
				}
			}

			if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
			{
				for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw4Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
				}
				for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw5Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];

				}
				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw6Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
				}
				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw7Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
				}
			}

		}

		for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
		{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
			if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
			{
				for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw8_org[loadY][loadX] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
				}
				for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw9_org[loadY][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];

				}
				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw10_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
				}
				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw11_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
				}
			}

			if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
			{
				for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw8Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
				}
				for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw9Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];

				}
				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw10Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
				}
				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw11Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
				}
			}
		}

		for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
		{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
			if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
			{
				for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw12_org[loadY][loadX] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
				}
				for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw13_org[loadY][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];

				}
				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw14_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
				}
				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw15_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
				}
			}

			if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
			{
				for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw12Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
				}
				for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw13Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];

				}
				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw14Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
				}
				for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw15Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
				}
			}
		}
#else

		for (loadY = 0; loadY < 24; loadY++)
		{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
#if 1//0//1
			if (loadY <= 19)
			{
				for (loadX = 0; loadX < 28; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw0_org[loadY][loadX] = swLv2_org[loadY][loadX];
				}


				for (loadX = 12; loadX < 40; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw1_org[loadY][loadX - 12] = swLv2_org[loadY][loadX];

				}

				for (loadX = 24; loadX < 52; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw2_org[loadY][loadX - 24] = swLv2_org[loadY][loadX];
				}
				for (loadX = 36; loadX < 64; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw3_org[loadY][loadX - 36] = swLv2_org[loadY][loadX];
				}
			}
#else

			if (loadY <= 19)
			{
				for (loadX = 0; loadX < 12; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw0_org[loadY][loadX] = swLv2_org[loadY][loadX];
				}

				for (loadX = 12; loadX < 24; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw0_org[loadY][loadX] = swLv2_org[loadY][loadX];
					subSw1_org[loadY][loadX - 12] = swLv2_org[loadY][loadX];
				}

				for (loadX = 24; loadX < 28; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw0_org[loadY][loadX] = swLv2_org[loadY][loadX];
					subSw1_org[loadY][loadX - 12] = swLv2_org[loadY][loadX];
					subSw2_org[loadY][loadX - 24] = swLv2_org[loadY][loadX];
				}


				for (loadX = 28; loadX < 36; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw1_org[loadY][loadX - 12] = swLv2_org[loadY][loadX];
					subSw2_org[loadY][loadX - 24] = swLv2_org[loadY][loadX];

				}

				for (loadX = 36; loadX < 40; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw1_org[loadY][loadX - 12] = swLv2_org[loadY][loadX];
					subSw2_org[loadY][loadX - 24] = swLv2_org[loadY][loadX];
					subSw3_org[loadY][loadX - 36] = swLv2_org[loadY][loadX];

				}

				for (loadX = 40; loadX < 52; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw2_org[loadY][loadX - 24] = swLv2_org[loadY][loadX];
					subSw3_org[loadY][loadX - 36] = swLv2_org[loadY][loadX];
				}
				for (loadX = 52; loadX < 64; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw3_org[loadY][loadX - 36] = swLv2_org[loadY][loadX];
				}
			}

#endif

			if (loadY >= 4)
			{
				for (loadX = 0; loadX < 28; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw0Down_org[loadY - 4][loadX] = swLv2_org[loadY][loadX];
				}
				for (loadX = 12; loadX < 40; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw1Down_org[loadY - 4][loadX - 12] = swLv2_org[loadY][loadX];

				}
				for (loadX = 24; loadX < 52; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw2Down_org[loadY - 4][loadX - 24] = swLv2_org[loadY][loadX];
				}
				for (loadX = 36; loadX < 64; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw3Down_org[loadY - 4][loadX - 36] = swLv2_org[loadY][loadX];
				}
			}

		}

		for (loadY = 0; loadY < 24; loadY++)
		{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
			if (loadY <= 19)
			{
				for (loadX = 0; loadX < 28; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw4_org[loadY][loadX] = swLv2_org[loadY + 8][loadX];
				}
				for (loadX = 12; loadX < 40; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw5_org[loadY][loadX - 12] = swLv2_org[loadY + 8][loadX];

				}
				for (loadX = 24; loadX < 52; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw6_org[loadY][loadX - 24] = swLv2_org[loadY + 8][loadX];
				}
				for (loadX = 36; loadX < 64; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw7_org[loadY][loadX - 36] = swLv2_org[loadY + 8][loadX];
				}
			}

			if (loadY >= 4)
			{
				for (loadX = 0; loadX < 28; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw4Down_org[loadY - 4][loadX] = swLv2_org[loadY + 8][loadX];
				}
				for (loadX = 12; loadX < 40; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw5Down_org[loadY - 4][loadX - 12] = swLv2_org[loadY + 8][loadX];

				}
				for (loadX = 24; loadX < 52; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw6Down_org[loadY - 4][loadX - 24] = swLv2_org[loadY + 8][loadX];
				}
				for (loadX = 36; loadX < 64; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw7Down_org[loadY - 4][loadX - 36] = swLv2_org[loadY + 8][loadX];
				}
			}

		}

		for (loadY = 0; loadY < 24; loadY++)
		{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
			if (loadY <= 19)
			{
				for (loadX = 0; loadX < 28; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw8_org[loadY][loadX] = swLv2_org[loadY + 16][loadX];
				}
				for (loadX = 12; loadX < 40; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw9_org[loadY][loadX - 12] = swLv2_org[loadY + 16][loadX];

				}

				for (loadX = 24; loadX < 52; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw10_org[loadY][loadX - 24] = swLv2_org[loadY + 16][loadX];
				}

				for (loadX = 36; loadX < 64; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw11_org[loadY][loadX - 36] = swLv2_org[loadY + 16][loadX];
				}
			}


			if (loadY >= 4)
			{
				for (loadX = 0; loadX < 28; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw8Down_org[loadY - 4][loadX] = swLv2_org[loadY + 16][loadX];
				}
				for (loadX = 12; loadX < 40; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw9Down_org[loadY - 4][loadX - 12] = swLv2_org[loadY + 16][loadX];

				}
				for (loadX = 24; loadX < 52; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw10Down_org[loadY - 4][loadX - 24] = swLv2_org[loadY + 16][loadX];
				}
				for (loadX = 36; loadX < 64; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw11Down_org[loadY - 4][loadX - 36] = swLv2_org[loadY + 16][loadX];
				}
			}
		}

		for (loadY = 0; loadY < 24; loadY++)
		{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
			if (loadY <= 19)
			{
				for (loadX = 0; loadX < 28; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw12_org[loadY][loadX] = swLv2_org[loadY + 24][loadX];
				}
				for (loadX = 12; loadX < 40; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw13_org[loadY][loadX - 12] = swLv2_org[loadY + 24][loadX];

				}
				for (loadX = 24; loadX < 52; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw14_org[loadY][loadX - 24] = swLv2_org[loadY + 24][loadX];
				}
				for (loadX = 36; loadX < 64; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw15_org[loadY][loadX - 36] = swLv2_org[loadY + 24][loadX];
				}
			}

			if (loadY >= 4)
			{
				for (loadX = 0; loadX < 28; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw12Down_org[loadY - 4][loadX] = swLv2_org[loadY + 24][loadX];
				}
				for (loadX = 12; loadX < 40; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw13Down_org[loadY - 4][loadX - 12] = swLv2_org[loadY + 24][loadX];

				}
				for (loadX = 24; loadX < 52; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw14Down_org[loadY - 4][loadX - 24] = swLv2_org[loadY + 24][loadX];
				}
				for (loadX = 36; loadX < 64; loadX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					subSw15Down_org[loadY - 4][loadX - 36] = swLv2_org[loadY + 24][loadX];
				}
			}
		}

#endif
		//	//======================================================================================================
		//	for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
		//	{
		//#if IME_PRAGMA_ON
		//#pragma HLS pipeline
		//#endif
		//		if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
		//		{
		//			for (loadX = 0; loadX < (MMEA_LEVEL2_SR_V >> 3); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw0[loadX][loadY] = swLv2[loadX][loadY];
		//			}
		//
		//			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw0[loadX][loadY] = swLv2[loadX][loadY];
		//				subSw1[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY] = swLv2[loadX][loadY];
		//			}
		//
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw1[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY] = swLv2[loadX][loadY];
		//
		//			}
		//
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw2[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)][loadY] = swLv2[loadX][loadY];
		//			}
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw3[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)][loadY] = swLv2[loadX][loadY];
		//			}
		//		}
		//
		//		if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
		//		{
		//			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw0Down[loadX][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY];
		//			}
		//			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw1Down[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY];
		//
		//			}
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw2Down[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY];
		//			}
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw3Down[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY];
		//			}
		//		}
		//
		//	}
		//
		//
		//
		//	for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
		//	{
		//#if IME_PRAGMA_ON
		//#pragma HLS pipeline
		//#endif
		//		if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
		//		{
		//			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw4[loadX][loadY] = swLv2[loadX][loadY + (MMEA_LEVEL2_SR_H >> 3)];
		//			}
		//			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw5[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY] = swLv2[loadX][loadY + (MMEA_LEVEL2_SR_H >> 3)];
		//
		//			}
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw6[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)][loadY] = swLv2[loadX][loadY + (MMEA_LEVEL2_SR_H >> 3)];
		//			}
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw7[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)][loadY] = swLv2[loadX][loadY + (MMEA_LEVEL2_SR_H >> 3)];
		//			}
		//		}
		//
		//		if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
		//		{
		//			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw4Down[loadX][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + (MMEA_LEVEL2_SR_H >> 3)];
		//			}
		//			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw5Down[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + (MMEA_LEVEL2_SR_H >> 3)];
		//
		//			}
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw6Down[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + (MMEA_LEVEL2_SR_H >> 3)];
		//			}
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw7Down[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + (MMEA_LEVEL2_SR_H >> 3)];
		//			}
		//		}
		//
		//	}
		//
		//	for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
		//	{
		//#if IME_PRAGMA_ON
		//#pragma HLS pipeline
		//#endif
		//		if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
		//		{
		//			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw8[loadX][loadY] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)];
		//			}
		//			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw9[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)];
		//
		//			}
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw10[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)][loadY] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)];
		//			}
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw11[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)][loadY] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)];
		//			}
		//		}
		//
		//		if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
		//		{
		//			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw8Down[loadX][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)];
		//			}
		//			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw9Down[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)];
		//
		//			}
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw10Down[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)];
		//			}
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw11Down[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)];
		//			}
		//		}
		//	}
		//
		//
		//
		//	for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
		//	{
		//#if IME_PRAGMA_ON
		//#pragma HLS pipeline
		//#endif
		//		if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
		//		{
		//			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw12[loadX][loadY] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)];
		//			}
		//			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw13[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)];
		//
		//			}
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw14[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)][loadY] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)];
		//			}
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw15[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)][loadY] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)];
		//			}
		//		}
		//
		//		if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
		//		{
		//			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw12Down[loadX][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)];
		//			}
		//			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw13Down[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)];
		//
		//			}
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw14Down[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)];
		//			}
		//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
		//			{
		//#if IME_PRAGMA_ON
		//#pragma HLS unroll
		//#endif
		//				subSw15Down[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)];
		//			}
		//		}
		//	}
		//
		//	//check subSw1_org subSw1_org
		//	for (int j = 0; j < SWH >> 2; j++)
		//	{
		//		for (int i = 0; i < SWW >> 2; i++)
		//		{
		//			if (swLv2_org[j][i] != swLv2[i][j])
		//			{
		//				printf("swLv2_org error! ");
		//				printf("swLv2_org[%d][%d] = %d\tswLv2[%d][%d] = %d\n", j, i, swLv2_org[j][i], i, j, swLv2[i][j]);
		//			}
		//		}
		//	}
		//
		//	// check subSw_XX_Down_org
		//	for (int j = 0; j < 20; j++)
		//	{
		//		for (int i = 0; i < 28; i++)
		//		{
		//			if (subSw0Down_org[j][i] != subSw0Down[i][j])
		//			{
		//				printf("subSw0Down_org error! ");
		//				printf("subSw0Down_org[%d][%d] = %d\tsubSw0Down[%d][%d] = %d\n", j, i, subSw0Down_org[j][i], i, j, subSw0Down[i][j]);
		//			}
		//
		//			if (subSw1Down_org[j][i] != subSw1Down[i][j])
		//			{
		//				printf("subSw1Down_org error! ");
		//				printf("subSw1Down_org[%d][%d] = %d\tsubSw1Down[%d][%d] = %d\n", j, i, subSw1Down_org[j][i], i, j, subSw1Down[i][j]);
		//			}
		//
		//			if (subSw2Down_org[j][i] != subSw2Down[i][j])
		//			{
		//				printf("subSw2Down_org error! ");
		//				printf("subSw2Down_org[%d][%d] = %d\tsubSw2Down[%d][%d] = %d\n", j, i, subSw2Down_org[j][i], i, j, subSw2Down[i][j]);
		//			}
		//
		//			if (subSw3Down_org[j][i] != subSw3Down[i][j])
		//			{
		//				printf("subSw3Down_org error! ");
		//				printf("subSw3Down_org[%d][%d] = %d\tsubSw3Down[%d][%d] = %d\n", j, i, subSw3Down_org[j][i], i, j, subSw3Down[i][j]);
		//			}
		//
		//			if (subSw4Down_org[j][i] != subSw4Down[i][j])
		//			{
		//				printf("subSw4Down_org error! ");
		//				printf("subSw4Down_org[%d][%d] = %d\tsubSw4Down[%d][%d] = %d\n", j, i, subSw4_org[j][i], i, j, subSw4Down[i][j]);
		//			}
		//
		//			if (subSw5Down_org[j][i] != subSw5Down[i][j])
		//			{
		//				printf("subSw5Down_org error! ");
		//				printf("subSw5Down_org[%d][%d] = %d\tsubSw5Down[%d][%d] = %d\n", j, i, subSw5Down_org[j][i], i, j, subSw5Down[i][j]);
		//			}
		//
		//			if (subSw6Down_org[j][i] != subSw6Down[i][j])
		//			{
		//				printf("subSw6Down_org error! ");
		//				printf("subSw6Down_org[%d][%d] = %d\tsubSw6Down[%d][%d] = %d\n", j, i, subSw6Down_org[j][i], i, j, subSw6Down[i][j]);
		//			}
		//
		//			if (subSw7Down_org[j][i] != subSw7Down[i][j])
		//			{
		//				printf("subSw7Down_org error! ");
		//				printf("subSw7Down_org[%d][%d] = %d\tsubSw7Down[%d][%d] = %d\n", j, i, subSw7Down_org[j][i], i, j, subSw7Down[i][j]);
		//			}
		//
		//			if (subSw8Down_org[j][i] != subSw8Down[i][j])
		//			{
		//				printf("subSw8Down_org error! ");
		//				printf("subSw8Down_org[%d][%d] = %d\tsubSw8Down[%d][%d] = %d\n", j, i, subSw8Down_org[j][i], i, j, subSw8Down[i][j]);
		//			}
		//
		//			if (subSw9Down_org[j][i] != subSw9Down[i][j])
		//			{
		//				printf("subSw9Down_org error! ");
		//				printf("subSw9Down_org[%d][%d] = %d\tsubSw9Down[%d][%d] = %d\n", j, i, subSw9Down_org[j][i], i, j, subSw9Down[i][j]);
		//			}
		//
		//			if (subSw10Down_org[j][i] != subSw10Down[i][j])
		//			{
		//				printf("subSw10Down_org error! ");
		//				printf("subSw10Down_org[%d][%d] = %d\tsubSw10Down[%d][%d] = %d\n", j, i, subSw10Down_org[j][i], i, j, subSw10Down[i][j]);
		//			}
		//
		//			if (subSw11Down_org[j][i] != subSw11Down[i][j])
		//			{
		//				printf("subSw11Down_org error! ");
		//				printf("subSw11Down_org[%d][%d] = %d\tsubSw11Down[%d][%d] = %d\n", j, i, subSw11Down_org[j][i], i, j, subSw11Down[i][j]);
		//			}
		//
		//			if (subSw12Down_org[j][i] != subSw12Down[i][j])
		//			{
		//				printf("subSw12Down_org error! ");
		//				printf("subSw12Down_org[%d][%d] = %d\tsubSw12Down[%d][%d] = %d\n", j, i, subSw12Down_org[j][i], i, j, subSw12Down[i][j]);
		//			}
		//
		//			if (subSw13Down_org[j][i] != subSw13Down[i][j])
		//			{
		//				printf("subSw13Down_org error! ");
		//				printf("subSw13Down_org[%d][%d] = %d\tsubSw13Down[%d][%d] = %d\n", j, i, subSw13Down_org[j][i], i, j, subSw13Down[i][j]);
		//			}
		//
		//			if (subSw14Down_org[j][i] != subSw14Down[i][j])
		//			{
		//				printf("subSw14Down_org error! ");
		//				printf("subSw14Down_org[%d][%d] = %d\tsubSw14Down[%d][%d] = %d\n", j, i, subSw14Down_org[j][i], i, j, subSw14Down[i][j]);
		//			}
		//
		//			if (subSw15Down_org[j][i] != subSw15Down[i][j])
		//			{
		//				printf("subSw15Down_org error! ");
		//				printf("subSw15Down_org[%d][%d] = %d\tsubSw15Down[%d][%d] = %d\n", j, i, subSw15Down_org[j][i], i, j, subSw15Down[i][j]);
		//			}
		//		}
		//	}
		//
		//	//check subSw_XX_org 
		//	for (int j = 0; j < 20; j++)
		//	{
		//		for (int i = 0; i < 28; i++)
		//		{
		//			if (subSw0_org[j][i] != subSw0[i][j])
		//			{
		//				printf("subSw0_org error! ");
		//				printf("subSw0_org[%d][%d] = %d\tsubSw0[%d][%d] = %d\n", j, i, subSw0_org[j][i], i, j, subSw0[i][j]);
		//			}
		//
		//			if (subSw1_org[j][i] != subSw1[i][j])
		//			{
		//				printf("subSw1_org error! ");
		//				printf("subSw1_org[%d][%d] = %d\tsubSw1[%d][%d] = %d\n", j, i, subSw1_org[j][i], i, j, subSw1[i][j]);
		//			}
		//
		//			if (subSw2_org[j][i] != subSw2[i][j])
		//			{
		//				printf("subSw2_org error! ");
		//				printf("subSw2_org[%d][%d] = %d\tsubSw2[%d][%d] = %d\n", j, i, subSw2_org[j][i], i, j, subSw2[i][j]);
		//			}
		//
		//
		//			if (subSw3_org[j][i] != subSw3[i][j])
		//			{
		//				printf("subSw3_org error! ");
		//				printf("subSw3_org[%d][%d] = %d\tsubSw3[%d][%d] = %d\n", j, i, subSw3_org[j][i], i, j, subSw3[i][j]);
		//			}
		//
		//			if (subSw4_org[j][i] != subSw4[i][j])
		//			{
		//				printf("subSw4_org error! ");
		//				printf("subSw4_org[%d][%d] = %d\tsubSw4[%d][%d] = %d\n", j, i, subSw4_org[j][i], i, j, subSw4[i][j]);
		//			}
		//
		//
		//			if (subSw5_org[j][i] != subSw5[i][j])
		//			{
		//				printf("subSw5_org error! ");
		//				printf("subSw5_org[%d][%d] = %d\tsubSw5[%d][%d] = %d\n", j, i, subSw5_org[j][i], i, j, subSw5[i][j]);
		//			}
		//
		//			if (subSw6_org[j][i] != subSw6[i][j])
		//			{
		//				printf("subSw6_org error! ");
		//				printf("subSw6_org[%d][%d] = %d\tsubSw6[%d][%d] = %d\n", j, i, subSw6_org[j][i], i, j, subSw6[i][j]);
		//			}
		//
		//
		//			if (subSw7_org[j][i] != subSw7[i][j])
		//			{
		//				printf("subSw7_org error! ");
		//				printf("subSw7_org[%d][%d] = %d\tsubSw7[%d][%d] = %d\n", j, i, subSw7_org[j][i], i, j, subSw7[i][j]);
		//			}
		//
		//			if (subSw8_org[j][i] != subSw8[i][j])
		//			{
		//				printf("subSw8_org error! ");
		//				printf("subSw8_org[%d][%d] = %d\tsubSw8[%d][%d] = %d\n", j, i, subSw8_org[j][i], i, j, subSw8[i][j]);
		//			}
		//
		//			if (subSw9_org[j][i] != subSw9[i][j])
		//			{
		//				printf("subSw9_org error! ");
		//				printf("subSw9_org[%d][%d] = %d\tsubSw9[%d][%d] = %d\n", j, i, subSw9_org[j][i], i, j, subSw9[i][j]);
		//			}
		//
		//			if (subSw10_org[j][i] != subSw10[i][j])
		//			{
		//				printf("subSw10_org error! ");
		//				printf("subSw10_org[%d][%d] = %d\tsubSw10[%d][%d] = %d\n", j, i, subSw10_org[j][i], i, j, subSw10[i][j]);
		//			}
		//
		//			if (subSw11_org[j][i] != subSw11[i][j])
		//			{
		//				printf("subSw11_org error! ");
		//				printf("subSw11_org[%d][%d] = %d\tsubSw11[%d][%d] = %d\n", j, i, subSw11_org[j][i], i, j, subSw11[i][j]);
		//			}
		//
		//			if (subSw12_org[j][i] != subSw12[i][j])
		//			{
		//				printf("subSw12_org error! ");
		//				printf("subSw12_org[%d][%d] = %d\tsubSw12[%d][%d] = %d\n", j, i, subSw12_org[j][i], i, j, subSw12[i][j]);
		//			}
		//
		//			if (subSw13_org[j][i] != subSw13[i][j])
		//			{
		//				printf("subSw13_org error! ");
		//				printf("subSw13_org[%d][%d] = %d\tsubSw13[%d][%d] = %d\n", j, i, subSw13_org[j][i], i, j, subSw13[i][j]);
		//			}
		//
		//			if (subSw14_org[j][i] != subSw14[i][j])
		//			{
		//				printf("subSw14_org error! ");
		//				printf("subSw14_org[%d][%d] = %d\tsubSw14[%d][%d] = %d\n", j, i, subSw14_org[j][i], i, j, subSw14[i][j]);
		//			}
		//
		//			if (subSw15_org[j][i] != subSw15[i][j])
		//			{
		//				printf("subSw15_org error! ");
		//				printf("subSw15_org[%d][%d] = %d\tsubSw15[%d][%d] = %d\n", j, i, subSw15_org[j][i], i, j, subSw15[i][j]);
		//			}
		//
		//		}
		//	}
		//
		//	//check subSw1_org 
		//	for (int j = 0; j < 20; j++)
		//	{
		//		for (int i = 0; i < 28; i++)
		//		{
		//			if (subSw1_org[j][i] != subSw1[i][j])
		//			{
		//				printf("subSw1_org error! ");
		//				printf("subSw1_org[%d][%d] = %d\tsubSw1[%d][%d] = %d\n", j, i, subSw1_org[j][i], i, j, subSw1[i][j]);
		//			}
		//		}
		//	}
	}

void constructSubWindowDoubleLv2(
	pel swLv2_org[SWH >> 2][SWW >> 2],

	pel subSw0_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw4_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw5_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw6_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw7_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw8_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw9_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw10_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw11_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw12_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw13_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw14_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw15_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)]

#if COARSE_SEARCH_DOUBLE_SPEED
	,
	pel subSw0Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw4Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw5Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw6Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw7Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw8Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw9Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw10Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw11Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw12Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw13Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw14Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw15Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)]
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED

	//,
	////========================================================================================================================
	//pel swLv2[SWW >> 2][SWH >> 2],
	//pel subSw0[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw4[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw5[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw6[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw7[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw8[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw9[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw10[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw11[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw12[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw13[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw14[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw15[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw4Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw5Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw6Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw7Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw8Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw9Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw10Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw11Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw12Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw13Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw14Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw15Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)]
)
{

#pragma HLS inline off

#if IME_PRAGMA_ON

#pragma HLS array_partition variable=swLv2_org complete dim=2

#pragma HLS array_partition variable=subSw0_org complete dim=2
#pragma HLS array_partition variable=subSw1_org complete dim=2
#pragma HLS array_partition variable=subSw2_org complete dim=2
#pragma HLS array_partition variable=subSw3_org complete dim=2
#pragma HLS array_partition variable=subSw4_org complete dim=2
#pragma HLS array_partition variable=subSw5_org complete dim=2
#pragma HLS array_partition variable=subSw6_org complete dim=2
#pragma HLS array_partition variable=subSw7_org complete dim=2
#pragma HLS array_partition variable=subSw8_org complete dim=2
#pragma HLS array_partition variable=subSw9_org complete dim=2
#pragma HLS array_partition variable=subSw10_org complete dim=2
#pragma HLS array_partition variable=subSw11_org complete dim=2
#pragma HLS array_partition variable=subSw12_org complete dim=2
#pragma HLS array_partition variable=subSw13_org complete dim=2
#pragma HLS array_partition variable=subSw14_org complete dim=2
#pragma HLS array_partition variable=subSw15_org complete dim=2

#if COARSE_SEARCH_DOUBLE_SPEED
#pragma HLS array_partition variable=subSw0Down_org complete dim=2
#pragma HLS array_partition variable=subSw1Down_org complete dim=2
#pragma HLS array_partition variable=subSw2Down_org complete dim=2
#pragma HLS array_partition variable=subSw3Down_org complete dim=2
#pragma HLS array_partition variable=subSw4Down_org complete dim=2
#pragma HLS array_partition variable=subSw5Down_org complete dim=2
#pragma HLS array_partition variable=subSw6Down_org complete dim=2
#pragma HLS array_partition variable=subSw7Down_org complete dim=2
#pragma HLS array_partition variable=subSw8Down_org complete dim=2
#pragma HLS array_partition variable=subSw9Down_org complete dim=2
#pragma HLS array_partition variable=subSw10Down_org complete dim=2
#pragma HLS array_partition variable=subSw11Down_org complete dim=2
#pragma HLS array_partition variable=subSw12Down_org complete dim=2
#pragma HLS array_partition variable=subSw13Down_org complete dim=2
#pragma HLS array_partition variable=subSw14Down_org complete dim=2
#pragma HLS array_partition variable=subSw15Down_org complete dim=2
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED

////======================================================================
//
//#pragma HLS array_partition variable=swLv2 complete dim=1
//#pragma HLS array_partition variable=subSw0 complete dim=1
//#pragma HLS array_partition variable=subSw1 complete dim=1
//#pragma HLS array_partition variable=subSw2 complete dim=1
//#pragma HLS array_partition variable=subSw3 complete dim=1
//#pragma HLS array_partition variable=subSw4 complete dim=1
//#pragma HLS array_partition variable=subSw5 complete dim=1
//#pragma HLS array_partition variable=subSw6 complete dim=1
//#pragma HLS array_partition variable=subSw7 complete dim=1
//#pragma HLS array_partition variable=subSw8 complete dim=1
//#pragma HLS array_partition variable=subSw9 complete dim=1
//#pragma HLS array_partition variable=subSw10 complete dim=1
//#pragma HLS array_partition variable=subSw11 complete dim=1
//#pragma HLS array_partition variable=subSw12 complete dim=1
//#pragma HLS array_partition variable=subSw13 complete dim=1
//#pragma HLS array_partition variable=subSw14 complete dim=1
//#pragma HLS array_partition variable=subSw15 complete dim=1
//
//#pragma HLS array_partition variable=subSw0Down complete dim=1
//#pragma HLS array_partition variable=subSw1Down complete dim=1
//#pragma HLS array_partition variable=subSw2Down complete dim=1
//#pragma HLS array_partition variable=subSw3Down complete dim=1
//#pragma HLS array_partition variable=subSw4Down complete dim=1
//#pragma HLS array_partition variable=subSw5Down complete dim=1
//#pragma HLS array_partition variable=subSw6Down complete dim=1
//#pragma HLS array_partition variable=subSw7Down complete dim=1
//#pragma HLS array_partition variable=subSw8Down complete dim=1
//#pragma HLS array_partition variable=subSw9Down complete dim=1
//#pragma HLS array_partition variable=subSw10Down complete dim=1
//#pragma HLS array_partition variable=subSw11Down complete dim=1
//#pragma HLS array_partition variable=subSw12Down complete dim=1
//#pragma HLS array_partition variable=subSw13Down complete dim=1
//#pragma HLS array_partition variable=subSw14Down complete dim=1
//#pragma HLS array_partition variable=subSw15Down complete dim=1

#endif
	//int loadY, loadX;
	U7 loadY, loadX;
#if 1//0

#if COARSE_SEARCH_DOUBLE_SPEED
	for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2) - 1))
		{
			for (loadX = 0; loadX < (MMEA_LEVEL2_SR_V >> 3); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw0_org[loadY][loadX] = swLv2_org[loadY][loadX];
			}

			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw0_org[loadY][loadX] = swLv2_org[loadY][loadX];
				subSw1_org[loadY][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY][loadX];
			}

			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw1_org[loadY][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY][loadX];

			}

			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw2_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY][loadX];
			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw3_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY][loadX];
			}
		}

		if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
		{
			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw0Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX] = swLv2_org[loadY][loadX];
			}
			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw1Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY][loadX];

			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw2Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY][loadX];
			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw3Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY][loadX];
			}
		}

	}

	for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
		{
			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw4_org[loadY][loadX] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
			}
			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw5_org[loadY][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];

			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw6_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw7_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
			}
		}

		if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
		{
			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw4Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
			}
			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw5Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];

			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw6Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw7Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
			}
		}

	}

	for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
		{
			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw8_org[loadY][loadX] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
			}
			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw9_org[loadY][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];

			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw10_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw11_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
			}
		}

		if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
		{
			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw8Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
			}
			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw9Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];

			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw10Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw11Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
			}
		}
	}

	for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
		{
			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw12_org[loadY][loadX] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
			}
			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw13_org[loadY][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];

			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw14_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw15_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
			}
		}

		if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
		{
			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw12Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
			}
			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw13Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];

			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw14Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw15Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
			}
		}
	}
#else

	for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
	{
	#if IME_PRAGMA_ON
	#pragma HLS pipeline
	#endif
		//if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2) - 1))
		//{
			for (loadX = 0; loadX < (MMEA_LEVEL2_SR_V >> 3); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw0_org[loadY][loadX] = swLv2_org[loadY][loadX];
			}

			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw0_org[loadY][loadX] = swLv2_org[loadY][loadX];
				subSw1_org[loadY][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY][loadX];
			}

			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw1_org[loadY][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY][loadX];

			}

			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw2_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY][loadX];
			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw3_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY][loadX];
			}
		//}

	//	if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
	//	{
	//		for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
	//		{
	//#if IME_PRAGMA_ON
	//#pragma HLS unroll
	//#endif
	//			subSw0Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX] = swLv2_org[loadY][loadX];
	//		}
	//		for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
	//		{
	//#if IME_PRAGMA_ON
	//#pragma HLS unroll
	//#endif
	//			subSw1Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY][loadX];

	//		}
	//		for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
	//		{
	//#if IME_PRAGMA_ON
	//#pragma HLS unroll
	//#endif
	//			subSw2Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY][loadX];
	//		}
	//		for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
	//		{
	//#if IME_PRAGMA_ON
	//#pragma HLS unroll
	//#endif
	//			subSw3Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY][loadX];
	//		}
	//	}

	}

	for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
	{
	#if IME_PRAGMA_ON
	#pragma HLS pipeline
	#endif
		//if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
		//{
			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw4_org[loadY][loadX] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
			}
			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw5_org[loadY][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];

			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw6_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw7_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
			}
		//}

	//	if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
	//	{
	//		for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
	//		{
	//#if IME_PRAGMA_ON
	//#pragma HLS unroll
	//#endif
	//			subSw4Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
	//		}
	//		for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
	//		{
	//#if IME_PRAGMA_ON
	//#pragma HLS unroll
	//#endif
	//			subSw5Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];

	//		}
	//		for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
	//		{
	//#if IME_PRAGMA_ON
	//#pragma HLS unroll
	//#endif
	//			subSw6Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
	//		}
	//		for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
	//		{
	//#if IME_PRAGMA_ON
	//#pragma HLS unroll
	//#endif
	//			subSw7Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + (MMEA_LEVEL2_SR_H >> 3)][loadX];
	//		}
	//	}

	}

	for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
	{
	#if IME_PRAGMA_ON
	#pragma HLS pipeline
	#endif
		//if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
		//{
			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw8_org[loadY][loadX] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
			}
			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw9_org[loadY][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];

			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw10_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw11_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
			}
		//}

	//	if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
	//	{
	//		for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
	//		{
	//#if IME_PRAGMA_ON
	//#pragma HLS unroll
	//#endif
	//			subSw8Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
	//		}
	//		for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
	//		{
	//#if IME_PRAGMA_ON
	//#pragma HLS unroll
	//#endif
	//			subSw9Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];

	//		}
	//		for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
	//		{
	//#if IME_PRAGMA_ON
	//#pragma HLS unroll
	//#endif
	//			subSw10Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
	//		}
	//		for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
	//		{
	//#if IME_PRAGMA_ON
	//#pragma HLS unroll
	//#endif
	//			subSw11Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)][loadX];
	//		}
	//	}
	}

	for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
	{
	#if IME_PRAGMA_ON
	#pragma HLS pipeline
	#endif
		//if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
		//{
			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw12_org[loadY][loadX] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
			}
			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw13_org[loadY][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];

			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw14_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
			}
			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw15_org[loadY][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
			}
		//}

	//	if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
	//	{
	//		for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
	//		{
	//#if IME_PRAGMA_ON
	//#pragma HLS unroll
	//#endif
	//			subSw12Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
	//		}
	//		for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
	//		{
	//#if IME_PRAGMA_ON
	//#pragma HLS unroll
	//#endif
	//			subSw13Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - (MMEA_LEVEL2_SR_V >> 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];

	//		}
	//		for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
	//		{
	//#if IME_PRAGMA_ON
	//#pragma HLS unroll
	//#endif
	//			subSw14Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
	//		}
	//		for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
	//		{
	//#if IME_PRAGMA_ON
	//#pragma HLS unroll
	//#endif
	//			subSw15Down_org[loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)][loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)] = swLv2_org[loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)][loadX];
	//		}
	//	}
	}

#endif	// #if COARSE_SEARCH_DOUBLE_SPEED

#else

	for (loadY = 0; loadY < 24; loadY++)
	{
	#if IME_PRAGMA_ON
	#pragma HLS pipeline
	#endif
#if 0//1
		if (loadY <= 19)
		{
			for (loadX = 0; loadX < 28; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw0_org[loadY][loadX] = swLv2_org[loadY][loadX];
			}


			for (loadX = 12; loadX < 40; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw1_org[loadY][loadX - 12] = swLv2_org[loadY][loadX];

			}

			for (loadX = 24; loadX < 52; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw2_org[loadY][loadX - 24] = swLv2_org[loadY][loadX];
			}
			for (loadX = 36; loadX < 64; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw3_org[loadY][loadX - 36] = swLv2_org[loadY][loadX];
			}
		}
#else

		if (loadY <= 19)
		{
			for (loadX = 0; loadX < 12; loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw0_org[loadY][loadX] = swLv2_org[loadY][loadX];
			}

			for (loadX = 12; loadX < 24; loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw0_org[loadY][loadX] = swLv2_org[loadY][loadX];
				subSw1_org[loadY][loadX - 12] = swLv2_org[loadY][loadX];
			}

			for (loadX = 24; loadX < 28; loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw0_org[loadY][loadX] = swLv2_org[loadY][loadX];
				subSw1_org[loadY][loadX - 12] = swLv2_org[loadY][loadX];
				subSw2_org[loadY][loadX - 24] = swLv2_org[loadY][loadX];
			}


			for (loadX = 28; loadX < 36; loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw1_org[loadY][loadX - 12] = swLv2_org[loadY][loadX];
				subSw2_org[loadY][loadX - 24] = swLv2_org[loadY][loadX];

			}

			for (loadX = 36; loadX < 40; loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw1_org[loadY][loadX - 12] = swLv2_org[loadY][loadX];
				subSw2_org[loadY][loadX - 24] = swLv2_org[loadY][loadX];
				subSw3_org[loadY][loadX - 36] = swLv2_org[loadY][loadX];

			}

			for (loadX = 40; loadX < 52; loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw2_org[loadY][loadX - 24] = swLv2_org[loadY][loadX];
				subSw3_org[loadY][loadX - 36] = swLv2_org[loadY][loadX];
			}
			for (loadX = 52; loadX < 64; loadX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				subSw3_org[loadY][loadX - 36] = swLv2_org[loadY][loadX];
			}
		}

#endif

		if (loadY >= 4)
		{
			for (loadX = 0; loadX < 28; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw0Down_org[loadY - 4][loadX] = swLv2_org[loadY][loadX];
			}
			for (loadX = 12; loadX < 40; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw1Down_org[loadY - 4][loadX - 12] = swLv2_org[loadY][loadX];

			}
			for (loadX = 24; loadX < 52; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw2Down_org[loadY - 4][loadX - 24] = swLv2_org[loadY][loadX];
			}
			for (loadX = 36; loadX < 64; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw3Down_org[loadY - 4][loadX - 36] = swLv2_org[loadY][loadX];
			}
		}

	}

	for (loadY = 0; loadY < 24; loadY++)
	{
	#if IME_PRAGMA_ON
	#pragma HLS pipeline
	#endif
		if (loadY <= 19)
		{
			for (loadX = 0; loadX < 28; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw4_org[loadY][loadX] = swLv2_org[loadY + 8][loadX];
			}
			for (loadX = 12; loadX < 40; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw5_org[loadY][loadX - 12] = swLv2_org[loadY + 8][loadX];

			}
			for (loadX = 24; loadX < 52; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw6_org[loadY][loadX - 24] = swLv2_org[loadY + 8][loadX];
			}
			for (loadX = 36; loadX < 64; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw7_org[loadY][loadX - 36] = swLv2_org[loadY + 8][loadX];
			}
		}

		if (loadY >= 4)
		{
			for (loadX = 0; loadX < 28; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw4Down_org[loadY - 4][loadX] = swLv2_org[loadY + 8][loadX];
			}
			for (loadX = 12; loadX < 40; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw5Down_org[loadY - 4][loadX - 12] = swLv2_org[loadY + 8][loadX];

			}
			for (loadX = 24; loadX < 52; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw6Down_org[loadY - 4][loadX - 24] = swLv2_org[loadY + 8][loadX];
			}
			for (loadX = 36; loadX < 64; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw7Down_org[loadY - 4][loadX - 36] = swLv2_org[loadY + 8][loadX];
			}
		}

	}

	for (loadY = 0; loadY < 24; loadY++)
	{
	#if IME_PRAGMA_ON
	#pragma HLS pipeline
	#endif
		if (loadY <= 19)
		{
			for (loadX = 0; loadX < 28; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw8_org[loadY][loadX] = swLv2_org[loadY + 16][loadX];
			}
			for (loadX = 12; loadX < 40; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw9_org[loadY][loadX - 12] = swLv2_org[loadY + 16][loadX];

			}

			for (loadX = 24; loadX < 52; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw10_org[loadY][loadX - 24] = swLv2_org[loadY + 16][loadX];
			}

			for (loadX = 36; loadX < 64; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw11_org[loadY][loadX - 36] = swLv2_org[loadY + 16][loadX];
			}
		}


		if (loadY >= 4)
		{
			for (loadX = 0; loadX < 28; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw8Down_org[loadY - 4][loadX] = swLv2_org[loadY + 16][loadX];
			}
			for (loadX = 12; loadX < 40; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw9Down_org[loadY - 4][loadX - 12] = swLv2_org[loadY + 16][loadX];

			}
			for (loadX = 24; loadX < 52; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw10Down_org[loadY - 4][loadX - 24] = swLv2_org[loadY + 16][loadX];
			}
			for (loadX = 36; loadX < 64; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw11Down_org[loadY - 4][loadX - 36] = swLv2_org[loadY + 16][loadX];
			}
		}
	}

	for (loadY = 0; loadY < 24; loadY++)
	{
	#if IME_PRAGMA_ON
	#pragma HLS pipeline
	#endif
		if (loadY <= 19)
		{
			for (loadX = 0; loadX < 28; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw12_org[loadY][loadX] = swLv2_org[loadY + 24][loadX];
			}
			for (loadX = 12; loadX < 40; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw13_org[loadY][loadX - 12] = swLv2_org[loadY + 24][loadX];

			}
			for (loadX = 24; loadX < 52; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw14_org[loadY][loadX - 24] = swLv2_org[loadY + 24][loadX];
			}
			for (loadX = 36; loadX < 64; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw15_org[loadY][loadX - 36] = swLv2_org[loadY + 24][loadX];
			}
		}

		if (loadY >= 4)
		{
			for (loadX = 0; loadX < 28; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw12Down_org[loadY - 4][loadX] = swLv2_org[loadY + 24][loadX];
			}
			for (loadX = 12; loadX < 40; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw13Down_org[loadY - 4][loadX - 12] = swLv2_org[loadY + 24][loadX];

			}
			for (loadX = 24; loadX < 52; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw14Down_org[loadY - 4][loadX - 24] = swLv2_org[loadY + 24][loadX];
			}
			for (loadX = 36; loadX < 64; loadX++)
			{
	#if IME_PRAGMA_ON
	#pragma HLS unroll
	#endif
				subSw15Down_org[loadY - 4][loadX - 36] = swLv2_org[loadY + 24][loadX];
			}
		}
	}

#endif
//	//======================================================================================================
//	for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
//	{
//#if IME_PRAGMA_ON
//#pragma HLS pipeline
//#endif
//		if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
//		{
//			for (loadX = 0; loadX < (MMEA_LEVEL2_SR_V >> 3); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw0[loadX][loadY] = swLv2[loadX][loadY];
//			}
//
//			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw0[loadX][loadY] = swLv2[loadX][loadY];
//				subSw1[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY] = swLv2[loadX][loadY];
//			}
//
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw1[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY] = swLv2[loadX][loadY];
//
//			}
//
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw2[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)][loadY] = swLv2[loadX][loadY];
//			}
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw3[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)][loadY] = swLv2[loadX][loadY];
//			}
//		}
//
//		if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
//		{
//			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw0Down[loadX][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY];
//			}
//			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw1Down[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY];
//
//			}
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw2Down[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY];
//			}
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw3Down[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY];
//			}
//		}
//
//	}
//
//
//
//	for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
//	{
//#if IME_PRAGMA_ON
//#pragma HLS pipeline
//#endif
//		if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
//		{
//			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw4[loadX][loadY] = swLv2[loadX][loadY + (MMEA_LEVEL2_SR_H >> 3)];
//			}
//			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw5[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY] = swLv2[loadX][loadY + (MMEA_LEVEL2_SR_H >> 3)];
//
//			}
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw6[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)][loadY] = swLv2[loadX][loadY + (MMEA_LEVEL2_SR_H >> 3)];
//			}
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw7[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)][loadY] = swLv2[loadX][loadY + (MMEA_LEVEL2_SR_H >> 3)];
//			}
//		}
//
//		if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
//		{
//			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw4Down[loadX][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + (MMEA_LEVEL2_SR_H >> 3)];
//			}
//			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw5Down[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + (MMEA_LEVEL2_SR_H >> 3)];
//
//			}
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw6Down[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + (MMEA_LEVEL2_SR_H >> 3)];
//			}
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw7Down[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + (MMEA_LEVEL2_SR_H >> 3)];
//			}
//		}
//
//	}
//
//	for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
//	{
//#if IME_PRAGMA_ON
//#pragma HLS pipeline
//#endif
//		if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
//		{
//			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw8[loadX][loadY] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)];
//			}
//			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw9[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)];
//
//			}
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw10[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)][loadY] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)];
//			}
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw11[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)][loadY] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)];
//			}
//		}
//
//		if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
//		{
//			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw8Down[loadX][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)];
//			}
//			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw9Down[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)];
//
//			}
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw10Down[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)];
//			}
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw11Down[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 2)];
//			}
//		}
//	}
//
//
//
//	for (loadY = 0; loadY < ((MMEA_LEVEL2_SR_H >> 3) + (MAX_CU_H >> 2)); loadY++)
//	{
//#if IME_PRAGMA_ON
//#pragma HLS pipeline
//#endif
//		if (loadY <= (((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2) - 1))
//		{
//			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw12[loadX][loadY] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)];
//			}
//			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw13[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)];
//
//			}
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw14[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)][loadY] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)];
//			}
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw15[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)][loadY] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)];
//			}
//		}
//
//		if (loadY >= ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED))
//		{
//			for (loadX = 0; loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw12Down[loadX][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)];
//			}
//			for (loadX = (MMEA_LEVEL2_SR_V >> 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw13Down[loadX - (MMEA_LEVEL2_SR_V >> 3)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)];
//
//			}
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 2); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 2 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw14Down[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 2)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)];
//			}
//			for (loadX = ((MMEA_LEVEL2_SR_V >> 3) * 3); loadX < ((MMEA_LEVEL2_SR_V >> 3) * 3 + (MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)); loadX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				subSw15Down[loadX - ((MMEA_LEVEL2_SR_V >> 3) * 3)][loadY - ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)] = swLv2[loadX][loadY + ((MMEA_LEVEL2_SR_H >> 3) * 3)];
//			}
//		}
//	}
//
//	//check subSw1_org subSw1_org
//	for (int j = 0; j < SWH >> 2; j++)
//	{
//		for (int i = 0; i < SWW >> 2; i++)
//		{
//			if (swLv2_org[j][i] != swLv2[i][j])
//			{
//				printf("swLv2_org error! ");
//				printf("swLv2_org[%d][%d] = %d\tswLv2[%d][%d] = %d\n", j, i, swLv2_org[j][i], i, j, swLv2[i][j]);
//			}
//		}
//	}
//
//	// check subSw_XX_Down_org
//	for (int j = 0; j < 20; j++)
//	{
//		for (int i = 0; i < 28; i++)
//		{
//			if (subSw0Down_org[j][i] != subSw0Down[i][j])
//			{
//				printf("subSw0Down_org error! ");
//				printf("subSw0Down_org[%d][%d] = %d\tsubSw0Down[%d][%d] = %d\n", j, i, subSw0Down_org[j][i], i, j, subSw0Down[i][j]);
//			}
//
//			if (subSw1Down_org[j][i] != subSw1Down[i][j])
//			{
//				printf("subSw1Down_org error! ");
//				printf("subSw1Down_org[%d][%d] = %d\tsubSw1Down[%d][%d] = %d\n", j, i, subSw1Down_org[j][i], i, j, subSw1Down[i][j]);
//			}
//
//			if (subSw2Down_org[j][i] != subSw2Down[i][j])
//			{
//				printf("subSw2Down_org error! ");
//				printf("subSw2Down_org[%d][%d] = %d\tsubSw2Down[%d][%d] = %d\n", j, i, subSw2Down_org[j][i], i, j, subSw2Down[i][j]);
//			}
//
//			if (subSw3Down_org[j][i] != subSw3Down[i][j])
//			{
//				printf("subSw3Down_org error! ");
//				printf("subSw3Down_org[%d][%d] = %d\tsubSw3Down[%d][%d] = %d\n", j, i, subSw3Down_org[j][i], i, j, subSw3Down[i][j]);
//			}
//
//			if (subSw4Down_org[j][i] != subSw4Down[i][j])
//			{
//				printf("subSw4Down_org error! ");
//				printf("subSw4Down_org[%d][%d] = %d\tsubSw4Down[%d][%d] = %d\n", j, i, subSw4_org[j][i], i, j, subSw4Down[i][j]);
//			}
//
//			if (subSw5Down_org[j][i] != subSw5Down[i][j])
//			{
//				printf("subSw5Down_org error! ");
//				printf("subSw5Down_org[%d][%d] = %d\tsubSw5Down[%d][%d] = %d\n", j, i, subSw5Down_org[j][i], i, j, subSw5Down[i][j]);
//			}
//
//			if (subSw6Down_org[j][i] != subSw6Down[i][j])
//			{
//				printf("subSw6Down_org error! ");
//				printf("subSw6Down_org[%d][%d] = %d\tsubSw6Down[%d][%d] = %d\n", j, i, subSw6Down_org[j][i], i, j, subSw6Down[i][j]);
//			}
//
//			if (subSw7Down_org[j][i] != subSw7Down[i][j])
//			{
//				printf("subSw7Down_org error! ");
//				printf("subSw7Down_org[%d][%d] = %d\tsubSw7Down[%d][%d] = %d\n", j, i, subSw7Down_org[j][i], i, j, subSw7Down[i][j]);
//			}
//
//			if (subSw8Down_org[j][i] != subSw8Down[i][j])
//			{
//				printf("subSw8Down_org error! ");
//				printf("subSw8Down_org[%d][%d] = %d\tsubSw8Down[%d][%d] = %d\n", j, i, subSw8Down_org[j][i], i, j, subSw8Down[i][j]);
//			}
//
//			if (subSw9Down_org[j][i] != subSw9Down[i][j])
//			{
//				printf("subSw9Down_org error! ");
//				printf("subSw9Down_org[%d][%d] = %d\tsubSw9Down[%d][%d] = %d\n", j, i, subSw9Down_org[j][i], i, j, subSw9Down[i][j]);
//			}
//
//			if (subSw10Down_org[j][i] != subSw10Down[i][j])
//			{
//				printf("subSw10Down_org error! ");
//				printf("subSw10Down_org[%d][%d] = %d\tsubSw10Down[%d][%d] = %d\n", j, i, subSw10Down_org[j][i], i, j, subSw10Down[i][j]);
//			}
//
//			if (subSw11Down_org[j][i] != subSw11Down[i][j])
//			{
//				printf("subSw11Down_org error! ");
//				printf("subSw11Down_org[%d][%d] = %d\tsubSw11Down[%d][%d] = %d\n", j, i, subSw11Down_org[j][i], i, j, subSw11Down[i][j]);
//			}
//
//			if (subSw12Down_org[j][i] != subSw12Down[i][j])
//			{
//				printf("subSw12Down_org error! ");
//				printf("subSw12Down_org[%d][%d] = %d\tsubSw12Down[%d][%d] = %d\n", j, i, subSw12Down_org[j][i], i, j, subSw12Down[i][j]);
//			}
//
//			if (subSw13Down_org[j][i] != subSw13Down[i][j])
//			{
//				printf("subSw13Down_org error! ");
//				printf("subSw13Down_org[%d][%d] = %d\tsubSw13Down[%d][%d] = %d\n", j, i, subSw13Down_org[j][i], i, j, subSw13Down[i][j]);
//			}
//
//			if (subSw14Down_org[j][i] != subSw14Down[i][j])
//			{
//				printf("subSw14Down_org error! ");
//				printf("subSw14Down_org[%d][%d] = %d\tsubSw14Down[%d][%d] = %d\n", j, i, subSw14Down_org[j][i], i, j, subSw14Down[i][j]);
//			}
//
//			if (subSw15Down_org[j][i] != subSw15Down[i][j])
//			{
//				printf("subSw15Down_org error! ");
//				printf("subSw15Down_org[%d][%d] = %d\tsubSw15Down[%d][%d] = %d\n", j, i, subSw15Down_org[j][i], i, j, subSw15Down[i][j]);
//			}
//		}
//	}
//
//	//check subSw_XX_org 
//	for (int j = 0; j < 20; j++)
//	{
//		for (int i = 0; i < 28; i++)
//		{
//			if (subSw0_org[j][i] != subSw0[i][j])
//			{
//				printf("subSw0_org error! ");
//				printf("subSw0_org[%d][%d] = %d\tsubSw0[%d][%d] = %d\n", j, i, subSw0_org[j][i], i, j, subSw0[i][j]);
//			}
//
//			if (subSw1_org[j][i] != subSw1[i][j])
//			{
//				printf("subSw1_org error! ");
//				printf("subSw1_org[%d][%d] = %d\tsubSw1[%d][%d] = %d\n", j, i, subSw1_org[j][i], i, j, subSw1[i][j]);
//			}
//
//			if (subSw2_org[j][i] != subSw2[i][j])
//			{
//				printf("subSw2_org error! ");
//				printf("subSw2_org[%d][%d] = %d\tsubSw2[%d][%d] = %d\n", j, i, subSw2_org[j][i], i, j, subSw2[i][j]);
//			}
//
//
//			if (subSw3_org[j][i] != subSw3[i][j])
//			{
//				printf("subSw3_org error! ");
//				printf("subSw3_org[%d][%d] = %d\tsubSw3[%d][%d] = %d\n", j, i, subSw3_org[j][i], i, j, subSw3[i][j]);
//			}
//
//			if (subSw4_org[j][i] != subSw4[i][j])
//			{
//				printf("subSw4_org error! ");
//				printf("subSw4_org[%d][%d] = %d\tsubSw4[%d][%d] = %d\n", j, i, subSw4_org[j][i], i, j, subSw4[i][j]);
//			}
//
//
//			if (subSw5_org[j][i] != subSw5[i][j])
//			{
//				printf("subSw5_org error! ");
//				printf("subSw5_org[%d][%d] = %d\tsubSw5[%d][%d] = %d\n", j, i, subSw5_org[j][i], i, j, subSw5[i][j]);
//			}
//
//			if (subSw6_org[j][i] != subSw6[i][j])
//			{
//				printf("subSw6_org error! ");
//				printf("subSw6_org[%d][%d] = %d\tsubSw6[%d][%d] = %d\n", j, i, subSw6_org[j][i], i, j, subSw6[i][j]);
//			}
//
//
//			if (subSw7_org[j][i] != subSw7[i][j])
//			{
//				printf("subSw7_org error! ");
//				printf("subSw7_org[%d][%d] = %d\tsubSw7[%d][%d] = %d\n", j, i, subSw7_org[j][i], i, j, subSw7[i][j]);
//			}
//
//			if (subSw8_org[j][i] != subSw8[i][j])
//			{
//				printf("subSw8_org error! ");
//				printf("subSw8_org[%d][%d] = %d\tsubSw8[%d][%d] = %d\n", j, i, subSw8_org[j][i], i, j, subSw8[i][j]);
//			}
//
//			if (subSw9_org[j][i] != subSw9[i][j])
//			{
//				printf("subSw9_org error! ");
//				printf("subSw9_org[%d][%d] = %d\tsubSw9[%d][%d] = %d\n", j, i, subSw9_org[j][i], i, j, subSw9[i][j]);
//			}
//
//			if (subSw10_org[j][i] != subSw10[i][j])
//			{
//				printf("subSw10_org error! ");
//				printf("subSw10_org[%d][%d] = %d\tsubSw10[%d][%d] = %d\n", j, i, subSw10_org[j][i], i, j, subSw10[i][j]);
//			}
//
//			if (subSw11_org[j][i] != subSw11[i][j])
//			{
//				printf("subSw11_org error! ");
//				printf("subSw11_org[%d][%d] = %d\tsubSw11[%d][%d] = %d\n", j, i, subSw11_org[j][i], i, j, subSw11[i][j]);
//			}
//
//			if (subSw12_org[j][i] != subSw12[i][j])
//			{
//				printf("subSw12_org error! ");
//				printf("subSw12_org[%d][%d] = %d\tsubSw12[%d][%d] = %d\n", j, i, subSw12_org[j][i], i, j, subSw12[i][j]);
//			}
//
//			if (subSw13_org[j][i] != subSw13[i][j])
//			{
//				printf("subSw13_org error! ");
//				printf("subSw13_org[%d][%d] = %d\tsubSw13[%d][%d] = %d\n", j, i, subSw13_org[j][i], i, j, subSw13[i][j]);
//			}
//
//			if (subSw14_org[j][i] != subSw14[i][j])
//			{
//				printf("subSw14_org error! ");
//				printf("subSw14_org[%d][%d] = %d\tsubSw14[%d][%d] = %d\n", j, i, subSw14_org[j][i], i, j, subSw14[i][j]);
//			}
//
//			if (subSw15_org[j][i] != subSw15[i][j])
//			{
//				printf("subSw15_org error! ");
//				printf("subSw15_org[%d][%d] = %d\tsubSw15[%d][%d] = %d\n", j, i, subSw15_org[j][i], i, j, subSw15[i][j]);
//			}
//
//		}
//	}
//
//	//check subSw1_org 
//	for (int j = 0; j < 20; j++)
//	{
//		for (int i = 0; i < 28; i++)
//		{
//			if (subSw1_org[j][i] != subSw1[i][j])
//			{
//				printf("subSw1_org error! ");
//				printf("subSw1_org[%d][%d] = %d\tsubSw1[%d][%d] = %d\n", j, i, subSw1_org[j][i], i, j, subSw1[i][j]);
//			}
//		}
//	}
}

void copyOrgDoubleLv2(
	pel org_org[MAX_CU_H >> 2][MAX_CU_W >> 2],

	pel orgCp0_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp4_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp5_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp6_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp7_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp8_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp9_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp10_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp11_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp12_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp13_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp14_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp15_org[MAX_CU_H >> 2][MAX_CU_W >> 2]
#if COARSE_SEARCH_DOUBLE_SPEED
	,
	pel orgCp0Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp4Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp5Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp6Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp7Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp8Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp9Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp10Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp11Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp12Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp13Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp14Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp15Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2]
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED

	//,
	////=====================================================
	//pel org[16][16], pel orgCp0[16][16], pel orgCp1[16][16], pel orgCp2[16][16], pel orgCp3[16][16], pel orgCp4[16][16], pel orgCp5[16][16], pel orgCp6[16][16], pel orgCp7[16][16], pel orgCp8[16][16]
	//, pel orgCp9[16][16], pel orgCp10[16][16], pel orgCp11[16][16], pel orgCp12[16][16], pel orgCp13[16][16], pel orgCp14[16][16], pel orgCp15[16][16], pel orgCp0Down[16][16], pel orgCp1Down[16][16], pel orgCp2Down[16][16], pel orgCp3Down[16][16], pel orgCp4Down[16][16], pel orgCp5Down[16][16], pel orgCp6Down[16][16], pel orgCp7Down[16][16], pel orgCp8Down[16][16]
	//, pel orgCp9Down[16][16], pel orgCp10Down[16][16], pel orgCp11Down[16][16], pel orgCp12Down[16][16], pel orgCp13Down[16][16], pel orgCp14Down[16][16], pel orgCp15Down[16][16]
)
{

#pragma HLS inline off

#if IME_PRAGMA_ON

#pragma HLS ARRAY_PARTITION variable=org_org complete dim=2

#pragma HLS array_partition variable=orgCp0_org complete dim=2
#pragma HLS array_partition variable=orgCp1_org complete dim=2
#pragma HLS array_partition variable=orgCp2_org complete dim=2
#pragma HLS array_partition variable=orgCp3_org complete dim=2
#pragma HLS array_partition variable=orgCp4_org complete dim=2
#pragma HLS array_partition variable=orgCp5_org complete dim=2
#pragma HLS array_partition variable=orgCp6_org complete dim=2
#pragma HLS array_partition variable=orgCp7_org complete dim=2
#pragma HLS array_partition variable=orgCp8_org complete dim=2
#pragma HLS array_partition variable=orgCp9_org complete dim=2
#pragma HLS array_partition variable=orgCp10_org complete dim=2
#pragma HLS array_partition variable=orgCp11_org complete dim=2
#pragma HLS array_partition variable=orgCp12_org complete dim=2
#pragma HLS array_partition variable=orgCp13_org complete dim=2
#pragma HLS array_partition variable=orgCp14_org complete dim=2
#pragma HLS array_partition variable=orgCp15_org complete dim=2

#if COARSE_SEARCH_DOUBLE_SPEED
#pragma HLS array_partition variable=orgCp0Down_org complete dim=2
#pragma HLS array_partition variable=orgCp1Down_org complete dim=2
#pragma HLS array_partition variable=orgCp2Down_org complete dim=2
#pragma HLS array_partition variable=orgCp3Down_org complete dim=2
#pragma HLS array_partition variable=orgCp4Down_org complete dim=2
#pragma HLS array_partition variable=orgCp5Down_org complete dim=2
#pragma HLS array_partition variable=orgCp6Down_org complete dim=2
#pragma HLS array_partition variable=orgCp7Down_org complete dim=2
#pragma HLS array_partition variable=orgCp8Down_org complete dim=2
#pragma HLS array_partition variable=orgCp9Down_org complete dim=2
#pragma HLS array_partition variable=orgCp10Down_org complete dim=2
#pragma HLS array_partition variable=orgCp11Down_org complete dim=2
#pragma HLS array_partition variable=orgCp12Down_org complete dim=2
#pragma HLS array_partition variable=orgCp13Down_org complete dim=2
#pragma HLS array_partition variable=orgCp14Down_org complete dim=2
#pragma HLS array_partition variable=orgCp15Down_org complete dim=2
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED

//	//=====================================================
//
//#pragma HLS ARRAY_PARTITION variable=org cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp0 cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp1 cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp2 cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp3 cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp4 cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp5 cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp6 cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp7 cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp8 cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp9 cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp10 cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp11 cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp12 cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp13 cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp14 cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp15 cyclic factor=16 dim=1
//
//#pragma HLS ARRAY_PARTITION variable=orgCp0Down cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp1Down cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp2Down cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp3Down cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp4Down cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp5Down cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp6Down cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp7Down cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp8Down cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp9Down cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp10Down cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp11Down cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp12Down cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp13Down cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp14Down cyclic factor=16 dim=1
//#pragma HLS ARRAY_PARTITION variable=orgCp15Down cyclic factor=16 dim=1
#endif
	U5 loadY, loadX;

	for (loadY = 0; loadY < 16; loadY++) 
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (loadX = 0; loadX < 16; loadX++) 
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			orgCp0_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp1_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp2_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp3_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp4_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp5_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp6_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp7_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp8_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp9_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp10_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp11_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp12_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp13_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp14_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp15_org[loadY][loadX] = org_org[loadY][loadX];
#if COARSE_SEARCH_DOUBLE_SPEED
			orgCp0Down_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp1Down_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp2Down_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp3Down_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp4Down_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp5Down_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp6Down_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp7Down_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp8Down_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp9Down_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp10Down_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp11Down_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp12Down_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp13Down_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp14Down_org[loadY][loadX] = org_org[loadY][loadX];
			orgCp15Down_org[loadY][loadX] = org_org[loadY][loadX];
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED

		}
	}

//	for (loadY = 0; loadY < 16; loadY++) {
//#if IME_PRAGMA_ON
//#pragma HLS pipeline
//#endif
//		for (loadX = 0; loadX < 16; loadX++) {
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//			orgCp0[loadX][loadY] = org[loadX][loadY];
//			orgCp1[loadX][loadY] = org[loadX][loadY];
//			orgCp2[loadX][loadY] = org[loadX][loadY];
//			orgCp3[loadX][loadY] = org[loadX][loadY];
//			orgCp4[loadX][loadY] = org[loadX][loadY];
//			orgCp5[loadX][loadY] = org[loadX][loadY];
//			orgCp6[loadX][loadY] = org[loadX][loadY];
//			orgCp7[loadX][loadY] = org[loadX][loadY];
//			orgCp8[loadX][loadY] = org[loadX][loadY];
//			orgCp9[loadX][loadY] = org[loadX][loadY];
//			orgCp10[loadX][loadY] = org[loadX][loadY];
//			orgCp11[loadX][loadY] = org[loadX][loadY];
//			orgCp12[loadX][loadY] = org[loadX][loadY];
//			orgCp13[loadX][loadY] = org[loadX][loadY];
//			orgCp14[loadX][loadY] = org[loadX][loadY];
//			orgCp15[loadX][loadY] = org[loadX][loadY];
//
//			orgCp0Down[loadX][loadY] = org[loadX][loadY];
//			orgCp1Down[loadX][loadY] = org[loadX][loadY];
//			orgCp2Down[loadX][loadY] = org[loadX][loadY];
//			orgCp3Down[loadX][loadY] = org[loadX][loadY];
//			orgCp4Down[loadX][loadY] = org[loadX][loadY];
//			orgCp5Down[loadX][loadY] = org[loadX][loadY];
//			orgCp6Down[loadX][loadY] = org[loadX][loadY];
//			orgCp7Down[loadX][loadY] = org[loadX][loadY];
//			orgCp8Down[loadX][loadY] = org[loadX][loadY];
//			orgCp9Down[loadX][loadY] = org[loadX][loadY];
//			orgCp10Down[loadX][loadY] = org[loadX][loadY];
//			orgCp11Down[loadX][loadY] = org[loadX][loadY];
//			orgCp12Down[loadX][loadY] = org[loadX][loadY];
//			orgCp13Down[loadX][loadY] = org[loadX][loadY];
//			orgCp14Down[loadX][loadY] = org[loadX][loadY];
//			orgCp15Down[loadX][loadY] = org[loadX][loadY];
//		}
//	}

}


void constructRefWindowDoubleLv2(
	pel swLv2_org[SWH >> 2][SWW >> 2],
	pel orgLv2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],

	pel orgCp0_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp4_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp5_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp6_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp7_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp8_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp9_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp10_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp11_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp12_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp13_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp14_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp15_org[MAX_CU_H >> 2][MAX_CU_W >> 2],

	pel subSw0_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw4_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw5_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw6_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw7_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw8_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw9_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw10_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw11_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw12_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw13_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw14_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw15_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)]

#if COARSE_SEARCH_DOUBLE_SPEED
	,
	pel orgCp0Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp4Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp5Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp6Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp7Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp8Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp9Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp10Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp11Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp12Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp13Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp14Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp15Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],

	pel subSw0Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw4Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw5Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw6Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw7Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw8Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw9Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw10Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw11Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw12Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw13Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw14Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw15Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED



	//,
	////=========================================================================================================================================
	//pel swLv2[SWW >> 2][SWH >> 2],
	//pel orgLv2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp4[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp5[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp6[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp7[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp8[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp9[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp10[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp11[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp12[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp13[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp14[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp15[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp4Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp5Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp6Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp7Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp8Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp9Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp10Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp11Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp12Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp13Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp14Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp15Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel subSw0[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw4[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw5[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw6[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw7[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw8[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw9[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw10[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw11[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw12[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw13[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw14[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw15[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw4Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw5Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw6Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw7Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw8Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw9Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw10Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw11Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw12Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw13Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw14Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw15Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)]
)
{

#pragma HLS inline off

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON

#pragma HLS array_partition variable=swLv2_org complete dim=2
#pragma HLS array_partition variable=orgLv2_org complete dim=2

#pragma HLS array_partition variable=orgCp0_org complete dim=2
#pragma HLS array_partition variable=orgCp1_org complete dim=2
#pragma HLS array_partition variable=orgCp2_org complete dim=2
#pragma HLS array_partition variable=orgCp3_org complete dim=2
#pragma HLS array_partition variable=orgCp4_org complete dim=2
#pragma HLS array_partition variable=orgCp5_org complete dim=2
#pragma HLS array_partition variable=orgCp6_org complete dim=2
#pragma HLS array_partition variable=orgCp7_org complete dim=2
#pragma HLS array_partition variable=orgCp8_org complete dim=2
#pragma HLS array_partition variable=orgCp9_org complete dim=2
#pragma HLS array_partition variable=orgCp10_org complete dim=2
#pragma HLS array_partition variable=orgCp11_org complete dim=2
#pragma HLS array_partition variable=orgCp12_org complete dim=2
#pragma HLS array_partition variable=orgCp13_org complete dim=2
#pragma HLS array_partition variable=orgCp14_org complete dim=2
#pragma HLS array_partition variable=orgCp15_org complete dim=2

#pragma HLS array_partition variable=subSw0_org complete dim=2
#pragma HLS array_partition variable=subSw1_org complete dim=2
#pragma HLS array_partition variable=subSw2_org complete dim=2
#pragma HLS array_partition variable=subSw3_org complete dim=2
#pragma HLS array_partition variable=subSw4_org complete dim=2
#pragma HLS array_partition variable=subSw5_org complete dim=2
#pragma HLS array_partition variable=subSw6_org complete dim=2
#pragma HLS array_partition variable=subSw7_org complete dim=2
#pragma HLS array_partition variable=subSw8_org complete dim=2
#pragma HLS array_partition variable=subSw9_org complete dim=2
#pragma HLS array_partition variable=subSw10_org complete dim=2
#pragma HLS array_partition variable=subSw11_org complete dim=2
#pragma HLS array_partition variable=subSw12_org complete dim=2
#pragma HLS array_partition variable=subSw13_org complete dim=2
#pragma HLS array_partition variable=subSw14_org complete dim=2
#pragma HLS array_partition variable=subSw15_org complete dim=2

#if COARSE_SEARCH_DOUBLE_SPEED
#pragma HLS array_partition variable=orgCp0Down_org complete dim=2
#pragma HLS array_partition variable=orgCp1Down_org complete dim=2
#pragma HLS array_partition variable=orgCp2Down_org complete dim=2
#pragma HLS array_partition variable=orgCp3Down_org complete dim=2
#pragma HLS array_partition variable=orgCp4Down_org complete dim=2
#pragma HLS array_partition variable=orgCp5Down_org complete dim=2
#pragma HLS array_partition variable=orgCp6Down_org complete dim=2
#pragma HLS array_partition variable=orgCp7Down_org complete dim=2
#pragma HLS array_partition variable=orgCp8Down_org complete dim=2
#pragma HLS array_partition variable=orgCp9Down_org complete dim=2
#pragma HLS array_partition variable=orgCp10Down_org complete dim=2
#pragma HLS array_partition variable=orgCp11Down_org complete dim=2
#pragma HLS array_partition variable=orgCp12Down_org complete dim=2
#pragma HLS array_partition variable=orgCp13Down_org complete dim=2
#pragma HLS array_partition variable=orgCp14Down_org complete dim=2
#pragma HLS array_partition variable=orgCp15Down_org complete dim=2

#pragma HLS array_partition variable=subSw0Down_org complete dim=2
#pragma HLS array_partition variable=subSw1Down_org complete dim=2
#pragma HLS array_partition variable=subSw2Down_org complete dim=2
#pragma HLS array_partition variable=subSw3Down_org complete dim=2
#pragma HLS array_partition variable=subSw4Down_org complete dim=2
#pragma HLS array_partition variable=subSw5Down_org complete dim=2
#pragma HLS array_partition variable=subSw6Down_org complete dim=2
#pragma HLS array_partition variable=subSw7Down_org complete dim=2
#pragma HLS array_partition variable=subSw8Down_org complete dim=2
#pragma HLS array_partition variable=subSw9Down_org complete dim=2
#pragma HLS array_partition variable=subSw10Down_org complete dim=2
#pragma HLS array_partition variable=subSw11Down_org complete dim=2
#pragma HLS array_partition variable=subSw12Down_org complete dim=2
#pragma HLS array_partition variable=subSw13Down_org complete dim=2
#pragma HLS array_partition variable=subSw14Down_org complete dim=2
#pragma HLS array_partition variable=subSw15Down_org complete dim=2
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED

////=========================================================================================================================================
//#pragma HLS array_partition variable=swLv2 complete dim=1
//#pragma HLS array_partition variable=orgLv2 complete dim=1
//
//#pragma HLS array_partition variable=orgCp0 complete dim=1
//#pragma HLS array_partition variable=orgCp1 complete dim=1
//#pragma HLS array_partition variable=orgCp2 complete dim=1
//#pragma HLS array_partition variable=orgCp3 complete dim=1
//#pragma HLS array_partition variable=orgCp4 complete dim=1
//#pragma HLS array_partition variable=orgCp5 complete dim=1
//#pragma HLS array_partition variable=orgCp6 complete dim=1
//#pragma HLS array_partition variable=orgCp7 complete dim=1
//#pragma HLS array_partition variable=orgCp8 complete dim=1
//#pragma HLS array_partition variable=orgCp9 complete dim=1
//#pragma HLS array_partition variable=orgCp10 complete dim=1
//#pragma HLS array_partition variable=orgCp11 complete dim=1
//#pragma HLS array_partition variable=orgCp12 complete dim=1
//#pragma HLS array_partition variable=orgCp13 complete dim=1
//#pragma HLS array_partition variable=orgCp14 complete dim=1
//#pragma HLS array_partition variable=orgCp15 complete dim=1
//
//#pragma HLS array_partition variable=subSw0 complete dim=1
//#pragma HLS array_partition variable=subSw1 complete dim=1
//#pragma HLS array_partition variable=subSw2 complete dim=1
//#pragma HLS array_partition variable=subSw3 complete dim=1
//#pragma HLS array_partition variable=subSw4 complete dim=1
//#pragma HLS array_partition variable=subSw5 complete dim=1
//#pragma HLS array_partition variable=subSw6 complete dim=1
//#pragma HLS array_partition variable=subSw7 complete dim=1
//#pragma HLS array_partition variable=subSw8 complete dim=1
//#pragma HLS array_partition variable=subSw9 complete dim=1
//#pragma HLS array_partition variable=subSw10 complete dim=1
//#pragma HLS array_partition variable=subSw11 complete dim=1
//#pragma HLS array_partition variable=subSw12 complete dim=1
//#pragma HLS array_partition variable=subSw13 complete dim=1
//#pragma HLS array_partition variable=subSw14 complete dim=1
//#pragma HLS array_partition variable=subSw15 complete dim=1
//
//#pragma HLS array_partition variable=orgCp0Down complete dim=1
//#pragma HLS array_partition variable=orgCp1Down complete dim=1
//#pragma HLS array_partition variable=orgCp2Down complete dim=1
//#pragma HLS array_partition variable=orgCp3Down complete dim=1
//#pragma HLS array_partition variable=orgCp4Down complete dim=1
//#pragma HLS array_partition variable=orgCp5Down complete dim=1
//#pragma HLS array_partition variable=orgCp6Down complete dim=1
//#pragma HLS array_partition variable=orgCp7Down complete dim=1
//#pragma HLS array_partition variable=orgCp8Down complete dim=1
//#pragma HLS array_partition variable=orgCp9Down complete dim=1
//#pragma HLS array_partition variable=orgCp10Down complete dim=1
//#pragma HLS array_partition variable=orgCp11Down complete dim=1
//#pragma HLS array_partition variable=orgCp12Down complete dim=1
//#pragma HLS array_partition variable=orgCp13Down complete dim=1
//#pragma HLS array_partition variable=orgCp14Down complete dim=1
//#pragma HLS array_partition variable=orgCp15Down complete dim=1
//
//#pragma HLS array_partition variable=subSw0Down complete dim=1
//#pragma HLS array_partition variable=subSw1Down complete dim=1
//#pragma HLS array_partition variable=subSw2Down complete dim=1
//#pragma HLS array_partition variable=subSw3Down complete dim=1
//#pragma HLS array_partition variable=subSw4Down complete dim=1
//#pragma HLS array_partition variable=subSw5Down complete dim=1
//#pragma HLS array_partition variable=subSw6Down complete dim=1
//#pragma HLS array_partition variable=subSw7Down complete dim=1
//#pragma HLS array_partition variable=subSw8Down complete dim=1
//#pragma HLS array_partition variable=subSw9Down complete dim=1
//#pragma HLS array_partition variable=subSw10Down complete dim=1
//#pragma HLS array_partition variable=subSw11Down complete dim=1
//#pragma HLS array_partition variable=subSw12Down complete dim=1
//#pragma HLS array_partition variable=subSw13Down complete dim=1
//#pragma HLS array_partition variable=subSw14Down complete dim=1
//#pragma HLS array_partition variable=subSw15Down complete dim=1
#endif
#endif	// #if !IME_PRAGMA_ON_OP

	constructSubWindowDoubleLv2(
		swLv2_org,

		subSw0_org,
		subSw1_org,
		subSw2_org,
		subSw3_org,
		subSw4_org,
		subSw5_org,
		subSw6_org,
		subSw7_org,
		subSw8_org,
		subSw9_org,
		subSw10_org,
		subSw11_org,
		subSw12_org,
		subSw13_org,
		subSw14_org,
		subSw15_org
#if COARSE_SEARCH_DOUBLE_SPEED
		,
		subSw0Down_org,
		subSw1Down_org,
		subSw2Down_org,
		subSw3Down_org,
		subSw4Down_org,
		subSw5Down_org,
		subSw6Down_org,
		subSw7Down_org,
		subSw8Down_org,
		subSw9Down_org,
		subSw10Down_org,
		subSw11Down_org,
		subSw12Down_org,
		subSw13Down_org,
		subSw14Down_org,
		subSw15Down_org
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED

		//,
		////==================================
		//swLv2, subSw0, subSw1, subSw2, subSw3, subSw4, subSw5, subSw6, subSw7,
		//subSw8, subSw9, subSw10, subSw11, subSw12, subSw13, subSw14, subSw15,
		//subSw0Down, subSw1Down, subSw2Down, subSw3Down, subSw4Down, subSw5Down, subSw6Down, subSw7Down,
		//subSw8Down, subSw9Down, subSw10Down, subSw11Down, subSw12Down, subSw13Down, subSw14Down, subSw15Down
	);

	////check subSw1_org 
	//for (int j = 0; j < 20; j++)
	//{
	//	for (int i = 0; i < 28; i++)
	//	{
	//		if (subSw1_org[j][i] != subSw1[i][j])
	//		{
	//			printf("subSw1_org error! ");
	//			printf("subSw1_org[%d][%d] = %d\tsubSw1[%d][%d] = %d\n", j, i, subSw1_org[j][i], i, j, subSw1[i][j]);
	//		}
	//	}
	//}

	copyOrgDoubleLv2(
		orgLv2_org,

		orgCp0_org,
		orgCp1_org,
		orgCp2_org,
		orgCp3_org,
		orgCp4_org,
		orgCp5_org,
		orgCp6_org,
		orgCp7_org,
		orgCp8_org,
		orgCp9_org,
		orgCp10_org,
		orgCp11_org,
		orgCp12_org,
		orgCp13_org,
		orgCp14_org,
		orgCp15_org

#if COARSE_SEARCH_DOUBLE_SPEED
		,
		orgCp0Down_org,
		orgCp1Down_org,
		orgCp2Down_org,
		orgCp3Down_org,
		orgCp4Down_org,
		orgCp5Down_org,
		orgCp6Down_org,
		orgCp7Down_org,
		orgCp8Down_org,
		orgCp9Down_org,
		orgCp10Down_org,
		orgCp11Down_org,
		orgCp12Down_org,
		orgCp13Down_org,
		orgCp14Down_org,
		orgCp15Down_org
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED

		//,
		////==================================================
		//orgLv2, orgCp0, orgCp1, orgCp2, orgCp3, orgCp4, orgCp5, orgCp6, orgCp7, orgCp8, orgCp9, orgCp10, orgCp11, orgCp12, orgCp13, orgCp14, orgCp15, orgCp0Down, orgCp1Down, orgCp2Down, orgCp3Down, orgCp4Down, orgCp5Down, orgCp6Down, orgCp7Down, orgCp8Down, orgCp9Down, orgCp10Down, orgCp11Down, orgCp12Down, orgCp13Down, orgCp14Down, orgCp15Down
	);

}

void copyOrgDoubleLv1(pel orgLv1[32][32],
	pel orgCp0_0[16][16], pel orgCp0_1[16][16], pel orgCp0_2[16][16], pel orgCp0_3[16][16],
	pel orgCp1_0[16][16], pel orgCp1_1[16][16], pel orgCp1_2[16][16], pel orgCp1_3[16][16],
	pel orgCp2_0[16][16], pel orgCp2_1[16][16], pel orgCp2_2[16][16], pel orgCp2_3[16][16],
	pel orgCp3_0[16][16], pel orgCp3_1[16][16], pel orgCp3_2[16][16], pel orgCp3_3[16][16],
	pel orgCp0_0Down[16][16], pel orgCp0_1Down[16][16], pel orgCp0_2Down[16][16], pel orgCp0_3Down[16][16],
	pel orgCp1_0Down[16][16], pel orgCp1_1Down[16][16], pel orgCp1_2Down[16][16], pel orgCp1_3Down[16][16],
	pel orgCp2_0Down[16][16], pel orgCp2_1Down[16][16], pel orgCp2_2Down[16][16], pel orgCp2_3Down[16][16],
	pel orgCp3_0Down[16][16], pel orgCp3_1Down[16][16], pel orgCp3_2Down[16][16], pel orgCp3_3Down[16][16])
{
#pragma HLS inline off
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=orgLv1 complete dim=1
//#pragma HLS ARRAY_PARTITION variable=orgLv1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=orgCp0_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp1_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp2_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp3_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp0_0Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_1Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_2Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_3Down cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp1_0Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_1Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_2Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_3Down cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp2_0Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_1Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_2Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_3Down cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp3_0Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_1Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_2Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_3Down cyclic factor=16 dim=1
#endif
	int y, x;

	for (y = 0; y < 16; y++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (x = 0; x < 16; x++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			orgCp0_0[x][y] = orgLv1[x][y];
			orgCp0_1[x][y] = orgLv1[x + 16][y];
			orgCp1_0[x][y] = orgLv1[x][y];
			orgCp1_1[x][y] = orgLv1[x + 16][y];
			orgCp2_0[x][y] = orgLv1[x][y];
			orgCp2_1[x][y] = orgLv1[x + 16][y];
			orgCp3_0[x][y] = orgLv1[x][y];
			orgCp3_1[x][y] = orgLv1[x + 16][y];

			orgCp0_0Down[x][y] = orgLv1[x][y];
			orgCp0_1Down[x][y] = orgLv1[x + 16][y];
			orgCp1_0Down[x][y] = orgLv1[x][y];
			orgCp1_1Down[x][y] = orgLv1[x + 16][y];
			orgCp2_0Down[x][y] = orgLv1[x][y];
			orgCp2_1Down[x][y] = orgLv1[x + 16][y];
			orgCp3_0Down[x][y] = orgLv1[x][y];
			orgCp3_1Down[x][y] = orgLv1[x + 16][y];
		}
	}

	for (y = 0; y < 16; y++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (x = 0; x < 16; x++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll 
#endif
			orgCp0_2[x][y] = orgLv1[x][y + 16];
			orgCp0_3[x][y] = orgLv1[x + 16][y + 16];
			orgCp1_2[x][y] = orgLv1[x][y + 16];
			orgCp1_3[x][y] = orgLv1[x + 16][y + 16];
			orgCp2_2[x][y] = orgLv1[x][y + 16];
			orgCp2_3[x][y] = orgLv1[x + 16][y + 16];
			orgCp3_2[x][y] = orgLv1[x][y + 16];
			orgCp3_3[x][y] = orgLv1[x + 16][y + 16];

			orgCp0_2Down[x][y] = orgLv1[x][y + 16];
			orgCp0_3Down[x][y] = orgLv1[x + 16][y + 16];
			orgCp1_2Down[x][y] = orgLv1[x][y + 16];
			orgCp1_3Down[x][y] = orgLv1[x + 16][y + 16];
			orgCp2_2Down[x][y] = orgLv1[x][y + 16];
			orgCp2_3Down[x][y] = orgLv1[x + 16][y + 16];
			orgCp3_2Down[x][y] = orgLv1[x][y + 16];
			orgCp3_3Down[x][y] = orgLv1[x + 16][y + 16];
		}
	}
}

void constructSubWindowDoubleLv1(
	pel swLv1[160][160], S14 refWindowLtPos[2],
	pel subSw0_0[32][24], pel subSw0_1[32][24], pel subSw0_2[32][24], pel subSw0_3[32][24],
	pel subSw1_0[32][24], pel subSw1_1[32][24], pel subSw1_2[32][24], pel subSw1_3[32][24],
	pel subSw2_0[32][24], pel subSw2_1[32][24], pel subSw2_2[32][24], pel subSw2_3[32][24],
	pel subSw3_0[32][24], pel subSw3_1[32][24], pel subSw3_2[32][24], pel subSw3_3[32][24],
	pel subSw0_0Down[32][24], pel subSw0_1Down[32][24], pel subSw0_2Down[32][24], pel subSw0_3Down[32][24],
	pel subSw1_0Down[32][24], pel subSw1_1Down[32][24], pel subSw1_2Down[32][24], pel subSw1_3Down[32][24],
	pel subSw2_0Down[32][24], pel subSw2_1Down[32][24], pel subSw2_2Down[32][24], pel subSw2_3Down[32][24],
	pel subSw3_0Down[32][24], pel subSw3_1Down[32][24], pel subSw3_2Down[32][24], pel subSw3_3Down[32][24])
{
#pragma HLS inline off
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=swLv1 complete dim=1
//#pragma HLS ARRAY_PARTITION variable=swLv1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=subSw0_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw1_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw2_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw3_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw0_0Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_1Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_2Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_3Down cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw1_0Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_1Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_2Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_3Down cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw2_0Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_1Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_2Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_3Down cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw3_0Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_1Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_2Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_3Down cyclic factor=32 dim=1
#endif
	S14 x_in_sw = refWindowLtPos[0];
	S14 y_in_sw = refWindowLtPos[1];

	S14 x, y;



	/*                 |----1_1----| */
	/*           |----0_1----|       */
	/*           |----1_0----|       */
	/*     |----0_0----|             */
	/*  Y  |=====|=====|=====|=====| */
	/*  1  1    16    32    48    64 */
	/*  -  .     .     .     .     . */
	/*  -  .     .     .     .     . */
	/*  -  .     .     .     .     . */
	/* 32  1    16    32    48    64 */

	for (y = 0; y < 32; y++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		if (y <= 23)
		{
			for (x = 0; x < 16; x++) {
				subSw0_0[x][y] = swLv1[x + x_in_sw][y + y_in_sw];
			}
			for (x = 16; x < 32; x++) {
				subSw0_0[x][y] = swLv1[x + x_in_sw][y + y_in_sw];
				subSw1_0[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw];

				subSw0_1[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw];
			}
			for (x = 32; x < 48; x++) {
				subSw1_0[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw];

				subSw0_1[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw];
				subSw1_1[x - 32][y] = swLv1[x + x_in_sw][y + y_in_sw];
			}
			for (x = 48; x < 64; x++) {
				subSw1_1[x - 32][y] = swLv1[x + x_in_sw][y + y_in_sw];
			}
		}
		if (y >= 8)
		{
			for (x = 0; x < 16; x++) {
				subSw0_0Down[x][y - 8] = swLv1[x + x_in_sw][y + y_in_sw];
			}
			for (x = 16; x < 32; x++) {
				subSw0_0Down[x][y - 8] = swLv1[x + x_in_sw][y + y_in_sw];
				subSw1_0Down[x - 16][y - 8] = swLv1[x + x_in_sw][y + y_in_sw];

				subSw0_1Down[x - 16][y - 8] = swLv1[x + x_in_sw][y + y_in_sw];
			}
			for (x = 32; x < 48; x++) {
				subSw1_0Down[x - 16][y - 8] = swLv1[x + x_in_sw][y + y_in_sw];

				subSw0_1Down[x - 16][y - 8] = swLv1[x + x_in_sw][y + y_in_sw];
				subSw1_1Down[x - 32][y - 8] = swLv1[x + x_in_sw][y + y_in_sw];
			}
			for (x = 48; x < 64; x++) {
				subSw1_1Down[x - 32][y - 8] = swLv1[x + x_in_sw][y + y_in_sw];
			}
		}
	}



	/*                 |----3_1----| */
	/*           |----2_1----|       */
	/*           |----3_0----|       */
	/*     |----2_0----|             */
	/*                 |----1_3----| */
	/*           |----0_3----|       */
	/*           |----1_2----|       */
	/*     |----0_2----|             */
	/*  Y  |=====|=====|=====|=====| */
	/* 17  1    16    32    48    64 */
	/*  -  .     .     .     .     . */
	/*  -  .     .     .     .     . */
	/*  -  .     .     .     .     . */
	/* 48  1    16    32    48    64 */


	for (y = 0; y < 32; y++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		if (y <= 23)
		{
			for (x = 0; x < 16; x++) {
				subSw0_2[x][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

				subSw2_0[x][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];
			}
			for (x = 16; x < 32; x++) {
				subSw0_2[x][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];
				subSw1_2[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

				subSw0_3[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

				subSw2_0[x][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];
				subSw3_0[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

				subSw2_1[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

			}
			for (x = 32; x < 48; x++) {
				subSw1_2[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

				subSw0_3[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];
				subSw1_3[x - 32][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

				subSw3_0[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

				subSw2_1[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];
				subSw3_1[x - 32][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];
			}
			for (x = 48; x < 64; x++) {
				subSw1_3[x - 32][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

				subSw3_1[x - 32][y] = swLv1[x + x_in_sw][y + y_in_sw + 16];

			}
		}
		if (y >= 8)
		{
			for (x = 0; x < 16; x++) {
				subSw0_2Down[x][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 16];

				subSw2_0Down[x][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 16];
			}
			for (x = 16; x < 32; x++) {
				subSw0_2Down[x][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 16];
				subSw1_2Down[x - 16][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 16];

				subSw0_3Down[x - 16][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 16];

				subSw2_0Down[x][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 16];
				subSw3_0Down[x - 16][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 16];

				subSw2_1Down[x - 16][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 16];

			}
			for (x = 32; x < 48; x++) {
				subSw1_2Down[x - 16][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 16];

				subSw0_3Down[x - 16][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 16];
				subSw1_3Down[x - 32][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 16];

				subSw3_0Down[x - 16][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 16];

				subSw2_1Down[x - 16][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 16];
				subSw3_1Down[x - 32][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 16];
			}
			for (x = 48; x < 64; x++) {
				subSw1_3Down[x - 32][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 16];

				subSw3_1Down[x - 32][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 16];

			}
		}

	}


	/*                 |----3_3----| */
	/*           |----2_3----|       */
	/*           |----3_2----|       */
	/*     |----2_2----|             */
	/*  Y  |=====|=====|=====|=====| */
	/* 32  1    16    32    48    64 */
	/*  -  .     .     .     .     . */
	/*  -  .     .     .     .     . */
	/*  -  .     .     .     .     . */
	/* 64  1    16    32    48    64 */

	for (y = 0; y < 32; y++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		if (y <= 23)
		{
			for (x = 0; x < 16; x++) {
				subSw2_2[x][y] = swLv1[x + x_in_sw][y + y_in_sw + 32];
			}
			for (x = 16; x < 32; x++) {
				subSw2_2[x][y] = swLv1[x + x_in_sw][y + y_in_sw + 32];
				subSw3_2[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 32];

				subSw2_3[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 32];
			}
			for (x = 32; x < 48; x++) {
				subSw3_2[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 32];

				subSw2_3[x - 16][y] = swLv1[x + x_in_sw][y + y_in_sw + 32];
				subSw3_3[x - 32][y] = swLv1[x + x_in_sw][y + y_in_sw + 32];
			}
			for (x = 48; x < 64; x++) {
				subSw3_3[x - 32][y] = swLv1[x + x_in_sw][y + y_in_sw + 32];

			}
		}
		if (y >= 8)
		{
			for (x = 0; x < 16; x++) {
				subSw2_2Down[x][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 32];
			}
			for (x = 16; x < 32; x++) {
				subSw2_2Down[x][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 32];
				subSw3_2Down[x - 16][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 32];

				subSw2_3Down[x - 16][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 32];
			}
			for (x = 32; x < 48; x++) {
				subSw3_2Down[x - 16][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 32];

				subSw2_3Down[x - 16][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 32];
				subSw3_3Down[x - 32][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 32];
			}
			for (x = 48; x < 64; x++) {
				subSw3_3Down[x - 32][y - 8] = swLv1[x + x_in_sw][y + y_in_sw + 32];

			}
		}

	}

}


void constructRefWindowDoubleLv1(
	pel swLv1[160][160], pel orgLv1[32][32], S14 posLT[2],
	pel orgCp0_0[16][16], pel orgCp0_1[16][16], pel orgCp0_2[16][16], pel orgCp0_3[16][16],
	pel orgCp1_0[16][16], pel orgCp1_1[16][16], pel orgCp1_2[16][16], pel orgCp1_3[16][16],
	pel orgCp2_0[16][16], pel orgCp2_1[16][16], pel orgCp2_2[16][16], pel orgCp2_3[16][16],
	pel orgCp3_0[16][16], pel orgCp3_1[16][16], pel orgCp3_2[16][16], pel orgCp3_3[16][16],
	pel orgCp0_0Down[16][16], pel orgCp0_1Down[16][16], pel orgCp0_2Down[16][16], pel orgCp0_3Down[16][16],
	pel orgCp1_0Down[16][16], pel orgCp1_1Down[16][16], pel orgCp1_2Down[16][16], pel orgCp1_3Down[16][16],
	pel orgCp2_0Down[16][16], pel orgCp2_1Down[16][16], pel orgCp2_2Down[16][16], pel orgCp2_3Down[16][16],
	pel orgCp3_0Down[16][16], pel orgCp3_1Down[16][16], pel orgCp3_2Down[16][16], pel orgCp3_3Down[16][16],
	pel subSw0_0[32][24], pel subSw0_1[32][24], pel subSw0_2[32][24], pel subSw0_3[32][24],
	pel subSw1_0[32][24], pel subSw1_1[32][24], pel subSw1_2[32][24], pel subSw1_3[32][24],
	pel subSw2_0[32][24], pel subSw2_1[32][24], pel subSw2_2[32][24], pel subSw2_3[32][24],
	pel subSw3_0[32][24], pel subSw3_1[32][24], pel subSw3_2[32][24], pel subSw3_3[32][24],
	pel subSw0_0Down[32][24], pel subSw0_1Down[32][24], pel subSw0_2Down[32][24], pel subSw0_3Down[32][24],
	pel subSw1_0Down[32][24], pel subSw1_1Down[32][24], pel subSw1_2Down[32][24], pel subSw1_3Down[32][24],
	pel subSw2_0Down[32][24], pel subSw2_1Down[32][24], pel subSw2_2Down[32][24], pel subSw2_3Down[32][24],
	pel subSw3_0Down[32][24], pel subSw3_1Down[32][24], pel subSw3_2Down[32][24], pel subSw3_3Down[32][24])
{
#pragma HLS inline off
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=swLv1 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgLv1 complete dim=1
//#pragma HLS ARRAY_PARTITION variable=swLv1 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=orgLv1 complete dim=0

#pragma HLS ARRAY_PARTITION variable=orgCp0_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp1_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp2_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp3_0 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_1 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_2 cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_3 cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw0_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw1_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw2_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw3_0 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_1 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_2 cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_3 cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp0_0Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_1Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_2Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0_3Down cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp1_0Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_1Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_2Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1_3Down cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp2_0Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_1Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_2Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2_3Down cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=orgCp3_0Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_1Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_2Down cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3_3Down cyclic factor=16 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw0_0Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_1Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_2Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw0_3Down cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw1_0Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_1Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_2Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw1_3Down cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw2_0Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_1Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_2Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw2_3Down cyclic factor=32 dim=1

#pragma HLS ARRAY_PARTITION variable=subSw3_0Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_1Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_2Down cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=subSw3_3Down cyclic factor=32 dim=1
#endif


	copyOrgDoubleLv1(orgLv1, orgCp0_0, orgCp0_1, orgCp0_2, orgCp0_3, orgCp1_0, orgCp1_1, orgCp1_2, orgCp1_3, orgCp2_0, orgCp2_1, orgCp2_2, orgCp2_3, orgCp3_0, orgCp3_1, orgCp3_2, orgCp3_3,
		orgCp0_0Down, orgCp0_1Down, orgCp0_2Down, orgCp0_3Down, orgCp1_0Down, orgCp1_1Down, orgCp1_2Down, orgCp1_3Down, orgCp2_0Down, orgCp2_1Down, orgCp2_2Down, orgCp2_3Down, orgCp3_0Down, orgCp3_1Down, orgCp3_2Down, orgCp3_3Down);

	constructSubWindowDoubleLv1(
		swLv1, posLT,
		subSw0_0, subSw0_1, subSw0_2, subSw0_3,
		subSw1_0, subSw1_1, subSw1_2, subSw1_3,
		subSw2_0, subSw2_1, subSw2_2, subSw2_3,
		subSw3_0, subSw3_1, subSw3_2, subSw3_3,
		subSw0_0Down, subSw0_1Down, subSw0_2Down, subSw0_3Down,
		subSw1_0Down, subSw1_1Down, subSw1_2Down, subSw1_3Down,
		subSw2_0Down, subSw2_1Down, subSw2_2Down, subSw2_3Down,
		subSw3_0Down, subSw3_1Down, subSw3_2Down, subSw3_3Down);
}


void constructRefWindowDouble(
	//U8 searchLv,
	//S14 posLT[3][2],

	pel swLv2_org[SWH >> 2][SWW >> 2],
	pel orgLv2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	//pel swLv1_org[SWH >> 1][SWW >> 1],
	//pel orgLv1_org[MAX_CU_H >> 1][MAX_CU_W >> 1],
	pel orgCp0_0_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp0_1_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp0_2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp0_3_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_0_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_1_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_3_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_0_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_1_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_3_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_0_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_1_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_3_org[MAX_CU_H >> 2][MAX_CU_W >> 2],

	pel orgCp0_0Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp0_1Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp0_2Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp0_3Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_0Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_1Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_2Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_3Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_0Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_1Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_2Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_3Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_0Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_1Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_2Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_3Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],

	pel subSw0_0Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw0_1Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw0_2Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw0_3Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_0Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_1Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_2Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_3Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_0Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_1Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_2Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_3Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_0Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_1Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_2Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_3Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],

	pel subSw0_0Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw0_1Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw0_2Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw0_3Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_0Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_1Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_2Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_3Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_0Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_1Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_2Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_3Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_0Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_1Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_2Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_3Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)]
	//,
	////==========================================================
	//pel swLv2[SWW >> 2][SWH >> 2],
	//pel orgLv2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel swLv1[SWW >> 1][SWH >> 1],
	//pel orgLv1[MAX_CU_SIZE_FETCH >> 1][MAX_CU_SIZE_FETCH >> 1],
	//pel orgCp0_0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0_1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0_2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0_3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0_0Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0_1Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0_2Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0_3Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_0Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_1Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_2Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_3Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_0Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_1Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_2Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_3Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_0Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_1Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_2Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_3Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel subSw0_0[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0_1[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0_2[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0_3[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_0[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_1[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_2[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_3[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_0[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_1[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_2[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_3[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_0[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_1[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_2[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_3[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0_0Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0_1Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0_2Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0_3Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_0Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_1Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_2Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_3Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_0Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_1Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_2Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_3Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_0Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_1Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_2Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_3Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)]
)
{
#pragma HLS inline off

#if !IME_PRAGMA_ON_OP

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=swLv2_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgLv2_org complete dim=2
//#pragma HLS ARRAY_PARTITION variable=swLv1_org complete dim=2
//#pragma HLS ARRAY_PARTITION variable=orgLv1_org complete dim=2


#pragma HLS array_partition variable=orgCp0_0_org complete dim=2
#pragma HLS array_partition variable=orgCp0_1_org complete dim=2
#pragma HLS array_partition variable=orgCp0_2_org complete dim=2
#pragma HLS array_partition variable=orgCp0_3_org complete dim=2

#pragma HLS array_partition variable=orgCp1_0_org complete dim=2
#pragma HLS array_partition variable=orgCp1_1_org complete dim=2
#pragma HLS array_partition variable=orgCp1_2_org complete dim=2
#pragma HLS array_partition variable=orgCp1_3_org complete dim=2

#pragma HLS array_partition variable=orgCp2_0_org complete dim=2
#pragma HLS array_partition variable=orgCp2_1_org complete dim=2
#pragma HLS array_partition variable=orgCp2_2_org complete dim=2
#pragma HLS array_partition variable=orgCp2_3_org complete dim=2

#pragma HLS array_partition variable=orgCp3_0_org complete dim=2
#pragma HLS array_partition variable=orgCp3_1_org complete dim=2
#pragma HLS array_partition variable=orgCp3_2_org complete dim=2
#pragma HLS array_partition variable=orgCp3_3_org complete dim=2

#pragma HLS array_partition variable=subSw0_0Up_org complete dim=2
#pragma HLS array_partition variable=subSw0_1Up_org complete dim=2
#pragma HLS array_partition variable=subSw0_2Up_org complete dim=2
#pragma HLS array_partition variable=subSw0_3Up_org complete dim=2

#pragma HLS array_partition variable=subSw1_0Up_org complete dim=2
#pragma HLS array_partition variable=subSw1_1Up_org complete dim=2
#pragma HLS array_partition variable=subSw1_2Up_org complete dim=2
#pragma HLS array_partition variable=subSw1_3Up_org complete dim=2

#pragma HLS array_partition variable=subSw2_0Up_org complete dim=2
#pragma HLS array_partition variable=subSw2_1Up_org complete dim=2
#pragma HLS array_partition variable=subSw2_2Up_org complete dim=2
#pragma HLS array_partition variable=subSw2_3Up_org complete dim=2

#pragma HLS array_partition variable=subSw3_0Up_org complete dim=2
#pragma HLS array_partition variable=subSw3_1Up_org complete dim=2
#pragma HLS array_partition variable=subSw3_2Up_org complete dim=2
#pragma HLS array_partition variable=subSw3_3Up_org complete dim=2

#if COARSE_SEARCH_DOUBLE_SPEED
#pragma HLS array_partition variable=orgCp0_0Down_org complete dim=2
#pragma HLS array_partition variable=orgCp0_1Down_org complete dim=2
#pragma HLS array_partition variable=orgCp0_2Down_org complete dim=2
#pragma HLS array_partition variable=orgCp0_3Down_org complete dim=2

#pragma HLS array_partition variable=orgCp1_0Down_org complete dim=2
#pragma HLS array_partition variable=orgCp1_1Down_org complete dim=2
#pragma HLS array_partition variable=orgCp1_2Down_org complete dim=2
#pragma HLS array_partition variable=orgCp1_3Down_org complete dim=2

#pragma HLS array_partition variable=orgCp2_0Down_org complete dim=2
#pragma HLS array_partition variable=orgCp2_1Down_org complete dim=2
#pragma HLS array_partition variable=orgCp2_2Down_org complete dim=2
#pragma HLS array_partition variable=orgCp2_3Down_org complete dim=2

#pragma HLS array_partition variable=orgCp3_0Down_org complete dim=2
#pragma HLS array_partition variable=orgCp3_1Down_org complete dim=2
#pragma HLS array_partition variable=orgCp3_2Down_org complete dim=2
#pragma HLS array_partition variable=orgCp3_3Down_org complete dim=2

#pragma HLS array_partition variable=subSw0_0Down_org complete dim=2
#pragma HLS array_partition variable=subSw0_1Down_org complete dim=2
#pragma HLS array_partition variable=subSw0_2Down_org complete dim=2
#pragma HLS array_partition variable=subSw0_3Down_org complete dim=2

#pragma HLS array_partition variable=subSw1_0Down_org complete dim=2
#pragma HLS array_partition variable=subSw1_1Down_org complete dim=2
#pragma HLS array_partition variable=subSw1_2Down_org complete dim=2
#pragma HLS array_partition variable=subSw1_3Down_org complete dim=2

#pragma HLS array_partition variable=subSw2_0Down_org complete dim=2
#pragma HLS array_partition variable=subSw2_1Down_org complete dim=2
#pragma HLS array_partition variable=subSw2_2Down_org complete dim=2
#pragma HLS array_partition variable=subSw2_3Down_org complete dim=2

#pragma HLS array_partition variable=subSw3_0Down_org complete dim=2
#pragma HLS array_partition variable=subSw3_1Down_org complete dim=2
#pragma HLS array_partition variable=subSw3_2Down_org complete dim=2
#pragma HLS array_partition variable=subSw3_3Down_org complete dim=2
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED


////========================================================
//#pragma HLS array_partition variable=swLv2 complete dim=1
//#pragma HLS array_partition variable=orgLv2 complete dim=1
//#pragma HLS array_partition variable=swLv1 complete dim=1
//#pragma HLS array_partition variable=orgLv1 complete dim=1
//
//#pragma HLS array_partition variable=orgCp0_0 complete dim=1
//#pragma HLS array_partition variable=orgCp0_1 complete dim=1
//#pragma HLS array_partition variable=orgCp0_2 complete dim=1
//#pragma HLS array_partition variable=orgCp0_3 complete dim=1
//
//#pragma HLS array_partition variable=orgCp1_0 complete dim=1
//#pragma HLS array_partition variable=orgCp1_1 complete dim=1
//#pragma HLS array_partition variable=orgCp1_2 complete dim=1
//#pragma HLS array_partition variable=orgCp1_3 complete dim=1
//
//#pragma HLS array_partition variable=orgCp2_0 complete dim=1
//#pragma HLS array_partition variable=orgCp2_1 complete dim=1
//#pragma HLS array_partition variable=orgCp2_2 complete dim=1
//#pragma HLS array_partition variable=orgCp2_3 complete dim=1
//
//#pragma HLS array_partition variable=orgCp3_0 complete dim=1
//#pragma HLS array_partition variable=orgCp3_1 complete dim=1
//#pragma HLS array_partition variable=orgCp3_2 complete dim=1
//#pragma HLS array_partition variable=orgCp3_3 complete dim=1
//
//#pragma HLS array_partition variable=subSw0_0 complete dim=1
//#pragma HLS array_partition variable=subSw0_1 complete dim=1
//#pragma HLS array_partition variable=subSw0_2 complete dim=1
//#pragma HLS array_partition variable=subSw0_3 complete dim=1
//
//#pragma HLS array_partition variable=subSw1_0 complete dim=1
//#pragma HLS array_partition variable=subSw1_1 complete dim=1
//#pragma HLS array_partition variable=subSw1_2 complete dim=1
//#pragma HLS array_partition variable=subSw1_3 complete dim=1
//
//#pragma HLS array_partition variable=subSw2_0 complete dim=1
//#pragma HLS array_partition variable=subSw2_1 complete dim=1
//#pragma HLS array_partition variable=subSw2_2 complete dim=1
//#pragma HLS array_partition variable=subSw2_3 complete dim=1
//
//#pragma HLS array_partition variable=subSw3_0 complete dim=1
//#pragma HLS array_partition variable=subSw3_1 complete dim=1
//#pragma HLS array_partition variable=subSw3_2 complete dim=1
//#pragma HLS array_partition variable=subSw3_3 complete dim=1
#endif

#endif	//#if !IME_PRAGMA_ON_OP

	/* search Lv2 */
#if SEARCH_FULLLV1==0
	if (searchLv == 0)
	{
#endif
		constructRefWindowDoubleLv2(
			swLv2_org,
			orgLv2_org,

			orgCp0_0_org,
			orgCp0_1_org,
			orgCp0_2_org,
			orgCp0_3_org,
			orgCp1_0_org,
			orgCp1_1_org,
			orgCp1_2_org,
			orgCp1_3_org,
			orgCp2_0_org,
			orgCp2_1_org,
			orgCp2_2_org,
			orgCp2_3_org,
			orgCp3_0_org,
			orgCp3_1_org,
			orgCp3_2_org,
			orgCp3_3_org,
			subSw0_0Up_org,
			subSw0_1Up_org,
			subSw0_2Up_org,
			subSw0_3Up_org,
			subSw1_0Up_org,
			subSw1_1Up_org,
			subSw1_2Up_org,
			subSw1_3Up_org,
			subSw2_0Up_org,
			subSw2_1Up_org,
			subSw2_2Up_org,
			subSw2_3Up_org,
			subSw3_0Up_org,
			subSw3_1Up_org,
			subSw3_2Up_org,
			subSw3_3Up_org

#if COARSE_SEARCH_DOUBLE_SPEED
			,
			orgCp0_0Down_org,
			orgCp0_1Down_org,
			orgCp0_2Down_org,
			orgCp0_3Down_org,
			orgCp1_0Down_org,
			orgCp1_1Down_org,
			orgCp1_2Down_org,
			orgCp1_3Down_org,
			orgCp2_0Down_org,
			orgCp2_1Down_org,
			orgCp2_2Down_org,
			orgCp2_3Down_org,
			orgCp3_0Down_org,
			orgCp3_1Down_org,
			orgCp3_2Down_org,
			orgCp3_3Down_org,

			subSw0_0Down_org,
			subSw0_1Down_org,
			subSw0_2Down_org,
			subSw0_3Down_org,
			subSw1_0Down_org,
			subSw1_1Down_org,
			subSw1_2Down_org,
			subSw1_3Down_org,
			subSw2_0Down_org,
			subSw2_1Down_org,
			subSw2_2Down_org,
			subSw2_3Down_org,
			subSw3_0Down_org,
			subSw3_1Down_org,
			subSw3_2Down_org,
			subSw3_3Down_org
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED




			//,
			////=============================================================================================================================================================================
			//swLv2, orgLv2,
			//orgCp0_0, orgCp0_1, orgCp0_2, orgCp0_3, orgCp1_0, orgCp1_1, orgCp1_2, orgCp1_3, orgCp2_0, orgCp2_1, orgCp2_2, orgCp2_3, orgCp3_0, orgCp3_1, orgCp3_2, orgCp3_3,
			//orgCp0_0Down, orgCp0_1Down, orgCp0_2Down, orgCp0_3Down, orgCp1_0Down, orgCp1_1Down, orgCp1_2Down, orgCp1_3Down, orgCp2_0Down, orgCp2_1Down, orgCp2_2Down, orgCp2_3Down, orgCp3_0Down, orgCp3_1Down, orgCp3_2Down, orgCp3_3Down,

			//subSw0_0, subSw1_0, subSw2_0, subSw3_0, subSw0_1, subSw1_1, subSw2_1, subSw3_1, subSw0_2, subSw1_2, subSw2_2, subSw3_2, subSw0_3, subSw1_3, subSw2_3, subSw3_3,
			//subSw0_0Down, subSw1_0Down, subSw2_0Down, subSw3_0Down, subSw0_1Down, subSw1_1Down, subSw2_1Down, subSw3_1Down, subSw0_2Down, subSw1_2Down, subSw2_2Down, subSw3_2Down, subSw0_3Down, subSw1_3Down, subSw2_3Down, subSw3_3Down
		);

		////check subSw1_org 
		//for (int j = 0; j < 20; j++)
		//{
		//	for (int i = 0; i < 28; i++)
		//	{
		//		if (subSw0_1Up_org[j][i] != subSw1_0[i][j])
		//		{
		//			printf("subSw0_1Up_org error! ");
		//			printf("subSw0_1Up_org[%d][%d] = %d\tsubSw0_1Up[%d][%d] = %d\n", j, i, subSw0_1Up_org[j][i], i, j, subSw0_1[i][j]);
		//		}
		//	}
		//}

#if SEARCH_FULLLV1==0
	}
	/* search Lv1 */
	else
	{
		constructRefWindowDoubleLv1(
			swLv1, orgLv1, posLT[searchLv - 1],
			orgCp0_0, orgCp0_1, orgCp0_2, orgCp0_3,
			orgCp1_0, orgCp1_1, orgCp1_2, orgCp1_3,
			orgCp2_0, orgCp2_1, orgCp2_2, orgCp2_3,
			orgCp3_0, orgCp3_1, orgCp3_2, orgCp3_3,
			orgCp0_0Down, orgCp0_1Down, orgCp0_2Down, orgCp0_3Down,
			orgCp1_0Down, orgCp1_1Down, orgCp1_2Down, orgCp1_3Down,
			orgCp2_0Down, orgCp2_1Down, orgCp2_2Down, orgCp2_3Down,
			orgCp3_0Down, orgCp3_1Down, orgCp3_2Down, orgCp3_3Down,
			subSw0_0, subSw0_1, subSw0_2, subSw0_3,
			subSw1_0, subSw1_1, subSw1_2, subSw1_3,
			subSw2_0, subSw2_1, subSw2_2, subSw2_3,
			subSw3_0, subSw3_1, subSw3_2, subSw3_3,
			subSw0_0Down, subSw0_1Down, subSw0_2Down, subSw0_3Down, subSw1_0Down, subSw1_1Down, subSw1_2Down, subSw1_3Down, subSw2_0Down, subSw2_1Down, subSw2_2Down, subSw2_3Down, subSw3_0Down, subSw3_1Down, subSw3_2Down, subSw3_3Down);
	}
#endif

}

void sadLineDoubleLv2(U8 subSw[32][24], U8 org[16][16], U32 lineSad[16], S14 baseH, U5 maxWidthScu, U5 maxHeightScu, U5 calcH)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=subSw cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=org cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=lineSad complete dim=0
#endif
	U32 sad = 0;
	U5 calcW;
	U5 searchPosX;

	if (maxHeightScu - calcH <= 0)
	{
		return;
	}

	for (calcW = 0; calcW < 16; calcW++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (searchPosX = 0; searchPosX < 16; searchPosX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			lineSad[searchPosX] += sadPel(subSw[calcW + searchPosX][calcH + baseH], org[calcW][calcH], maxWidthScu - calcW);
		}

	}
}

void searchLineHorDoubleLv2(U8 subSw[32][24], U8 org[16][16], U32 lineSad[16], S14 baseH, U5 maxWidthScu, U5 maxHeightScu)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=subSw cyclic factor=32 dim=1
#pragma HLS ARRAY_PARTITION variable=org cyclic factor=16 dim=1
#pragma HLS ARRAY_PARTITION variable=lineSad complete dim=0
#endif
	U5 calcH;

	for (calcH = 0; calcH < 16; calcH++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		sadLineDoubleLv2(subSw, org, lineSad, baseH, maxWidthScu, maxHeightScu,
			calcH);
	}

}

/* coarseSearch DoubleSkip */

void initSadRowsSkip(
	//U8 searchLv,
	S14 searchPosY,
	S14 gmvp[2],
	S14 posLT[3][2],
	U32 lamdaMv,
	U32 sadRow_org[4][4][((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH)]
	//,
	//U32 sadRow[4][4][((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH)]
)
{
#pragma HLS inline off
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=sadRow_org complete dim=0
//#pragma HLS array_partition variable=sadRow complete dim=0
#endif
	S14 searchPosX;

	U8 compX, compY;
#if SEARCH_FULLLV1==0
	if (searchLv == 0)
	{
#endif
//		for (searchPosX = 0; searchPosX < ((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH); searchPosX++)
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//			for (compX = 0; compX < 4; compX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				for (compY = 0; compY < 4; compY++)
//				{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//					sadRow[compX][compY][searchPosX] = getMvRcostSimplefied(lamdaMv, (((MMEA_LEVEL2_SR_V >> 1) * compX) << 2) - gmvp[0] + (searchPosX << 4 << SKIP_COARSE_SEARCH), (((MMEA_LEVEL2_SR_H >> 1) * compY) << 2) - gmvp[1] + ((searchPosY << 4/* << SKIP_COARSE_SEARCH) >> (COARSE_SEARCH_DOUBLE_SPEED*/)));
//				}
//			}
//		}

		for (searchPosX = 0; searchPosX < ((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH); searchPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			for (compY = 0; compY < 4; compY++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				for (compX = 0; compX < 4; compX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					sadRow_org[compY][compX][searchPosX] = getMvRcostSimplefied(lamdaMv, (((MMEA_LEVEL2_SR_V >> 1) * compX) << 2) - gmvp[0] + (searchPosX << 4 << SKIP_COARSE_SEARCH), (((MMEA_LEVEL2_SR_H >> 1) * compY) << 2) - gmvp[1] + ((searchPosY << 4 << SKIP_COARSE_SEARCH) >> (COARSE_SEARCH_DOUBLE_SPEED)));
				}
			}
		}
#if SEARCH_FULLLV1==0
	}
	else
	{
		for (searchPosX = 0; searchPosX < ((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH); searchPosX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			//sadRow[0][0][searchPosX] = getMvRcostSimplefied(lamdaMv, 0 + (posLT[searchLv - 1][0] << 2) - gmvp[0] + ((searchPosX << 3) << (SKIP_COARSE_SEARCH)), 0 + (posLT[searchLv - 1][1] << 2) - gmvp[1] + (searchPosY << 3));
			//sadRow[0][1][searchPosX] = 0;
			//sadRow[0][2][searchPosX] = 0;
			//sadRow[0][3][searchPosX] = 0;

			//sadRow[1][0][searchPosX] = getMvRcostSimplefied(lamdaMv, MMEA_LEVEL1_SR_V + (posLT[searchLv - 1][0] << 2) - gmvp[0] + ((searchPosX << 3) << (SKIP_COARSE_SEARCH)), 0 + (posLT[searchLv - 1][1] << 2) - gmvp[1] + (searchPosY << 3));
			//sadRow[1][1][searchPosX] = 0;
			//sadRow[1][2][searchPosX] = 0;
			//sadRow[1][3][searchPosX] = 0;

			//sadRow[2][0][searchPosX] = getMvRcostSimplefied(lamdaMv, 0 + (posLT[searchLv - 1][0] << 2) - gmvp[0] + ((searchPosX << 3) << (SKIP_COARSE_SEARCH)), MMEA_LEVEL1_SR_H + (posLT[searchLv - 1][1] << 2) - gmvp[1] + (searchPosY << 3));
			//sadRow[2][1][searchPosX] = 0;
			//sadRow[2][2][searchPosX] = 0;
			//sadRow[2][3][searchPosX] = 0;

			//sadRow[3][0][searchPosX] = getMvRcostSimplefied(lamdaMv, MMEA_LEVEL1_SR_V + (posLT[searchLv - 1][0] << 2) - gmvp[0] + ((searchPosX << 3) << (SKIP_COARSE_SEARCH)), MMEA_LEVEL1_SR_H + (posLT[searchLv - 1][1] << 2) - gmvp[1] + (searchPosY << 3));
			//sadRow[3][1][searchPosX] = 0;
			//sadRow[3][2][searchPosX] = 0;
			//sadRow[3][3][searchPosX] = 0;

			sadRow[0][0][searchPosX] = getMvRcostSimplefied(lamdaMv, 0 + (posLT[searchLv - 1][0] << 3) - gmvp[0] + ((searchPosX << 3) << (SKIP_COARSE_SEARCH)), 0 + (posLT[searchLv - 1][1] << 3) - gmvp[1] + (searchPosY << 3));
			sadRow[0][1][searchPosX] = 0;
			sadRow[0][2][searchPosX] = 0;
			sadRow[0][3][searchPosX] = 0;

			sadRow[1][0][searchPosX] = getMvRcostSimplefied(lamdaMv, ((MMEA_LEVEL1_SR_V >> 1) << 2) + (posLT[searchLv - 1][0] << 3) - gmvp[0] + ((searchPosX << 3) << (SKIP_COARSE_SEARCH)), 0 + (posLT[searchLv - 1][1] << 3) - gmvp[1] + (searchPosY << 3));
			sadRow[1][1][searchPosX] = 0;
			sadRow[1][2][searchPosX] = 0;
			sadRow[1][3][searchPosX] = 0;

			sadRow[2][0][searchPosX] = getMvRcostSimplefied(lamdaMv, 0 + (posLT[searchLv - 1][0] << 3) - gmvp[0] + ((searchPosX << 3) << (SKIP_COARSE_SEARCH)), ((MMEA_LEVEL1_SR_H >> 1) << 2) + (posLT[searchLv - 1][1] << 3) - gmvp[1] + (searchPosY << 3));
			sadRow[2][1][searchPosX] = 0;
			sadRow[2][2][searchPosX] = 0;
			sadRow[2][3][searchPosX] = 0;

			sadRow[3][0][searchPosX] = getMvRcostSimplefied(lamdaMv, ((MMEA_LEVEL1_SR_V >> 1) << 2) + (posLT[searchLv - 1][0] << 3) - gmvp[0] + ((searchPosX << 3) << (SKIP_COARSE_SEARCH)), ((MMEA_LEVEL1_SR_H >> 1) << 2) + (posLT[searchLv - 1][1] << 3) - gmvp[1] + (searchPosY << 3));
			sadRow[3][1][searchPosX] = 0;
			sadRow[3][2][searchPosX] = 0;
			sadRow[3][3][searchPosX] = 0;
		}
	}
#endif
}

void sadLineDoubleSkipLv2(
	pel subSw_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel org_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	U32 lineSad_org[((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH)],

	//pel subSw[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)],
	//pel org[MAX_CU_W >> 2][MAX_CU_H >> 2],
	//U32 lineSad[((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH)],
	S14 baseH,
	U5 maxWidthScu,
	U5 maxHeightScu,
	U5 calcH
)
{
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=subSw_org complete dim=2
#pragma HLS array_partition variable=org_org complete dim=2
#pragma HLS array_partition variable=lineSad_org complete dim=0

//#pragma HLS array_partition variable=subSw complete dim=1
//#pragma HLS array_partition variable=org complete dim=1
//#pragma HLS array_partition variable=lineSad complete dim=0
#endif
	//U32 sad = 0;
	U5 calcW;
	U5 searchPosX;

	if (maxHeightScu - calcH <= 0)
	{
		return;
	}

//	for (calcW = 0; calcW < (MAX_CU_W >> 2); calcW++) {
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//		for (searchPosX = 0; searchPosX < ((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH); searchPosX++) {
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//			lineSad[searchPosX] += sadPel(subSw[calcW + (searchPosX << SKIP_COARSE_SEARCH)][calcH + baseH], org[calcW][calcH], maxWidthScu - calcW);
//		}
//	}

	for (calcW = 0; calcW < (MAX_CU_W >> 2); calcW++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (searchPosX = 0; searchPosX < ((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH); searchPosX++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			lineSad_org[searchPosX] += sadPel(subSw_org[calcH + baseH][calcW + (searchPosX << SKIP_COARSE_SEARCH)], org_org[calcH][calcW], maxWidthScu - calcW);
		}

	}

	//// check lineSad_org
	//for (int i = 0; i < ((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH); i++)
	//{
	//	if (lineSad_org[i] != lineSad[i])
	//	{
	//		printf("lineSad_org error! ");
	//		printf("lineSad_org[%d] = %d\tlineSad[%d] = %d\n", i, lineSad_org[i], i, lineSad[i]);
	//	}		
	//}

		// check subSw0_0Up_org subSw0_0Down_org
	//for (int j = 0; j < 20; j++)
	//{
	//	for (int i = 0; i < 28; i++)
	//	{
	//		if (subSw_org[j][i] != subSw[i][j])
	//		{
	//			printf("subSw_org error! ");
	//			printf("subSw_org[%d][%d] = %d\tsubSw[%d][%d] = %d\n", j, i, subSw_org[j][i], i, j, subSw[i][j]);
	//		}
	//	}
	//}

}

void searchLineHorDoubleSkipLv2(
	pel subSw_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel org_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	U32 lineSad_org[((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH)],

	//pel subSw[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)],
	//pel org[MAX_CU_W >> 2][MAX_CU_H >> 2],
	//U32 lineSad[((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH)],
	S14 baseH,
	U5 maxWidthScu,
	U5 maxHeightScu
)
{
#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=subSw_org complete dim=2
#pragma HLS array_partition variable=org_org complete dim=2
#pragma HLS array_partition variable=lineSad_org complete dim=0

//#pragma HLS array_partition variable=subSw complete dim=1
//#pragma HLS array_partition variable=org complete dim=1
//#pragma HLS array_partition variable=lineSad complete dim=0
#endif
#endif	// #if !IME_PRAGMA_ON_OP

	U5 calcH;

	for (calcH = 0; calcH < (MAX_CU_H >> 2); calcH++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		sadLineDoubleSkipLv2(subSw_org, org_org, lineSad_org, 
			//subSw, org, lineSad, 
			baseH, maxWidthScu, maxHeightScu,
			calcH);
	}

}

void searchSubWindowsInLineDoubleSkip(
	//U8 searchLv,
	S14 searchPosY,
	U32 lamdaMv,
	U7 maxWidth,
	U7 maxHeight,

	U32 sadRow_org[4][4][((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH)],
	pel orgCp0_0_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp0_1_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp0_2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp0_3_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_0_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_1_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_3_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_0_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_1_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_3_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_0_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_1_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_3_org[MAX_CU_H >> 2][MAX_CU_W >> 2],

	pel subSw0_0_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw0_1_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw0_2_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw0_3_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_0_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_1_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_2_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_3_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_0_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_1_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_2_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_3_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_0_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_1_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_2_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_3_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)]
	//,
	////=========================================================================================================================
	//U32 sadRow[4][4][((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH)],
	//pel orgCp0_0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0_1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0_2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0_3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel subSw0_0[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0_1[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0_2[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0_3[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_0[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_1[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_2[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_3[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_0[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_1[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_2[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_3[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_0[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_1[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_2[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_3[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)]
)
{
#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON

#pragma HLS array_partition variable=sadRow_org complete dim=0

#pragma HLS array_partition variable=orgCp0_0_org complete dim=2
#pragma HLS array_partition variable=orgCp0_1_org complete dim=2
#pragma HLS array_partition variable=orgCp0_2_org complete dim=2
#pragma HLS array_partition variable=orgCp0_3_org complete dim=2

#pragma HLS array_partition variable=orgCp1_0_org complete dim=2
#pragma HLS array_partition variable=orgCp1_1_org complete dim=2
#pragma HLS array_partition variable=orgCp1_2_org complete dim=2
#pragma HLS array_partition variable=orgCp1_3_org complete dim=2

#pragma HLS array_partition variable=orgCp2_0_org complete dim=2
#pragma HLS array_partition variable=orgCp2_1_org complete dim=2
#pragma HLS array_partition variable=orgCp2_2_org complete dim=2
#pragma HLS array_partition variable=orgCp2_3_org complete dim=2

#pragma HLS array_partition variable=orgCp3_0_org complete dim=2
#pragma HLS array_partition variable=orgCp3_1_org complete dim=2
#pragma HLS array_partition variable=orgCp3_2_org complete dim=2
#pragma HLS array_partition variable=orgCp3_3_org complete dim=2

#pragma HLS array_partition variable=subSw0_0_org complete dim=2
#pragma HLS array_partition variable=subSw0_1_org complete dim=2
#pragma HLS array_partition variable=subSw0_2_org complete dim=2
#pragma HLS array_partition variable=subSw0_3_org complete dim=2

#pragma HLS array_partition variable=subSw1_0_org complete dim=2
#pragma HLS array_partition variable=subSw1_1_org complete dim=2
#pragma HLS array_partition variable=subSw1_2_org complete dim=2
#pragma HLS array_partition variable=subSw1_3_org complete dim=2

#pragma HLS array_partition variable=subSw2_0_org complete dim=2
#pragma HLS array_partition variable=subSw2_1_org complete dim=2
#pragma HLS array_partition variable=subSw2_2_org complete dim=2
#pragma HLS array_partition variable=subSw2_3_org complete dim=2

#pragma HLS array_partition variable=subSw3_0_org complete dim=2
#pragma HLS array_partition variable=subSw3_1_org complete dim=2
#pragma HLS array_partition variable=subSw3_2_org complete dim=2
#pragma HLS array_partition variable=subSw3_3_org complete dim=2
////===============================================================
//#pragma HLS array_partition variable=sadRow complete dim=0
//
//#pragma HLS array_partition variable=orgCp0_0 complete dim=1
//#pragma HLS array_partition variable=orgCp0_1 complete dim=1
//#pragma HLS array_partition variable=orgCp0_2 complete dim=1
//#pragma HLS array_partition variable=orgCp0_3 complete dim=1
//
//#pragma HLS array_partition variable=orgCp1_0 complete dim=1
//#pragma HLS array_partition variable=orgCp1_1 complete dim=1
//#pragma HLS array_partition variable=orgCp1_2 complete dim=1
//#pragma HLS array_partition variable=orgCp1_3 complete dim=1
//
//#pragma HLS array_partition variable=orgCp2_0 complete dim=1
//#pragma HLS array_partition variable=orgCp2_1 complete dim=1
//#pragma HLS array_partition variable=orgCp2_2 complete dim=1
//#pragma HLS array_partition variable=orgCp2_3 complete dim=1
//
//#pragma HLS array_partition variable=orgCp3_0 complete dim=1
//#pragma HLS array_partition variable=orgCp3_1 complete dim=1
//#pragma HLS array_partition variable=orgCp3_2 complete dim=1
//#pragma HLS array_partition variable=orgCp3_3 complete dim=1
//
//#pragma HLS array_partition variable=subSw0_0 complete dim=1
//#pragma HLS array_partition variable=subSw0_1 complete dim=1
//#pragma HLS array_partition variable=subSw0_2 complete dim=1
//#pragma HLS array_partition variable=subSw0_3 complete dim=1
//
//#pragma HLS array_partition variable=subSw1_0 complete dim=1
//#pragma HLS array_partition variable=subSw1_1 complete dim=1
//#pragma HLS array_partition variable=subSw1_2 complete dim=1
//#pragma HLS array_partition variable=subSw1_3 complete dim=1
//
//#pragma HLS array_partition variable=subSw2_0 complete dim=1
//#pragma HLS array_partition variable=subSw2_1 complete dim=1
//#pragma HLS array_partition variable=subSw2_2 complete dim=1
//#pragma HLS array_partition variable=subSw2_3 complete dim=1
//
//#pragma HLS array_partition variable=subSw3_0 complete dim=1
//#pragma HLS array_partition variable=subSw3_1 complete dim=1
//#pragma HLS array_partition variable=subSw3_2 complete dim=1
//#pragma HLS array_partition variable=subSw3_3 complete dim=1
#endif
#endif	// #if !IME_PRAGMA_ON_OP

	U5 maxSubWidth_org[4][4] = { 0 };
	U5 maxSubHeight_org[4][4] = { 0 };
	U5 maxSubWidth[4][4] = {0};
	U5 maxSubHeight[4][4] = {0};
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=maxSubWidth_org complete dim=0
#pragma HLS array_partition variable=maxSubHeight_org complete dim=0
#pragma HLS array_partition variable=maxSubWidth complete dim=0
#pragma HLS array_partition variable=maxSubHeight complete dim=0
#endif

	U8 compX, compY;
#if SEARCH_FULLLV1==0
	if (searchLv == 0)
	{
#endif
		for (compY = 0; compY < 4; compY++)
		{
#if IME_PRAGMA_ON
#pragma HLS UNROLL
#endif
			for (compX = 0; compX < 4; compX++)
			{
#if IME_PRAGMA_ON
#pragma HLS UNROLL
#endif
				maxSubWidth_org[compY][compX] = (U5)(maxWidth >> 2);
				maxSubHeight_org[compY][compX] = (U5)(maxHeight >> 2);
			}
		}

		
		for (compY = 0; compY < 4; compY++)
		{
#if IME_PRAGMA_ON
#pragma HLS UNROLL
#endif
			for (compX = 0; compX < 4; compX++)
			{
#if IME_PRAGMA_ON
#pragma HLS UNROLL
#endif
				maxSubWidth[compY][compX] = (U5)(maxWidth >> 2);
				maxSubHeight[compY][compX] = (U5)(maxHeight >> 2);
			}
		}
#if SEARCH_FULLLV1==0
	}
	else
	{
		for (compX = 0; compX < 4; compX++)
		{
#if IME_PRAGMA_ON
#pragma HLS UNROLL
#endif
			maxSubWidth[compX][0] = (U5)min_ime((maxWidth >> 1), 16, S7);		maxSubHeight[compX][0] = (U5)min_ime((maxHeight >> 1), 16, S7);
			maxSubWidth[compX][1] = (U5)max_ime((maxWidth >> 1) - 16, 16, S7);	maxSubHeight[compX][1] = (U5)min_ime((maxHeight >> 1), 16, S7);
			maxSubWidth[compX][2] = (U5)min_ime((maxWidth >> 1), 16, S7);		maxSubHeight[compX][2] = (U5)max_ime((maxHeight >> 1) - 16, 0, S7);
			maxSubWidth[compX][3] = (U5)max_ime((maxWidth >> 1) - 16, 0, S7);	maxSubHeight[compX][3] = (U5)max_ime((maxHeight >> 1) - 16, 0, S7);
		}
	}
#endif

	searchLineHorDoubleSkipLv2(subSw0_0_org, orgCp0_0_org, sadRow_org[0][0], 
		//subSw0_0, orgCp0_0, sadRow[0][0], 
		searchPosY, maxSubWidth[0][0], maxSubHeight[0][0]);

	//// check sadRow_org[0][0]
	//for (int i = 0; i < ((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH); i++)
	//{
	//	if (sadRow_org[0][0][i] != sadRow[0][0][i])
	//	{
	//		printf("sadRow_org[0][0] error! ");
	//		printf("sadRow_org[0][0][%d] = %d\tsadRow[0][0][%d] = %d\n", i, sadRow_org[0][0][i], i, sadRow[0][0][i]);
	//	}
	//}

	searchLineHorDoubleSkipLv2(subSw1_0_org, orgCp1_0_org, sadRow_org[1][0], 
		//subSw0_1, orgCp0_1, sadRow[0][1], 
		searchPosY, maxSubWidth[0][1], maxSubHeight[0][1]);

	//// check sadRow_org[0][1]
	//for (int i = 0; i < ((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH); i++)
	//{
	//	if (sadRow_org[1][0][i] != sadRow[0][1][i])
	//	{
	//		printf("sadRow_org[1][0] error! ");
	//		printf("sadRow_org[1][0][%d] = %d\tsadRow[0][1][%d] = %d\n", i, sadRow_org[1][0][i], i, sadRow[0][1][i]);
	//	}
	//}

	//for (int j = 0; j < 20; j++)
	//{
	//	for (int i = 0; i < 28; i++)
	//	{
	//		if (subSw1_0_org[j][i] != subSw0_1[i][j])
	//		{
	//			printf("subSw1_0_org error! ");
	//			printf("subSw1_0_org[%d][%d] = %d\tsubSw0_1[%d][%d] = %d\n", j, i, subSw1_0_org[j][i], i, j, subSw0_1[i][j]);
	//		}
	//	}
	//}

	//for (int j = 0; j < 16; j++)
	//{
	//	for (int i = 0; i < 16; i++)
	//	{
	//		if (orgCp0_1_org[j][i] != orgCp1_0[i][j])
	//		{
	//			printf("orgCp0_1_org error! ");
	//			printf("orgCp0_1_org[%d][%d] = %d\torgCp0_1[%d][%d] = %d\n", j, i, orgCp0_1_org[j][i], i, j, orgCp0_1[i][j]);
	//		}
	//	}
	//}

	searchLineHorDoubleSkipLv2(subSw2_0_org, orgCp2_0_org, sadRow_org[2][0], 
		//subSw0_2, orgCp0_2, sadRow[0][2], 
		searchPosY, maxSubWidth[0][2], maxSubHeight[0][2]);
	searchLineHorDoubleSkipLv2(subSw3_0_org, orgCp3_0_org, sadRow_org[3][0], 
		//subSw0_3, orgCp0_3, sadRow[0][3], 
		searchPosY, maxSubWidth[0][3], maxSubHeight[0][3]);

	searchLineHorDoubleSkipLv2(subSw0_1_org, orgCp0_1_org, sadRow_org[0][1], 
		//subSw1_0, orgCp1_0, sadRow[1][0], 
		searchPosY, maxSubWidth[1][0], maxSubHeight[1][0]);
	searchLineHorDoubleSkipLv2(subSw1_1_org, orgCp1_1_org, sadRow_org[1][1], 
		//subSw1_1, orgCp1_1, sadRow[1][1], 
		searchPosY, maxSubWidth[1][1], maxSubHeight[1][1]);

	//for (int j = 0; j < 20; j++)
	//{
	//	for (int i = 0; i < 28; i++)
	//	{
	//		if (subSw1_1_org[j][i] != subSw1_1[i][j])
	//		{
	//			printf("subSw1_1_org error! ");
	//			printf("subSw1_1_org[%d][%d] = %d\tsubSw1_1[%d][%d] = %d\n", j, i, subSw1_1_org[j][i], i, j, subSw1_1[i][j]);
	//		}
	//	}
	//}

	//for (int j = 0; j < 16; j++)
	//{
	//	for (int i = 0; i < 16; i++)
	//	{
	//		if (orgCp1_1_org[j][i] != orgCp1_1[i][j])
	//		{
	//			printf("orgCp1_1_org error! ");
	//			printf("orgCp1_1_org[%d][%d] = %d\torgCp1_1[%d][%d] = %d\n", j, i, orgCp1_1_org[j][i], i, j, orgCp1_1[i][j]);
	//		}
	//	}
	//}

	//for (int i = 0; i < ((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH); i++)
	//{
	//	if (sadRow_org[1][1][i] != sadRow[1][1][i])
	//	{
	//		printf("sadRow_org[1][1] error! ");
	//		printf("sadRow_org[1][1][%d] = %d\tsadRow[1][1][%d] = %d\n", i, sadRow_org[1][1][i], i, sadRow[1][1][i]);
	//	}
	//}

	searchLineHorDoubleSkipLv2(subSw2_1_org, orgCp2_1_org, sadRow_org[2][1], 
		//subSw1_2, orgCp1_2, sadRow[1][2], 
		searchPosY, maxSubWidth[1][2], maxSubHeight[1][2]);
	searchLineHorDoubleSkipLv2(subSw3_1_org, orgCp3_1_org, sadRow_org[3][1], 
		//subSw1_3, orgCp1_3, sadRow[1][3], 
		searchPosY, maxSubWidth[1][3], maxSubHeight[1][3]);

	searchLineHorDoubleSkipLv2(subSw0_2_org, orgCp0_2_org, sadRow_org[0][2], 
		//subSw2_0, orgCp2_0, sadRow[2][0], 
		searchPosY, maxSubWidth[2][0], maxSubHeight[2][0]);
	searchLineHorDoubleSkipLv2(subSw1_2_org, orgCp1_2_org, sadRow_org[1][2], 
		//subSw2_1, orgCp2_1, sadRow[2][1], 
		searchPosY, maxSubWidth[2][1], maxSubHeight[2][1]);
	searchLineHorDoubleSkipLv2(subSw2_2_org, orgCp2_2_org, sadRow_org[2][2], 
		//subSw2_2, orgCp2_2, sadRow[2][2], 
		searchPosY, maxSubWidth[2][2], maxSubHeight[2][2]);
	searchLineHorDoubleSkipLv2(subSw3_2_org, orgCp3_2_org, sadRow_org[3][2], 
		//subSw2_3, orgCp2_3, sadRow[2][3], 
		searchPosY, maxSubWidth[2][3], maxSubHeight[2][3]);

	searchLineHorDoubleSkipLv2(subSw0_3_org, orgCp0_3_org, sadRow_org[0][3], 
		//subSw3_0, orgCp3_0, sadRow[3][0], 
		searchPosY, maxSubWidth[3][0], maxSubHeight[3][0]);
	searchLineHorDoubleSkipLv2(subSw1_3_org, orgCp1_3_org, sadRow_org[1][3], 
		//subSw3_1, orgCp3_1, sadRow[3][1], 
		searchPosY, maxSubWidth[3][1], maxSubHeight[3][1]);
	searchLineHorDoubleSkipLv2(subSw2_3_org, orgCp2_3_org, sadRow_org[2][3], 
		//subSw3_2, orgCp3_2, sadRow[3][2], 
		searchPosY, maxSubWidth[3][2], maxSubHeight[3][2]);
	searchLineHorDoubleSkipLv2(subSw3_3_org, orgCp3_3_org, sadRow_org[3][3], 
		//subSw3_3, orgCp3_3, sadRow[3][3], 
		searchPosY, maxSubWidth[3][3], maxSubHeight[3][3]);

	//// check sadRow_org[XX][XX]
	//for (int i = 0; i < ((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH); i++)
	//{
	//	if (sadRow_org[2][0][i] != sadRow[0][2][i])
	//	{
	//		printf("sadRow_org[2][0] error! ");
	//		printf("sadRow_org[2][0][%d] = %d\tsadRow[0][2][%d] = %d\n", i, sadRow_org[2][0][i], i, sadRow[0][2][i]);
	//	}
	//	if (sadRow_org[3][0][i] != sadRow[0][3][i])
	//	{
	//		printf("sadRow_org[3][0] error! ");
	//		printf("sadRow_org[3][0][%d] = %d\tsadRow[0][3][%d] = %d\n", i, sadRow_org[3][0][i], i, sadRow[0][3][i]);
	//	}
	//	//if (sadRow_org[1][1][i] != sadRow[1][1][i])
	//	//{
	//	//	printf("sadRow_org[1][1] error! ");
	//	//	printf("sadRow_org[1][1][%d] = %d\tsadRow[0][3][%d] = %d\n", i, sadRow_org[1][1][i], i, sadRow[1][1][i]);
	//	//}
	//}

}


void compareBestSadLineSkip(
	//U8 searchLv,
	S14 searchPosY,
	//U32 bestCost_org[4][4],
	//S14 bestMvSubSw_org[4][4][2],

	U32 bestCost[4][4],
	S14 bestMvSubSw[4][4][2],
	U32 sadRow_org[4][4][((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH)]
	//,
	//U32 sadRow[4][4][((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH)]
)
{
#pragma HLS inline off
#if IME_PRAGMA_ON
//#pragma HLS array_partition variable=bestCost_org complete dim=0
//#pragma HLS array_partition variable=bestMVSubSw_org complete dim=0

#pragma HLS array_partition variable=bestCost complete dim=0	
#pragma HLS array_partition variable=bestMVSubSw complete dim=0
#endif
	S14 searchPosX;
	U8 compX, compY;
#if SEARCH_FULLLV1==0
	if (searchLv == 0)
	{
#endif
		for (searchPosX = 0; searchPosX < ((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH); searchPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			
			for (compY = 0; compY < 4; compY++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				for (compX = 0; compX < 4; compX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
#if 0//1
					if (bestCost[compX][compY] > sadRow[compX][compY][searchPosX])
					{
						bestCost[compX][compY] = sadRow[compX][compY][searchPosX];
						bestMvSubSw[compX][compY][0] = (searchPosX << SKIP_COARSE_SEARCH);
						bestMvSubSw[compX][compY][1] = searchPosY;
					}
#else
#if 1
					if (bestCost[compX][compY] > sadRow_org[compY][compX][searchPosX])
					{
						bestCost[compX][compY] = sadRow_org[compY][compX][searchPosX];
						bestMvSubSw[compX][compY][0] = (searchPosX << SKIP_COARSE_SEARCH);
						bestMvSubSw[compX][compY][1] = searchPosY;
					}
#else
					if (bestCost[compY][compX] > sadRow_org[compY][compX][searchPosX])
					{
						bestCost[compY][compX] = sadRow_org[compY][compX][searchPosX];
						bestMvSubSw[compY][compX][0] = (searchPosX << SKIP_COARSE_SEARCH);
						bestMvSubSw[compY][compX][1] = searchPosY;
					}
#endif
#endif
				}
			}
		}

//		for (searchPosX = 0; searchPosX < ((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH); searchPosX++)
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//
//			for (compY = 0; compY < 4; compY++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				for (compX = 0; compX < 4; compX++)
//				{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//
//					if (bestCost_org[compY][compX] > sadRow_org[compY][compX][searchPosX])
//					{
//						bestCost_org[compY][compX] = sadRow_org[compY][compX][searchPosX];
//						bestMvSubSw_org[compY][compX][0] = (searchPosX << SKIP_COARSE_SEARCH);
//						bestMvSubSw_org[compY][compX][1] = searchPosY;
//					}
//
//				}
//			}
//		}

		//// check bestMvSubSw_org 
		//for (int j = 0; j < 4; j++)
		//{
		//	for (int i = 0; i < 4; i++)
		//	{
		//		for (int x = 0; x < 2; x++)
		//		{
		//			if (bestMvSubSw_org[j][i][x] != bestMvSubSw[i][j][x])
		//			{
		//				printf("bestMvSubSw_org error! ");
		//				printf("bestMvSubSw_org[%d][%d][%d] = %d\tbestMvSubSw[%d][%d][%d] = %d\n", j, i, x, bestMvSubSw_org[j][i][x], i, j, x, bestMvSubSw_org[i][j][x]);
		//			}
		//		}
		//	}
		//}

		//// check bestCost_org 
		//for (int j = 0; j < 4; j++)
		//{
		//	for (int i = 0; i < 4; i++)
		//	{
		//		if (bestCost_org[j][i] != bestCost[i][j])
		//		{
		//			printf("bestCost_org error! ");
		//			printf("bestCost_org[%d][%d] = %d\tbestCost[%d][%d] = %d\n", j, i, bestCost_org[j][i], i, j, bestCost[i][j]);
		//		}
		//	}
		//}

//		for (searchPosX = 0; searchPosX < ((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH); searchPosX++)
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//
//			for (compY = 0; compY < 4; compY++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				for (compX = 0; compX < 4; compX++)
//				{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//					if (bestCost_org[compY][compX] > sadRow_org[compY][compX][searchPosX])
//					{
//						bestCost_org[compY][compX] = sadRow_org[compY][compX][searchPosX];
//						bestMvSubSw_org[compY][compX][0] = (searchPosX << SKIP_COARSE_SEARCH);
//						bestMvSubSw_org[compY][compX][1] = searchPosY;
//					}
//
//				}
//			}
//		}
#if SEARCH_FULLLV1==0
	}
	else
	{
		for (searchPosX = 0; searchPosX < ((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH); searchPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			for (compX = 0; compX < 4; compX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				if (bestCost[compX][0] > sadRow[compX][0][searchPosX] + sadRow[compX][1][searchPosX] + sadRow[compX][2][searchPosX] + sadRow[compX][3][searchPosX])
				{
					bestCost[compX][0] = sadRow[compX][0][searchPosX] + sadRow[compX][1][searchPosX] + sadRow[compX][2][searchPosX] + sadRow[compX][3][searchPosX];
					if (compX == 0)
					{
						bestMvSubSw[compX][0][0] = (searchPosX << (SKIP_COARSE_SEARCH));
						bestMvSubSw[compX][0][1] = searchPosY;
					}
					else if (compX == 1)
					{
						bestMvSubSw[compX][0][0] = (searchPosX << (SKIP_COARSE_SEARCH)) + (MMEA_LEVEL1_SR_V >> 2);
						bestMvSubSw[compX][0][1] = searchPosY;
					}
					else if (compX == 2)
					{
						bestMvSubSw[compX][0][0] = (searchPosX << (SKIP_COARSE_SEARCH));
						bestMvSubSw[compX][0][1] = searchPosY + (MMEA_LEVEL1_SR_H >> 2);
					}
					else //if (compX == 3)
					{
						bestMvSubSw[compX][0][0] = (searchPosX << (SKIP_COARSE_SEARCH)) + (MMEA_LEVEL1_SR_V >> 2);
						bestMvSubSw[compX][0][1] = searchPosY + (MMEA_LEVEL1_SR_H >> 2);
					}
				}
			}
		}
	}
#endif

}


void searchWindowsDoubleSkip(
	//U8 searchLv,
	S14 gmvp[2],
	S14 posLT[3][2],
	U32 lamdaMv,
	U7 maxWidth,
	U7 maxHeight,
	//U32 bestCost_org[4][4],
	//S14 bestMvSubSw_org[4][4][2],
	//====================================
	U32 bestCost[4][4],
	S14 bestMvSubSw[4][4][2],
	//====================================

	pel orgCp0_0_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp0_1_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp0_2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp0_3_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_0_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_1_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_3_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_0_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_1_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_3_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_0_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_1_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_3_org[MAX_CU_H >> 2][MAX_CU_W >> 2],

	pel subSw0_0Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw0_1Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw0_2Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw0_3Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_0Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_1Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_2Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_3Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_0Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_1Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_2Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_3Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_0Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_1Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_2Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_3Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)]

#if COARSE_SEARCH_DOUBLE_SPEED
	,
	pel orgCp0_0Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp0_1Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp0_2Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp0_3Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_0Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_1Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_2Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp1_3Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_0Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_1Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_2Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp2_3Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_0Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_1Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_2Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	pel orgCp3_3Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2],

	pel subSw0_0Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw0_1Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw0_2Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw0_3Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_0Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_1Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_2Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw1_3Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_0Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_1Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_2Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw2_3Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_0Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_1Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_2Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
	pel subSw3_3Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)],
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED



	//,
	////==========================================================
	//pel orgCp0_0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0_1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0_2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0_3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],

	//pel orgCp0_0Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0_1Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0_2Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp0_3Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_0Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_1Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_2Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp1_3Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_0Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_1Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_2Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp2_3Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_0Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_1Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_2Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel orgCp3_3Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],

	//pel subSw0_0Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0_1Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0_2Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0_3Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_0Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_1Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_2Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_3Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_0Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_1Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_2Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_3Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_0Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_1Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_2Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_3Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],

	//pel subSw0_0Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0_1Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0_2Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw0_3Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_0Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_1Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_2Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw1_3Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_0Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_1Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_2Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw2_3Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_0Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_1Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_2Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)],
	//pel subSw3_3Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)]
)
{

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON

#pragma HLS array_partition variable=orgCp0_0_org complete dim=2
#pragma HLS array_partition variable=orgCp0_1_org complete dim=2
#pragma HLS array_partition variable=orgCp0_2_org complete dim=2
#pragma HLS array_partition variable=orgCp0_3_org complete dim=2

#pragma HLS array_partition variable=orgCp1_0_org complete dim=2
#pragma HLS array_partition variable=orgCp1_1_org complete dim=2
#pragma HLS array_partition variable=orgCp1_2_org complete dim=2
#pragma HLS array_partition variable=orgCp1_3_org complete dim=2

#pragma HLS array_partition variable=orgCp2_0_org complete dim=2
#pragma HLS array_partition variable=orgCp2_1_org complete dim=2
#pragma HLS array_partition variable=orgCp2_2_org complete dim=2
#pragma HLS array_partition variable=orgCp2_3_org complete dim=2

#pragma HLS array_partition variable=orgCp3_0_org complete dim=2
#pragma HLS array_partition variable=orgCp3_1_org complete dim=2
#pragma HLS array_partition variable=orgCp3_2_org complete dim=2
#pragma HLS array_partition variable=orgCp3_3_org complete dim=2

#pragma HLS array_partition variable=subSw0_0Up_org complete dim=2
#pragma HLS array_partition variable=subSw0_1Up_org complete dim=2
#pragma HLS array_partition variable=subSw0_2Up_org complete dim=2
#pragma HLS array_partition variable=subSw0_3Up_org complete dim=2

#pragma HLS array_partition variable=subSw1_0Up_org complete dim=2
#pragma HLS array_partition variable=subSw1_1Up_org complete dim=2
#pragma HLS array_partition variable=subSw1_2Up_org complete dim=2
#pragma HLS array_partition variable=subSw1_3Up_org complete dim=2

#pragma HLS array_partition variable=subSw2_0Up_org complete dim=2
#pragma HLS array_partition variable=subSw2_1Up_org complete dim=2
#pragma HLS array_partition variable=subSw2_2Up_org complete dim=2
#pragma HLS array_partition variable=subSw2_3Up_org complete dim=2

#pragma HLS array_partition variable=subSw3_0Up_org complete dim=2
#pragma HLS array_partition variable=subSw3_1Up_org complete dim=2
#pragma HLS array_partition variable=subSw3_2Up_org complete dim=2
#pragma HLS array_partition variable=subSw3_3Up_org complete dim=2

#if COARSE_SEARCH_DOUBLE_SPEED
#pragma HLS array_partition variable=orgCp0_0Down_org complete dim=2
#pragma HLS array_partition variable=orgCp0_1Down_org complete dim=2
#pragma HLS array_partition variable=orgCp0_2Down_org complete dim=2
#pragma HLS array_partition variable=orgCp0_3Down_org complete dim=2

#pragma HLS array_partition variable=orgCp1_0Down_org complete dim=2
#pragma HLS array_partition variable=orgCp1_1Down_org complete dim=2
#pragma HLS array_partition variable=orgCp1_2Down_org complete dim=2
#pragma HLS array_partition variable=orgCp1_3Down_org complete dim=2

#pragma HLS array_partition variable=orgCp2_0Down_org complete dim=2
#pragma HLS array_partition variable=orgCp2_1Down_org complete dim=2
#pragma HLS array_partition variable=orgCp2_2Down_org complete dim=2
#pragma HLS array_partition variable=orgCp2_3Down_org complete dim=2

#pragma HLS array_partition variable=orgCp3_0Down_org complete dim=2
#pragma HLS array_partition variable=orgCp3_1Down_org complete dim=2
#pragma HLS array_partition variable=orgCp3_2Down_org complete dim=2
#pragma HLS array_partition variable=orgCp3_3Down_org complete dim=2

#pragma HLS array_partition variable=subSw0_0Down_org complete dim=2
#pragma HLS array_partition variable=subSw0_1Down_org complete dim=2
#pragma HLS array_partition variable=subSw0_2Down_org complete dim=2
#pragma HLS array_partition variable=subSw0_3Down_org complete dim=2

#pragma HLS array_partition variable=subSw1_0Down_org complete dim=2
#pragma HLS array_partition variable=subSw1_1Down_org complete dim=2
#pragma HLS array_partition variable=subSw1_2Down_org complete dim=2
#pragma HLS array_partition variable=subSw1_3Down_org complete dim=2

#pragma HLS array_partition variable=subSw2_0Down_org complete dim=2
#pragma HLS array_partition variable=subSw2_1Down_org complete dim=2
#pragma HLS array_partition variable=subSw2_2Down_org complete dim=2
#pragma HLS array_partition variable=subSw2_3Down_org complete dim=2

#pragma HLS array_partition variable=subSw3_0Down_org complete dim=2
#pragma HLS array_partition variable=subSw3_1Down_org complete dim=2
#pragma HLS array_partition variable=subSw3_2Down_org complete dim=2
#pragma HLS array_partition variable=subSw3_3Down_org complete dim=2
#endif // #if COARSE_SEARCH_DOUBLE_SPEED

////========================================================

//#pragma HLS array_partition variable=bestCost_org complete dim=0
//#pragma HLS array_partition variable=bestMvSubSw_org complete dim=0

#pragma HLS array_partition variable=bestCost complete dim=0
#pragma HLS array_partition variable=bestMVSubSw complete dim=0

//
//#pragma HLS array_partition variable=orgCp0_0 complete dim=1
//#pragma HLS array_partition variable=orgCp0_1 complete dim=1
//#pragma HLS array_partition variable=orgCp0_2 complete dim=1
//#pragma HLS array_partition variable=orgCp0_3 complete dim=1
//
//#pragma HLS array_partition variable=orgCp1_0 complete dim=1
//#pragma HLS array_partition variable=orgCp1_1 complete dim=1
//#pragma HLS array_partition variable=orgCp1_2 complete dim=1
//#pragma HLS array_partition variable=orgCp1_3 complete dim=1
//
//#pragma HLS array_partition variable=orgCp2_0 complete dim=1
//#pragma HLS array_partition variable=orgCp2_1 complete dim=1
//#pragma HLS array_partition variable=orgCp2_2 complete dim=1
//#pragma HLS array_partition variable=orgCp2_3 complete dim=1
//
//#pragma HLS array_partition variable=orgCp3_0 complete dim=1
//#pragma HLS array_partition variable=orgCp3_1 complete dim=1
//#pragma HLS array_partition variable=orgCp3_2 complete dim=1
//#pragma HLS array_partition variable=orgCp3_3 complete dim=1
//
//#pragma HLS array_partition variable=subSw0_0Up complete dim=1
//#pragma HLS array_partition variable=subSw0_1Up complete dim=1
//#pragma HLS array_partition variable=subSw0_2Up complete dim=1
//#pragma HLS array_partition variable=subSw0_3Up complete dim=1
//
//#pragma HLS array_partition variable=subSw1_0Up complete dim=1
//#pragma HLS array_partition variable=subSw1_1Up complete dim=1
//#pragma HLS array_partition variable=subSw1_2Up complete dim=1
//#pragma HLS array_partition variable=subSw1_3Up complete dim=1
//
//#pragma HLS array_partition variable=subSw2_0Up complete dim=1
//#pragma HLS array_partition variable=subSw2_1Up complete dim=1
//#pragma HLS array_partition variable=subSw2_2Up complete dim=1
//#pragma HLS array_partition variable=subSw2_3Up complete dim=1
//
//#pragma HLS array_partition variable=subSw3_0Up complete dim=1
//#pragma HLS array_partition variable=subSw3_1Up complete dim=1
//#pragma HLS array_partition variable=subSw3_2Up complete dim=1
//#pragma HLS array_partition variable=subSw3_3Up complete dim=1
//
//#pragma HLS array_partition variable=orgCp0_0Down complete dim=1
//#pragma HLS array_partition variable=orgCp0_1Down complete dim=1
//#pragma HLS array_partition variable=orgCp0_2Down complete dim=1
//#pragma HLS array_partition variable=orgCp0_3Down complete dim=1
//
//#pragma HLS array_partition variable=orgCp1_0Down complete dim=1
//#pragma HLS array_partition variable=orgCp1_1Down complete dim=1
//#pragma HLS array_partition variable=orgCp1_2Down complete dim=1
//#pragma HLS array_partition variable=orgCp1_3Down complete dim=1
//
//#pragma HLS array_partition variable=orgCp2_0Down complete dim=1
//#pragma HLS array_partition variable=orgCp2_1Down complete dim=1
//#pragma HLS array_partition variable=orgCp2_2Down complete dim=1
//#pragma HLS array_partition variable=orgCp2_3Down complete dim=1
//
//#pragma HLS array_partition variable=orgCp3_0Down complete dim=1
//#pragma HLS array_partition variable=orgCp3_1Down complete dim=1
//#pragma HLS array_partition variable=orgCp3_2Down complete dim=1
//#pragma HLS array_partition variable=orgCp3_3Down complete dim=1
//
//#pragma HLS array_partition variable=subSw0_0Down complete dim=1
//#pragma HLS array_partition variable=subSw0_1Down complete dim=1
//#pragma HLS array_partition variable=subSw0_2Down complete dim=1
//#pragma HLS array_partition variable=subSw0_3Down complete dim=1
//
//#pragma HLS array_partition variable=subSw1_0Down complete dim=1
//#pragma HLS array_partition variable=subSw1_1Down complete dim=1
//#pragma HLS array_partition variable=subSw1_2Down complete dim=1
//#pragma HLS array_partition variable=subSw1_3Down complete dim=1
//
//#pragma HLS array_partition variable=subSw2_0Down complete dim=1
//#pragma HLS array_partition variable=subSw2_1Down complete dim=1
//#pragma HLS array_partition variable=subSw2_2Down complete dim=1
//#pragma HLS array_partition variable=subSw2_3Down complete dim=1
//
//#pragma HLS array_partition variable=subSw3_0Down complete dim=1
//#pragma HLS array_partition variable=subSw3_1Down complete dim=1
//#pragma HLS array_partition variable=subSw3_2Down complete dim=1
//#pragma HLS array_partition variable=subSw3_3Down complete dim=1
#endif

#endif	// #if !IME_PRAGMA_ON_OP

	S14 searchPosY;
	U32 sadRow_org[4][4][((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH)];

#if COARSE_SEARCH_DOUBLE_SPEED
	U32 sadRowDown_org[4][4][((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH)];
#endif

	//U32 sadRow[4][4][((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH)];
	//U32 sadRowDown[4][4][((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH)];
#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=sadRow_org complete dim=0
#endif	// #if !IME_PRAGMA_ON_OP

#if COARSE_SEARCH_DOUBLE_SPEED
#pragma HLS array_partition variable=sadRowDown_org complete dim=0
#endif

//#pragma HLS array_partition variable=sadRow complete dim=0
//#pragma HLS array_partition variable=sadRowDown complete dim=0
#endif

	//U32 bestCostUp_org[4][4] = {}; S14 bestMvSubSwUp_org[4][4][2] = {};
	//U32 bestCostDown_org[4][4] = {}; S14 bestMvSubSwDown_org[4][4][2] = {};

#if COARSE_SEARCH_DOUBLE_SPEED
	U32 bestCostUp[4][4] = {}; S14 bestMvSubSwUp[4][4][2] = {};
	U32 bestCostDown[4][4] = {}; S14 bestMvSubSwDown[4][4][2] = {};
#endif

#if IME_PRAGMA_ON
//#pragma HLS array_partition variable=bestCostUp_org complete dim=0
//#pragma HLS array_partition variable=bestMvSubSwUp_org complete dim=0
//#pragma HLS array_partition variable=bestCostDown_org complete dim=0
//#pragma HLS array_partition variable=bestMvSubSwDown_org complete dim=0

#if COARSE_SEARCH_DOUBLE_SPEED
#pragma HLS array_partition variable=bestCostUp complete dim=0
#pragma HLS array_partition variable=bestMvSubSwUp complete dim=0
#pragma HLS array_partition variable=bestCostDown complete dim=0
#pragma HLS array_partition variable=bestMvSubSwDown complete dim=0
#endif

#endif

	U3 compY, compX;

//	for (compY = 0; compY < 4; compY++)
//	{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//		for (compX = 0; compX < 4; compX++)
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//			bestCost_org[compY][compX] = 0xFFFFFFFF;
//			bestMvSubSw_org[compY][compX][0] = 0;
//			bestMvSubSw_org[compY][compX][1] = 0;
//		}
//	}
//
//	for (compY = 0; compY < 4; compY++)
//	{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//		for (compX = 0; compX < 4; compX++)
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//			bestCostUp_org[compY][compX] = 0xFFFFFFFF;
//			bestMvSubSwUp_org[compY][compX][0] = 0;
//			bestMvSubSwUp_org[compY][compX][1] = 0;
//
//			bestCostDown[compY][compX] = 0xFFFFFFFF;
//			bestMvSubSwDown_org[compY][compX][0] = 0;
//			bestMvSubSwDown_org[compY][compX][1] = 0;
//		}
//	}
//
//
//	for (compY = 0; compY < 4; compY++)
//	{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//		for (compX = 0; compX < 4; compX++)
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//			bestCost_org[compY][compX] = 0xFFFFFFFF;
//			bestMvSubSw_org[compY][compX][0] = 0;
//			bestMvSubSw_org[compY][compX][1] = 0;
//		}
//	}
//
//	for (compY = 0; compY < 4; compY++)
//	{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//		for (compX = 0; compX < 4; compX++)
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//			bestCostUp_org[compY][compX] = 0xFFFFFFFF;
//			bestMvSubSwUp_org[compY][compX][0] = 0;
//			bestMvSubSwUp_org[compY][compX][1] = 0;
//
//			bestCostDown_org[compY][compX] = 0xFFFFFFFF;
//			bestMvSubSwDown_org[compY][compX][0] = 0;
//			bestMvSubSwDown_org[compY][compX][1] = 0;
//		}
//	}
//	//=========================================================================================
	for (compY = 0; compY < 4; compY++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (compX = 0; compX < 4; compX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			bestCost[compY][compX] = 0xFFFFFFFF;
			bestMvSubSw[compY][compX][0] = 0;
			bestMvSubSw[compY][compX][1] = 0;
		}
	}



#if COARSE_SEARCH_DOUBLE_SPEED
	for (compY = 0; compY < 4; compY++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (compX = 0; compX < 4; compX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			bestCostUp[compY][compX] = 0xFFFFFFFF;
			bestMvSubSwUp[compY][compX][0] = 0;
			bestMvSubSwUp[compY][compX][1] = 0;


			bestCostDown[compY][compX] = 0xFFFFFFFF;
			bestMvSubSwDown[compY][compX][0] = 0;
			bestMvSubSwDown[compY][compX][1] = 0;


		}
	}

	for (compY = 0; compY < 4; compY++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (compX = 0; compX < 4; compX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			bestCostUp[compY][compX] = 0xFFFFFFFF;
			bestMvSubSwUp[compY][compX][0] = 0;
			bestMvSubSwUp[compY][compX][1] = 0;

			bestCostDown[compY][compX] = 0xFFFFFFFF;
			bestMvSubSwDown[compY][compX][0] = 0;
			bestMvSubSwDown[compY][compX][1] = 0;

		}
	}

#endif







	for (searchPosY = 0; searchPosY < ((MMEA_LEVEL2_SR_H >> 3) >> (COARSE_SEARCH_DOUBLE_SPEED) >> (SKIP_COARSE_SEARCH)); searchPosY++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		initSadRowsSkip(
			//searchLv, 
			(searchPosY << SKIP_COARSE_SEARCH), 
			gmvp, 
			posLT, 
			lamdaMv, 
			sadRow_org
			//, 
			//sadRow
		);
#if COARSE_SEARCH_DOUBLE_SPEED
		initSadRowsSkip(
			//searchLv, 
			(searchPosY << SKIP_COARSE_SEARCH) + ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED), 
			gmvp, 
			posLT, 
			lamdaMv, 
			sadRowDown_org
			//, 
			//sadRowDown
		);
#endif

		//// check sadRow_org sadRowDown_org
		//for (int j = 0; j < 4; j++)
		//{
		//	for (int i = 0; i < 4; i++)
		//	{
		//		for (int x = 0; x < ((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH); x++)
		//		{
		//			if (sadRow_org[j][i][x] != sadRow[i][j][x])
		//			{
		//				printf("sadRow_org error! ");
		//				printf("sadRow_org[%d][%d][%d] = %d\tsadRow[%d][%d][%d] = %d\n", j, i, x, sadRow_org[j][i][x], i, j, x, sadRow[i][j][x]);
		//			}

		//			if (sadRowDown_org[j][i][x] != sadRowDown[i][j][x])
		//			{
		//				printf("sadRowDown_org error! ");
		//				printf("sadRowDown_org[%d][%d][%d] = %d\tsadRowDown[%d][%d][%d] = %d\n", j, i, x, sadRowDown_org[j][i][x], i, j, x, sadRowDown[i][j][x]);
		//			}
		//		}
		//	}
		//}

		searchSubWindowsInLineDoubleSkip(
			//searchLv,
			(searchPosY << SKIP_COARSE_SEARCH), lamdaMv, maxWidth, maxHeight, 

			sadRow_org,
			orgCp0_0_org,
			orgCp0_1_org,
			orgCp0_2_org,
			orgCp0_3_org,
			orgCp1_0_org,
			orgCp1_1_org,
			orgCp1_2_org,
			orgCp1_3_org,
			orgCp2_0_org,
			orgCp2_1_org,
			orgCp2_2_org,
			orgCp2_3_org,
			orgCp3_0_org,
			orgCp3_1_org,
			orgCp3_2_org,
			orgCp3_3_org,

			subSw0_0Up_org,
			subSw0_1Up_org,
			subSw0_2Up_org,
			subSw0_3Up_org,
			subSw1_0Up_org,
			subSw1_1Up_org,
			subSw1_2Up_org,
			subSw1_3Up_org,
			subSw2_0Up_org,
			subSw2_1Up_org,
			subSw2_2Up_org,
			subSw2_3Up_org,
			subSw3_0Up_org,
			subSw3_1Up_org,
			subSw3_2Up_org,
			subSw3_3Up_org
			//,
			////=====================================================
			//sadRow,
			//orgCp0_0, orgCp0_1, orgCp0_2, orgCp0_3, orgCp1_0, orgCp1_1, orgCp1_2, orgCp1_3, orgCp2_0, orgCp2_1, orgCp2_2, orgCp2_3, orgCp3_0, orgCp3_1, orgCp3_2, orgCp3_3,
			//subSw0_0Up, subSw0_1Up, subSw0_2Up, subSw0_3Up, subSw1_0Up, subSw1_1Up, subSw1_2Up, subSw1_3Up, subSw2_0Up, subSw2_1Up, subSw2_2Up, subSw2_3Up, subSw3_0Up, subSw3_1Up, subSw3_2Up, subSw3_3Up
		);
#if COARSE_SEARCH_DOUBLE_SPEED
		searchSubWindowsInLineDoubleSkip(
			//searchLv,
			(searchPosY << SKIP_COARSE_SEARCH), lamdaMv, maxWidth, maxHeight, 

			sadRowDown_org,
			orgCp0_0Down_org,
			orgCp0_1Down_org,
			orgCp0_2Down_org,
			orgCp0_3Down_org,
			orgCp1_0Down_org,
			orgCp1_1Down_org,
			orgCp1_2Down_org,
			orgCp1_3Down_org,
			orgCp2_0Down_org,
			orgCp2_1Down_org,
			orgCp2_2Down_org,
			orgCp2_3Down_org,
			orgCp3_0Down_org,
			orgCp3_1Down_org,
			orgCp3_2Down_org,
			orgCp3_3Down_org,

			subSw0_0Down_org,
			subSw0_1Down_org,
			subSw0_2Down_org,
			subSw0_3Down_org,
			subSw1_0Down_org,
			subSw1_1Down_org,
			subSw1_2Down_org,
			subSw1_3Down_org,
			subSw2_0Down_org,
			subSw2_1Down_org,
			subSw2_2Down_org,
			subSw2_3Down_org,
			subSw3_0Down_org,
			subSw3_1Down_org,
			subSw3_2Down_org,
			subSw3_3Down_org
			//,
			////=====================================================
			//sadRowDown,
			//orgCp0_0Down, orgCp0_1Down, orgCp0_2Down, orgCp0_3Down, orgCp1_0Down, orgCp1_1Down, orgCp1_2Down, orgCp1_3Down, orgCp2_0Down, orgCp2_1Down, orgCp2_2Down, orgCp2_3Down, orgCp3_0Down, orgCp3_1Down, orgCp3_2Down, orgCp3_3Down,
			//subSw0_0Down, subSw0_1Down, subSw0_2Down, subSw0_3Down, subSw1_0Down, subSw1_1Down, subSw1_2Down, subSw1_3Down, subSw2_0Down, subSw2_1Down, subSw2_2Down, subSw2_3Down, subSw3_0Down, subSw3_1Down, subSw3_2Down, subSw3_3Down
		);
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED

#if 0
		// check sadRow_org sadRowDown_org
		for (int j = 0; j < 4; j++)
		{
			for (int i = 0; i < 4; i++)
			{
				for (int x = 0; x < ((MMEA_LEVEL2_SR_V >> 3) >> SKIP_COARSE_SEARCH); x++)
				{
					if (sadRow_org[j][i][x] != sadRow[i][j][x])
					{
						printf("sadRow_org error! ");
						printf("sadRow_org[%d][%d][%d] = %d\tsadRow[%d][%d][%d] = %d\n", j, i, x, sadRow_org[j][i][x], i, j, x, sadRow[i][j][x]);
					}

					if (sadRowDown_org[j][i][x] != sadRowDown[i][j][x])
					{
						printf("sadRowDown_org error! ");
						printf("sadRowDown_org[%d][%d][%d] = %d\tsadRowDown[%d][%d][%d] = %d\n", j, i, x, sadRowDown_org[j][i][x], i, j, x, sadRowDown[i][j][x]);
					}
				}
			}
		}
#endif
		compareBestSadLineSkip(
			//searchLv, 
			(searchPosY << SKIP_COARSE_SEARCH), 
			//bestCostUp_org, bestMvSubSwUp_org,
#if COARSE_SEARCH_DOUBLE_SPEED
			bestCostUp, bestMvSubSwUp, 
#else
			bestCost, bestMvSubSw,
#endif

			sadRow_org
			//, sadRow
		);

#if COARSE_SEARCH_DOUBLE_SPEED
		compareBestSadLineSkip(
			//searchLv, 
			(searchPosY << SKIP_COARSE_SEARCH) + ((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED), 
			//bestCostDown_org, bestMvSubSwDown_org,

			bestCostDown, bestMvSubSwDown, 
			sadRowDown_org
			//, sadRowDown
		);
#endif

	}
#if 1//COARSE_SEARCH_DOUBLE_SPEED
#if SEARCH_FULLLV1==0
	if (searchLv == 0)
	{
#endif
//		for (compY = 0; compY < 4; compY++)
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//			for (compX = 0; compX < 4; compX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//				if (bestCostUp_org[compY][compX] > bestCostDown_org[compY][compX])
//				{
//					bestCost_org[compY][compX] = bestCostDown_org[compY][compX];
//					bestMvSubSw_org[compY][compX][0] = bestMvSubSwDown_org[compY][compX][0];
//					bestMvSubSw_org[compY][compX][1] = bestMvSubSwDown_org[compY][compX][1];
//				}
//				else
//				{
//					bestCost_org[compY][compX] = bestCostUp_org[compY][compX];
//					bestMvSubSw_org[compY][compX][0] = bestMvSubSwUp_org[compY][compX][0];
//					bestMvSubSw_org[compY][compX][1] = bestMvSubSwUp_org[compY][compX][1];
//				}
//
//			}
//		}

#if COARSE_SEARCH_DOUBLE_SPEED
		for (compY = 0; compY < 4; compY++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			for (compX = 0; compX < 4; compX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				if (bestCostUp[compY][compX] > bestCostDown[compY][compX])
				{
					bestCost[compY][compX] = bestCostDown[compY][compX];
					bestMvSubSw[compY][compX][0] = bestMvSubSwDown[compY][compX][0];
					bestMvSubSw[compY][compX][1] = bestMvSubSwDown[compY][compX][1];
				}
				else
				{
					bestCost[compY][compX] = bestCostUp[compY][compX];
					bestMvSubSw[compY][compX][0] = bestMvSubSwUp[compY][compX][0];
					bestMvSubSw[compY][compX][1] = bestMvSubSwUp[compY][compX][1];
				}

			}
		}
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED


		//// check bestMvSubSw_org 
		//for (int j = 0; j < 4; j++)
		//{
		//	for (int i = 0; i < 4; i++)
		//	{
		//		for (int x = 0; x < 2; x++)
		//		{
		//			if (bestMvSubSw_org[j][i][x] != bestMvSubSw[i][j][x])
		//			{
		//				printf("bestMvSubSw_org error! ");
		//				printf("bestMvSubSw_org[%d][%d][%d] = %d\tbestMvSubSw[%d][%d][%d] = %d\n", j, i, x, bestMvSubSw_org[j][i][x], i, j, x, bestMvSubSw_org[i][j][x]);
		//			}
		//		}
		//	}
		//}

		//// check bestCost_org 
		//for (int j = 0; j < 4; j++)
		//{
		//	for (int i = 0; i < 4; i++)
		//	{
		//		if (bestCost_org[j][i] != bestCost[i][j])
		//		{
		//			printf("bestCost_org error! ");
		//			printf("bestCost_org[%d][%d] = %d\tbestCost[%d][%d] = %d\n", j, i, bestCost_org[j][i], i, j, bestCost[i][j]);
		//		}
		//	}
		//}


#if SEARCH_FULLLV1==0
	}
	else
	{
		for (compX = 0; compX < 4; compX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			if (bestCostUp[compX][0] > bestCostDown[compX][0])
			{
				bestCost[compX][0] = bestCostDown[compX][0];
				bestMvSubSw[compX][0][0] = bestMvSubSwDown[compX][0][0];
				bestMvSubSw[compX][0][1] = bestMvSubSwDown[compX][0][1];
			}
			else
			{
				bestCost[compX][0] = bestCostUp[compX][0];
				bestMvSubSw[compX][0][0] = bestMvSubSwUp[compX][0][0];
				bestMvSubSw[compX][0][1] = bestMvSubSwUp[compX][0][1];
			}
		}
	}
#endif

#endif
}


void sadLineDoubleSkipLv2_test1(
	pel subSw[12][14],
	pel org[8][8],
	U32 lineSad[6],
	S14 baseH,
	U5 maxWidthScu,
	U5 maxHeightScu,
	U5 calcH
)
{
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=subSw complete dim=2
#pragma HLS array_partition variable=org complete dim=2
#pragma HLS array_partition variable=lineSad complete dim=0

#endif

	U5 calcW;
	U5 searchPosX;

	if (maxHeightScu - calcH <= 0)
	{
		return;
	}

	for (calcW = 0; calcW < 8; calcW++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (searchPosX = 0; searchPosX < 6; searchPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			lineSad[searchPosX] += sadPel(subSw[calcH + baseH][calcW + searchPosX], org[calcH][calcW], maxWidthScu - calcW);
		}

	}

}

void searchLineHorDoubleSkipLv2_test1(
	pel subSw[12][14],
	pel org[8][8],
	U32 lineSad[6],
	S14 baseH,
	U5 maxWidthScu,
	U5 maxHeightScu
)
{
	U5 calcH;

	for (calcH = 0; calcH < 8; calcH++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		sadLineDoubleSkipLv2_test1(subSw, org, lineSad,
			baseH, maxWidthScu, maxHeightScu,
			calcH);
	}

}

void searchSubWindowsInLineDoubleSkip_test1(
	S14 searchPosY,
	U32 lamdaMv,
	U7 maxWidth,
	U7 maxHeight,

	U32 sadRow[4][4][6],

#if LV2_SERIAL
	pel orgCp0_0[8][8],
#else
	pel orgCp0_0[8][8],
	pel orgCp0_1[8][8],
	pel orgCp0_2[8][8],
	pel orgCp0_3[8][8],
	pel orgCp1_0[8][8],
	pel orgCp1_1[8][8],
	pel orgCp1_2[8][8],
	pel orgCp1_3[8][8],
	pel orgCp2_0[8][8],
	pel orgCp2_1[8][8],
	pel orgCp2_2[8][8],
	pel orgCp2_3[8][8],
	pel orgCp3_0[8][8],
	pel orgCp3_1[8][8],
	pel orgCp3_2[8][8],
	pel orgCp3_3[8][8],
#endif
	pel subSw0_0[12][14],
	pel subSw0_1[12][14],
	pel subSw0_2[12][14],
	pel subSw0_3[12][14],
	pel subSw1_0[12][14],
	pel subSw1_1[12][14],
	pel subSw1_2[12][14],
	pel subSw1_3[12][14],
	pel subSw2_0[12][14],
	pel subSw2_1[12][14],
	pel subSw2_2[12][14],
	pel subSw2_3[12][14],
	pel subSw3_0[12][14],
	pel subSw3_1[12][14],
	pel subSw3_2[12][14],
	pel subSw3_3[12][14]
)
{
#if LV2_SERIAL

	U5 maxSubWidth = maxWidth;
	U5 maxSubHeight = maxHeight;



	searchLineHorDoubleSkipLv2_test1(subSw0_0, orgCp0_0, sadRow[0][0],
		searchPosY, maxSubWidth, maxSubHeight);


	searchLineHorDoubleSkipLv2_test1(subSw1_0, orgCp0_0, sadRow[1][0],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw2_0, orgCp0_0, sadRow[2][0],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw3_0, orgCp0_0, sadRow[3][0],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw0_1, orgCp0_0, sadRow[0][1],
		searchPosY, maxSubWidth, maxSubHeight);
	searchLineHorDoubleSkipLv2_test1(subSw1_1, orgCp0_0, sadRow[1][1],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw2_1, orgCp0_0, sadRow[2][1],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw3_1, orgCp0_0, sadRow[3][1],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw0_2, orgCp0_0, sadRow[0][2],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw1_2, orgCp0_0, sadRow[1][2],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw2_2, orgCp0_0, sadRow[2][2],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw3_2, orgCp0_0, sadRow[3][2],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw0_3, orgCp0_0, sadRow[0][3],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw1_3, orgCp0_0, sadRow[1][3],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw2_3, orgCp0_0, sadRow[2][3],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw3_3, orgCp0_0, sadRow[3][3],
		searchPosY, maxSubWidth, maxSubHeight);

#else


//	U5 maxSubWidth[4][4];
//	U5 maxSubHeight[4][4];
//#if IME_PRAGMA_ON
//#pragma HLS array_partition variable=maxSubWidth complete dim=0
//#pragma HLS array_partition variable=maxSubHeight complete dim=0
//#endif
//
//	U8 compX, compY;
//
//		for (compY = 0; compY < 4; compY++)
//		{
//#if IME_PRAGMA_ON
//#pragma HLS UNROLL
//#endif
//			for (compX = 0; compX < 4; compX++)
//			{
//#if IME_PRAGMA_ON
//#pragma HLS UNROLL
//#endif
//				//maxSubWidth[compY][compX] = (U5)(maxWidth >> 3);
//				//maxSubHeight[compY][compX] = (U5)(maxHeight >> 3);
//				maxSubWidth[compY][compX] = maxWidth;
//				maxSubHeight[compY][compX] = maxHeight;
//			}
//		}

		U5 maxSubWidth = maxWidth;
		U5 maxSubHeight = maxHeight;


	searchLineHorDoubleSkipLv2_test1(subSw0_0, orgCp0_0, sadRow[0][0],
		searchPosY, maxSubWidth, maxSubHeight);


	searchLineHorDoubleSkipLv2_test1(subSw1_0, orgCp1_0, sadRow[1][0],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw2_0, orgCp2_0, sadRow[2][0],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw3_0, orgCp3_0, sadRow[3][0],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw0_1, orgCp0_1, sadRow[0][1],
		searchPosY, maxSubWidth, maxSubHeight);
	searchLineHorDoubleSkipLv2_test1(subSw1_1, orgCp1_1, sadRow[1][1],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw2_1, orgCp2_1, sadRow[2][1],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw3_1, orgCp3_1, sadRow[3][1],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw0_2, orgCp0_2, sadRow[0][2],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw1_2, orgCp1_2, sadRow[1][2],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw2_2, orgCp2_2, sadRow[2][2],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw3_2, orgCp3_2, sadRow[3][2],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw0_3, orgCp0_3, sadRow[0][3],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw1_3, orgCp1_3, sadRow[1][3],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw2_3, orgCp2_3, sadRow[2][3],
		searchPosY, maxSubWidth, maxSubHeight);

	searchLineHorDoubleSkipLv2_test1(subSw3_3, orgCp3_3, sadRow[3][3],
		searchPosY, maxSubWidth, maxSubHeight);

#endif	// #if LV2_SERIAL

}

void initSadRowsSkip_test1(
	S14 searchPosY,
	S14 gmvp[2],
	U32 lamdaMv,
	U32 sadRow[4][4][6]

)
{
#pragma HLS inline off
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=sadRow complete dim=0
#endif
	S14 searchPosX;

	U8 compX, compY;

	for (searchPosX = 0; searchPosX < 6; searchPosX++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (compY = 0; compY < 4; compY++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			for (compX = 0; compX < 4; compX++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				sadRow[compY][compX][searchPosX] = getMvRcostSimplefied(lamdaMv, (192 * compX) - gmvp[0] + (searchPosX << 5), (128 * compY) - gmvp[1] + (searchPosY << 5));
			}
		}
	}

}

void compareBestSadLineSkip_test1(
	S14 searchPosY,
	U32 bestCost[4][4],
	S14 bestMvSubSw[4][4][2],
	U32 sadRow[4][4][6]
)
{
#pragma HLS inline off
#if IME_PRAGMA_ON

#pragma HLS array_partition variable=bestCost complete dim=0	
#pragma HLS array_partition variable=bestMVSubSw complete dim=0
#pragma HLS array_partition variable=sadRow complete dim=0
#endif
	S14 searchPosX;
	U8 compX, compY;


		for (searchPosX = 0; searchPosX < 6; searchPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			for (compY = 0; compY < 4; compY++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				for (compX = 0; compX < 4; compX++)
				{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
					if (bestCost[compX][compY] > sadRow[compY][compX][searchPosX])
					{
						bestCost[compX][compY] = sadRow[compY][compX][searchPosX];
						bestMvSubSw[compX][compY][0] = searchPosX;
						bestMvSubSw[compX][compY][1] = searchPosY;
					}

				}
			}
		}


}

void searchWindowsLv2_test1(
	S14 gmvp[2],
	U32 lamdaMv,
	U7 maxWidth,
	U7 maxHeight,
	U32 bestCost[4][4],
	S14 bestMvSubSw[4][4][2],
#if LV2_SERIAL
	pel orgCp0_0[8][8],
#else
	pel orgCp0_0[8][8],
	pel orgCp0_1[8][8],
	pel orgCp0_2[8][8],
	pel orgCp0_3[8][8],
	pel orgCp1_0[8][8],
	pel orgCp1_1[8][8],
	pel orgCp1_2[8][8],
	pel orgCp1_3[8][8],
	pel orgCp2_0[8][8],
	pel orgCp2_1[8][8],
	pel orgCp2_2[8][8],
	pel orgCp2_3[8][8],
	pel orgCp3_0[8][8],
	pel orgCp3_1[8][8],
	pel orgCp3_2[8][8],
	pel orgCp3_3[8][8],
#endif

	pel subSw0_0[12][14],
	pel subSw0_1[12][14],
	pel subSw0_2[12][14],
	pel subSw0_3[12][14],
	pel subSw1_0[12][14],
	pel subSw1_1[12][14],
	pel subSw1_2[12][14],
	pel subSw1_3[12][14],
	pel subSw2_0[12][14],
	pel subSw2_1[12][14],
	pel subSw2_2[12][14],
	pel subSw2_3[12][14],
	pel subSw3_0[12][14],
	pel subSw3_1[12][14],
	pel subSw3_2[12][14],
	pel subSw3_3[12][14]

)
{

	S14 searchPosY;
	U32 sadRow[4][4][6];


#if IME_PRAGMA_ON
#pragma HLS array_partition variable=bestCost complete dim=0
#pragma HLS array_partition variable=bestMVSubSw complete dim=0
#endif


	U3 compY, compX;

	for (compY = 0; compY < 4; compY++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (compX = 0; compX < 4; compX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			bestCost[compY][compX] = 0xFFFFFFFF;
			bestMvSubSw[compY][compX][0] = 0;
			bestMvSubSw[compY][compX][1] = 0;
		}
	}

	for (searchPosY = 0; searchPosY < 4; searchPosY++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		initSadRowsSkip_test1(
			searchPosY,
			gmvp,
			lamdaMv,
			sadRow
		);

		searchSubWindowsInLineDoubleSkip_test1(
			searchPosY, lamdaMv, maxWidth, maxHeight,

			sadRow,

#if LV2_SERIAL
			orgCp0_0,
#else
			orgCp0_0,
			orgCp0_1,
			orgCp0_2,
			orgCp0_3,
			orgCp1_0,
			orgCp1_1,
			orgCp1_2,
			orgCp1_3,
			orgCp2_0,
			orgCp2_1,
			orgCp2_2,
			orgCp2_3,
			orgCp3_0,
			orgCp3_1,
			orgCp3_2,
			orgCp3_3,
#endif

			subSw0_0,
			subSw0_1,
			subSw0_2,
			subSw0_3,
			subSw1_0,
			subSw1_1,
			subSw1_2,
			subSw1_3,
			subSw2_0,
			subSw2_1,
			subSw2_2,
			subSw2_3,
			subSw3_0,
			subSw3_1,
			subSw3_2,
			subSw3_3
			
		);



		compareBestSadLineSkip_test1(
			searchPosY,
			bestCost, bestMvSubSw,
			sadRow

		);


	}

}


void constructSubSWLv2_test1(
	pel swOutLv2_t1[24][32],

	pel subSw0[12][14],
	pel subSw1[12][14],
	pel subSw2[12][14],
	pel subSw3[12][14],
	pel subSw4[12][14],
	pel subSw5[12][14],
	pel subSw6[12][14],
	pel subSw7[12][14],
	pel subSw8[12][14],
	pel subSw9[12][14],
	pel subSw10[12][14],
	pel subSw11[12][14],
	pel subSw12[12][14],
	pel subSw13[12][14],
	pel subSw14[12][14],
	pel subSw15[12][14]
)
{

#pragma HLS inline off

#if IME_PRAGMA_ON

#pragma HLS array_partition variable=swOutLv2_t1 complete dim=2

#pragma HLS array_partition variable=subSw0 complete dim=2
#pragma HLS array_partition variable=subSw1 complete dim=2
#pragma HLS array_partition variable=subSw2 complete dim=2
#pragma HLS array_partition variable=subSw3 complete dim=2
#pragma HLS array_partition variable=subSw4 complete dim=2
#pragma HLS array_partition variable=subSw5 complete dim=2
#pragma HLS array_partition variable=subSw6 complete dim=2
#pragma HLS array_partition variable=subSw7 complete dim=2
#pragma HLS array_partition variable=subSw8 complete dim=2
#pragma HLS array_partition variable=subSw9 complete dim=2
#pragma HLS array_partition variable=subSw10 complete dim=2
#pragma HLS array_partition variable=subSw11 complete dim=2
#pragma HLS array_partition variable=subSw12 complete dim=2
#pragma HLS array_partition variable=subSw13 complete dim=2
#pragma HLS array_partition variable=subSw14 complete dim=2
#pragma HLS array_partition variable=subSw15 complete dim=2

#endif

	U7 loadY, loadX;


	for (loadY = 0; loadY < 12; loadY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif

		for (loadX = 0; loadX < 14; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw0[loadY][loadX] = swOutLv2_t1[loadY][loadX];
		}


		for (loadX = 6; loadX < 20; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw1[loadY][loadX - 6] = swOutLv2_t1[loadY][loadX];

		}

		for (loadX = 12; loadX < 26; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw2[loadY][loadX - 12] = swOutLv2_t1[loadY][loadX];
		}
		for (loadX = 18; loadX < 32; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw3[loadY][loadX - 18] = swOutLv2_t1[loadY][loadX];
		}


	}

	for (loadY = 0; loadY < 12; loadY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif

		for (loadX = 0; loadX < 14; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw4[loadY][loadX] = swOutLv2_t1[loadY + 4][loadX];
		}
		for (loadX = 6; loadX < 20; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw5[loadY][loadX - 6] = swOutLv2_t1[loadY + 4][loadX];

		}
		for (loadX = 12; loadX < 26; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw6[loadY][loadX - 12] = swOutLv2_t1[loadY + 4][loadX];
		}
		for (loadX = 18; loadX < 32; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw7[loadY][loadX - 18] = swOutLv2_t1[loadY + 4][loadX];
		}


	}

	for (loadY = 0; loadY < 12; loadY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif

		for (loadX = 0; loadX < 14; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw8[loadY][loadX] = swOutLv2_t1[loadY + 8][loadX];
		}
		for (loadX = 6; loadX < 20; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw9[loadY][loadX - 6] = swOutLv2_t1[loadY + 8][loadX];

		}
		for (loadX = 12; loadX < 26; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw10[loadY][loadX - 12] = swOutLv2_t1[loadY + 8][loadX];
		}
		for (loadX = 18; loadX < 32; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw11[loadY][loadX - 18] = swOutLv2_t1[loadY + 8][loadX];
		}

	}

	for (loadY = 0; loadY < 12; loadY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif

		for (loadX = 0; loadX < 14; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw12[loadY][loadX] = swOutLv2_t1[loadY + 12][loadX];
		}
		for (loadX = 6; loadX < 20; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw13[loadY][loadX - 6] = swOutLv2_t1[loadY + 12][loadX];

		}
		for (loadX = 12; loadX < 26; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw14[loadY][loadX - 12] = swOutLv2_t1[loadY + 12][loadX];
		}
		for (loadX = 18; loadX < 32; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw15[loadY][loadX - 18] = swOutLv2_t1[loadY + 12][loadX];
		}

	}

}

void copyOrgLv2_test1(
	pel y_org_lv1_2d_t1[8][8],

	pel orgCp0_0[8][8],
	pel orgCp0_1[8][8],
	pel orgCp0_2[8][8],
	pel orgCp0_3[8][8],
	pel orgCp1_0[8][8],
	pel orgCp1_1[8][8],
	pel orgCp1_2[8][8],
	pel orgCp1_3[8][8],
	pel orgCp2_0[8][8],
	pel orgCp2_1[8][8],
	pel orgCp2_2[8][8],
	pel orgCp2_3[8][8],
	pel orgCp3_0[8][8],
	pel orgCp3_1[8][8],
	pel orgCp3_2[8][8],
	pel orgCp3_3[8][8]

)
{

#pragma HLS inline off

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=y_org_lv1_2d_t1 complete dim=2

#pragma HLS array_partition variable=orgCp0_0 complete dim=2
#pragma HLS array_partition variable=orgCp0_1 complete dim=2
#pragma HLS array_partition variable=orgCp0_2 complete dim=2
#pragma HLS array_partition variable=orgCp0_3 complete dim=2
#pragma HLS array_partition variable=orgCp1_0 complete dim=2
#pragma HLS array_partition variable=orgCp1_1 complete dim=2
#pragma HLS array_partition variable=orgCp1_2 complete dim=2
#pragma HLS array_partition variable=orgCp1_3 complete dim=2
#pragma HLS array_partition variable=orgCp2_0 complete dim=2
#pragma HLS array_partition variable=orgCp2_1 complete dim=2
#pragma HLS array_partition variable=orgCp2_2 complete dim=2
#pragma HLS array_partition variable=orgCp2_3 complete dim=2
#pragma HLS array_partition variable=orgCp3_0 complete dim=2
#pragma HLS array_partition variable=orgCp3_1 complete dim=2
#pragma HLS array_partition variable=orgCp3_2 complete dim=2
#pragma HLS array_partition variable=orgCp3_3 complete dim=2

#endif

	for (U4 j = 0; j < 8; j++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (U4 i = 0; i < 8; i++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			orgCp0_0[j][i] = y_org_lv1_2d_t1[j][i];
			orgCp0_1[j][i] = y_org_lv1_2d_t1[j][i];
			orgCp0_2[j][i] = y_org_lv1_2d_t1[j][i];
			orgCp0_3[j][i] = y_org_lv1_2d_t1[j][i];

			orgCp1_0[j][i] = y_org_lv1_2d_t1[j][i];
			orgCp1_1[j][i] = y_org_lv1_2d_t1[j][i];
			orgCp1_2[j][i] = y_org_lv1_2d_t1[j][i];
			orgCp1_3[j][i] = y_org_lv1_2d_t1[j][i];

			orgCp2_0[j][i] = y_org_lv1_2d_t1[j][i];
			orgCp2_1[j][i] = y_org_lv1_2d_t1[j][i];
			orgCp2_2[j][i] = y_org_lv1_2d_t1[j][i];
			orgCp2_3[j][i] = y_org_lv1_2d_t1[j][i];

			orgCp3_0[j][i] = y_org_lv1_2d_t1[j][i];
			orgCp3_1[j][i] = y_org_lv1_2d_t1[j][i];
			orgCp3_2[j][i] = y_org_lv1_2d_t1[j][i];
			orgCp3_3[j][i] = y_org_lv1_2d_t1[j][i];

		}
	}	

}
void constructRefWindowDoubleLv2_test1(

	pel swOutLv2_t1[24][32],
	pel y_org_lv2_2d_t1[8][8],

	pel orgCp0_0[8][8],
	pel orgCp0_1[8][8],
	pel orgCp0_2[8][8],
	pel orgCp0_3[8][8],
	pel orgCp1_0[8][8],
	pel orgCp1_1[8][8],
	pel orgCp1_2[8][8],
	pel orgCp1_3[8][8],
	pel orgCp2_0[8][8],
	pel orgCp2_1[8][8],
	pel orgCp2_2[8][8],
	pel orgCp2_3[8][8],
	pel orgCp3_0[8][8],
	pel orgCp3_1[8][8],
	pel orgCp3_2[8][8],
	pel orgCp3_3[8][8],

	pel subSw0[12][14],
	pel subSw1[12][14],
	pel subSw2[12][14],
	pel subSw3[12][14],
	pel subSw4[12][14],
	pel subSw5[12][14],
	pel subSw6[12][14],
	pel subSw7[12][14],
	pel subSw8[12][14],
	pel subSw9[12][14],
	pel subSw10[12][14],
	pel subSw11[12][14],
	pel subSw12[12][14],
	pel subSw13[12][14],
	pel subSw14[12][14],
	pel subSw15[12][14]

)
{

#pragma HLS inline off

	constructSubSWLv2_test1(
		swOutLv2_t1,

		subSw0,
		subSw1,
		subSw2,
		subSw3,
		subSw4,
		subSw5,
		subSw6,
		subSw7,
		subSw8,
		subSw9,
		subSw10,
		subSw11,
		subSw12,
		subSw13,
		subSw14,
		subSw15
	);


	copyOrgLv2_test1(
		y_org_lv2_2d_t1,

		orgCp0_0,
		orgCp0_1,
		orgCp0_2,
		orgCp0_3,
		orgCp1_0,
		orgCp1_1,
		orgCp1_2,
		orgCp1_3,
		orgCp2_0,
		orgCp2_1,
		orgCp2_2,
		orgCp2_3,
		orgCp3_0,
		orgCp3_1,
		orgCp3_2,
		orgCp3_3
	);

}

void compareSearchResult_test1(
	S14 gmvp[2],
	S14 bestTriMv[3][2],
	U32 bestCostSubSw[4][4],
	S14 bestMvSubSw[4][4][2]
)
{
#pragma HLS inline off

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=bestCostSubSw complete dim=0
#pragma HLS ARRAY_PARTITION variable=bestMvSubSw complete dim=0
#endif

	U32 bestTriCost[3] = { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF };

	S14 horIdx, verIdx;

	for (verIdx = 0; verIdx < 4; verIdx++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (horIdx = 0; horIdx < 4; horIdx++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			bestMvSubSw[horIdx][verIdx][0] = (bestMvSubSw[horIdx][verIdx][0] << 3) + (horIdx * 48);
			bestMvSubSw[horIdx][verIdx][1] = (bestMvSubSw[horIdx][verIdx][1] << 3) + (verIdx * 32);

			if (bestTriCost[2] > bestCostSubSw[horIdx][verIdx])
			{
				if (bestTriCost[1] > bestCostSubSw[horIdx][verIdx])
				{
					bestTriCost[2] = bestTriCost[1];
					bestTriMv[2][0] = bestTriMv[1][0];
					bestTriMv[2][1] = bestTriMv[1][1];

					if (bestTriCost[0] > bestCostSubSw[horIdx][verIdx])
					{
						bestTriCost[1] = bestTriCost[0];
						bestTriMv[1][0] = bestTriMv[0][0];
						bestTriMv[1][1] = bestTriMv[0][1];
						bestTriCost[0] = bestCostSubSw[horIdx][verIdx];
						bestTriMv[0][0] = bestMvSubSw[horIdx][verIdx][0];
						bestTriMv[0][1] = bestMvSubSw[horIdx][verIdx][1];
					}
					else
					{
						bestTriCost[1] = bestCostSubSw[horIdx][verIdx];
						bestTriMv[1][0] = bestMvSubSw[horIdx][verIdx][0];
						bestTriMv[1][1] = bestMvSubSw[horIdx][verIdx][1];
					}
				}
				else
				{
					bestTriCost[2] = bestCostSubSw[horIdx][verIdx];
					bestTriMv[2][0] = bestMvSubSw[horIdx][verIdx][0];
					bestTriMv[2][1] = bestMvSubSw[horIdx][verIdx][1];
				}
			}
		}
	}


#if PRINT_IME_MV
		printf("Lv2:[%d,%d][%d,%d]\n", bestTriMv[0][0] - MMEA_LEVEL2_SR_V, bestTriMv[0][1] - MMEA_LEVEL2_SR_H, bestTriMv[1][0] - MMEA_LEVEL2_SR_V, bestTriMv[1][1] - MMEA_LEVEL2_SR_H);
		//if (bestTriMv[0][0] - MMEA_LEVEL2_SR_V != 0 || bestTriMv[0][1] - MMEA_LEVEL2_SR_H != 0)
		//{
		//	printf("Lv2:[%d %d]\n", bestTriMv[0][0], bestTriMv[0][1]);
		//}

#endif
}

void searchFullLv2_test1(
	pel swOutLv2_t1[24][32],
	pel y_org_lv2_2d_t1[8][8],
	S14 bestTriMv[3][2],
	S14 gmvp[2],
	U32 lamdaMv,
	U7 maxWidth,
	U7 maxHeight
)
{

#pragma HLS inline off

#if VIVADO_HLS_IME

#if !LV2_SERIAL
	pel orgCp0_0[8][8];
	pel orgCp0_1[8][8];
	pel orgCp0_2[8][8];
	pel orgCp0_3[8][8];
	pel orgCp1_0[8][8];
	pel orgCp1_1[8][8];
	pel orgCp1_2[8][8];
	pel orgCp1_3[8][8];
	pel orgCp2_0[8][8];
	pel orgCp2_1[8][8];
	pel orgCp2_2[8][8];
	pel orgCp2_3[8][8];
	pel orgCp3_0[8][8];
	pel orgCp3_1[8][8];
	pel orgCp3_2[8][8];
	pel orgCp3_3[8][8];
#endif

	pel subSw0[12][14];
	pel subSw1[12][14];
	pel subSw2[12][14];
	pel subSw3[12][14];
	pel subSw4[12][14];
	pel subSw5[12][14];
	pel subSw6[12][14];
	pel subSw7[12][14];
	pel subSw8[12][14];
	pel subSw9[12][14];
	pel subSw10[12][14];
	pel subSw11[12][14];
	pel subSw12[12][14];
	pel subSw13[12][14];
	pel subSw14[12][14];
	pel subSw15[12][14];
#else

#if !LV2_SERIAL
	static pel orgCp0_0[8][8];
	static pel orgCp0_1[8][8];
	static pel orgCp0_2[8][8];
	static pel orgCp0_3[8][8];
	static pel orgCp1_0[8][8];
	static pel orgCp1_1[8][8];
	static pel orgCp1_2[8][8];
	static pel orgCp1_3[8][8];
	static pel orgCp2_0[8][8];
	static pel orgCp2_1[8][8];
	static pel orgCp2_2[8][8];
	static pel orgCp2_3[8][8];
	static pel orgCp3_0[8][8];
	static pel orgCp3_1[8][8];
	static pel orgCp3_2[8][8];
	static pel orgCp3_3[8][8];
#endif

	static pel subSw0[12][14];
	static pel subSw1[12][14];
	static pel subSw2[12][14];
	static pel subSw3[12][14];
	static pel subSw4[12][14];
	static pel subSw5[12][14];
	static pel subSw6[12][14];
	static pel subSw7[12][14];
	static pel subSw8[12][14];
	static pel subSw9[12][14];
	static pel subSw10[12][14];
	static pel subSw11[12][14];
	static pel subSw12[12][14];
	static pel subSw13[12][14];
	static pel subSw14[12][14];
	static pel subSw15[12][14];
#endif

	U32 bestCostSubSw[4][4];
	S14 bestMvSubSw[4][4][2];


#if LV2_SERIAL
		constructSubSWLv2_test1(
			swOutLv2_t1,

			subSw0,
			subSw1,
			subSw2,
			subSw3,
			subSw4,
			subSw5,
			subSw6,
			subSw7,
			subSw8,
			subSw9,
			subSw10,
			subSw11,
			subSw12,
			subSw13,
			subSw14,
			subSw15
		);
#else

		constructRefWindowDoubleLv2_test1(
			swOutLv2_t1,
			y_org_lv2_2d_t1,

			orgCp0_0,
			orgCp0_1,
			orgCp0_2,
			orgCp0_3,
			orgCp1_0,
			orgCp1_1,
			orgCp1_2,
			orgCp1_3,
			orgCp2_0,
			orgCp2_1,
			orgCp2_2,
			orgCp2_3,
			orgCp3_0,
			orgCp3_1,
			orgCp3_2,
			orgCp3_3,

			subSw0,
			subSw1,
			subSw2,
			subSw3,
			subSw4,
			subSw5,
			subSw6,
			subSw7,
			subSw8,
			subSw9,
			subSw10,
			subSw11,
			subSw12,
			subSw13,
			subSw14,
			subSw15

		);

#endif


		searchWindowsLv2_test1(
			gmvp, 
			lamdaMv, maxWidth, maxHeight,
			bestCostSubSw, bestMvSubSw,
#if LV2_SERIAL
			y_org_lv2_2d_t1,
#else
			orgCp0_0,
			orgCp0_1,
			orgCp0_2,
			orgCp0_3,
			orgCp1_0,
			orgCp1_1,
			orgCp1_2,
			orgCp1_3,
			orgCp2_0,
			orgCp2_1,
			orgCp2_2,
			orgCp2_3,
			orgCp3_0,
			orgCp3_1,
			orgCp3_2,
			orgCp3_3,
#endif
			subSw0,
			subSw1,
			subSw2,
			subSw3,
			subSw4,
			subSw5,
			subSw6,
			subSw7,
			subSw8,
			subSw9,
			subSw10,
			subSw11,
			subSw12,
			subSw13,
			subSw14,
			subSw15

		);

		compareSearchResult_test1(
			gmvp,  
			bestTriMv,
			bestCostSubSw, bestMvSubSw
		);

}


void constructSSWLv2_serial(
	pel swOutLv2_t1[24][32],

	pel subSw0[12][14],
	pel subSw1[12][14],
	pel subSw2[12][14],
	pel subSw3[12][14],
	pel subSw4[12][14],
	pel subSw5[12][14],
	pel subSw6[12][14],
	pel subSw7[12][14],
	pel subSw8[12][14],
	pel subSw9[12][14],
	pel subSw10[12][14],
	pel subSw11[12][14],
	pel subSw12[12][14],
	pel subSw13[12][14],
	pel subSw14[12][14],
	pel subSw15[12][14]
)
{

#pragma HLS inline off

#if IME_PRAGMA_ON

#pragma HLS array_partition variable=swOutLv2_t1 complete dim=2

#pragma HLS array_partition variable=subSw0 complete dim=2
#pragma HLS array_partition variable=subSw1 complete dim=2
#pragma HLS array_partition variable=subSw2 complete dim=2
#pragma HLS array_partition variable=subSw3 complete dim=2
#pragma HLS array_partition variable=subSw4 complete dim=2
#pragma HLS array_partition variable=subSw5 complete dim=2
#pragma HLS array_partition variable=subSw6 complete dim=2
#pragma HLS array_partition variable=subSw7 complete dim=2
#pragma HLS array_partition variable=subSw8 complete dim=2
#pragma HLS array_partition variable=subSw9 complete dim=2
#pragma HLS array_partition variable=subSw10 complete dim=2
#pragma HLS array_partition variable=subSw11 complete dim=2
#pragma HLS array_partition variable=subSw12 complete dim=2
#pragma HLS array_partition variable=subSw13 complete dim=2
#pragma HLS array_partition variable=subSw14 complete dim=2
#pragma HLS array_partition variable=subSw15 complete dim=2

#endif

	U7 loadY, loadX;


	for (loadY = 0; loadY < 12; loadY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif

		for (loadX = 0; loadX < 14; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw0[loadY][loadX] = swOutLv2_t1[loadY][loadX];
		}


		for (loadX = 6; loadX < 20; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw1[loadY][loadX - 6] = swOutLv2_t1[loadY][loadX];

		}

		for (loadX = 12; loadX < 26; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw2[loadY][loadX - 12] = swOutLv2_t1[loadY][loadX];
		}
		for (loadX = 18; loadX < 32; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw3[loadY][loadX - 18] = swOutLv2_t1[loadY][loadX];
		}


	}

	for (loadY = 0; loadY < 12; loadY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif

		for (loadX = 0; loadX < 14; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw4[loadY][loadX] = swOutLv2_t1[loadY + 4][loadX];
		}
		for (loadX = 6; loadX < 20; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw5[loadY][loadX - 6] = swOutLv2_t1[loadY + 4][loadX];

		}
		for (loadX = 12; loadX < 26; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw6[loadY][loadX - 12] = swOutLv2_t1[loadY + 4][loadX];
		}
		for (loadX = 18; loadX < 32; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw7[loadY][loadX - 18] = swOutLv2_t1[loadY + 4][loadX];
		}


	}

	for (loadY = 0; loadY < 12; loadY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif

		for (loadX = 0; loadX < 14; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw8[loadY][loadX] = swOutLv2_t1[loadY + 8][loadX];
		}
		for (loadX = 6; loadX < 20; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw9[loadY][loadX - 6] = swOutLv2_t1[loadY + 8][loadX];

		}
		for (loadX = 12; loadX < 26; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw10[loadY][loadX - 12] = swOutLv2_t1[loadY + 8][loadX];
		}
		for (loadX = 18; loadX < 32; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw11[loadY][loadX - 18] = swOutLv2_t1[loadY + 8][loadX];
		}

	}

	for (loadY = 0; loadY < 12; loadY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif

		for (loadX = 0; loadX < 14; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw12[loadY][loadX] = swOutLv2_t1[loadY + 12][loadX];
		}
		for (loadX = 6; loadX < 20; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw13[loadY][loadX - 6] = swOutLv2_t1[loadY + 12][loadX];

		}
		for (loadX = 12; loadX < 26; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw14[loadY][loadX - 12] = swOutLv2_t1[loadY + 12][loadX];
		}
		for (loadX = 18; loadX < 32; loadX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			subSw15[loadY][loadX - 18] = swOutLv2_t1[loadY + 12][loadX];
		}

	}

}

void accSadLineLv2_serial(
#if BW_DEBUG
	U10 swLv2[24][32],
	U10 org[8][8],
#else
	pel swLv2[24][32],
	pel org[8][8],
#endif
	S14 spPosY,
	U5 cuH,
	U32 bestCostRow[24],
	U6 maxWidthHex,
	U6 maxHeightHex
)
{

#if IME_PRAGMA_ON
#pragma HLS array_partition variable=swLv2 complete dim=2
#pragma HLS array_partition variable=org complete dim=2
#pragma HLS array_partition variable=bestCostRow complete dim=0
#endif
	U6 spX, cuW;

	if (cuH >= maxHeightHex)
	{
		return;
	}

	for (spX = 0; spX < 24; spX++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (cuW = 0; cuW < 8; cuW++)
		{
#pragma HLS loop_tripcount max= 8
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			bestCostRow[spX] += sadPel_tets1(swLv2[spPosY + cuH][spX + cuW], org[cuH][cuW], maxWidthHex - cuW);
		}
	}

}

void searchLv2_serial(
#if BW_DEBUG
	U10 swOutLv2_t1[24][32],
	U10 y_org_lv2_2d_t1[8][8],
#else
	pel swOutLv2_t1[24][32],
	pel y_org_lv2_2d_t1[8][8],
#endif
	S14 bestTriMv[2][2],//S14 bestTriMv[3][2],
	S14 gmvp_x,
	S14 gmvp_y,
	U32 lamdaMv,
	U7 maxWidth,
	U7 maxHeight
)
{

#pragma HLS inline off

	U32 bestCostRow[24];
	U32 bestCost = 0xFFFFFFFF;
	U32 bestCost_1 = 0xFFFFFFFF;

#if IME_PRAGMA_ON
#pragma HLS array_partition variable=bestCostRow complete dim=0
#pragma HLS array_partition variable=bestTriMv complete dim=0
#endif

	U6 cuH;
	S14 spPosX, spPosY;

	for (spPosY = 0; spPosY < 16; spPosY++)
	{
#if IME_PRAGMA_ON
//#pragma HLS pipeline II=24
#endif

		for (spPosX = 0; spPosX < 24; spPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			bestCostRow[spPosX] = getMvRcostSimplefied(lamdaMv, gmvp_x + (spPosX << 5), gmvp_y + (spPosY << 5));
		}


		for (cuH = 0; cuH < 8; cuH++)
		{
#pragma HLS loop_tripcount max= 8
#if IME_PRAGMA_ON
#pragma HLS pipeline II=2
#endif
			accSadLineLv2_serial(
				swOutLv2_t1, 
				y_org_lv2_2d_t1,
				spPosY, 
				cuH,
				bestCostRow,
				maxWidth, 
				maxHeight
			);

		}

		for (spPosX = 0; spPosX < 24; spPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			if (bestCost > bestCostRow[spPosX])
			{
				bestCost_1 = bestCost;
				bestTriMv[1][0] = bestTriMv[0][0];
				bestTriMv[1][1] = bestTriMv[0][1];

				bestCost = bestCostRow[spPosX];
				bestTriMv[0][0] = spPosX;
				bestTriMv[0][1] = spPosY;
			}
			else if (bestCost_1 > bestCostRow[spPosX])
			{
				bestCost_1 = bestCostRow[spPosX];
				bestTriMv[1][0] = spPosX;
				bestTriMv[1][1] = spPosY;
			}
		}

	}

	bestTriMv[0][0] = bestTriMv[0][0] << 3;
	bestTriMv[0][1] = bestTriMv[0][1] << 3;
	bestTriMv[1][0] = bestTriMv[1][0] << 3;
	bestTriMv[1][1] = bestTriMv[1][1] << 3;

#if PRINT_IME_MV
	printf("Lv2:[%d,%d][%d,%d]\n", bestTriMv[0][0] - MMEA_LEVEL2_SR_V, bestTriMv[0][1] - MMEA_LEVEL2_SR_H, bestTriMv[1][0] - MMEA_LEVEL2_SR_V, bestTriMv[1][1] - MMEA_LEVEL2_SR_H);
#endif

}

void coarseSearchUnityDoubleSkip(
	pel swLv2_org[SWH >> 2][SWW >> 2],
	pel orgLv2_org[MAX_CU_H >> 2][MAX_CU_W >> 2],
	//pel swLv1_org[SWH >> 1][SWW >> 1],
	//pel orgLv1_org[MAX_CU_H >> 1][MAX_CU_H >> 1],

	//pel swLv2[SWW >> 2][SWH >> 2],
	//pel orgLv2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2],
	//pel swLv1[SWW >> 1][SWH >> 1],
	//pel orgLv1[MAX_CU_SIZE_FETCH >> 1][MAX_CU_SIZE_FETCH >> 1],
#if SEARCH_FULLLV1
	S14 bestTriMv[3][2],
#else
	S14 bestMv[2],
#endif
	S14 gmvp[2],
	U32 lamdaMv,
	U7 maxWidth,
	U7 maxHeight
)
{

#pragma HLS inline off

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=swLv2_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgLv2_org complete dim=2
//#pragma HLS ARRAY_PARTITION variable=swLv1_org complete dim=2
//#pragma HLS ARRAY_PARTITION variable=orgLv1_org complete dim=2

//#pragma HLS ARRAY_PARTITION variable=swLv2 complete dim=1
//#pragma HLS ARRAY_PARTITION variable=orgLv2 complete dim=1
//#pragma HLS ARRAY_PARTITION variable=swLv1 complete dim=1
//#pragma HLS ARRAY_PARTITION variable=orgLv1 complete dim=1
#endif

#endif	// #if !IME_PRAGMA_ON_OP


	static pel orgCp0_0_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp0_1_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp0_2_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp0_3_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp1_0_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp1_1_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp1_2_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp1_3_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp2_0_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp2_1_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp2_2_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp2_3_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp3_0_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp3_1_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp3_2_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp3_3_org[MAX_CU_H >> 2][MAX_CU_W >> 2];

	static pel subSw0_0Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)];
	static pel subSw0_1Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)];
	static pel subSw0_2Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)];
	static pel subSw0_3Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)];
	static pel subSw1_0Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)];
	static pel subSw1_1Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)];
	static pel subSw1_2Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)];
	static pel subSw1_3Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)];
	static pel subSw2_0Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)];
	static pel subSw2_1Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)];
	static pel subSw2_2Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)];
	static pel subSw2_3Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)];
	static pel subSw3_0Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)];
	static pel subSw3_1Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)];
	static pel subSw3_2Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)];
	static pel subSw3_3Up_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)];

#if COARSE_SEARCH_DOUBLE_SPEED
	static pel orgCp0_0Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp0_1Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp0_2Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp0_3Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp1_0Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp1_1Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp1_2Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp1_3Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp2_0Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp2_1Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp2_2Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp2_3Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp3_0Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp3_1Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp3_2Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	static pel orgCp3_3Down_org[MAX_CU_H >> 2][MAX_CU_W >> 2];

	static pel subSw0_0Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)+ (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3)  + (MAX_CU_W >> 2)];
	static pel subSw0_1Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)+ (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3)  + (MAX_CU_W >> 2)];
	static pel subSw0_2Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)+ (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3)  + (MAX_CU_W >> 2)];
	static pel subSw0_3Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)+ (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3)  + (MAX_CU_W >> 2)];
	static pel subSw1_0Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)+ (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3)  + (MAX_CU_W >> 2)];
	static pel subSw1_1Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)+ (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3)  + (MAX_CU_W >> 2)];
	static pel subSw1_2Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)+ (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3)  + (MAX_CU_W >> 2)];
	static pel subSw1_3Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)+ (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3)  + (MAX_CU_W >> 2)];
	static pel subSw2_0Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)+ (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3)  + (MAX_CU_W >> 2)];
	static pel subSw2_1Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)+ (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3)  + (MAX_CU_W >> 2)];
	static pel subSw2_2Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)+ (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3)  + (MAX_CU_W >> 2)];
	static pel subSw2_3Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)+ (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3)  + (MAX_CU_W >> 2)];
	static pel subSw3_0Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)+ (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3)  + (MAX_CU_W >> 2)];
	static pel subSw3_1Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)+ (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3)  + (MAX_CU_W >> 2)];
	static pel subSw3_2Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)+ (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3)  + (MAX_CU_W >> 2)];
	static pel subSw3_3Down_org[((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED)+ (MAX_CU_H >> 2)][(MMEA_LEVEL2_SR_V >> 3)  + (MAX_CU_W >> 2)];
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED


	////=====================================================================================
	//static pel orgCp0_0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp0_1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp0_2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp0_3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp1_0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp1_1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp1_2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp1_3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp2_0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp2_1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp2_2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp2_3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp3_0[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp3_1[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp3_2[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp3_3[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];

	//static pel orgCp0_0Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp0_1Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp0_2Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp0_3Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp1_0Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp1_1Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp1_2Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp1_3Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp2_0Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp2_1Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp2_2Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp2_3Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp3_0Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp3_1Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp3_2Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];
	//static pel orgCp3_3Down[MAX_CU_SIZE_FETCH >> 2][MAX_CU_SIZE_FETCH >> 2];

	//static pel subSw0_0Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw0_1Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw0_2Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw0_3Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw1_0Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw1_1Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw1_2Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw1_3Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw2_0Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw2_1Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw2_2Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw2_3Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw3_0Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw3_1Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw3_2Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw3_3Up[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];

	//static pel subSw0_0Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw0_1Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw0_2Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw0_3Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw1_0Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw1_1Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw1_2Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw1_3Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw2_0Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw2_1Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw2_2Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw2_3Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw3_0Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw3_1Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw3_2Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];
	//static pel subSw3_3Down[(MMEA_LEVEL2_SR_V >> 3) + (MAX_CU_W >> 2)][((MMEA_LEVEL2_SR_H >> 3) >> COARSE_SEARCH_DOUBLE_SPEED) + (MAX_CU_SIZE_FETCH >> 2)];

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON

#pragma HLS array_partition variable=orgCp0_0_org complete dim=2
#pragma HLS array_partition variable=orgCp0_1_org complete dim=2
#pragma HLS array_partition variable=orgCp0_2_org complete dim=2
#pragma HLS array_partition variable=orgCp0_3_org complete dim=2

#pragma HLS array_partition variable=orgCp1_0_org complete dim=2
#pragma HLS array_partition variable=orgCp1_1_org complete dim=2
#pragma HLS array_partition variable=orgCp1_2_org complete dim=2
#pragma HLS array_partition variable=orgCp1_3_org complete dim=2

#pragma HLS array_partition variable=orgCp2_0_org complete dim=2
#pragma HLS array_partition variable=orgCp2_1_org complete dim=2
#pragma HLS array_partition variable=orgCp2_2_org complete dim=2
#pragma HLS array_partition variable=orgCp2_3_org complete dim=2

#pragma HLS array_partition variable=orgCp3_0_org complete dim=2
#pragma HLS array_partition variable=orgCp3_1_org complete dim=2
#pragma HLS array_partition variable=orgCp3_2_org complete dim=2
#pragma HLS array_partition variable=orgCp3_3_org complete dim=2

#pragma HLS array_partition variable=subSw0_0Up_org complete dim=2
#pragma HLS array_partition variable=subSw0_1Up_org complete dim=2
#pragma HLS array_partition variable=subSw0_2Up_org complete dim=2
#pragma HLS array_partition variable=subSw0_3Up_org complete dim=2

#pragma HLS array_partition variable=subSw1_0Up_org complete dim=2
#pragma HLS array_partition variable=subSw1_1Up_org complete dim=2
#pragma HLS array_partition variable=subSw1_2Up_org complete dim=2
#pragma HLS array_partition variable=subSw1_3Up_org complete dim=2

#pragma HLS array_partition variable=subSw2_0Up_org complete dim=2
#pragma HLS array_partition variable=subSw2_1Up_org complete dim=2
#pragma HLS array_partition variable=subSw2_2Up_org complete dim=2
#pragma HLS array_partition variable=subSw2_3Up_org complete dim=2

#pragma HLS array_partition variable=subSw3_0Up_org complete dim=2
#pragma HLS array_partition variable=subSw3_1Up_org complete dim=2
#pragma HLS array_partition variable=subSw3_2Up_org complete dim=2
#pragma HLS array_partition variable=subSw3_3Up_org complete dim=2

#if COARSE_SEARCH_DOUBLE_SPEED
#pragma HLS array_partition variable=orgCp0_0Down_org complete dim=2
#pragma HLS array_partition variable=orgCp0_1Down_org complete dim=2
#pragma HLS array_partition variable=orgCp0_2Down_org complete dim=2
#pragma HLS array_partition variable=orgCp0_3Down_org complete dim=2

#pragma HLS array_partition variable=orgCp1_0Down_org complete dim=2
#pragma HLS array_partition variable=orgCp1_1Down_org complete dim=2
#pragma HLS array_partition variable=orgCp1_2Down_org complete dim=2
#pragma HLS array_partition variable=orgCp1_3Down_org complete dim=2

#pragma HLS array_partition variable=orgCp2_0Down_org complete dim=2
#pragma HLS array_partition variable=orgCp2_1Down_org complete dim=2
#pragma HLS array_partition variable=orgCp2_2Down_org complete dim=2
#pragma HLS array_partition variable=orgCp2_3Down_org complete dim=2

#pragma HLS array_partition variable=orgCp3_0Down_org complete dim=2
#pragma HLS array_partition variable=orgCp3_1Down_org complete dim=2
#pragma HLS array_partition variable=orgCp3_2Down_org complete dim=2
#pragma HLS array_partition variable=orgCp3_3Down_org complete dim=2

#pragma HLS array_partition variable=subSw0_0Down_org complete dim=2
#pragma HLS array_partition variable=subSw0_1Down_org complete dim=2
#pragma HLS array_partition variable=subSw0_2Down_org complete dim=2
#pragma HLS array_partition variable=subSw0_3Down_org complete dim=2

#pragma HLS array_partition variable=subSw1_0Down_org complete dim=2
#pragma HLS array_partition variable=subSw1_1Down_org complete dim=2
#pragma HLS array_partition variable=subSw1_2Down_org complete dim=2
#pragma HLS array_partition variable=subSw1_3Down_org complete dim=2

#pragma HLS array_partition variable=subSw2_0Down_org complete dim=2
#pragma HLS array_partition variable=subSw2_1Down_org complete dim=2
#pragma HLS array_partition variable=subSw2_2Down_org complete dim=2
#pragma HLS array_partition variable=subSw2_3Down_org complete dim=2

#pragma HLS array_partition variable=subSw3_0Down_org complete dim=2
#pragma HLS array_partition variable=subSw3_1Down_org complete dim=2
#pragma HLS array_partition variable=subSw3_2Down_org complete dim=2
#pragma HLS array_partition variable=subSw3_3Down_org complete dim=2
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED


//	//========================================================
//#pragma HLS array_partition variable=orgCp0_0 complete dim=1
//#pragma HLS array_partition variable=orgCp0_1 complete dim=1
//#pragma HLS array_partition variable=orgCp0_2 complete dim=1
//#pragma HLS array_partition variable=orgCp0_3 complete dim=1
//
//#pragma HLS array_partition variable=orgCp1_0 complete dim=1
//#pragma HLS array_partition variable=orgCp1_1 complete dim=1
//#pragma HLS array_partition variable=orgCp1_2 complete dim=1
//#pragma HLS array_partition variable=orgCp1_3 complete dim=1
//
//#pragma HLS array_partition variable=orgCp2_0 complete dim=1
//#pragma HLS array_partition variable=orgCp2_1 complete dim=1
//#pragma HLS array_partition variable=orgCp2_2 complete dim=1
//#pragma HLS array_partition variable=orgCp2_3 complete dim=1
//
//#pragma HLS array_partition variable=orgCp3_0 complete dim=1
//#pragma HLS array_partition variable=orgCp3_1 complete dim=1
//#pragma HLS array_partition variable=orgCp3_2 complete dim=1
//#pragma HLS array_partition variable=orgCp3_3 complete dim=1
//
//#pragma HLS array_partition variable=subSw0_0Up complete dim=1
//#pragma HLS array_partition variable=subSw0_1Up complete dim=1
//#pragma HLS array_partition variable=subSw0_2Up complete dim=1
//#pragma HLS array_partition variable=subSw0_3Up complete dim=1
//
//#pragma HLS array_partition variable=subSw1_0Up complete dim=1
//#pragma HLS array_partition variable=subSw1_1Up complete dim=1
//#pragma HLS array_partition variable=subSw1_2Up complete dim=1
//#pragma HLS array_partition variable=subSw1_3Up complete dim=1
//
//#pragma HLS array_partition variable=subSw2_0Up complete dim=1
//#pragma HLS array_partition variable=subSw2_1Up complete dim=1
//#pragma HLS array_partition variable=subSw2_2Up complete dim=1
//#pragma HLS array_partition variable=subSw2_3Up complete dim=1
//
//#pragma HLS array_partition variable=subSw3_0Up complete dim=1
//#pragma HLS array_partition variable=subSw3_1Up complete dim=1
//#pragma HLS array_partition variable=subSw3_2Up complete dim=1
//#pragma HLS array_partition variable=subSw3_3Up complete dim=1
//
//#pragma HLS array_partition variable=orgCp0_0Down complete dim=1
//#pragma HLS array_partition variable=orgCp0_1Down complete dim=1
//#pragma HLS array_partition variable=orgCp0_2Down complete dim=1
//#pragma HLS array_partition variable=orgCp0_3Down complete dim=1
//
//#pragma HLS array_partition variable=orgCp1_0Down complete dim=1
//#pragma HLS array_partition variable=orgCp1_1Down complete dim=1
//#pragma HLS array_partition variable=orgCp1_2Down complete dim=1
//#pragma HLS array_partition variable=orgCp1_3Down complete dim=1
//
//#pragma HLS array_partition variable=orgCp2_0Down complete dim=1
//#pragma HLS array_partition variable=orgCp2_1Down complete dim=1
//#pragma HLS array_partition variable=orgCp2_2Down complete dim=1
//#pragma HLS array_partition variable=orgCp2_3Down complete dim=1
//
//#pragma HLS array_partition variable=orgCp3_0Down complete dim=1
//#pragma HLS array_partition variable=orgCp3_1Down complete dim=1
//#pragma HLS array_partition variable=orgCp3_2Down complete dim=1
//#pragma HLS array_partition variable=orgCp3_3Down complete dim=1
//
//#pragma HLS array_partition variable=subSw0_0Down complete dim=1
//#pragma HLS array_partition variable=subSw0_1Down complete dim=1
//#pragma HLS array_partition variable=subSw0_2Down complete dim=1
//#pragma HLS array_partition variable=subSw0_3Down complete dim=1
//
//#pragma HLS array_partition variable=subSw1_0Down complete dim=1
//#pragma HLS array_partition variable=subSw1_1Down complete dim=1
//#pragma HLS array_partition variable=subSw1_2Down complete dim=1
//#pragma HLS array_partition variable=subSw1_3Down complete dim=1
//
//#pragma HLS array_partition variable=subSw2_0Down complete dim=1
//#pragma HLS array_partition variable=subSw2_1Down complete dim=1
//#pragma HLS array_partition variable=subSw2_2Down complete dim=1
//#pragma HLS array_partition variable=subSw2_3Down complete dim=1
//
//#pragma HLS array_partition variable=subSw3_0Down complete dim=1
//#pragma HLS array_partition variable=subSw3_1Down complete dim=1
//#pragma HLS array_partition variable=subSw3_2Down complete dim=1
//#pragma HLS array_partition variable=subSw3_3Down complete dim=1
#endif
#endif	// #if !IME_PRAGMA_ON_OP

	S14 centerPos[2] = { 0, 0 };
	S14 posLT[3][2];
	//U8 searchIter = 0;

	//U32 bestCostSubSw_org[4][4];
	//S14 bestMvSubSw_org[4][4][2];

	U32 bestCostSubSw[4][4];
	S14 bestMvSubSw[4][4][2];

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON
//#pragma HLS ARRAY_PARTITION variable=bestCostSubSw_org complete dim=0
//#pragma HLS ARRAY_PARTITION variable=bestMvSubSw_org complete dim=0

#pragma HLS ARRAY_PARTITION variable=bestCostSubSw complete dim=0
#pragma HLS ARRAY_PARTITION variable=bestMvSubSw complete dim=0
#endif

#endif	// #if !IME_PRAGMA_ON_OP

#if SEARCH_FULLLV1==0
	S14 bestTriMv[3][2] = {};
#endif

	U32 bestTriCost[3] = { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF };
	U32 bestCoarseCost = 0xFFFFFFFF;

#if SEARCH_FULLLV1==0
	for (searchIter = 0; searchIter < 4; searchIter++)
	{
#endif
		//constructRefWindowDouble(
		constructRefWindowDoubleLv2(
			//searchIter, 
			//posLT,

			swLv2_org, orgLv2_org, 
			//swLv1_org, orgLv1_org,
			orgCp0_0_org,
			orgCp0_1_org,
			orgCp0_2_org,
			orgCp0_3_org,
			orgCp1_0_org,
			orgCp1_1_org,
			orgCp1_2_org,
			orgCp1_3_org,
			orgCp2_0_org,
			orgCp2_1_org,
			orgCp2_2_org,
			orgCp2_3_org,
			orgCp3_0_org,
			orgCp3_1_org,
			orgCp3_2_org,
			orgCp3_3_org,

			subSw0_0Up_org,
			subSw0_1Up_org,
			subSw0_2Up_org,
			subSw0_3Up_org,
			subSw1_0Up_org,
			subSw1_1Up_org,
			subSw1_2Up_org,
			subSw1_3Up_org,
			subSw2_0Up_org,
			subSw2_1Up_org,
			subSw2_2Up_org,
			subSw2_3Up_org,
			subSw3_0Up_org,
			subSw3_1Up_org,
			subSw3_2Up_org,
			subSw3_3Up_org

#if COARSE_SEARCH_DOUBLE_SPEED
			orgCp0_0Down_org,
			orgCp0_1Down_org,
			orgCp0_2Down_org,
			orgCp0_3Down_org,
			orgCp1_0Down_org,
			orgCp1_1Down_org,
			orgCp1_2Down_org,
			orgCp1_3Down_org,
			orgCp2_0Down_org,
			orgCp2_1Down_org,
			orgCp2_2Down_org,
			orgCp2_3Down_org,
			orgCp3_0Down_org,
			orgCp3_1Down_org,
			orgCp3_2Down_org,
			orgCp3_3Down_org,

			subSw0_0Down_org,
			subSw0_1Down_org,
			subSw0_2Down_org,
			subSw0_3Down_org,
			subSw1_0Down_org,
			subSw1_1Down_org,
			subSw1_2Down_org,
			subSw1_3Down_org,
			subSw2_0Down_org,
			subSw2_1Down_org,
			subSw2_2Down_org,
			subSw2_3Down_org,
			subSw3_0Down_org,
			subSw3_1Down_org,
			subSw3_2Down_org,
			subSw3_3Down_org,
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED

			//,
			////==================================================
			//swLv2, orgLv2, swLv1, orgLv1,
			//orgCp0_0, orgCp0_1, orgCp0_2, orgCp0_3,
			//orgCp1_0, orgCp1_1, orgCp1_2, orgCp1_3,
			//orgCp2_0, orgCp2_1, orgCp2_2, orgCp2_3,
			//orgCp3_0, orgCp3_1, orgCp3_2, orgCp3_3,
			//orgCp0_0Down, orgCp0_1Down, orgCp0_2Down, orgCp0_3Down,
			//orgCp1_0Down, orgCp1_1Down, orgCp1_2Down, orgCp1_3Down,
			//orgCp2_0Down, orgCp2_1Down, orgCp2_2Down, orgCp2_3Down,
			//orgCp3_0Down, orgCp3_1Down, orgCp3_2Down, orgCp3_3Down,
			//subSw0_0Up, subSw0_1Up, subSw0_2Up, subSw0_3Up,
			//subSw1_0Up, subSw1_1Up, subSw1_2Up, subSw1_3Up,
			//subSw2_0Up, subSw2_1Up, subSw2_2Up, subSw2_3Up,
			//subSw3_0Up, subSw3_1Up, subSw3_2Up, subSw3_3Up,
			//subSw0_0Down, subSw0_1Down, subSw0_2Down, subSw0_3Down,
			//subSw1_0Down, subSw1_1Down, subSw1_2Down, subSw1_3Down,
			//subSw2_0Down, subSw2_1Down, subSw2_2Down, subSw2_3Down,
			//subSw3_0Down, subSw3_1Down, subSw3_2Down, subSw3_3Down
		);

		//// check orgCp0_0_org
		//for (int j = 0; j < 16; j++)
		//{
		//	for (int i = 0; i < 16; i++)
		//	{
		//		if (orgCp0_0_org[j][i] != orgCp0_0[i][j])
		//		{
		//			printf("orgCp0_0_org error! ");
		//			printf("orgCp0_0_org[%d][%d] = %d\torgCp0_0[%d][%d] = %d\n", j, i, orgCp0_0_org[j][i], i, j, orgCp0_0[i][j]);
		//		}
		//	}
		//}

		//// check orgCp0_1_org
		//for (int j = 0; j < 16; j++)
		//{
		//	for (int i = 0; i < 16; i++)
		//	{
		//		if (orgCp0_1_org[j][i] != orgCp0_1[i][j])
		//		{
		//			printf("orgCp0_1_org error! ");
		//			printf("orgCp0_1_org[%d][%d] = %d\torgCp0_0[%d][%d] = %d\n", j, i, orgCp0_1_org[j][i], i, j, orgCp0_1[i][j]);
		//		}
		//	}
		//}

		//// check subSw0_0Up_org subSw0_0Down_org
		//for (int j = 0; j < 20; j++)
		//{
		//	for (int i = 0; i < 28; i++)
		//	{
		//		if (subSw0_0Up_org[j][i] != subSw0_0Up[i][j])
		//		{
		//			printf("subSw0_0Up_org error! ");
		//			printf("subSw0_0Up_org[%d][%d] = %d\tsubSw0_0Up[%d][%d] = %d\n", j, i, subSw0_0Up_org[j][i], i, j, subSw0_0Up[i][j]);
		//		}

		//		if (subSw0_0Down_org[j][i] != subSw0_0Down[i][j])
		//		{
		//			printf("subSw0_0Down_org error! ");
		//			printf("subSw0_0Down_org[%d][%d] = %d\tsubSw0_0Down[%d][%d] = %d\n", j, i, subSw0_0Down_org[j][i], i, j, subSw0_0Down[i][j]);
		//		}
		//	}
		//}

		//// check subSw0_1Up_org subSw0_1Down_org
		//for (int j = 0; j < 20; j++)
		//{
		//	for (int i = 0; i < 28; i++)
		//	{
		//		if (subSw0_1Up_org[j][i] != subSw0_1Up[i][j])
		//		{
		//			printf("subSw0_1Up_org error! ");
		//			printf("subSw0_1Up_org[%d][%d] = %d\tsubSw0_0Up[%d][%d] = %d\n", j, i, subSw0_1Up_org[j][i], i, j, subSw1_0Up[i][j]);
		//		}

		//		//if (subSw0_1Down_org[j][i] != subSw0_1Down[i][j])
		//		//{
		//		//	printf("subSw0_1Down_org error! ");
		//		//	printf("subSw0_1Down_org[%d][%d] = %d\tsubSw0_1Down[%d][%d] = %d\n", j, i, subSw0_1Down_org[j][i], i, j, subSw0_1Down[i][j]);
		//		//}
		//	}
		//}


		//for (int j = 0; j < 20; j++)
		//{
		//	for (int i = 0; i < 28; i++)
		//	{
		//		if (subSw0_1Up_org[j][i] != subSw1_0Up[i][j])
		//		{
		//			printf("subSw0_1Up_org error! ");
		//			printf("subSw0_1Up_org[%d][%d] = %d\tsubSw0_1Up_org[%d][%d] = %d\n", j, i, subSw0_1Up_org[j][i], i, j, subSw0_1Up[i][j]);
		//		}

		//		if (subSw0_2Up_org[j][i] != subSw2_0Up[i][j])
		//		{
		//			printf("subSw0_2Up_org error! ");
		//			printf("subSw0_2Up_org[%d][%d] = %d\tsubSw0_2Up_org[%d][%d] = %d\n", j, i, subSw0_2Up_org[j][i], i, j, subSw0_2Up[i][j]);
		//		}
		//	}
		//}

		searchWindowsDoubleSkip(
			//searchIter, 
			gmvp, posLT, lamdaMv, maxWidth, maxHeight, 
			//bestCostSubSw_org, bestMvSubSw_org,
			bestCostSubSw, bestMvSubSw,

			orgCp0_0_org,
			orgCp0_1_org,
			orgCp0_2_org,
			orgCp0_3_org,
			orgCp1_0_org,
			orgCp1_1_org,
			orgCp1_2_org,
			orgCp1_3_org,
			orgCp2_0_org,
			orgCp2_1_org,
			orgCp2_2_org,
			orgCp2_3_org,
			orgCp3_0_org,
			orgCp3_1_org,
			orgCp3_2_org,
			orgCp3_3_org,

			subSw0_0Up_org,
			subSw0_1Up_org,
			subSw0_2Up_org,
			subSw0_3Up_org,
			subSw1_0Up_org,
			subSw1_1Up_org,
			subSw1_2Up_org,
			subSw1_3Up_org,
			subSw2_0Up_org,
			subSw2_1Up_org,
			subSw2_2Up_org,
			subSw2_3Up_org,
			subSw3_0Up_org,
			subSw3_1Up_org,
			subSw3_2Up_org,
			subSw3_3Up_org
#if COARSE_SEARCH_DOUBLE_SPEED
			orgCp0_0Down_org,
			orgCp0_1Down_org,
			orgCp0_2Down_org,
			orgCp0_3Down_org,
			orgCp1_0Down_org,
			orgCp1_1Down_org,
			orgCp1_2Down_org,
			orgCp1_3Down_org,
			orgCp2_0Down_org,
			orgCp2_1Down_org,
			orgCp2_2Down_org,
			orgCp2_3Down_org,
			orgCp3_0Down_org,
			orgCp3_1Down_org,
			orgCp3_2Down_org,
			orgCp3_3Down_org,

			subSw0_0Down_org,
			subSw0_1Down_org,
			subSw0_2Down_org,
			subSw0_3Down_org,
			subSw1_0Down_org,
			subSw1_1Down_org,
			subSw1_2Down_org,
			subSw1_3Down_org,
			subSw2_0Down_org,
			subSw2_1Down_org,
			subSw2_2Down_org,
			subSw2_3Down_org,
			subSw3_0Down_org,
			subSw3_1Down_org,
			subSw3_2Down_org,
			subSw3_3Down_org,
#endif	// #if COARSE_SEARCH_DOUBLE_SPEED

			//,
			////================================================================
			//orgCp0_0, orgCp0_1, orgCp0_2, orgCp0_3, orgCp1_0, orgCp1_1, orgCp1_2, orgCp1_3, orgCp2_0, orgCp2_1, orgCp2_2, orgCp2_3, orgCp3_0, orgCp3_1, orgCp3_2, orgCp3_3,
			//orgCp0_0Down, orgCp0_1Down, orgCp0_2Down, orgCp0_3Down, orgCp1_0Down, orgCp1_1Down, orgCp1_2Down, orgCp1_3Down, orgCp2_0Down, orgCp2_1Down, orgCp2_2Down, orgCp2_3Down, orgCp3_0Down, orgCp3_1Down, orgCp3_2Down, orgCp3_3Down,
			//subSw0_0Up, subSw0_1Up, subSw0_2Up, subSw0_3Up, subSw1_0Up, subSw1_1Up, subSw1_2Up, subSw1_3Up, subSw2_0Up, subSw2_1Up, subSw2_2Up, subSw2_3Up, subSw3_0Up, subSw3_1Up, subSw3_2Up, subSw3_3Up,
			//subSw0_0Down, subSw0_1Down, subSw0_2Down, subSw0_3Down, subSw1_0Down, subSw1_1Down, subSw1_2Down, subSw1_3Down, subSw2_0Down, subSw2_1Down, subSw2_2Down, subSw2_3Down, subSw3_0Down, subSw3_1Down, subSw3_2Down, subSw3_3Down
		);

		compareSearchResult(
			//searchIter, 
			gmvp, posLT, bestTriCost, bestTriMv, 

			//bestCostSubSw_org, bestMvSubSw_org,

			bestCostSubSw, bestMvSubSw
		);
#if SEARCH_FULLLV1==0
	}



	for (searchIter = 0; searchIter < 3; searchIter++)
	{
		if (bestCoarseCost > bestTriCost[searchIter])
		{
			bestCoarseCost = bestTriCost[searchIter];
			bestMv[0] = bestTriMv[searchIter][0];
			bestMv[1] = bestTriMv[searchIter][1];
		}
	}

#if PRINT_IME_MV
	printf("Lv1:[%d,%d]\n", bestMv[0] - MMEA_LEVEL2_SR, bestMv[1] - MMEA_LEVEL2_SR);
#endif

#endif
}

/*==============*/
/*  Levle 1 ME 	*/
/*==============*/

void deriveSearchRangeLv1(S14 centerPos[2], S14 posLT[2])
{
#pragma HLS inline off
	S14 ltPosX, ltPosY;
	S14 rbPosX, rbPosY;
	ltPosX = centerPos[0] - (MMEA_LEVEL1_SR_V >> 1);
	ltPosY = centerPos[1] - (MMEA_LEVEL1_SR_H >> 1);
	rbPosX = centerPos[0] + (MMEA_LEVEL1_SR_V >> 1) + MAX_CU_SIZE2;
	rbPosY = centerPos[1] + (MMEA_LEVEL1_SR_H >> 1) + MAX_CU_SIZE2;
	if (ltPosX < 0)
	{
		centerPos[0] -= ltPosX;
	}
	if (ltPosY < 0)
	{
		centerPos[1] -= ltPosY;
	}
	if (rbPosX > SWW - 1)
	{
		centerPos[0] -= (rbPosX - SWW + 1);
	}
	if (rbPosY > SWH - 1)
	{
		centerPos[1] -= (rbPosY - SWH + 1);
	}
	posLT[0] = centerPos[0] - (MMEA_LEVEL1_SR_V >> 1);
	posLT[1] = centerPos[1] - (MMEA_LEVEL1_SR_H >> 1);

	//posLT[0] = posLT[0] >> 1;	
	//posLT[1] = posLT[1] >> 1;
}
void copyOrgLv1_1(
	pel org_org[32][32],
	pel org0_org[32][32],
	pel org1_org[32][32],
	pel org2_org[32][32],

	//pel org[32][32], 
	//pel org0[32][32],
	//pel org1[32][32],
	//pel org2[32][32],
	U6 maxWidthScu, 
	U6 maxHeightScu
)
{
#pragma HLS inline off
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=org_org complete dim=2
#pragma HLS array_partition variable=org0_org complete dim=2
#pragma HLS array_partition variable=org1_org complete dim=2
#pragma HLS array_partition variable=org2_org complete dim=2

//#pragma HLS array_partition variable=org complete dim=1
//#pragma HLS array_partition variable=org0 complete dim=1
//#pragma HLS array_partition variable=org1 complete dim=1
//#pragma HLS array_partition variable=org2 complete dim=1
#endif

	U6 x, y;
//	for (y = 0; y < 32; y++) 
//	{
//#if IME_PRAGMA_ON
//#pragma HLS pipeline
//#endif
//		for (x = 0; x < 32; x++) 
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//			org0[x][y] = org[x][y];
//			org1[x][y] = org[x][y];
//			org2[x][y] = org[x][y];
//		}
//	}

	for (y = 0; y < 32; y++) 
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < 32; x++) 
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			org0_org[y][x] = org_org[y][x];
			org1_org[y][x] = org_org[y][x];
			org2_org[y][x] = org_org[y][x];
		}
	}
}

void constructSubSwLv1(
	pel swLv1_org[SWH >> 1][SWW >> 1],
	pel swSub_org[(MMEA_LEVEL1_SR_H >> 1) + 32][(MMEA_LEVEL1_SR_V >> 1) + 32],
	//pel swLv1[SWW >> 1][SWH >> 1],
	//pel swSub[(MMEA_LEVEL1_SR_V >> 1) + 32][(MMEA_LEVEL1_SR_H >> 1) + 32],
	S14 bestPos[2]
	//, 
	//S14 x_in_sw
)
{
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=swLv1_org complete dim=2
#pragma HLS array_partition variable=swSub_org complete dim=2

//#pragma HLS array_partition variable=swLv1 complete dim=1
//#pragma HLS array_partition variable=swSub complete dim=1
#pragma HLS array_partition variable=bestPos complete dim=0
#pragma HLS inline off
#endif

	S14 x_in_sw = (bestPos[0] >> 1);
	S14 y_in_sw = (bestPos[1] >> 1);

	S14 x, y;

//	for (y = 0; y < (MMEA_LEVEL1_SR_H >> 1) + 32; y++) {
//#if IME_PRAGMA_ON
//#pragma HLS pipeline
//#endif
//		for (x = 0; x < (MMEA_LEVEL1_SR_V >> 1) + 32; x++)
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//			swSub[x][y] = swLv1[x + x_in_sw][y + y_in_sw];
//		}
//	}

	for (y = 0; y < (MMEA_LEVEL1_SR_H >> 1) + 32; y++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < (MMEA_LEVEL1_SR_V >> 1) + 32; x++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			swSub_org[y][x] = swLv1_org[y + y_in_sw][x + x_in_sw];
		}
	}
}

void constructSubSwLv1_test1(
#if BW_DEBUG
	U10 swOutLv1_t1[48][64],
	U10 swSub[24][28],
#else
	pel swOutLv1_t1[48][64],
	pel swSub[24][28],
#endif
	S14 bestPos[2]

)
{
#pragma HLS inline

#if IME_PRAGMA_ON
#pragma HLS array_partition variable=swOutLv1_t1 complete dim=2
#pragma HLS array_partition variable=swSub complete dim=2
#pragma HLS array_partition variable=bestPos complete dim=0
#endif


	S14 x_sw = (bestPos[0] >> 2);
	S14 y_sw = (bestPos[1] >> 2);
	S14 i, j;
	for (j = 0; j < 24; j++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (i = 0; i < 28; i++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			swSub[j][i] = swOutLv1_t1[j + y_sw][i + x_sw];
		}
	}

}

void constructSubSwLv1_serial(
#if BW_DEBUG
	U10 swOutLv1_t1[48][64],
	U10 swSub[24][28],
#else
	pel swOutLv1_t1[48][64],
	pel swSub[24][28],
#endif
	S14 bestPos[2]

)
{
#pragma HLS inline //off

#if IME_PRAGMA_ON
#pragma HLS array_partition variable=swOutLv1_t1 complete dim=2
#pragma HLS array_partition variable=swSub complete dim=2
#pragma HLS array_partition variable=bestPos complete dim=0
#endif


	S14 x_sw = (bestPos[0] >> 2);
	S14 y_sw = (bestPos[1] >> 2);
	S14 i, j;
	for (j = 0; j < 24; j++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (i = 0; i < 28; i++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			swSub[j][i] = swOutLv1_t1[j + y_sw][i + x_sw];
		}
	}

}

void constructSubSwLv1All(
	pel swLv1_org[SWH >> 1][SWW >> 1],
	pel swSub0_org[(MMEA_LEVEL1_SR_H >> 1) + 32][(MMEA_LEVEL1_SR_V >> 1) + 32],
	pel swSub1_org[(MMEA_LEVEL1_SR_H >> 1) + 32][(MMEA_LEVEL1_SR_V >> 1) + 32],
	pel swSub3_org[(MMEA_LEVEL1_SR_H >> 1) + 32][(MMEA_LEVEL1_SR_V >> 1) + 32],

	//pel swLv1[SWW >> 1][SWH >> 1],
	//pel swSub0[(MMEA_LEVEL1_SR_V >> 1) + 32][(MMEA_LEVEL1_SR_H >> 1) + 32],
	//pel swSub1[(MMEA_LEVEL1_SR_V >> 1) + 32][(MMEA_LEVEL1_SR_H >> 1) + 32],
	//pel swSub3[(MMEA_LEVEL1_SR_V >> 1) + 32][(MMEA_LEVEL1_SR_H >> 1) + 32],
	S14 posLT0[DIR_DIM],
	S14 posLT1[DIR_DIM],
	S14 posLT3[DIR_DIM]
)
{
#pragma HLS inline off

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=swLv1_org complete dim=2
#pragma HLS array_partition variable=swSub0_org complete dim=2
#pragma HLS array_partition variable=swSub1_org complete dim=2
#pragma HLS array_partition variable=swSub3_org complete dim=2

//#pragma HLS array_partition variable=swLv1 complete dim=1
//#pragma HLS array_partition variable=swSub0 complete dim=1
//#pragma HLS array_partition variable=swSub1 complete dim=1
//#pragma HLS array_partition variable=swSub3 complete dim=1

#pragma HLS array_partition variable=posLT0 complete dim=0
#pragma HLS array_partition variable=posLT1 complete dim=0
#pragma HLS array_partition variable=posLT3 complete dim=0
#endif

#endif	// #if !IME_PRAGMA_ON_OP

	constructSubSwLv1(swLv1_org, swSub0_org, 
		//swLv1, swSub0, 
		posLT0);

	constructSubSwLv1(swLv1_org, swSub1_org, 
		//swLv1, swSub1, 
		posLT1);

	constructSubSwLv1(swLv1_org, swSub3_org, 
		//swLv1, swSub3, 
		posLT3);
}

void constructSubSwLv1All_test1(
#if BW_DEBUG
	U10 swOutLv1_t1[48][64],
	U10 swSub0_t1[24][28],
	U10 swSub1_t1[24][28],
	U10 swSub3_t1[24][28],
#else
	pel swOutLv1_t1[48][64],
	pel swSub0_t1[24][28],
	pel swSub1_t1[24][28],
	pel swSub3_t1[24][28],
#endif	

	S14 posLT0[2],
	S14 posLT1[2],
	S14 posLT3[2]
)
{
#pragma HLS inline off

	constructSubSwLv1_test1(swOutLv1_t1, swSub0_t1, 
		posLT0);

	constructSubSwLv1_test1(swOutLv1_t1, swSub1_t1,
		posLT1);

	constructSubSwLv1_test1(swOutLv1_t1, swSub3_t1,
		posLT3);
}
void accSadLineSubLv1(
	pel swLv1_org[(MMEA_LEVEL1_SR_H >> 1) + 32][(MMEA_LEVEL1_SR_V >> 1) + 32],
	pel org_org[MAX_CU_H >> 1][MAX_CU_W >> 1],

	//pel swLv1[(MMEA_LEVEL1_SR_V >> 1) + 32][(MMEA_LEVEL1_SR_H >> 1) + 32],
	//pel org[32][32],
	S14 spPosY,
	U5 sadH,
	U32 bestCostRow_org[((MMEA_LEVEL1_SR_V >> 1) >> SKIP_COARSE_SEARCH)],
	//U32 bestCostRow[((MMEA_LEVEL1_SR_V >> 1) >> SKIP_COARSE_SEARCH)],
	U6 maxWidthHex,
	U6 maxHeightHex
)
{
	//U32 bestCostRow_org[((MMEA_LEVEL1_SR_V >> 1) >> SKIP_COARSE_SEARCH)];

#if IME_PRAGMA_ON
#pragma HLS array_partition variable=swLv1_org complete dim=2
#pragma HLS array_partition variable=org_org complete dim=2
#pragma HLS array_partition variable=bestCostRow_org complete dim=0

//#pragma HLS array_partition variable=swLv1 complete dim=1
//#pragma HLS array_partition variable=org complete dim=1
//#pragma HLS array_partition variable=bestCostRow complete dim=0
#endif
	U6 spX, sadW;

	if (sadH >= maxHeightHex)
	{
		return;
	}

	for (spX = 0; spX < ((MMEA_LEVEL1_SR_V >> 1) >> SKIP_COARSE_SEARCH); spX++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (sadW = 0; sadW < 32; sadW++)
		{
#if IME_PRAGMA_ON
#pragma HLS loop_tripcount max= 32
#pragma HLS unroll
#endif
			//bestCostRow[spX] += sadPel(swLv1[(spX << SKIP_COARSE_SEARCH) + sadW][spPosY + sadH], org[sadW][sadH], maxWidthHex - sadW);

			bestCostRow_org[spX] += sadPel(swLv1_org[spPosY + sadH][(spX << SKIP_COARSE_SEARCH) + sadW], org_org[sadH][sadW], maxWidthHex - sadW);

		}

		//// check bestCostRow_org
		//if (bestCostRow_org[spX] != bestCostRow[spX])
		//{
		//	printf("bestCostRow_org error! ");
		//	printf("bestCostRow_org[%d] = %d\tbestCostRow[%d] = %d\n", spX, bestCostRow_org[spX], spX, bestCostRow[spX]);
		//}
		

	}
}

U32 searchSubLv1TestCase(
	pel swLv1_org[(MMEA_LEVEL1_SR_H >> 1) + 32][(MMEA_LEVEL1_SR_V >> 1) + 32],
	pel org_org[MAX_CU_H >> 1][MAX_CU_W >> 1],
	//pel swLv1[(MMEA_LEVEL1_SR_V >> 1) + 32][(MMEA_LEVEL1_SR_H >> 1) + 32],
	//pel org[32][32],
	S14 bestPos[2],
	S14 baseMvpq[2],
	U32 lamdaMv,
	U6 maxWidthHex,
	U6 maxHeightHex
)
{
#pragma HLS inline off
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=swLv1_org complete dim=2
#pragma HLS array_partition variable=org_org complete dim=2

//#pragma HLS array_partition variable=swLv1 complete dim=1
//#pragma HLS array_partition variable=org complete dim=1
#endif


	U32 bestCost = 0xFFFFFFFF;
	U32 bestCostRow_org[((MMEA_LEVEL1_SR_V >> 1) >> SKIP_COARSE_SEARCH)] = { 0 };
	//U32 bestCostRow[((MMEA_LEVEL1_SR_V >> 1) >> SKIP_COARSE_SEARCH)] = { 0 };
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=bestCostRow_org complete dim=0
//#pragma HLS array_partition variable=bestCostRow complete dim=0
#endif
	U6 sadH;
	S14 spPosX, spPosY;

	for (spPosY = 0; spPosY < ((MMEA_LEVEL1_SR_H >> 1) >> SKIP_COARSE_SEARCH); spPosY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (spPosX = 0; spPosX < ((MMEA_LEVEL1_SR_V >> 1) >> SKIP_COARSE_SEARCH); spPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			//bestCostRow[spPosX] = getMvRcostSimplefied(lamdaMv, baseMvpq[0] + (((spPosX << 1) << SCALE_QUARTER_PIXEL_LEVEL) << SKIP_COARSE_SEARCH), baseMvpq[1] + (((spPosY << 1) << SCALE_QUARTER_PIXEL_LEVEL) << SKIP_COARSE_SEARCH));

			bestCostRow_org[spPosX] = getMvRcostSimplefied(lamdaMv, baseMvpq[0] + (((spPosX << 1) << SCALE_QUARTER_PIXEL_LEVEL) << SKIP_COARSE_SEARCH), baseMvpq[1] + (((spPosY << 1) << SCALE_QUARTER_PIXEL_LEVEL) << SKIP_COARSE_SEARCH));
			//if (bestCostRow[spPosX] != bestCostRow_org[spPosX])
			//{
			//	printf("bestCostRow_org error!");
			//	exit(1);
			//}
		}

		for (sadH = 0; sadH < 32; sadH++)
		{
#if IME_PRAGMA_ON
#pragma HLS loop_tripcount max= 32
#pragma HLS pipeline
#endif
			accSadLineSubLv1(swLv1_org, org_org, 
				//swLv1, org, 
				(spPosY << SKIP_COARSE_SEARCH), sadH, 
				bestCostRow_org, 
				//bestCostRow,
				maxWidthHex, maxHeightHex);

		}

		for (spPosX = 0; spPosX < ((MMEA_LEVEL1_SR_V >> 1) >> SKIP_COARSE_SEARCH); spPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
#if 0
			if (bestCost > bestCostRow[spPosX])
			{
				bestCost = bestCostRow[spPosX];
				bestPos[0] = (spPosX << SKIP_COARSE_SEARCH);
				bestPos[1] = (spPosY << SKIP_COARSE_SEARCH);
			}
#else
			if (bestCost > bestCostRow_org[spPosX])
			{
				bestCost = bestCostRow_org[spPosX];
				bestPos[0] = (spPosX << SKIP_COARSE_SEARCH);
				bestPos[1] = (spPosY << SKIP_COARSE_SEARCH);
			}
#endif
		}
	}
	return bestCost;
}

void accSadLineSubLv1_test1(
#if BW_DEBUG
	U10 swSub[24][28],
	U10 org[16][16],
#else
	pel swSub[24][28],
	pel org[16][16],
#endif
	S14 spPosY,
	U5 cuH,
	U32 bestCostRow[12],
	U6 maxWidthHex,
	U6 maxHeightHex
)
{

#if IME_PRAGMA_ON
#pragma HLS array_partition variable=swSub complete dim=2
#pragma HLS array_partition variable=org complete dim=2
#pragma HLS array_partition variable=bestCostRow complete dim=0
#endif
	U6 spX, cuW;

	if (cuH >= maxHeightHex)
	{
		return;
	}

	for (spX = 0; spX < 12; spX++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (cuW = 0; cuW < 16; cuW++)
		{
#pragma HLS loop_tripcount max= 16
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			bestCostRow[spX] += sadPel_tets1(swSub[spPosY + cuH][spX + cuW], org[cuH][cuW], maxWidthHex - cuW);
		}
	}

}

U32 searchSubLv1_test1(
#if BW_DEBUG
	U10 swSub[24][28],
	U10 org[16][16],
#else
	pel swSub[24][28],
	pel org[16][16],
#endif
	S14 bestPos[2],
	S14 baseMvpq[2],
	U32 lamdaMv,
	U6 maxWidthHex,
	U6 maxHeightHex
)
{
#pragma HLS inline 

#if IME_PRAGMA_ON
#pragma HLS array_partition variable=swSub complete dim=2
#pragma HLS array_partition variable=org complete dim=2
#pragma HLS array_partition variable=bestPos complete dim=0
#pragma HLS array_partition variable=baseMvpq complete dim=0
#endif

	U32 bestCostRow[12];
	U32 bestCost = 0xFFFFFFFF;

#if IME_PRAGMA_ON
#pragma HLS array_partition variable=bestCostRow complete dim=0
#endif
	U6 cuH;
	S14 spPosX, spPosY;

	for (spPosY = 0; spPosY < 8; spPosY++)
	{

		for (spPosX = 0; spPosX < 12; spPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			bestCostRow[spPosX] = getMvRcostSimplefied(lamdaMv, baseMvpq[0] + (spPosX << 4), baseMvpq[1] + (spPosY << 4));
		}

		for (cuH = 0; cuH < 16; cuH++)
		{
#pragma HLS loop_tripcount max= 16
#if IME_PRAGMA_ON
#pragma HLS pipeline 
#endif
			accSadLineSubLv1_test1(swSub, org,
				spPosY, cuH,
				bestCostRow,
				maxWidthHex, maxHeightHex);

		}

#if 0//VIVADO_HLS_IME//1

		for (spPosX = 0; spPosX < 4; spPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			if (bestCost > bestCostRow[spPosX])
			{
				bestCost = bestCostRow[spPosX];
				bestPos[0] = spPosX;
				bestPos[1] = spPosY;
			}
		}

		for (spPosX = 4; spPosX < 8; spPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			if (bestCost > bestCostRow[spPosX])
			{
				bestCost = bestCostRow[spPosX];
				bestPos[0] = spPosX;
				bestPos[1] = spPosY;
			}
		}

		for (spPosX = 8; spPosX < 12; spPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			if (bestCost_2 > bestCostRow[spPosX])
			{
				bestCost_2 = bestCostRow[spPosX];
				bestPos_2[0] = spPosX;
				bestPos_2[1] = spPosY;
			}
		}

		if (bestCost > bestCost_2)
		{
			bestCost = bestCost_2;
			bestPos[0] = bestPos_2[0];
			bestPos[1] = bestPos_2[1];
		}


#else

		for (spPosX = 0; spPosX < 12; spPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			if (bestCost > bestCostRow[spPosX])
			{
				bestCost = bestCostRow[spPosX];
				bestPos[0] = spPosX;
				bestPos[1] = spPosY;
			}
		}

#endif

	}

	return bestCost;
}

U32 searchSubLv1_serial(
#if BW_DEBUG
	U10 swSub[24][28],
	U10 org[16][16],
#else
	pel swSub[24][28],
	pel org[16][16],
#endif
	S14 bestPos[2],
	S14 baseMvpq[2],
	U32 lamdaMv,
	U6 maxWidthHex,
	U6 maxHeightHex
)
{
#pragma HLS inline off

#if IME_PRAGMA_ON
#pragma HLS array_partition variable=swSub complete dim=2
#pragma HLS array_partition variable=org complete dim=2
#pragma HLS array_partition variable=bestPos complete dim=0
#pragma HLS array_partition variable=baseMvpq complete dim=0
#endif

	U32 bestCostRow[12];
	U32 bestCost = 0xFFFFFFFF;

#if IME_PRAGMA_ON
#pragma HLS array_partition variable=bestCostRow complete dim=0
#endif
	U6 cuH;
	S14 spPosX, spPosY;

	for (spPosY = 0; spPosY < 8; spPosY++)
	{

		for (spPosX = 0; spPosX < 12; spPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			bestCostRow[spPosX] = getMvRcostSimplefied(lamdaMv, baseMvpq[0] + (spPosX << 4), baseMvpq[1] + (spPosY << 4));
		}

		for (cuH = 0; cuH < 16; cuH++)
		{
#pragma HLS loop_tripcount max= 16
#if IME_PRAGMA_ON
#pragma HLS pipeline 
#endif
			accSadLineSubLv1_test1(swSub, org,
				spPosY, cuH,
				bestCostRow,
				maxWidthHex, maxHeightHex);

		}

#if 0//VIVADO_HLS_IME//1

		for (spPosX = 0; spPosX < 4; spPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			if (bestCost > bestCostRow[spPosX])
			{
				bestCost = bestCostRow[spPosX];
				bestPos[0] = spPosX;
				bestPos[1] = spPosY;
			}
		}

		for (spPosX = 4; spPosX < 8; spPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			if (bestCost > bestCostRow[spPosX])
			{
				bestCost = bestCostRow[spPosX];
				bestPos[0] = spPosX;
				bestPos[1] = spPosY;
			}
		}

		for (spPosX = 8; spPosX < 12; spPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			if (bestCost_2 > bestCostRow[spPosX])
			{
				bestCost_2 = bestCostRow[spPosX];
				bestPos_2[0] = spPosX;
				bestPos_2[1] = spPosY;
			}
		}

		if (bestCost > bestCost_2)
		{
			bestCost = bestCost_2;
			bestPos[0] = bestPos_2[0];
			bestPos[1] = bestPos_2[1];
		}


#else

		for (spPosX = 0; spPosX < 12; spPosX++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

			if (bestCost > bestCostRow[spPosX])
			{
				bestCost = bestCostRow[spPosX];
				bestPos[0] = spPosX;
				bestPos[1] = spPosY;
			}
		}

#endif

	}

	return bestCost;
}

void deriveSRLv1_test1(S14 centerPos[2], S14 posLT[2])
{
#pragma HLS inline 

#if IME_PRAGMA_ON
#pragma HLS array_partition variable=centerPos complete dim=0
#pragma HLS array_partition variable=posLT complete dim=0
#endif

	S14 ltPosX, ltPosY;
	S14 rbPosX, rbPosY;
#if VIVADO_HLS_IME

	ltPosX = centerPos[0] - 24;
	rbPosX = centerPos[0] + 88;
	ltPosY = centerPos[1] - 16;
	rbPosY = centerPos[1] + 80;

	if (ltPosX < 0)
	{
		//centerPos[0] = 24;
		posLT[0] = 0;
	}
	else if (rbPosX > 255)
	{
		//centerPos[0] = 167;
		posLT[0] = 143;
	}
	else
	{
		//centerPos[0] = centerPos[0];
		posLT[0] = centerPos[0] - 24;
	}

	if (ltPosY < 0)
	{
		//centerPos[1] = 16;
		posLT[1] = 0;
	}
	else if (rbPosY > 191)
	{
		//centerPos[1] = 111;
		posLT[1] = 95;
	}
	else
	{
		posLT[1] = centerPos[1] - 16;
	}

	//posLT[0] = centerPos[0] - 24;
	//posLT[1] = centerPos[1] - 16;

#else

	ltPosX = centerPos[0] - (MMEA_LEVEL1_SR_V >> 1);
	ltPosY = centerPos[1] - (MMEA_LEVEL1_SR_H >> 1);
	rbPosX = centerPos[0] + (MMEA_LEVEL1_SR_V >> 1) + MAX_CU_SIZE2;
	rbPosY = centerPos[1] + (MMEA_LEVEL1_SR_H >> 1) + MAX_CU_SIZE2;
	if (ltPosX < 0)
	{
		centerPos[0] -= ltPosX;
	}
	if (ltPosY < 0)
	{
		centerPos[1] -= ltPosY;
	}
	if (rbPosX > SWW - 1)
	{
		centerPos[0] -= (rbPosX - SWW + 1);
	}
	if (rbPosY > SWH - 1)
	{
		centerPos[1] -= (rbPosY - SWH + 1);
	}
	posLT[0] = centerPos[0] - (MMEA_LEVEL1_SR_V >> 1);
	posLT[1] = centerPos[1] - (MMEA_LEVEL1_SR_H >> 1);

#endif	// #if VIVADO_HLS_IME

}

void deriveSRLv1_serial(S14 centerPos[2], S14 posLT[2])
{
#pragma HLS inline off

#if IME_PRAGMA_ON
#pragma HLS array_partition variable=centerPos complete dim=0
#pragma HLS array_partition variable=posLT complete dim=0
#endif

	S14 ltPosX, ltPosY;
	S14 rbPosX, rbPosY;
#if VIVADO_HLS_IME

	ltPosX = centerPos[0] - 24;
	rbPosX = centerPos[0] + 88;
	ltPosY = centerPos[1] - 16;
	rbPosY = centerPos[1] + 80;

	if (ltPosX < 0)
	{
		//centerPos[0] = 24;
		posLT[0] = 0;
	}
	else if (rbPosX > 255)
	{
		//centerPos[0] = 167;
		posLT[0] = 143;
	}
	else
	{
		//centerPos[0] = centerPos[0];
		posLT[0] = centerPos[0] - 24;
	}

	if (ltPosY < 0)
	{
		//centerPos[1] = 16;
		posLT[1] = 0;
	}
	else if (rbPosY > 191)
	{
		//centerPos[1] = 111;
		posLT[1] = 95;
	}
	else
	{
		posLT[1] = centerPos[1] - 16;
	}

	//posLT[0] = centerPos[0] - 24;
	//posLT[1] = centerPos[1] - 16;

#else

	ltPosX = centerPos[0] - (MMEA_LEVEL1_SR_V >> 1);
	ltPosY = centerPos[1] - (MMEA_LEVEL1_SR_H >> 1);
	rbPosX = centerPos[0] + (MMEA_LEVEL1_SR_V >> 1) + MAX_CU_SIZE2;
	rbPosY = centerPos[1] + (MMEA_LEVEL1_SR_H >> 1) + MAX_CU_SIZE2;
	if (ltPosX < 0)
	{
		centerPos[0] -= ltPosX;
	}
	if (ltPosY < 0)
	{
		centerPos[1] -= ltPosY;
	}
	if (rbPosX > SWW - 1)
	{
		centerPos[0] -= (rbPosX - SWW + 1);
	}
	if (rbPosY > SWH - 1)
	{
		centerPos[1] -= (rbPosY - SWH + 1);
	}
	posLT[0] = centerPos[0] - (MMEA_LEVEL1_SR_V >> 1);
	posLT[1] = centerPos[1] - (MMEA_LEVEL1_SR_H >> 1);

#endif	// #if VIVADO_HLS_IME

}

void copyOrgLv1_test1(
	pel y_org_lv1_2d_t1[16][16],
	pel orgcp0[16][16],
	pel orgcp1[16][16]
)
{
#pragma HLS inline off
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=y_org_lv1_2d_t1 complete dim=2
#pragma HLS array_partition variable=orgcp0 complete dim=2
#pragma HLS array_partition variable=orgcp1 complete dim=2

#endif

	U5 x, y;

	for (y = 0; y < 16; y++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < 16; x++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			orgcp0[y][x] = y_org_lv1_2d_t1[y][x];
			orgcp1[y][x] = y_org_lv1_2d_t1[y][x];
		}
	}
}

void searchFullLv1_test1(
#if BW_DEBUG
	U10 swOutLv1_t1[48][64],
	U10 y_org_lv1_2d_t1[16][16],
#else
	pel swOutLv1_t1[48][64],
	pel y_org_lv1_2d_t1[16][16],
#endif
	S14 bestTriMv[3][2],
	S14 pMv[2],
	S14 bestPos[2],
	S14 gmvp[2],
	U32 lamdaMv,
	U5 maxWidthScu,
	U5 maxHeightScu
)
{

#pragma HLS inline off

#if !LV1_SERIAL//1
	pel orgcp0[16][16];
	pel orgcp1[16][16];
#endif

#if BW_DEBUG
	U10 swSub0_t1[24][28];
	U10 swSub1_t1[24][28];
	U10 swSub3_t1[24][28];
#else
	pel swSub0_t1[24][28];
	pel swSub1_t1[24][28];
	pel swSub3_t1[24][28];
#endif


	S14 bestPosSub0[2];
	S14 bestPosSub1[2];
	S14 bestPosSub3[2];

	U32 bestCostSub0;
	U32 bestCostSub1;
	U32 bestCostSub3;

	U32 bestCost = 0xFFFFFFFF;
	S14 posLT0[2];
	S14 posLT1[2];
	S14 posLT3[2];

	S14 gmvpSubSw0[2];
	S14 gmvpSubSw1[2];
	S14 gmvpSubSw3[2];

#if IME_PRAGMA_ON
#pragma HLS ALLOCATION instances=deriveSRLv1_test1 limit=1 function
#endif
	deriveSRLv1_test1(bestTriMv[0], posLT0);
	deriveSRLv1_test1(bestTriMv[1], posLT1);
	deriveSRLv1_test1(pMv, posLT3);


	gmvpSubSw0[0] = (posLT0[0] << 2) - gmvp[0];
	gmvpSubSw0[1] = (posLT0[1] << 2) - gmvp[1];
	gmvpSubSw1[0] = (posLT1[0] << 2) - gmvp[0];
	gmvpSubSw1[1] = (posLT1[1] << 2) - gmvp[1];
	gmvpSubSw3[0] = (posLT3[0] << 2) - gmvp[0];
	gmvpSubSw3[1] = (posLT3[1] << 2) - gmvp[1];




	constructSubSwLv1All_test1(swOutLv1_t1, swSub0_t1, swSub1_t1, swSub3_t1,
		posLT0, posLT1, posLT3
	);

#if !LV1_SERIAL//1
	copyOrgLv1_test1(y_org_lv1_2d_t1, orgcp0, orgcp1
	);

	//// check org_org
	//for (int y = 0; y < 32; y++)
	//{
	//	for (int x = 0; x < 32; x++)
	//	{
	//		if (org_org[y][x] != org[x][y])
	//		{
	//			printf("org_org error!\n");
	//		}
	//	}
	//}
	//for (int y = 0; y < 96; y++)
	//{
	//	for (int x = 0; x < 128; x++)
	//	{
	//		if (swLv1_org[y][x] != swLv1[x][y])
	//		{
	//			printf("swLv1_org error! y = %d x = %d\n", y, x);
	//		}
	//	}
	//}

	bestCostSub0 = searchSubLv1TestCase_test1(swSub0_t1, orgcp0,
		bestPosSub0, gmvpSubSw0, lamdaMv, maxWidthScu, maxHeightScu
	);

	bestCostSub1 = searchSubLv1TestCase_test1(swSub1_t1, orgcp1,
		bestPosSub1, gmvpSubSw1, lamdaMv, maxWidthScu, maxHeightScu
	);

	bestCostSub3 = searchSubLv1TestCase_test1(swSub3_t1, y_org_lv1_2d_t1,
		bestPosSub3, gmvpSubSw3, lamdaMv, maxWidthScu, maxHeightScu
	);
#else

#if IME_PRAGMA_ON
#pragma HLS ALLOCATION instances=searchSubLv1TestCase_test1 limit=1 function
#endif

	bestCostSub0 = searchSubLv1_test1(swSub0_t1, y_org_lv1_2d_t1,
		bestPosSub0, gmvpSubSw0, lamdaMv, maxWidthScu, maxHeightScu
	);

	bestCostSub1 = searchSubLv1_test1(swSub1_t1, y_org_lv1_2d_t1,
		bestPosSub1, gmvpSubSw1, lamdaMv, maxWidthScu, maxHeightScu
	);

	bestCostSub3 = searchSubLv1_test1(swSub3_t1, y_org_lv1_2d_t1,
		bestPosSub3, gmvpSubSw3, lamdaMv, maxWidthScu, maxHeightScu
	);

#endif


	if (bestCost > bestCostSub0)
	{
		bestCost = bestCostSub0;
		bestPos[0] = (bestPosSub0[0] << 2) + posLT0[0];
		bestPos[1] = (bestPosSub0[1] << 2) + posLT0[1];
	}
	if (bestCost > bestCostSub1)
	{
		bestCost = bestCostSub1;
		bestPos[0] = (bestPosSub1[0] << 2) + posLT1[0];
		bestPos[1] = (bestPosSub1[1] << 2) + posLT1[1];
	}
	if (bestCost > bestCostSub3)
	{
		bestCost = bestCostSub3;
		bestPos[0] = (bestPosSub3[0] << 2) + posLT3[0];
		bestPos[1] = (bestPosSub3[1] << 2) + posLT3[1];
	}
}


U32 searchLv1_sub_serial(
#if BW_DEBUG
	U10 swOutLv1_t1[48][64],
	U10 y_org_lv1_2d_t1[16][16],
#else
	pel swOutLv1_t1[48][64],
	pel y_org_lv1_2d_t1[16][16],
#endif
	S14 pMv[2],
	S14 gmvp[2],
	U32 lamdaMv,
	U5 maxWidthScu,
	U5 maxHeightScu,
	S14 bestPosSub3[2]
)
{

#pragma HLS inline //off

#if BW_DEBUG
	U10 swSub3_t1[24][28];
#else
	pel swSub3_t1[24][28];
#endif

	U32 bestCostSub3;

	S14 posLT3[2];

	S14 gmvpSubSw3[2];

	deriveSRLv1_serial(pMv, posLT3);

	gmvpSubSw3[0] = (posLT3[0] << 2) - gmvp[0];
	gmvpSubSw3[1] = (posLT3[1] << 2) - gmvp[1];

	constructSubSwLv1_serial(
		swOutLv1_t1, 
		swSub3_t1,
		posLT3
	);


	bestCostSub3 = searchSubLv1_serial(swSub3_t1, y_org_lv1_2d_t1,
		bestPosSub3, gmvpSubSw3, lamdaMv, maxWidthScu, maxHeightScu
	);

	bestPosSub3[0] = (bestPosSub3[0] << 2) + posLT3[0];
	bestPosSub3[1] = (bestPosSub3[1] << 2) + posLT3[1];

	return bestCostSub3;

}

void searchLv1_serial(
#if BW_DEBUG
	U10 swOutLv1_t1[48][64],
	U10 y_org_lv1_2d_t1[16][16],
#else
	pel swOutLv1_t1[48][64],
	pel y_org_lv1_2d_t1[16][16],
#endif
	S14 bestTriMv[2][2],//S14 bestTriMv[3][2],
	S14 pMv[2],
	S14 bestPos[2],
	S14 gmvp[2],
	U32 lamdaMv,
	U5 maxWidthScu,
	U5 maxHeightScu
)
{

#pragma HLS inline off


	S14 bestPosSub1[2];
	S14 bestPosSub3[2];

	U32 bestCostSub1;
	U32 bestCostSub3;

	U32 bestCost;

#if IME_PRAGMA_ON
#pragma HLS ALLOCATION instances=searchLv1_sub_serial limit=1 function
#endif

	bestCost = searchLv1_sub_serial
	(
		swOutLv1_t1,
		y_org_lv1_2d_t1,
		bestTriMv[0],
		gmvp,
		lamdaMv,
		maxWidthScu,
		maxHeightScu,
		bestPos
	);

	bestCostSub1 = searchLv1_sub_serial
	(
		swOutLv1_t1,
		y_org_lv1_2d_t1,
		bestTriMv[1],
		gmvp,
		lamdaMv,
		maxWidthScu,
		maxHeightScu,
		bestPosSub1
	);

	bestCostSub3 = searchLv1_sub_serial
	(
		swOutLv1_t1,
		y_org_lv1_2d_t1,
		pMv,
		gmvp,
		lamdaMv,
		maxWidthScu,
		maxHeightScu,
		bestPosSub3
	);

	if (bestCost > bestCostSub1)
	{
		bestCost = bestCostSub1;
		bestPos[0] = bestPosSub1[0];
		bestPos[1] = bestPosSub1[1];
	}
	if (bestCost > bestCostSub3)
	{
		bestCost = bestCostSub3;
		bestPos[0] = bestPosSub3[0];
		bestPos[1] = bestPosSub3[1];
	}

}


void searchFullLv1(
	pel swLv1_org[SWH >> 1][SWW >> 1],
	pel org_org[MAX_CU_H >> SCALE_DOWNSAMPLE_LEVEL1][MAX_CU_W >> SCALE_DOWNSAMPLE_LEVEL1],
	//pel swLv1[0SWW >> 1][SWH >> 1], 
	//pel org[MAX_CU_W >> SCALE_DOWNSAMPLE_LEVEL1][MAX_CU_H >> SCALE_DOWNSAMPLE_LEVEL1],
	S14 bestTriMv[3][2], 
	S14 pMv[2], 
	S14 bestPos[2], 
	S14 gmvp[2], 
	U32 lamdaMv, 
	U5 maxWidthScu, 
	U5 maxHeightScu
)
{

#pragma HLS inline off

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=swLv1_org complete dim=2
#pragma HLS array_partition variable=org_org complete dim=2

//#pragma HLS array_partition variable=swLv1 complete dim=1
//#pragma HLS array_partition variable=org complete dim=1

#endif
#endif	// #if !IME_PRAGMA_ON_OP

	static pel org0_org[MAX_CU_H >> SCALE_DOWNSAMPLE_LEVEL1][MAX_CU_W >> SCALE_DOWNSAMPLE_LEVEL1];
	static pel org1_org[MAX_CU_H >> SCALE_DOWNSAMPLE_LEVEL1][MAX_CU_W >> SCALE_DOWNSAMPLE_LEVEL1];
	static pel org3_org[MAX_CU_H >> SCALE_DOWNSAMPLE_LEVEL1][MAX_CU_W >> SCALE_DOWNSAMPLE_LEVEL1];

	static pel swSub0_org[(MMEA_LEVEL1_SR_H >> 1) + 32][(MMEA_LEVEL1_SR_V >> 1) + 32];
	static pel swSub1_org[(MMEA_LEVEL1_SR_H >> 1) + 32][(MMEA_LEVEL1_SR_V >> 1) + 32];
	static pel swSub3_org[(MMEA_LEVEL1_SR_H >> 1) + 32][(MMEA_LEVEL1_SR_V >> 1) + 32];


	//static pel org0[32][32];
	//static pel org1[32][32];
	//static pel org3[32][32];

	//static pel swSub0[(MMEA_LEVEL1_SR_V >> 1) + 32][(MMEA_LEVEL1_SR_H >> 1) + 32];
	//static pel swSub1[(MMEA_LEVEL1_SR_V >> 1) + 32][(MMEA_LEVEL1_SR_H >> 1) + 32];
	//static pel swSub3[(MMEA_LEVEL1_SR_V >> 1) + 32][(MMEA_LEVEL1_SR_H >> 1) + 32];

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=org0_org complete dim=2
#pragma HLS array_partition variable=org1_org complete dim=2
#pragma HLS array_partition variable=org3_org complete dim=2
#pragma HLS array_partition variable=swSub0_org complete dim=2
#pragma HLS array_partition variable=swSub1_org complete dim=2
#pragma HLS array_partition variable=swSub3_org complete dim=2

//#pragma HLS array_partition variable=org0 complete dim=1
//#pragma HLS array_partition variable=org1 complete dim=1
//#pragma HLS array_partition variable=org3 complete dim=1
//#pragma HLS array_partition variable=swSub0 complete dim=1
//#pragma HLS array_partition variable=swSub1 complete dim=1
//#pragma HLS array_partition variable=swSub3 complete dim=1
#endif
#endif	// #if !IME_PRAGMA_ON_OP

	S14 bestPosSub0[2];
	S14 bestPosSub1[2];
	S14 bestPosSub3[2];

	U32 bestCostSub0;
	U32 bestCostSub1;
	U32 bestCostSub3;

	U32 bestCost = 0xFFFFFFFF;
	S14 posLT0[DIR_DIM];
	S14 posLT1[DIR_DIM];
	S14 posLT3[DIR_DIM];

	S14 gmvpSubSw0[2] = { 0,0 };
	S14 gmvpSubSw1[2] = { 0,0 };
	S14 gmvpSubSw3[2] = { 0,0 };

	U6 maxWidthHex = (U6)(maxWidthScu) << 1;
	U6 maxHeightHex = (U6)(maxHeightScu) << 1;


	deriveSearchRangeLv1(bestTriMv[0], posLT0);

	deriveSearchRangeLv1(bestTriMv[1], posLT1);

	deriveSearchRangeLv1(pMv, posLT3);


	gmvpSubSw0[0] = (posLT0[0] << 2) - gmvp[0];
	gmvpSubSw0[1] = (posLT0[1] << 2) - gmvp[1];
	gmvpSubSw1[0] = (posLT1[0] << 2) - gmvp[0];
	gmvpSubSw1[1] = (posLT1[1] << 2) - gmvp[1];
	gmvpSubSw3[0] = (posLT3[0] << 2) - gmvp[0];
	gmvpSubSw3[1] = (posLT3[1] << 2) - gmvp[1];


	copyOrgLv1_1(org_org, org0_org, org1_org, org3_org, 
		//org, org0, org1, org3,
		maxWidthHex, maxWidthHex);

	//// check org_org
	//for (int y = 0; y < 32; y++)
	//{
	//	for (int x = 0; x < 32; x++)
	//	{
	//		if (org_org[y][x] != org[x][y])
	//		{
	//			printf("org_org error!\n");
	//		}
	//	}
	//}
	//for (int y = 0; y < 96; y++)
	//{
	//	for (int x = 0; x < 128; x++)
	//	{
	//		if (swLv1_org[y][x] != swLv1[x][y])
	//		{
	//			printf("swLv1_org error! y = %d x = %d\n", y, x);
	//		}
	//	}
	//}

	constructSubSwLv1All(swLv1_org, swSub0_org, swSub1_org, swSub3_org, 
		//swLv1, swSub0, swSub1, swSub3, 
		posLT0, posLT1, posLT3
	);

	bestCostSub0 = searchSubLv1TestCase(swSub0_org, org0_org, 
		//swSub0, org0, 
		bestPosSub0, gmvpSubSw0, lamdaMv, maxWidthHex, maxHeightHex
	);

	bestCostSub1 = searchSubLv1TestCase(swSub1_org, org1_org, 
		//swSub1, org1, 
		bestPosSub1, gmvpSubSw1, lamdaMv, maxWidthHex, maxHeightHex
	);

	bestCostSub3 = searchSubLv1TestCase(swSub3_org, org3_org, 
		//swSub3, org3,
		bestPosSub3, gmvpSubSw3, lamdaMv, maxWidthHex, maxHeightHex
	);


	if (bestCost > bestCostSub0)
	{
		bestCost = bestCostSub0;
		bestPos[0] = (bestPosSub0[0] << 1) + posLT0[0];
		bestPos[1] = (bestPosSub0[1] << 1) + posLT0[1] ;
	}
	if (bestCost > bestCostSub1)
	{
		bestCost = bestCostSub1;
		bestPos[0] = (bestPosSub1[0] << 1) + posLT1[0];
		bestPos[1] = (bestPosSub1[1] << 1) + posLT1[1];
	}
	if (bestCost > bestCostSub3)
	{
		bestCost = bestCostSub3;
		bestPos[0] = (bestPosSub3[0] << 1) + posLT3[0];
		bestPos[1] = (bestPosSub3[1] << 1) + posLT3[1];
	}
}

/*==============*/
/*  Levle 0 ME 	*/
/*==============*/

void constructSadTreeDepth3(
#if BW_DEBUG
	U10 sadTree8x8_org[8][8],
#else
	pel sadTree8x8_org[8][8], 
#endif
	U32 sadTree16x16_org[4][4], 
	U16 sadTree16x8_org[4][8], 
	U16 sadTree8x16_org[8][4],
	U16 sadTree32x8_org[2][8], 
	U16 sadTree8x32_org[8][2], 
	U32 sadTree64x8_org[1][8], 
	U32 sadTree8x64_org[8][1]
	//,
	//pel sadTree8x8[8][8], U32 sadTree16x16[4][4], U16 sadTree16x8[4][8], U16 sadTree8x16[8][4],
	//U16 sadTree32x8[2][8], U16 sadTree8x32[8][2], U32 sadTree64x8[1][8], U32 sadTree8x64[8][1]
)
{
#pragma HLS inline off
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadTree8x8_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64_org complete dim=0

//#pragma HLS ARRAY_PARTITION variable=sadTree8x8 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x16 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x8 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x16 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x8 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=ssadTree8x32 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x8 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x64 complete dim=0

#endif

#if VIVADO_HLS_IME

	// 16x16
	sadTree16x16_org[0][0] = sadTree8x8_org[0][0];
	sadTree16x16_org[0][0] += sadTree8x8_org[0][1];
	sadTree16x16_org[0][0] += sadTree8x8_org[1][0];
	sadTree16x16_org[0][0] += sadTree8x8_org[1][1];

	sadTree16x16_org[0][1] = sadTree8x8_org[0][2];
	sadTree16x16_org[0][1] += sadTree8x8_org[0][3];
	sadTree16x16_org[0][1] += sadTree8x8_org[1][2];
	sadTree16x16_org[0][1] += sadTree8x8_org[1][3];

	sadTree16x16_org[0][2] = sadTree8x8_org[0][4];
	sadTree16x16_org[0][2] += sadTree8x8_org[0][5];
	sadTree16x16_org[0][2] += sadTree8x8_org[1][4];
	sadTree16x16_org[0][2] += sadTree8x8_org[1][5];

	sadTree16x16_org[0][3] = sadTree8x8_org[0][6];
	sadTree16x16_org[0][3] += sadTree8x8_org[0][7];
	sadTree16x16_org[0][3] += sadTree8x8_org[1][6];
	sadTree16x16_org[0][3] += sadTree8x8_org[1][7];

	sadTree16x16_org[1][0] = sadTree8x8_org[2][0];
	sadTree16x16_org[1][0] += sadTree8x8_org[2][1];
	sadTree16x16_org[1][0] += sadTree8x8_org[3][0];
	sadTree16x16_org[1][0] += sadTree8x8_org[3][1];

	sadTree16x16_org[1][1] = sadTree8x8_org[2][2];
	sadTree16x16_org[1][1] += sadTree8x8_org[2][3];
	sadTree16x16_org[1][1] += sadTree8x8_org[3][2];
	sadTree16x16_org[1][1] += sadTree8x8_org[3][3];

	sadTree16x16_org[1][2] = sadTree8x8_org[2][4];
	sadTree16x16_org[1][2] += sadTree8x8_org[2][5];
	sadTree16x16_org[1][2] += sadTree8x8_org[3][4];
	sadTree16x16_org[1][2] += sadTree8x8_org[3][5];

	sadTree16x16_org[1][3] = sadTree8x8_org[2][6];
	sadTree16x16_org[1][3] += sadTree8x8_org[2][7];
	sadTree16x16_org[1][3] += sadTree8x8_org[3][6];
	sadTree16x16_org[1][3] += sadTree8x8_org[3][7];

	sadTree16x16_org[2][0] = sadTree8x8_org[4][0];
	sadTree16x16_org[2][0] += sadTree8x8_org[4][1];
	sadTree16x16_org[2][0] += sadTree8x8_org[5][0];
	sadTree16x16_org[2][0] += sadTree8x8_org[5][1];

	sadTree16x16_org[2][1] = sadTree8x8_org[4][2];
	sadTree16x16_org[2][1] += sadTree8x8_org[4][3];
	sadTree16x16_org[2][1] += sadTree8x8_org[5][2];
	sadTree16x16_org[2][1] += sadTree8x8_org[5][3];

	sadTree16x16_org[2][2] = sadTree8x8_org[4][4];
	sadTree16x16_org[2][2] += sadTree8x8_org[4][5];
	sadTree16x16_org[2][2] += sadTree8x8_org[5][4];
	sadTree16x16_org[2][2] += sadTree8x8_org[5][5];

	sadTree16x16_org[2][3] = sadTree8x8_org[4][6];
	sadTree16x16_org[2][3] += sadTree8x8_org[4][7];
	sadTree16x16_org[2][3] += sadTree8x8_org[5][6];
	sadTree16x16_org[2][3] += sadTree8x8_org[5][7];

	sadTree16x16_org[3][0] = sadTree8x8_org[6][0];
	sadTree16x16_org[3][0] += sadTree8x8_org[6][1];
	sadTree16x16_org[3][0] += sadTree8x8_org[7][0];
	sadTree16x16_org[3][0] += sadTree8x8_org[7][1];

	sadTree16x16_org[3][1] = sadTree8x8_org[6][2];
	sadTree16x16_org[3][1] += sadTree8x8_org[6][3];
	sadTree16x16_org[3][1] += sadTree8x8_org[7][2];
	sadTree16x16_org[3][1] += sadTree8x8_org[7][3];

	sadTree16x16_org[3][2] = sadTree8x8_org[6][4];
	sadTree16x16_org[3][2] += sadTree8x8_org[6][5];
	sadTree16x16_org[3][2] += sadTree8x8_org[7][4];
	sadTree16x16_org[3][2] += sadTree8x8_org[7][5];

	sadTree16x16_org[3][3] = sadTree8x8_org[6][6];
	sadTree16x16_org[3][3] += sadTree8x8_org[6][7];
	sadTree16x16_org[3][3] += sadTree8x8_org[7][6];
	sadTree16x16_org[3][3] += sadTree8x8_org[7][7];

	// 8x16
	sadTree8x16_org[0][0] = sadTree8x8_org[0][0];
	sadTree8x16_org[0][0] += sadTree8x8_org[0][1];

	sadTree8x16_org[0][1] = sadTree8x8_org[0][2];
	sadTree8x16_org[0][1] += sadTree8x8_org[0][3];

	sadTree8x16_org[0][2] = sadTree8x8_org[0][4];
	sadTree8x16_org[0][2] += sadTree8x8_org[0][5];

	sadTree8x16_org[0][3] = sadTree8x8_org[0][6];
	sadTree8x16_org[0][3] += sadTree8x8_org[0][7];

	sadTree8x16_org[1][0] = sadTree8x8_org[1][0];
	sadTree8x16_org[1][0] += sadTree8x8_org[1][1];

	sadTree8x16_org[1][1] = sadTree8x8_org[1][2];
	sadTree8x16_org[1][1] += sadTree8x8_org[1][3];

	sadTree8x16_org[1][2] = sadTree8x8_org[1][4];
	sadTree8x16_org[1][2] += sadTree8x8_org[1][5];

	sadTree8x16_org[1][3] = sadTree8x8_org[1][6];
	sadTree8x16_org[1][3] += sadTree8x8_org[1][7];

	sadTree8x16_org[2][0] = sadTree8x8_org[2][0];
	sadTree8x16_org[2][0] += sadTree8x8_org[2][1];

	sadTree8x16_org[2][1] = sadTree8x8_org[2][2];
	sadTree8x16_org[2][1] += sadTree8x8_org[2][3];

	sadTree8x16_org[2][2] = sadTree8x8_org[2][4];
	sadTree8x16_org[2][2] += sadTree8x8_org[2][5];

	sadTree8x16_org[2][3] = sadTree8x8_org[2][6];
	sadTree8x16_org[2][3] += sadTree8x8_org[2][7];

	sadTree8x16_org[3][0] = sadTree8x8_org[3][0];
	sadTree8x16_org[3][0] += sadTree8x8_org[3][1];

	sadTree8x16_org[3][1] = sadTree8x8_org[3][2];
	sadTree8x16_org[3][1] += sadTree8x8_org[3][3];

	sadTree8x16_org[3][2] = sadTree8x8_org[3][4];
	sadTree8x16_org[3][2] += sadTree8x8_org[3][5];

	sadTree8x16_org[3][3] = sadTree8x8_org[3][6];
	sadTree8x16_org[3][3] += sadTree8x8_org[3][7];

	sadTree8x16_org[4][0] = sadTree8x8_org[4][0];
	sadTree8x16_org[4][0] += sadTree8x8_org[4][1];

	sadTree8x16_org[4][1] = sadTree8x8_org[4][2];
	sadTree8x16_org[4][1] += sadTree8x8_org[4][3];

	sadTree8x16_org[4][2] = sadTree8x8_org[4][4];
	sadTree8x16_org[4][2] += sadTree8x8_org[4][5];

	sadTree8x16_org[4][3] = sadTree8x8_org[4][6];
	sadTree8x16_org[4][3] += sadTree8x8_org[4][7];

	sadTree8x16_org[5][0] = sadTree8x8_org[5][0];
	sadTree8x16_org[5][0] += sadTree8x8_org[5][1];

	sadTree8x16_org[5][1] = sadTree8x8_org[5][2];
	sadTree8x16_org[5][1] += sadTree8x8_org[5][3];

	sadTree8x16_org[5][2] = sadTree8x8_org[5][4];
	sadTree8x16_org[5][2] += sadTree8x8_org[5][5];

	sadTree8x16_org[5][3] = sadTree8x8_org[5][6];
	sadTree8x16_org[5][3] += sadTree8x8_org[5][7];

	sadTree8x16_org[6][0] = sadTree8x8_org[6][0];
	sadTree8x16_org[6][0] += sadTree8x8_org[6][1];

	sadTree8x16_org[6][1] = sadTree8x8_org[6][2];
	sadTree8x16_org[6][1] += sadTree8x8_org[6][3];

	sadTree8x16_org[6][2] = sadTree8x8_org[6][4];
	sadTree8x16_org[6][2] += sadTree8x8_org[6][5];

	sadTree8x16_org[6][3] = sadTree8x8_org[6][6];
	sadTree8x16_org[6][3] += sadTree8x8_org[6][7];

	sadTree8x16_org[7][0] = sadTree8x8_org[7][0];
	sadTree8x16_org[7][0] += sadTree8x8_org[7][1];

	sadTree8x16_org[7][1] = sadTree8x8_org[7][2];
	sadTree8x16_org[7][1] += sadTree8x8_org[7][3];

	sadTree8x16_org[7][2] = sadTree8x8_org[7][4];
	sadTree8x16_org[7][2] += sadTree8x8_org[7][5];

	sadTree8x16_org[7][3] = sadTree8x8_org[7][6];
	sadTree8x16_org[7][3] += sadTree8x8_org[7][7];

	// 16x8
	sadTree16x8_org[0][0] = sadTree8x8_org[0][0];
	sadTree16x8_org[0][0] += sadTree8x8_org[1][0];

	sadTree16x8_org[0][1] = sadTree8x8_org[0][1];
	sadTree16x8_org[0][1] += sadTree8x8_org[1][1];

	sadTree16x8_org[0][2] = sadTree8x8_org[0][2];
	sadTree16x8_org[0][2] += sadTree8x8_org[1][2];

	sadTree16x8_org[0][3] = sadTree8x8_org[0][3];
	sadTree16x8_org[0][3] += sadTree8x8_org[1][3];

	sadTree16x8_org[0][4] = sadTree8x8_org[0][4];
	sadTree16x8_org[0][4] += sadTree8x8_org[1][4];

	sadTree16x8_org[0][5] = sadTree8x8_org[0][5];
	sadTree16x8_org[0][5] += sadTree8x8_org[1][5];

	sadTree16x8_org[0][6] = sadTree8x8_org[0][6];
	sadTree16x8_org[0][6] += sadTree8x8_org[1][6];

	sadTree16x8_org[0][7] = sadTree8x8_org[0][7];
	sadTree16x8_org[0][7] += sadTree8x8_org[1][7];

	sadTree16x8_org[1][0] = sadTree8x8_org[2][0];
	sadTree16x8_org[1][0] += sadTree8x8_org[3][0];

	sadTree16x8_org[1][1] = sadTree8x8_org[2][1];
	sadTree16x8_org[1][1] += sadTree8x8_org[3][1];

	sadTree16x8_org[1][2] = sadTree8x8_org[2][2];
	sadTree16x8_org[1][2] += sadTree8x8_org[3][2];

	sadTree16x8_org[1][3] = sadTree8x8_org[2][3];
	sadTree16x8_org[1][3] += sadTree8x8_org[3][3];

	sadTree16x8_org[1][4] = sadTree8x8_org[2][4];
	sadTree16x8_org[1][4] += sadTree8x8_org[3][4];

	sadTree16x8_org[1][5] = sadTree8x8_org[2][5];
	sadTree16x8_org[1][5] += sadTree8x8_org[3][5];

	sadTree16x8_org[1][6] = sadTree8x8_org[2][6];
	sadTree16x8_org[1][6] += sadTree8x8_org[3][6];

	sadTree16x8_org[1][7] = sadTree8x8_org[2][7];
	sadTree16x8_org[1][7] += sadTree8x8_org[3][7];

	sadTree16x8_org[2][0] = sadTree8x8_org[4][0];
	sadTree16x8_org[2][0] += sadTree8x8_org[5][0];

	sadTree16x8_org[2][1] = sadTree8x8_org[4][1];
	sadTree16x8_org[2][1] += sadTree8x8_org[5][1];

	sadTree16x8_org[2][2] = sadTree8x8_org[4][2];
	sadTree16x8_org[2][2] += sadTree8x8_org[5][2];

	sadTree16x8_org[2][3] = sadTree8x8_org[4][3];
	sadTree16x8_org[2][3] += sadTree8x8_org[5][3];

	sadTree16x8_org[2][4] = sadTree8x8_org[4][4];
	sadTree16x8_org[2][4] += sadTree8x8_org[5][4];

	sadTree16x8_org[2][5] = sadTree8x8_org[4][5];
	sadTree16x8_org[2][5] += sadTree8x8_org[5][5];

	sadTree16x8_org[2][6] = sadTree8x8_org[4][6];
	sadTree16x8_org[2][6] += sadTree8x8_org[5][6];

	sadTree16x8_org[2][7] = sadTree8x8_org[4][7];
	sadTree16x8_org[2][7] += sadTree8x8_org[5][7];

	sadTree16x8_org[3][0] = sadTree8x8_org[6][0];
	sadTree16x8_org[3][0] += sadTree8x8_org[7][0];

	sadTree16x8_org[3][1] = sadTree8x8_org[6][1];
	sadTree16x8_org[3][1] += sadTree8x8_org[7][1];

	sadTree16x8_org[3][2] = sadTree8x8_org[6][2];
	sadTree16x8_org[3][2] += sadTree8x8_org[7][2];

	sadTree16x8_org[3][3] = sadTree8x8_org[6][3];
	sadTree16x8_org[3][3] += sadTree8x8_org[7][3];

	sadTree16x8_org[3][4] = sadTree8x8_org[6][4];
	sadTree16x8_org[3][4] += sadTree8x8_org[7][4];

	sadTree16x8_org[3][5] = sadTree8x8_org[6][5];
	sadTree16x8_org[3][5] += sadTree8x8_org[7][5];

	sadTree16x8_org[3][6] = sadTree8x8_org[6][6];
	sadTree16x8_org[3][6] += sadTree8x8_org[7][6];

	sadTree16x8_org[3][7] = sadTree8x8_org[6][7];
	sadTree16x8_org[3][7] += sadTree8x8_org[7][7];

	// 8x32
	sadTree8x32_org[0][0] = sadTree8x8_org[0][0];
	sadTree8x32_org[0][0] += sadTree8x8_org[0][1];
	sadTree8x32_org[0][0] += sadTree8x8_org[0][2];
	sadTree8x32_org[0][0] += sadTree8x8_org[0][3];

	sadTree8x32_org[0][1] = sadTree8x8_org[0][4];
	sadTree8x32_org[0][1] += sadTree8x8_org[0][5];
	sadTree8x32_org[0][1] += sadTree8x8_org[0][6];
	sadTree8x32_org[0][1] += sadTree8x8_org[0][7];

	sadTree8x32_org[1][0] = sadTree8x8_org[1][0];
	sadTree8x32_org[1][0] += sadTree8x8_org[1][1];
	sadTree8x32_org[1][0] += sadTree8x8_org[1][2];
	sadTree8x32_org[1][0] += sadTree8x8_org[1][3];

	sadTree8x32_org[1][1] = sadTree8x8_org[1][4];
	sadTree8x32_org[1][1] += sadTree8x8_org[1][5];
	sadTree8x32_org[1][1] += sadTree8x8_org[1][6];
	sadTree8x32_org[1][1] += sadTree8x8_org[1][7];

	sadTree8x32_org[2][0] = sadTree8x8_org[2][0];
	sadTree8x32_org[2][0] += sadTree8x8_org[2][1];
	sadTree8x32_org[2][0] += sadTree8x8_org[2][2];
	sadTree8x32_org[2][0] += sadTree8x8_org[2][3];

	sadTree8x32_org[2][1] = sadTree8x8_org[2][4];
	sadTree8x32_org[2][1] += sadTree8x8_org[2][5];
	sadTree8x32_org[2][1] += sadTree8x8_org[2][6];
	sadTree8x32_org[2][1] += sadTree8x8_org[2][7];

	sadTree8x32_org[3][0] = sadTree8x8_org[3][0];
	sadTree8x32_org[3][0] += sadTree8x8_org[3][1];
	sadTree8x32_org[3][0] += sadTree8x8_org[3][2];
	sadTree8x32_org[3][0] += sadTree8x8_org[3][3];

	sadTree8x32_org[3][1] = sadTree8x8_org[3][4];
	sadTree8x32_org[3][1] += sadTree8x8_org[3][5];
	sadTree8x32_org[3][1] += sadTree8x8_org[3][6];
	sadTree8x32_org[3][1] += sadTree8x8_org[3][7];

	sadTree8x32_org[4][0] = sadTree8x8_org[4][0];
	sadTree8x32_org[4][0] += sadTree8x8_org[4][1];
	sadTree8x32_org[4][0] += sadTree8x8_org[4][2];
	sadTree8x32_org[4][0] += sadTree8x8_org[4][3];

	sadTree8x32_org[4][1] = sadTree8x8_org[4][4];
	sadTree8x32_org[4][1] += sadTree8x8_org[4][5];
	sadTree8x32_org[4][1] += sadTree8x8_org[4][6];
	sadTree8x32_org[4][1] += sadTree8x8_org[4][7];

	sadTree8x32_org[5][0] = sadTree8x8_org[5][0];
	sadTree8x32_org[5][0] += sadTree8x8_org[5][1];
	sadTree8x32_org[5][0] += sadTree8x8_org[5][2];
	sadTree8x32_org[5][0] += sadTree8x8_org[5][3];

	sadTree8x32_org[5][1] = sadTree8x8_org[5][4];
	sadTree8x32_org[5][1] += sadTree8x8_org[5][5];
	sadTree8x32_org[5][1] += sadTree8x8_org[5][6];
	sadTree8x32_org[5][1] += sadTree8x8_org[5][7];

	sadTree8x32_org[6][0] = sadTree8x8_org[6][0];
	sadTree8x32_org[6][0] += sadTree8x8_org[6][1];
	sadTree8x32_org[6][0] += sadTree8x8_org[6][2];
	sadTree8x32_org[6][0] += sadTree8x8_org[6][3];

	sadTree8x32_org[6][1] = sadTree8x8_org[6][4];
	sadTree8x32_org[6][1] += sadTree8x8_org[6][5];
	sadTree8x32_org[6][1] += sadTree8x8_org[6][6];
	sadTree8x32_org[6][1] += sadTree8x8_org[6][7];

	sadTree8x32_org[7][0] = sadTree8x8_org[7][0];
	sadTree8x32_org[7][0] += sadTree8x8_org[7][1];
	sadTree8x32_org[7][0] += sadTree8x8_org[7][2];
	sadTree8x32_org[7][0] += sadTree8x8_org[7][3];

	sadTree8x32_org[7][1] = sadTree8x8_org[7][4];
	sadTree8x32_org[7][1] += sadTree8x8_org[7][5];
	sadTree8x32_org[7][1] += sadTree8x8_org[7][6];
	sadTree8x32_org[7][1] += sadTree8x8_org[7][7];

	// 32x8
	sadTree32x8_org[0][0] = sadTree8x8_org[0][0];
	sadTree32x8_org[0][0] += sadTree8x8_org[1][0];
	sadTree32x8_org[0][0] += sadTree8x8_org[2][0];
	sadTree32x8_org[0][0] += sadTree8x8_org[3][0];

	sadTree32x8_org[0][1] = sadTree8x8_org[0][1];
	sadTree32x8_org[0][1] += sadTree8x8_org[1][1];
	sadTree32x8_org[0][1] += sadTree8x8_org[2][1];
	sadTree32x8_org[0][1] += sadTree8x8_org[3][1];

	sadTree32x8_org[0][2] = sadTree8x8_org[0][2];
	sadTree32x8_org[0][2] += sadTree8x8_org[1][2];
	sadTree32x8_org[0][2] += sadTree8x8_org[2][2];
	sadTree32x8_org[0][2] += sadTree8x8_org[3][2];

	sadTree32x8_org[0][3] = sadTree8x8_org[0][3];
	sadTree32x8_org[0][3] += sadTree8x8_org[1][3];
	sadTree32x8_org[0][3] += sadTree8x8_org[2][3];
	sadTree32x8_org[0][3] += sadTree8x8_org[3][3];

	sadTree32x8_org[0][4] = sadTree8x8_org[0][4];
	sadTree32x8_org[0][4] += sadTree8x8_org[1][4];
	sadTree32x8_org[0][4] += sadTree8x8_org[2][4];
	sadTree32x8_org[0][4] += sadTree8x8_org[3][4];

	sadTree32x8_org[0][5] = sadTree8x8_org[0][5];
	sadTree32x8_org[0][5] += sadTree8x8_org[1][5];
	sadTree32x8_org[0][5] += sadTree8x8_org[2][5];
	sadTree32x8_org[0][5] += sadTree8x8_org[3][5];

	sadTree32x8_org[0][6] = sadTree8x8_org[0][6];
	sadTree32x8_org[0][6] += sadTree8x8_org[1][6];
	sadTree32x8_org[0][6] += sadTree8x8_org[2][6];
	sadTree32x8_org[0][6] += sadTree8x8_org[3][6];

	sadTree32x8_org[0][7] = sadTree8x8_org[0][7];
	sadTree32x8_org[0][7] += sadTree8x8_org[1][7];
	sadTree32x8_org[0][7] += sadTree8x8_org[2][7];
	sadTree32x8_org[0][7] += sadTree8x8_org[3][7];

	sadTree32x8_org[1][0] = sadTree8x8_org[4][0];
	sadTree32x8_org[1][0] += sadTree8x8_org[5][0];
	sadTree32x8_org[1][0] += sadTree8x8_org[6][0];
	sadTree32x8_org[1][0] += sadTree8x8_org[7][0];

	sadTree32x8_org[1][1] = sadTree8x8_org[4][1];
	sadTree32x8_org[1][1] += sadTree8x8_org[5][1];
	sadTree32x8_org[1][1] += sadTree8x8_org[6][1];
	sadTree32x8_org[1][1] += sadTree8x8_org[7][1];

	sadTree32x8_org[1][2] = sadTree8x8_org[4][2];
	sadTree32x8_org[1][2] += sadTree8x8_org[5][2];
	sadTree32x8_org[1][2] += sadTree8x8_org[6][2];
	sadTree32x8_org[1][2] += sadTree8x8_org[7][2];

	sadTree32x8_org[1][3] = sadTree8x8_org[4][3];
	sadTree32x8_org[1][3] += sadTree8x8_org[5][3];
	sadTree32x8_org[1][3] += sadTree8x8_org[6][3];
	sadTree32x8_org[1][3] += sadTree8x8_org[7][3];

	sadTree32x8_org[1][4] = sadTree8x8_org[4][4];
	sadTree32x8_org[1][4] += sadTree8x8_org[5][4];
	sadTree32x8_org[1][4] += sadTree8x8_org[6][4];
	sadTree32x8_org[1][4] += sadTree8x8_org[7][4];

	sadTree32x8_org[1][5] = sadTree8x8_org[4][5];
	sadTree32x8_org[1][5] += sadTree8x8_org[5][5];
	sadTree32x8_org[1][5] += sadTree8x8_org[6][5];
	sadTree32x8_org[1][5] += sadTree8x8_org[7][5];

	sadTree32x8_org[1][6] = sadTree8x8_org[4][6];
	sadTree32x8_org[1][6] += sadTree8x8_org[5][6];
	sadTree32x8_org[1][6] += sadTree8x8_org[6][6];
	sadTree32x8_org[1][6] += sadTree8x8_org[7][6];

	sadTree32x8_org[1][7] = sadTree8x8_org[4][7];
	sadTree32x8_org[1][7] += sadTree8x8_org[5][7];
	sadTree32x8_org[1][7] += sadTree8x8_org[6][7];
	sadTree32x8_org[1][7] += sadTree8x8_org[7][7];

	// 64x8
	sadTree64x8_org[0][0] = sadTree8x8_org[0][0];
	sadTree64x8_org[0][0] += sadTree8x8_org[1][0];
	sadTree64x8_org[0][0] += sadTree8x8_org[2][0];
	sadTree64x8_org[0][0] += sadTree8x8_org[3][0];
	sadTree64x8_org[0][0] += sadTree8x8_org[4][0];
	sadTree64x8_org[0][0] += sadTree8x8_org[5][0];
	sadTree64x8_org[0][0] += sadTree8x8_org[6][0];
	sadTree64x8_org[0][0] += sadTree8x8_org[7][0];

	sadTree64x8_org[0][1] = sadTree8x8_org[0][1];
	sadTree64x8_org[0][1] += sadTree8x8_org[1][1];
	sadTree64x8_org[0][1] += sadTree8x8_org[2][1];
	sadTree64x8_org[0][1] += sadTree8x8_org[3][1];
	sadTree64x8_org[0][1] += sadTree8x8_org[4][1];
	sadTree64x8_org[0][1] += sadTree8x8_org[5][1];
	sadTree64x8_org[0][1] += sadTree8x8_org[6][1];
	sadTree64x8_org[0][1] += sadTree8x8_org[7][1];

	sadTree64x8_org[0][2] = sadTree8x8_org[0][2];
	sadTree64x8_org[0][2] += sadTree8x8_org[1][2];
	sadTree64x8_org[0][2] += sadTree8x8_org[2][2];
	sadTree64x8_org[0][2] += sadTree8x8_org[3][2];
	sadTree64x8_org[0][2] += sadTree8x8_org[4][2];
	sadTree64x8_org[0][2] += sadTree8x8_org[5][2];
	sadTree64x8_org[0][2] += sadTree8x8_org[6][2];
	sadTree64x8_org[0][2] += sadTree8x8_org[7][2];

	sadTree64x8_org[0][3] = sadTree8x8_org[0][3];
	sadTree64x8_org[0][3] += sadTree8x8_org[1][3];
	sadTree64x8_org[0][3] += sadTree8x8_org[2][3];
	sadTree64x8_org[0][3] += sadTree8x8_org[3][3];
	sadTree64x8_org[0][3] += sadTree8x8_org[4][3];
	sadTree64x8_org[0][3] += sadTree8x8_org[5][3];
	sadTree64x8_org[0][3] += sadTree8x8_org[6][3];
	sadTree64x8_org[0][3] += sadTree8x8_org[7][3];

	sadTree64x8_org[0][4] = sadTree8x8_org[0][4];
	sadTree64x8_org[0][4] += sadTree8x8_org[1][4];
	sadTree64x8_org[0][4] += sadTree8x8_org[2][4];
	sadTree64x8_org[0][4] += sadTree8x8_org[3][4];
	sadTree64x8_org[0][4] += sadTree8x8_org[4][4];
	sadTree64x8_org[0][4] += sadTree8x8_org[5][4];
	sadTree64x8_org[0][4] += sadTree8x8_org[6][4];
	sadTree64x8_org[0][4] += sadTree8x8_org[7][4];

	sadTree64x8_org[0][5] = sadTree8x8_org[0][5];
	sadTree64x8_org[0][5] += sadTree8x8_org[1][5];
	sadTree64x8_org[0][5] += sadTree8x8_org[2][5];
	sadTree64x8_org[0][5] += sadTree8x8_org[3][5];
	sadTree64x8_org[0][5] += sadTree8x8_org[4][5];
	sadTree64x8_org[0][5] += sadTree8x8_org[5][5];
	sadTree64x8_org[0][5] += sadTree8x8_org[6][5];
	sadTree64x8_org[0][5] += sadTree8x8_org[7][5];

	sadTree64x8_org[0][6] = sadTree8x8_org[0][6];
	sadTree64x8_org[0][6] += sadTree8x8_org[1][6];
	sadTree64x8_org[0][6] += sadTree8x8_org[2][6];
	sadTree64x8_org[0][6] += sadTree8x8_org[3][6];
	sadTree64x8_org[0][6] += sadTree8x8_org[4][6];
	sadTree64x8_org[0][6] += sadTree8x8_org[5][6];
	sadTree64x8_org[0][6] += sadTree8x8_org[6][6];
	sadTree64x8_org[0][6] += sadTree8x8_org[7][6];

	sadTree64x8_org[0][7] = sadTree8x8_org[0][7];
	sadTree64x8_org[0][7] += sadTree8x8_org[1][7];
	sadTree64x8_org[0][7] += sadTree8x8_org[2][7];
	sadTree64x8_org[0][7] += sadTree8x8_org[3][7];
	sadTree64x8_org[0][7] += sadTree8x8_org[4][7];
	sadTree64x8_org[0][7] += sadTree8x8_org[5][7];
	sadTree64x8_org[0][7] += sadTree8x8_org[6][7];
	sadTree64x8_org[0][7] += sadTree8x8_org[7][7];

	// 8x64
	sadTree8x64_org[0][0] = sadTree8x8_org[0][0];
	sadTree8x64_org[0][0] += sadTree8x8_org[0][1];
	sadTree8x64_org[0][0] += sadTree8x8_org[0][2];
	sadTree8x64_org[0][0] += sadTree8x8_org[0][3];
	sadTree8x64_org[0][0] += sadTree8x8_org[0][4];
	sadTree8x64_org[0][0] += sadTree8x8_org[0][5];
	sadTree8x64_org[0][0] += sadTree8x8_org[0][6];
	sadTree8x64_org[0][0] += sadTree8x8_org[0][7];

	sadTree8x64_org[1][0] = sadTree8x8_org[1][0];
	sadTree8x64_org[1][0] += sadTree8x8_org[1][1];
	sadTree8x64_org[1][0] += sadTree8x8_org[1][2];
	sadTree8x64_org[1][0] += sadTree8x8_org[1][3];
	sadTree8x64_org[1][0] += sadTree8x8_org[1][4];
	sadTree8x64_org[1][0] += sadTree8x8_org[1][5];
	sadTree8x64_org[1][0] += sadTree8x8_org[1][6];
	sadTree8x64_org[1][0] += sadTree8x8_org[1][7];

	sadTree8x64_org[2][0] = sadTree8x8_org[2][0];
	sadTree8x64_org[2][0] += sadTree8x8_org[2][1];
	sadTree8x64_org[2][0] += sadTree8x8_org[2][2];
	sadTree8x64_org[2][0] += sadTree8x8_org[2][3];
	sadTree8x64_org[2][0] += sadTree8x8_org[2][4];
	sadTree8x64_org[2][0] += sadTree8x8_org[2][5];
	sadTree8x64_org[2][0] += sadTree8x8_org[2][6];
	sadTree8x64_org[2][0] += sadTree8x8_org[2][7];

	sadTree8x64_org[3][0] = sadTree8x8_org[3][0];
	sadTree8x64_org[3][0] += sadTree8x8_org[3][1];
	sadTree8x64_org[3][0] += sadTree8x8_org[3][2];
	sadTree8x64_org[3][0] += sadTree8x8_org[3][3];
	sadTree8x64_org[3][0] += sadTree8x8_org[3][4];
	sadTree8x64_org[3][0] += sadTree8x8_org[3][5];
	sadTree8x64_org[3][0] += sadTree8x8_org[3][6];
	sadTree8x64_org[3][0] += sadTree8x8_org[3][7];

	sadTree8x64_org[4][0] = sadTree8x8_org[4][0];
	sadTree8x64_org[4][0] += sadTree8x8_org[4][1];
	sadTree8x64_org[4][0] += sadTree8x8_org[4][2];
	sadTree8x64_org[4][0] += sadTree8x8_org[4][3];
	sadTree8x64_org[4][0] += sadTree8x8_org[4][4];
	sadTree8x64_org[4][0] += sadTree8x8_org[4][5];
	sadTree8x64_org[4][0] += sadTree8x8_org[4][6];
	sadTree8x64_org[4][0] += sadTree8x8_org[4][7];

	sadTree8x64_org[5][0] = sadTree8x8_org[5][0];
	sadTree8x64_org[5][0] += sadTree8x8_org[5][1];
	sadTree8x64_org[5][0] += sadTree8x8_org[5][2];
	sadTree8x64_org[5][0] += sadTree8x8_org[5][3];
	sadTree8x64_org[5][0] += sadTree8x8_org[5][4];
	sadTree8x64_org[5][0] += sadTree8x8_org[5][5];
	sadTree8x64_org[5][0] += sadTree8x8_org[5][6];
	sadTree8x64_org[5][0] += sadTree8x8_org[5][7];

	sadTree8x64_org[6][0] = sadTree8x8_org[6][0];
	sadTree8x64_org[6][0] += sadTree8x8_org[6][1];
	sadTree8x64_org[6][0] += sadTree8x8_org[6][2];
	sadTree8x64_org[6][0] += sadTree8x8_org[6][3];
	sadTree8x64_org[6][0] += sadTree8x8_org[6][4];
	sadTree8x64_org[6][0] += sadTree8x8_org[6][5];
	sadTree8x64_org[6][0] += sadTree8x8_org[6][6];
	sadTree8x64_org[6][0] += sadTree8x8_org[6][7];

	sadTree8x64_org[7][0] = sadTree8x8_org[7][0];
	sadTree8x64_org[7][0] += sadTree8x8_org[7][1];
	sadTree8x64_org[7][0] += sadTree8x8_org[7][2];
	sadTree8x64_org[7][0] += sadTree8x8_org[7][3];
	sadTree8x64_org[7][0] += sadTree8x8_org[7][4];
	sadTree8x64_org[7][0] += sadTree8x8_org[7][5];
	sadTree8x64_org[7][0] += sadTree8x8_org[7][6];
	sadTree8x64_org[7][0] += sadTree8x8_org[7][7];


#else

	U4 y_16_org;
	U4 y_8_org;

	//int x_16;
	//int x_8;

	for (y_8_org = 0; y_8_org < 8; y_8_org++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

		sadTree64x8_org[0][y_8_org] = 0;

		sadTree8x64_org[y_8_org][0] = 0;

		sadTree32x8_org[0][y_8_org] = 0;
		sadTree32x8_org[1][y_8_org] = 0;

		sadTree8x32_org[y_8_org][0] = 0;
		sadTree8x32_org[y_8_org][1] = 0;

		sadTree8x16_org[y_8_org][0] = 0;
		sadTree8x16_org[y_8_org][1] = 0;
		sadTree8x16_org[y_8_org][2] = 0;
		sadTree8x16_org[y_8_org][3] = 0;

		sadTree16x8_org[0][y_8_org] = 0;
		sadTree16x8_org[1][y_8_org] = 0;
		sadTree16x8_org[2][y_8_org] = 0;
		sadTree16x8_org[3][y_8_org] = 0;

	}
	for (y_16_org = 0; y_16_org < 4; y_16_org++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		sadTree16x16_org[y_16_org][0] = 0;
		sadTree16x16_org[y_16_org][1] = 0;
		sadTree16x16_org[y_16_org][2] = 0;
		sadTree16x16_org[y_16_org][3] = 0;
	}

	// 16x16
	sadTree16x16_org[0][0] += sadTree8x8_org[0][0];
	sadTree16x16_org[0][0] += sadTree8x8_org[0][1];
	sadTree16x16_org[0][0] += sadTree8x8_org[1][0];
	sadTree16x16_org[0][0] += sadTree8x8_org[1][1];
	sadTree16x16_org[0][1] += sadTree8x8_org[0][2];
	sadTree16x16_org[0][1] += sadTree8x8_org[0][3];
	sadTree16x16_org[0][1] += sadTree8x8_org[1][2];
	sadTree16x16_org[0][1] += sadTree8x8_org[1][3];
	sadTree16x16_org[0][2] += sadTree8x8_org[0][4];
	sadTree16x16_org[0][2] += sadTree8x8_org[0][5];
	sadTree16x16_org[0][2] += sadTree8x8_org[1][4];
	sadTree16x16_org[0][2] += sadTree8x8_org[1][5];
	sadTree16x16_org[0][3] += sadTree8x8_org[0][6];
	sadTree16x16_org[0][3] += sadTree8x8_org[0][7];
	sadTree16x16_org[0][3] += sadTree8x8_org[1][6];
	sadTree16x16_org[0][3] += sadTree8x8_org[1][7];
	sadTree16x16_org[1][0] += sadTree8x8_org[2][0];
	sadTree16x16_org[1][0] += sadTree8x8_org[2][1];
	sadTree16x16_org[1][0] += sadTree8x8_org[3][0];
	sadTree16x16_org[1][0] += sadTree8x8_org[3][1];
	sadTree16x16_org[1][1] += sadTree8x8_org[2][2];
	sadTree16x16_org[1][1] += sadTree8x8_org[2][3];
	sadTree16x16_org[1][1] += sadTree8x8_org[3][2];
	sadTree16x16_org[1][1] += sadTree8x8_org[3][3];
	sadTree16x16_org[1][2] += sadTree8x8_org[2][4];
	sadTree16x16_org[1][2] += sadTree8x8_org[2][5];
	sadTree16x16_org[1][2] += sadTree8x8_org[3][4];
	sadTree16x16_org[1][2] += sadTree8x8_org[3][5];
	sadTree16x16_org[1][3] += sadTree8x8_org[2][6];
	sadTree16x16_org[1][3] += sadTree8x8_org[2][7];
	sadTree16x16_org[1][3] += sadTree8x8_org[3][6];
	sadTree16x16_org[1][3] += sadTree8x8_org[3][7];
	sadTree16x16_org[2][0] += sadTree8x8_org[4][0];
	sadTree16x16_org[2][0] += sadTree8x8_org[4][1];
	sadTree16x16_org[2][0] += sadTree8x8_org[5][0];
	sadTree16x16_org[2][0] += sadTree8x8_org[5][1];
	sadTree16x16_org[2][1] += sadTree8x8_org[4][2];
	sadTree16x16_org[2][1] += sadTree8x8_org[4][3];
	sadTree16x16_org[2][1] += sadTree8x8_org[5][2];
	sadTree16x16_org[2][1] += sadTree8x8_org[5][3];
	sadTree16x16_org[2][2] += sadTree8x8_org[4][4];
	sadTree16x16_org[2][2] += sadTree8x8_org[4][5];
	sadTree16x16_org[2][2] += sadTree8x8_org[5][4];
	sadTree16x16_org[2][2] += sadTree8x8_org[5][5];
	sadTree16x16_org[2][3] += sadTree8x8_org[4][6];
	sadTree16x16_org[2][3] += sadTree8x8_org[4][7];
	sadTree16x16_org[2][3] += sadTree8x8_org[5][6];
	sadTree16x16_org[2][3] += sadTree8x8_org[5][7];
	sadTree16x16_org[3][0] += sadTree8x8_org[6][0];
	sadTree16x16_org[3][0] += sadTree8x8_org[6][1];
	sadTree16x16_org[3][0] += sadTree8x8_org[7][0];
	sadTree16x16_org[3][0] += sadTree8x8_org[7][1];
	sadTree16x16_org[3][1] += sadTree8x8_org[6][2];
	sadTree16x16_org[3][1] += sadTree8x8_org[6][3];
	sadTree16x16_org[3][1] += sadTree8x8_org[7][2];
	sadTree16x16_org[3][1] += sadTree8x8_org[7][3];
	sadTree16x16_org[3][2] += sadTree8x8_org[6][4];
	sadTree16x16_org[3][2] += sadTree8x8_org[6][5];
	sadTree16x16_org[3][2] += sadTree8x8_org[7][4];
	sadTree16x16_org[3][2] += sadTree8x8_org[7][5];
	sadTree16x16_org[3][3] += sadTree8x8_org[6][6];
	sadTree16x16_org[3][3] += sadTree8x8_org[6][7];
	sadTree16x16_org[3][3] += sadTree8x8_org[7][6];
	sadTree16x16_org[3][3] += sadTree8x8_org[7][7];

	// 8x16
	sadTree8x16_org[0][0] += sadTree8x8_org[0][0];
	sadTree8x16_org[0][0] += sadTree8x8_org[0][1];
	sadTree8x16_org[0][1] += sadTree8x8_org[0][2];
	sadTree8x16_org[0][1] += sadTree8x8_org[0][3];
	sadTree8x16_org[0][2] += sadTree8x8_org[0][4];
	sadTree8x16_org[0][2] += sadTree8x8_org[0][5];
	sadTree8x16_org[0][3] += sadTree8x8_org[0][6];
	sadTree8x16_org[0][3] += sadTree8x8_org[0][7];
	sadTree8x16_org[1][0] += sadTree8x8_org[1][0];
	sadTree8x16_org[1][0] += sadTree8x8_org[1][1];
	sadTree8x16_org[1][1] += sadTree8x8_org[1][2];
	sadTree8x16_org[1][1] += sadTree8x8_org[1][3];
	sadTree8x16_org[1][2] += sadTree8x8_org[1][4];
	sadTree8x16_org[1][2] += sadTree8x8_org[1][5];
	sadTree8x16_org[1][3] += sadTree8x8_org[1][6];
	sadTree8x16_org[1][3] += sadTree8x8_org[1][7];
	sadTree8x16_org[2][0] += sadTree8x8_org[2][0];
	sadTree8x16_org[2][0] += sadTree8x8_org[2][1];
	sadTree8x16_org[2][1] += sadTree8x8_org[2][2];
	sadTree8x16_org[2][1] += sadTree8x8_org[2][3];
	sadTree8x16_org[2][2] += sadTree8x8_org[2][4];
	sadTree8x16_org[2][2] += sadTree8x8_org[2][5];
	sadTree8x16_org[2][3] += sadTree8x8_org[2][6];
	sadTree8x16_org[2][3] += sadTree8x8_org[2][7];
	sadTree8x16_org[3][0] += sadTree8x8_org[3][0];
	sadTree8x16_org[3][0] += sadTree8x8_org[3][1];
	sadTree8x16_org[3][1] += sadTree8x8_org[3][2];
	sadTree8x16_org[3][1] += sadTree8x8_org[3][3];
	sadTree8x16_org[3][2] += sadTree8x8_org[3][4];
	sadTree8x16_org[3][2] += sadTree8x8_org[3][5];
	sadTree8x16_org[3][3] += sadTree8x8_org[3][6];
	sadTree8x16_org[3][3] += sadTree8x8_org[3][7];
	sadTree8x16_org[4][0] += sadTree8x8_org[4][0];
	sadTree8x16_org[4][0] += sadTree8x8_org[4][1];
	sadTree8x16_org[4][1] += sadTree8x8_org[4][2];
	sadTree8x16_org[4][1] += sadTree8x8_org[4][3];
	sadTree8x16_org[4][2] += sadTree8x8_org[4][4];
	sadTree8x16_org[4][2] += sadTree8x8_org[4][5];
	sadTree8x16_org[4][3] += sadTree8x8_org[4][6];
	sadTree8x16_org[4][3] += sadTree8x8_org[4][7];
	sadTree8x16_org[5][0] += sadTree8x8_org[5][0];
	sadTree8x16_org[5][0] += sadTree8x8_org[5][1];
	sadTree8x16_org[5][1] += sadTree8x8_org[5][2];
	sadTree8x16_org[5][1] += sadTree8x8_org[5][3];
	sadTree8x16_org[5][2] += sadTree8x8_org[5][4];
	sadTree8x16_org[5][2] += sadTree8x8_org[5][5];
	sadTree8x16_org[5][3] += sadTree8x8_org[5][6];
	sadTree8x16_org[5][3] += sadTree8x8_org[5][7];
	sadTree8x16_org[6][0] += sadTree8x8_org[6][0];
	sadTree8x16_org[6][0] += sadTree8x8_org[6][1];
	sadTree8x16_org[6][1] += sadTree8x8_org[6][2];
	sadTree8x16_org[6][1] += sadTree8x8_org[6][3];
	sadTree8x16_org[6][2] += sadTree8x8_org[6][4];
	sadTree8x16_org[6][2] += sadTree8x8_org[6][5];
	sadTree8x16_org[6][3] += sadTree8x8_org[6][6];
	sadTree8x16_org[6][3] += sadTree8x8_org[6][7];
	sadTree8x16_org[7][0] += sadTree8x8_org[7][0];
	sadTree8x16_org[7][0] += sadTree8x8_org[7][1];
	sadTree8x16_org[7][1] += sadTree8x8_org[7][2];
	sadTree8x16_org[7][1] += sadTree8x8_org[7][3];
	sadTree8x16_org[7][2] += sadTree8x8_org[7][4];
	sadTree8x16_org[7][2] += sadTree8x8_org[7][5];
	sadTree8x16_org[7][3] += sadTree8x8_org[7][6];
	sadTree8x16_org[7][3] += sadTree8x8_org[7][7];

	// 16x8
	sadTree16x8_org[0][0] += sadTree8x8_org[0][0];
	sadTree16x8_org[0][0] += sadTree8x8_org[1][0];
	sadTree16x8_org[0][1] += sadTree8x8_org[0][1];
	sadTree16x8_org[0][1] += sadTree8x8_org[1][1];
	sadTree16x8_org[0][2] += sadTree8x8_org[0][2];
	sadTree16x8_org[0][2] += sadTree8x8_org[1][2];
	sadTree16x8_org[0][3] += sadTree8x8_org[0][3];
	sadTree16x8_org[0][3] += sadTree8x8_org[1][3];
	sadTree16x8_org[0][4] += sadTree8x8_org[0][4];
	sadTree16x8_org[0][4] += sadTree8x8_org[1][4];
	sadTree16x8_org[0][5] += sadTree8x8_org[0][5];
	sadTree16x8_org[0][5] += sadTree8x8_org[1][5];
	sadTree16x8_org[0][6] += sadTree8x8_org[0][6];
	sadTree16x8_org[0][6] += sadTree8x8_org[1][6];
	sadTree16x8_org[0][7] += sadTree8x8_org[0][7];
	sadTree16x8_org[0][7] += sadTree8x8_org[1][7];
	sadTree16x8_org[1][0] += sadTree8x8_org[2][0];
	sadTree16x8_org[1][0] += sadTree8x8_org[3][0];
	sadTree16x8_org[1][1] += sadTree8x8_org[2][1];
	sadTree16x8_org[1][1] += sadTree8x8_org[3][1];
	sadTree16x8_org[1][2] += sadTree8x8_org[2][2];
	sadTree16x8_org[1][2] += sadTree8x8_org[3][2];
	sadTree16x8_org[1][3] += sadTree8x8_org[2][3];
	sadTree16x8_org[1][3] += sadTree8x8_org[3][3];
	sadTree16x8_org[1][4] += sadTree8x8_org[2][4];
	sadTree16x8_org[1][4] += sadTree8x8_org[3][4];
	sadTree16x8_org[1][5] += sadTree8x8_org[2][5];
	sadTree16x8_org[1][5] += sadTree8x8_org[3][5];
	sadTree16x8_org[1][6] += sadTree8x8_org[2][6];
	sadTree16x8_org[1][6] += sadTree8x8_org[3][6];
	sadTree16x8_org[1][7] += sadTree8x8_org[2][7];
	sadTree16x8_org[1][7] += sadTree8x8_org[3][7];
	sadTree16x8_org[2][0] += sadTree8x8_org[4][0];
	sadTree16x8_org[2][0] += sadTree8x8_org[5][0];
	sadTree16x8_org[2][1] += sadTree8x8_org[4][1];
	sadTree16x8_org[2][1] += sadTree8x8_org[5][1];
	sadTree16x8_org[2][2] += sadTree8x8_org[4][2];
	sadTree16x8_org[2][2] += sadTree8x8_org[5][2];
	sadTree16x8_org[2][3] += sadTree8x8_org[4][3];
	sadTree16x8_org[2][3] += sadTree8x8_org[5][3];
	sadTree16x8_org[2][4] += sadTree8x8_org[4][4];
	sadTree16x8_org[2][4] += sadTree8x8_org[5][4];
	sadTree16x8_org[2][5] += sadTree8x8_org[4][5];
	sadTree16x8_org[2][5] += sadTree8x8_org[5][5];
	sadTree16x8_org[2][6] += sadTree8x8_org[4][6];
	sadTree16x8_org[2][6] += sadTree8x8_org[5][6];
	sadTree16x8_org[2][7] += sadTree8x8_org[4][7];
	sadTree16x8_org[2][7] += sadTree8x8_org[5][7];
	sadTree16x8_org[3][0] += sadTree8x8_org[6][0];
	sadTree16x8_org[3][0] += sadTree8x8_org[7][0];
	sadTree16x8_org[3][1] += sadTree8x8_org[6][1];
	sadTree16x8_org[3][1] += sadTree8x8_org[7][1];
	sadTree16x8_org[3][2] += sadTree8x8_org[6][2];
	sadTree16x8_org[3][2] += sadTree8x8_org[7][2];
	sadTree16x8_org[3][3] += sadTree8x8_org[6][3];
	sadTree16x8_org[3][3] += sadTree8x8_org[7][3];
	sadTree16x8_org[3][4] += sadTree8x8_org[6][4];
	sadTree16x8_org[3][4] += sadTree8x8_org[7][4];
	sadTree16x8_org[3][5] += sadTree8x8_org[6][5];
	sadTree16x8_org[3][5] += sadTree8x8_org[7][5];
	sadTree16x8_org[3][6] += sadTree8x8_org[6][6];
	sadTree16x8_org[3][6] += sadTree8x8_org[7][6];
	sadTree16x8_org[3][7] += sadTree8x8_org[6][7];
	sadTree16x8_org[3][7] += sadTree8x8_org[7][7];

	// 8x32
	sadTree8x32_org[0][0] += sadTree8x8_org[0][0];
	sadTree8x32_org[0][0] += sadTree8x8_org[0][1];
	sadTree8x32_org[0][0] += sadTree8x8_org[0][2];
	sadTree8x32_org[0][0] += sadTree8x8_org[0][3];
	sadTree8x32_org[0][1] += sadTree8x8_org[0][4];
	sadTree8x32_org[0][1] += sadTree8x8_org[0][5];
	sadTree8x32_org[0][1] += sadTree8x8_org[0][6];
	sadTree8x32_org[0][1] += sadTree8x8_org[0][7];
	sadTree8x32_org[1][0] += sadTree8x8_org[1][0];
	sadTree8x32_org[1][0] += sadTree8x8_org[1][1];
	sadTree8x32_org[1][0] += sadTree8x8_org[1][2];
	sadTree8x32_org[1][0] += sadTree8x8_org[1][3];
	sadTree8x32_org[1][1] += sadTree8x8_org[1][4];
	sadTree8x32_org[1][1] += sadTree8x8_org[1][5];
	sadTree8x32_org[1][1] += sadTree8x8_org[1][6];
	sadTree8x32_org[1][1] += sadTree8x8_org[1][7];
	sadTree8x32_org[2][0] += sadTree8x8_org[2][0];
	sadTree8x32_org[2][0] += sadTree8x8_org[2][1];
	sadTree8x32_org[2][0] += sadTree8x8_org[2][2];
	sadTree8x32_org[2][0] += sadTree8x8_org[2][3];
	sadTree8x32_org[2][1] += sadTree8x8_org[2][4];
	sadTree8x32_org[2][1] += sadTree8x8_org[2][5];
	sadTree8x32_org[2][1] += sadTree8x8_org[2][6];
	sadTree8x32_org[2][1] += sadTree8x8_org[2][7];
	sadTree8x32_org[3][0] += sadTree8x8_org[3][0];
	sadTree8x32_org[3][0] += sadTree8x8_org[3][1];
	sadTree8x32_org[3][0] += sadTree8x8_org[3][2];
	sadTree8x32_org[3][0] += sadTree8x8_org[3][3];
	sadTree8x32_org[3][1] += sadTree8x8_org[3][4];
	sadTree8x32_org[3][1] += sadTree8x8_org[3][5];
	sadTree8x32_org[3][1] += sadTree8x8_org[3][6];
	sadTree8x32_org[3][1] += sadTree8x8_org[3][7];
	sadTree8x32_org[4][0] += sadTree8x8_org[4][0];
	sadTree8x32_org[4][0] += sadTree8x8_org[4][1];
	sadTree8x32_org[4][0] += sadTree8x8_org[4][2];
	sadTree8x32_org[4][0] += sadTree8x8_org[4][3];
	sadTree8x32_org[4][1] += sadTree8x8_org[4][4];
	sadTree8x32_org[4][1] += sadTree8x8_org[4][5];
	sadTree8x32_org[4][1] += sadTree8x8_org[4][6];
	sadTree8x32_org[4][1] += sadTree8x8_org[4][7];
	sadTree8x32_org[5][0] += sadTree8x8_org[5][0];
	sadTree8x32_org[5][0] += sadTree8x8_org[5][1];
	sadTree8x32_org[5][0] += sadTree8x8_org[5][2];
	sadTree8x32_org[5][0] += sadTree8x8_org[5][3];
	sadTree8x32_org[5][1] += sadTree8x8_org[5][4];
	sadTree8x32_org[5][1] += sadTree8x8_org[5][5];
	sadTree8x32_org[5][1] += sadTree8x8_org[5][6];
	sadTree8x32_org[5][1] += sadTree8x8_org[5][7];
	sadTree8x32_org[6][0] += sadTree8x8_org[6][0];
	sadTree8x32_org[6][0] += sadTree8x8_org[6][1];
	sadTree8x32_org[6][0] += sadTree8x8_org[6][2];
	sadTree8x32_org[6][0] += sadTree8x8_org[6][3];
	sadTree8x32_org[6][1] += sadTree8x8_org[6][4];
	sadTree8x32_org[6][1] += sadTree8x8_org[6][5];
	sadTree8x32_org[6][1] += sadTree8x8_org[6][6];
	sadTree8x32_org[6][1] += sadTree8x8_org[6][7];
	sadTree8x32_org[7][0] += sadTree8x8_org[7][0];
	sadTree8x32_org[7][0] += sadTree8x8_org[7][1];
	sadTree8x32_org[7][0] += sadTree8x8_org[7][2];
	sadTree8x32_org[7][0] += sadTree8x8_org[7][3];
	sadTree8x32_org[7][1] += sadTree8x8_org[7][4];
	sadTree8x32_org[7][1] += sadTree8x8_org[7][5];
	sadTree8x32_org[7][1] += sadTree8x8_org[7][6];
	sadTree8x32_org[7][1] += sadTree8x8_org[7][7];

	// 32x8
	sadTree32x8_org[0][0] += sadTree8x8_org[0][0];
	sadTree32x8_org[0][0] += sadTree8x8_org[1][0];
	sadTree32x8_org[0][0] += sadTree8x8_org[2][0];
	sadTree32x8_org[0][0] += sadTree8x8_org[3][0];
	sadTree32x8_org[0][1] += sadTree8x8_org[0][1];
	sadTree32x8_org[0][1] += sadTree8x8_org[1][1];
	sadTree32x8_org[0][1] += sadTree8x8_org[2][1];
	sadTree32x8_org[0][1] += sadTree8x8_org[3][1];
	sadTree32x8_org[0][2] += sadTree8x8_org[0][2];
	sadTree32x8_org[0][2] += sadTree8x8_org[1][2];
	sadTree32x8_org[0][2] += sadTree8x8_org[2][2];
	sadTree32x8_org[0][2] += sadTree8x8_org[3][2];
	sadTree32x8_org[0][3] += sadTree8x8_org[0][3];
	sadTree32x8_org[0][3] += sadTree8x8_org[1][3];
	sadTree32x8_org[0][3] += sadTree8x8_org[2][3];
	sadTree32x8_org[0][3] += sadTree8x8_org[3][3];
	sadTree32x8_org[0][4] += sadTree8x8_org[0][4];
	sadTree32x8_org[0][4] += sadTree8x8_org[1][4];
	sadTree32x8_org[0][4] += sadTree8x8_org[2][4];
	sadTree32x8_org[0][4] += sadTree8x8_org[3][4];
	sadTree32x8_org[0][5] += sadTree8x8_org[0][5];
	sadTree32x8_org[0][5] += sadTree8x8_org[1][5];
	sadTree32x8_org[0][5] += sadTree8x8_org[2][5];
	sadTree32x8_org[0][5] += sadTree8x8_org[3][5];
	sadTree32x8_org[0][6] += sadTree8x8_org[0][6];
	sadTree32x8_org[0][6] += sadTree8x8_org[1][6];
	sadTree32x8_org[0][6] += sadTree8x8_org[2][6];
	sadTree32x8_org[0][6] += sadTree8x8_org[3][6];
	sadTree32x8_org[0][7] += sadTree8x8_org[0][7];
	sadTree32x8_org[0][7] += sadTree8x8_org[1][7];
	sadTree32x8_org[0][7] += sadTree8x8_org[2][7];
	sadTree32x8_org[0][7] += sadTree8x8_org[3][7];
	sadTree32x8_org[1][0] += sadTree8x8_org[4][0];
	sadTree32x8_org[1][0] += sadTree8x8_org[5][0];
	sadTree32x8_org[1][0] += sadTree8x8_org[6][0];
	sadTree32x8_org[1][0] += sadTree8x8_org[7][0];
	sadTree32x8_org[1][1] += sadTree8x8_org[4][1];
	sadTree32x8_org[1][1] += sadTree8x8_org[5][1];
	sadTree32x8_org[1][1] += sadTree8x8_org[6][1];
	sadTree32x8_org[1][1] += sadTree8x8_org[7][1];
	sadTree32x8_org[1][2] += sadTree8x8_org[4][2];
	sadTree32x8_org[1][2] += sadTree8x8_org[5][2];
	sadTree32x8_org[1][2] += sadTree8x8_org[6][2];
	sadTree32x8_org[1][2] += sadTree8x8_org[7][2];
	sadTree32x8_org[1][3] += sadTree8x8_org[4][3];
	sadTree32x8_org[1][3] += sadTree8x8_org[5][3];
	sadTree32x8_org[1][3] += sadTree8x8_org[6][3];
	sadTree32x8_org[1][3] += sadTree8x8_org[7][3];
	sadTree32x8_org[1][4] += sadTree8x8_org[4][4];
	sadTree32x8_org[1][4] += sadTree8x8_org[5][4];
	sadTree32x8_org[1][4] += sadTree8x8_org[6][4];
	sadTree32x8_org[1][4] += sadTree8x8_org[7][4];
	sadTree32x8_org[1][5] += sadTree8x8_org[4][5];
	sadTree32x8_org[1][5] += sadTree8x8_org[5][5];
	sadTree32x8_org[1][5] += sadTree8x8_org[6][5];
	sadTree32x8_org[1][5] += sadTree8x8_org[7][5];
	sadTree32x8_org[1][6] += sadTree8x8_org[4][6];
	sadTree32x8_org[1][6] += sadTree8x8_org[5][6];
	sadTree32x8_org[1][6] += sadTree8x8_org[6][6];
	sadTree32x8_org[1][6] += sadTree8x8_org[7][6];
	sadTree32x8_org[1][7] += sadTree8x8_org[4][7];
	sadTree32x8_org[1][7] += sadTree8x8_org[5][7];
	sadTree32x8_org[1][7] += sadTree8x8_org[6][7];
	sadTree32x8_org[1][7] += sadTree8x8_org[7][7];

	// 64x8
	sadTree64x8_org[0][0] += sadTree8x8_org[0][0];
	sadTree64x8_org[0][0] += sadTree8x8_org[1][0];
	sadTree64x8_org[0][0] += sadTree8x8_org[2][0];
	sadTree64x8_org[0][0] += sadTree8x8_org[3][0];
	sadTree64x8_org[0][0] += sadTree8x8_org[4][0];
	sadTree64x8_org[0][0] += sadTree8x8_org[5][0];
	sadTree64x8_org[0][0] += sadTree8x8_org[6][0];
	sadTree64x8_org[0][0] += sadTree8x8_org[7][0];
	sadTree64x8_org[0][1] += sadTree8x8_org[0][1];
	sadTree64x8_org[0][1] += sadTree8x8_org[1][1];
	sadTree64x8_org[0][1] += sadTree8x8_org[2][1];
	sadTree64x8_org[0][1] += sadTree8x8_org[3][1];
	sadTree64x8_org[0][1] += sadTree8x8_org[4][1];
	sadTree64x8_org[0][1] += sadTree8x8_org[5][1];
	sadTree64x8_org[0][1] += sadTree8x8_org[6][1];
	sadTree64x8_org[0][1] += sadTree8x8_org[7][1];
	sadTree64x8_org[0][2] += sadTree8x8_org[0][2];
	sadTree64x8_org[0][2] += sadTree8x8_org[1][2];
	sadTree64x8_org[0][2] += sadTree8x8_org[2][2];
	sadTree64x8_org[0][2] += sadTree8x8_org[3][2];
	sadTree64x8_org[0][2] += sadTree8x8_org[4][2];
	sadTree64x8_org[0][2] += sadTree8x8_org[5][2];
	sadTree64x8_org[0][2] += sadTree8x8_org[6][2];
	sadTree64x8_org[0][2] += sadTree8x8_org[7][2];
	sadTree64x8_org[0][3] += sadTree8x8_org[0][3];
	sadTree64x8_org[0][3] += sadTree8x8_org[1][3];
	sadTree64x8_org[0][3] += sadTree8x8_org[2][3];
	sadTree64x8_org[0][3] += sadTree8x8_org[3][3];
	sadTree64x8_org[0][3] += sadTree8x8_org[4][3];
	sadTree64x8_org[0][3] += sadTree8x8_org[5][3];
	sadTree64x8_org[0][3] += sadTree8x8_org[6][3];
	sadTree64x8_org[0][3] += sadTree8x8_org[7][3];
	sadTree64x8_org[0][4] += sadTree8x8_org[0][4];
	sadTree64x8_org[0][4] += sadTree8x8_org[1][4];
	sadTree64x8_org[0][4] += sadTree8x8_org[2][4];
	sadTree64x8_org[0][4] += sadTree8x8_org[3][4];
	sadTree64x8_org[0][4] += sadTree8x8_org[4][4];
	sadTree64x8_org[0][4] += sadTree8x8_org[5][4];
	sadTree64x8_org[0][4] += sadTree8x8_org[6][4];
	sadTree64x8_org[0][4] += sadTree8x8_org[7][4];
	sadTree64x8_org[0][5] += sadTree8x8_org[0][5];
	sadTree64x8_org[0][5] += sadTree8x8_org[1][5];
	sadTree64x8_org[0][5] += sadTree8x8_org[2][5];
	sadTree64x8_org[0][5] += sadTree8x8_org[3][5];
	sadTree64x8_org[0][5] += sadTree8x8_org[4][5];
	sadTree64x8_org[0][5] += sadTree8x8_org[5][5];
	sadTree64x8_org[0][5] += sadTree8x8_org[6][5];
	sadTree64x8_org[0][5] += sadTree8x8_org[7][5];
	sadTree64x8_org[0][6] += sadTree8x8_org[0][6];
	sadTree64x8_org[0][6] += sadTree8x8_org[1][6];
	sadTree64x8_org[0][6] += sadTree8x8_org[2][6];
	sadTree64x8_org[0][6] += sadTree8x8_org[3][6];
	sadTree64x8_org[0][6] += sadTree8x8_org[4][6];
	sadTree64x8_org[0][6] += sadTree8x8_org[5][6];
	sadTree64x8_org[0][6] += sadTree8x8_org[6][6];
	sadTree64x8_org[0][6] += sadTree8x8_org[7][6];
	sadTree64x8_org[0][7] += sadTree8x8_org[0][7];
	sadTree64x8_org[0][7] += sadTree8x8_org[1][7];
	sadTree64x8_org[0][7] += sadTree8x8_org[2][7];
	sadTree64x8_org[0][7] += sadTree8x8_org[3][7];
	sadTree64x8_org[0][7] += sadTree8x8_org[4][7];
	sadTree64x8_org[0][7] += sadTree8x8_org[5][7];
	sadTree64x8_org[0][7] += sadTree8x8_org[6][7];
	sadTree64x8_org[0][7] += sadTree8x8_org[7][7];

	// 8x64
	sadTree8x64_org[0][0] += sadTree8x8_org[0][0];
	sadTree8x64_org[0][0] += sadTree8x8_org[0][1];
	sadTree8x64_org[0][0] += sadTree8x8_org[0][2];
	sadTree8x64_org[0][0] += sadTree8x8_org[0][3];
	sadTree8x64_org[0][0] += sadTree8x8_org[0][4];
	sadTree8x64_org[0][0] += sadTree8x8_org[0][5];
	sadTree8x64_org[0][0] += sadTree8x8_org[0][6];
	sadTree8x64_org[0][0] += sadTree8x8_org[0][7];
	sadTree8x64_org[1][0] += sadTree8x8_org[1][0];
	sadTree8x64_org[1][0] += sadTree8x8_org[1][1];
	sadTree8x64_org[1][0] += sadTree8x8_org[1][2];
	sadTree8x64_org[1][0] += sadTree8x8_org[1][3];
	sadTree8x64_org[1][0] += sadTree8x8_org[1][4];
	sadTree8x64_org[1][0] += sadTree8x8_org[1][5];
	sadTree8x64_org[1][0] += sadTree8x8_org[1][6];
	sadTree8x64_org[1][0] += sadTree8x8_org[1][7];
	sadTree8x64_org[2][0] += sadTree8x8_org[2][0];
	sadTree8x64_org[2][0] += sadTree8x8_org[2][1];
	sadTree8x64_org[2][0] += sadTree8x8_org[2][2];
	sadTree8x64_org[2][0] += sadTree8x8_org[2][3];
	sadTree8x64_org[2][0] += sadTree8x8_org[2][4];
	sadTree8x64_org[2][0] += sadTree8x8_org[2][5];
	sadTree8x64_org[2][0] += sadTree8x8_org[2][6];
	sadTree8x64_org[2][0] += sadTree8x8_org[2][7];
	sadTree8x64_org[3][0] += sadTree8x8_org[3][0];
	sadTree8x64_org[3][0] += sadTree8x8_org[3][1];
	sadTree8x64_org[3][0] += sadTree8x8_org[3][2];
	sadTree8x64_org[3][0] += sadTree8x8_org[3][3];
	sadTree8x64_org[3][0] += sadTree8x8_org[3][4];
	sadTree8x64_org[3][0] += sadTree8x8_org[3][5];
	sadTree8x64_org[3][0] += sadTree8x8_org[3][6];
	sadTree8x64_org[3][0] += sadTree8x8_org[3][7];
	sadTree8x64_org[4][0] += sadTree8x8_org[4][0];
	sadTree8x64_org[4][0] += sadTree8x8_org[4][1];
	sadTree8x64_org[4][0] += sadTree8x8_org[4][2];
	sadTree8x64_org[4][0] += sadTree8x8_org[4][3];
	sadTree8x64_org[4][0] += sadTree8x8_org[4][4];
	sadTree8x64_org[4][0] += sadTree8x8_org[4][5];
	sadTree8x64_org[4][0] += sadTree8x8_org[4][6];
	sadTree8x64_org[4][0] += sadTree8x8_org[4][7];
	sadTree8x64_org[5][0] += sadTree8x8_org[5][0];
	sadTree8x64_org[5][0] += sadTree8x8_org[5][1];
	sadTree8x64_org[5][0] += sadTree8x8_org[5][2];
	sadTree8x64_org[5][0] += sadTree8x8_org[5][3];
	sadTree8x64_org[5][0] += sadTree8x8_org[5][4];
	sadTree8x64_org[5][0] += sadTree8x8_org[5][5];
	sadTree8x64_org[5][0] += sadTree8x8_org[5][6];
	sadTree8x64_org[5][0] += sadTree8x8_org[5][7];
	sadTree8x64_org[6][0] += sadTree8x8_org[6][0];
	sadTree8x64_org[6][0] += sadTree8x8_org[6][1];
	sadTree8x64_org[6][0] += sadTree8x8_org[6][2];
	sadTree8x64_org[6][0] += sadTree8x8_org[6][3];
	sadTree8x64_org[6][0] += sadTree8x8_org[6][4];
	sadTree8x64_org[6][0] += sadTree8x8_org[6][5];
	sadTree8x64_org[6][0] += sadTree8x8_org[6][6];
	sadTree8x64_org[6][0] += sadTree8x8_org[6][7];
	sadTree8x64_org[7][0] += sadTree8x8_org[7][0];
	sadTree8x64_org[7][0] += sadTree8x8_org[7][1];
	sadTree8x64_org[7][0] += sadTree8x8_org[7][2];
	sadTree8x64_org[7][0] += sadTree8x8_org[7][3];
	sadTree8x64_org[7][0] += sadTree8x8_org[7][4];
	sadTree8x64_org[7][0] += sadTree8x8_org[7][5];
	sadTree8x64_org[7][0] += sadTree8x8_org[7][6];
	sadTree8x64_org[7][0] += sadTree8x8_org[7][7];

#endif	// #if VIVADO_HLS_IME

//	//=================================================================================================================
//	for (x_8 = 0; x_8 < 8; x_8++) {
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//		sadTree64x8[0][x_8] = 0;
//
//		sadTree8x64[x_8][0] = 0;
//
//		sadTree32x8[0][x_8] = 0;
//		sadTree32x8[1][x_8] = 0;
//
//		sadTree8x32[x_8][0] = 0;
//		sadTree8x32[x_8][1] = 0;
//
//		sadTree16x8[0][x_8] = 0;
//		sadTree16x8[1][x_8] = 0;
//		sadTree16x8[2][x_8] = 0;
//		sadTree16x8[3][x_8] = 0;
//
//		sadTree8x16[x_8][0] = 0;
//		sadTree8x16[x_8][1] = 0;
//		sadTree8x16[x_8][2] = 0;
//		sadTree8x16[x_8][3] = 0;
//	}
//
//	for (x_16 = 0; x_16 < 4; x_16++) {
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//		sadTree16x16[x_16][0] = 0;
//		sadTree16x16[x_16][1] = 0;
//		sadTree16x16[x_16][2] = 0;
//		sadTree16x16[x_16][3] = 0;
//	}
//
//	sadTree16x16[0][0] += sadTree8x8[0][0];
//	sadTree16x16[0][0] += sadTree8x8[1][0];
//	sadTree16x16[0][0] += sadTree8x8[0][1];
//	sadTree16x16[0][0] += sadTree8x8[1][1];
//	sadTree16x16[0][1] += sadTree8x8[0][2];
//	sadTree16x16[0][1] += sadTree8x8[1][2];
//	sadTree16x16[0][1] += sadTree8x8[0][3];
//	sadTree16x16[0][1] += sadTree8x8[1][3];
//	sadTree16x16[0][2] += sadTree8x8[0][4];
//	sadTree16x16[0][2] += sadTree8x8[1][4];
//	sadTree16x16[0][2] += sadTree8x8[0][5];
//	sadTree16x16[0][2] += sadTree8x8[1][5];
//	sadTree16x16[0][3] += sadTree8x8[0][6];
//	sadTree16x16[0][3] += sadTree8x8[1][6];
//	sadTree16x16[0][3] += sadTree8x8[0][7];
//	sadTree16x16[0][3] += sadTree8x8[1][7];
//	sadTree16x16[1][0] += sadTree8x8[2][0];
//	sadTree16x16[1][0] += sadTree8x8[3][0];
//	sadTree16x16[1][0] += sadTree8x8[2][1];
//	sadTree16x16[1][0] += sadTree8x8[3][1];
//	sadTree16x16[1][1] += sadTree8x8[2][2];
//	sadTree16x16[1][1] += sadTree8x8[3][2];
//	sadTree16x16[1][1] += sadTree8x8[2][3];
//	sadTree16x16[1][1] += sadTree8x8[3][3];
//	sadTree16x16[1][2] += sadTree8x8[2][4];
//	sadTree16x16[1][2] += sadTree8x8[3][4];
//	sadTree16x16[1][2] += sadTree8x8[2][5];
//	sadTree16x16[1][2] += sadTree8x8[3][5];
//	sadTree16x16[1][3] += sadTree8x8[2][6];
//	sadTree16x16[1][3] += sadTree8x8[3][6];
//	sadTree16x16[1][3] += sadTree8x8[2][7];
//	sadTree16x16[1][3] += sadTree8x8[3][7];
//	sadTree16x16[2][0] += sadTree8x8[4][0];
//	sadTree16x16[2][0] += sadTree8x8[5][0];
//	sadTree16x16[2][0] += sadTree8x8[4][1];
//	sadTree16x16[2][0] += sadTree8x8[5][1];
//	sadTree16x16[2][1] += sadTree8x8[4][2];
//	sadTree16x16[2][1] += sadTree8x8[5][2];
//	sadTree16x16[2][1] += sadTree8x8[4][3];
//	sadTree16x16[2][1] += sadTree8x8[5][3];
//	sadTree16x16[2][2] += sadTree8x8[4][4];
//	sadTree16x16[2][2] += sadTree8x8[5][4];
//	sadTree16x16[2][2] += sadTree8x8[4][5];
//	sadTree16x16[2][2] += sadTree8x8[5][5];
//	sadTree16x16[2][3] += sadTree8x8[4][6];
//	sadTree16x16[2][3] += sadTree8x8[5][6];
//	sadTree16x16[2][3] += sadTree8x8[4][7];
//	sadTree16x16[2][3] += sadTree8x8[5][7];
//	sadTree16x16[3][0] += sadTree8x8[6][0];
//	sadTree16x16[3][0] += sadTree8x8[7][0];
//	sadTree16x16[3][0] += sadTree8x8[6][1];
//	sadTree16x16[3][0] += sadTree8x8[7][1];
//	sadTree16x16[3][1] += sadTree8x8[6][2];
//	sadTree16x16[3][1] += sadTree8x8[7][2];
//	sadTree16x16[3][1] += sadTree8x8[6][3];
//	sadTree16x16[3][1] += sadTree8x8[7][3];
//	sadTree16x16[3][2] += sadTree8x8[6][4];
//	sadTree16x16[3][2] += sadTree8x8[7][4];
//	sadTree16x16[3][2] += sadTree8x8[6][5];
//	sadTree16x16[3][2] += sadTree8x8[7][5];
//	sadTree16x16[3][3] += sadTree8x8[6][6];
//	sadTree16x16[3][3] += sadTree8x8[7][6];
//	sadTree16x16[3][3] += sadTree8x8[6][7];
//	sadTree16x16[3][3] += sadTree8x8[7][7];
//
//	sadTree8x16[0][0] += sadTree8x8[0][0];
//	sadTree8x16[0][0] += sadTree8x8[0][1];
//	sadTree8x16[0][1] += sadTree8x8[0][2];
//	sadTree8x16[0][1] += sadTree8x8[0][3];
//	sadTree8x16[0][2] += sadTree8x8[0][4];
//	sadTree8x16[0][2] += sadTree8x8[0][5];
//	sadTree8x16[0][3] += sadTree8x8[0][6];
//	sadTree8x16[0][3] += sadTree8x8[0][7];
//	sadTree8x16[1][0] += sadTree8x8[1][0];
//	sadTree8x16[1][0] += sadTree8x8[1][1];
//	sadTree8x16[1][1] += sadTree8x8[1][2];
//	sadTree8x16[1][1] += sadTree8x8[1][3];
//	sadTree8x16[1][2] += sadTree8x8[1][4];
//	sadTree8x16[1][2] += sadTree8x8[1][5];
//	sadTree8x16[1][3] += sadTree8x8[1][6];
//	sadTree8x16[1][3] += sadTree8x8[1][7];
//	sadTree8x16[2][0] += sadTree8x8[2][0];
//	sadTree8x16[2][0] += sadTree8x8[2][1];
//	sadTree8x16[2][1] += sadTree8x8[2][2];
//	sadTree8x16[2][1] += sadTree8x8[2][3];
//	sadTree8x16[2][2] += sadTree8x8[2][4];
//	sadTree8x16[2][2] += sadTree8x8[2][5];
//	sadTree8x16[2][3] += sadTree8x8[2][6];
//	sadTree8x16[2][3] += sadTree8x8[2][7];
//	sadTree8x16[3][0] += sadTree8x8[3][0];
//	sadTree8x16[3][0] += sadTree8x8[3][1];
//	sadTree8x16[3][1] += sadTree8x8[3][2];
//	sadTree8x16[3][1] += sadTree8x8[3][3];
//	sadTree8x16[3][2] += sadTree8x8[3][4];
//	sadTree8x16[3][2] += sadTree8x8[3][5];
//	sadTree8x16[3][3] += sadTree8x8[3][6];
//	sadTree8x16[3][3] += sadTree8x8[3][7];
//	sadTree8x16[4][0] += sadTree8x8[4][0];
//	sadTree8x16[4][0] += sadTree8x8[4][1];
//	sadTree8x16[4][1] += sadTree8x8[4][2];
//	sadTree8x16[4][1] += sadTree8x8[4][3];
//	sadTree8x16[4][2] += sadTree8x8[4][4];
//	sadTree8x16[4][2] += sadTree8x8[4][5];
//	sadTree8x16[4][3] += sadTree8x8[4][6];
//	sadTree8x16[4][3] += sadTree8x8[4][7];
//	sadTree8x16[5][0] += sadTree8x8[5][0];
//	sadTree8x16[5][0] += sadTree8x8[5][1];
//	sadTree8x16[5][1] += sadTree8x8[5][2];
//	sadTree8x16[5][1] += sadTree8x8[5][3];
//	sadTree8x16[5][2] += sadTree8x8[5][4];
//	sadTree8x16[5][2] += sadTree8x8[5][5];
//	sadTree8x16[5][3] += sadTree8x8[5][6];
//	sadTree8x16[5][3] += sadTree8x8[5][7];
//	sadTree8x16[6][0] += sadTree8x8[6][0];
//	sadTree8x16[6][0] += sadTree8x8[6][1];
//	sadTree8x16[6][1] += sadTree8x8[6][2];
//	sadTree8x16[6][1] += sadTree8x8[6][3];
//	sadTree8x16[6][2] += sadTree8x8[6][4];
//	sadTree8x16[6][2] += sadTree8x8[6][5];
//	sadTree8x16[6][3] += sadTree8x8[6][6];
//	sadTree8x16[6][3] += sadTree8x8[6][7];
//	sadTree8x16[7][0] += sadTree8x8[7][0];
//	sadTree8x16[7][0] += sadTree8x8[7][1];
//	sadTree8x16[7][1] += sadTree8x8[7][2];
//	sadTree8x16[7][1] += sadTree8x8[7][3];
//	sadTree8x16[7][2] += sadTree8x8[7][4];
//	sadTree8x16[7][2] += sadTree8x8[7][5];
//	sadTree8x16[7][3] += sadTree8x8[7][6];
//	sadTree8x16[7][3] += sadTree8x8[7][7];
//
//	sadTree16x8[0][0] += sadTree8x8[0][0];
//	sadTree16x8[0][0] += sadTree8x8[1][0];
//	sadTree16x8[0][1] += sadTree8x8[0][1];
//	sadTree16x8[0][1] += sadTree8x8[1][1];
//	sadTree16x8[0][2] += sadTree8x8[0][2];
//	sadTree16x8[0][2] += sadTree8x8[1][2];
//	sadTree16x8[0][3] += sadTree8x8[0][3];
//	sadTree16x8[0][3] += sadTree8x8[1][3];
//	sadTree16x8[0][4] += sadTree8x8[0][4];
//	sadTree16x8[0][4] += sadTree8x8[1][4];
//	sadTree16x8[0][5] += sadTree8x8[0][5];
//	sadTree16x8[0][5] += sadTree8x8[1][5];
//	sadTree16x8[0][6] += sadTree8x8[0][6];
//	sadTree16x8[0][6] += sadTree8x8[1][6];
//	sadTree16x8[0][7] += sadTree8x8[0][7];
//	sadTree16x8[0][7] += sadTree8x8[1][7];
//	sadTree16x8[1][0] += sadTree8x8[2][0];
//	sadTree16x8[1][0] += sadTree8x8[3][0];
//	sadTree16x8[1][1] += sadTree8x8[2][1];
//	sadTree16x8[1][1] += sadTree8x8[3][1];
//	sadTree16x8[1][2] += sadTree8x8[2][2];
//	sadTree16x8[1][2] += sadTree8x8[3][2];
//	sadTree16x8[1][3] += sadTree8x8[2][3];
//	sadTree16x8[1][3] += sadTree8x8[3][3];
//	sadTree16x8[1][4] += sadTree8x8[2][4];
//	sadTree16x8[1][4] += sadTree8x8[3][4];
//	sadTree16x8[1][5] += sadTree8x8[2][5];
//	sadTree16x8[1][5] += sadTree8x8[3][5];
//	sadTree16x8[1][6] += sadTree8x8[2][6];
//	sadTree16x8[1][6] += sadTree8x8[3][6];
//	sadTree16x8[1][7] += sadTree8x8[2][7];
//	sadTree16x8[1][7] += sadTree8x8[3][7];
//	sadTree16x8[2][0] += sadTree8x8[4][0];
//	sadTree16x8[2][0] += sadTree8x8[5][0];
//	sadTree16x8[2][1] += sadTree8x8[4][1];
//	sadTree16x8[2][1] += sadTree8x8[5][1];
//	sadTree16x8[2][2] += sadTree8x8[4][2];
//	sadTree16x8[2][2] += sadTree8x8[5][2];
//	sadTree16x8[2][3] += sadTree8x8[4][3];
//	sadTree16x8[2][3] += sadTree8x8[5][3];
//	sadTree16x8[2][4] += sadTree8x8[4][4];
//	sadTree16x8[2][4] += sadTree8x8[5][4];
//	sadTree16x8[2][5] += sadTree8x8[4][5];
//	sadTree16x8[2][5] += sadTree8x8[5][5];
//	sadTree16x8[2][6] += sadTree8x8[4][6];
//	sadTree16x8[2][6] += sadTree8x8[5][6];
//	sadTree16x8[2][7] += sadTree8x8[4][7];
//	sadTree16x8[2][7] += sadTree8x8[5][7];
//	sadTree16x8[3][0] += sadTree8x8[6][0];
//	sadTree16x8[3][0] += sadTree8x8[7][0];
//	sadTree16x8[3][1] += sadTree8x8[6][1];
//	sadTree16x8[3][1] += sadTree8x8[7][1];
//	sadTree16x8[3][2] += sadTree8x8[6][2];
//	sadTree16x8[3][2] += sadTree8x8[7][2];
//	sadTree16x8[3][3] += sadTree8x8[6][3];
//	sadTree16x8[3][3] += sadTree8x8[7][3];
//	sadTree16x8[3][4] += sadTree8x8[6][4];
//	sadTree16x8[3][4] += sadTree8x8[7][4];
//	sadTree16x8[3][5] += sadTree8x8[6][5];
//	sadTree16x8[3][5] += sadTree8x8[7][5];
//	sadTree16x8[3][6] += sadTree8x8[6][6];
//	sadTree16x8[3][6] += sadTree8x8[7][6];
//	sadTree16x8[3][7] += sadTree8x8[6][7];
//	sadTree16x8[3][7] += sadTree8x8[7][7];
//
//	sadTree32x8[0][0] += sadTree8x8[0][0];
//	sadTree32x8[0][0] += sadTree8x8[1][0];
//	sadTree32x8[0][0] += sadTree8x8[2][0];
//	sadTree32x8[0][0] += sadTree8x8[3][0];
//	sadTree32x8[0][1] += sadTree8x8[0][1];
//	sadTree32x8[0][1] += sadTree8x8[1][1];
//	sadTree32x8[0][1] += sadTree8x8[2][1];
//	sadTree32x8[0][1] += sadTree8x8[3][1];
//	sadTree32x8[0][2] += sadTree8x8[0][2];
//	sadTree32x8[0][2] += sadTree8x8[1][2];
//	sadTree32x8[0][2] += sadTree8x8[2][2];
//	sadTree32x8[0][2] += sadTree8x8[3][2];
//	sadTree32x8[0][3] += sadTree8x8[0][3];
//	sadTree32x8[0][3] += sadTree8x8[1][3];
//	sadTree32x8[0][3] += sadTree8x8[2][3];
//	sadTree32x8[0][3] += sadTree8x8[3][3];
//	sadTree32x8[0][4] += sadTree8x8[0][4];
//	sadTree32x8[0][4] += sadTree8x8[1][4];
//	sadTree32x8[0][4] += sadTree8x8[2][4];
//	sadTree32x8[0][4] += sadTree8x8[3][4];
//	sadTree32x8[0][5] += sadTree8x8[0][5];
//	sadTree32x8[0][5] += sadTree8x8[1][5];
//	sadTree32x8[0][5] += sadTree8x8[2][5];
//	sadTree32x8[0][5] += sadTree8x8[3][5];
//	sadTree32x8[0][6] += sadTree8x8[0][6];
//	sadTree32x8[0][6] += sadTree8x8[1][6];
//	sadTree32x8[0][6] += sadTree8x8[2][6];
//	sadTree32x8[0][6] += sadTree8x8[3][6];
//	sadTree32x8[0][7] += sadTree8x8[0][7];
//	sadTree32x8[0][7] += sadTree8x8[1][7];
//	sadTree32x8[0][7] += sadTree8x8[2][7];
//	sadTree32x8[0][7] += sadTree8x8[3][7];
//	sadTree32x8[1][0] += sadTree8x8[4][0];
//	sadTree32x8[1][0] += sadTree8x8[5][0];
//	sadTree32x8[1][0] += sadTree8x8[6][0];
//	sadTree32x8[1][0] += sadTree8x8[7][0];
//	sadTree32x8[1][1] += sadTree8x8[4][1];
//	sadTree32x8[1][1] += sadTree8x8[5][1];
//	sadTree32x8[1][1] += sadTree8x8[6][1];
//	sadTree32x8[1][1] += sadTree8x8[7][1];
//	sadTree32x8[1][2] += sadTree8x8[4][2];
//	sadTree32x8[1][2] += sadTree8x8[5][2];
//	sadTree32x8[1][2] += sadTree8x8[6][2];
//	sadTree32x8[1][2] += sadTree8x8[7][2];
//	sadTree32x8[1][3] += sadTree8x8[4][3];
//	sadTree32x8[1][3] += sadTree8x8[5][3];
//	sadTree32x8[1][3] += sadTree8x8[6][3];
//	sadTree32x8[1][3] += sadTree8x8[7][3];
//	sadTree32x8[1][4] += sadTree8x8[4][4];
//	sadTree32x8[1][4] += sadTree8x8[5][4];
//	sadTree32x8[1][4] += sadTree8x8[6][4];
//	sadTree32x8[1][4] += sadTree8x8[7][4];
//	sadTree32x8[1][5] += sadTree8x8[4][5];
//	sadTree32x8[1][5] += sadTree8x8[5][5];
//	sadTree32x8[1][5] += sadTree8x8[6][5];
//	sadTree32x8[1][5] += sadTree8x8[7][5];
//	sadTree32x8[1][6] += sadTree8x8[4][6];
//	sadTree32x8[1][6] += sadTree8x8[5][6];
//	sadTree32x8[1][6] += sadTree8x8[6][6];
//	sadTree32x8[1][6] += sadTree8x8[7][6];
//	sadTree32x8[1][7] += sadTree8x8[4][7];
//	sadTree32x8[1][7] += sadTree8x8[5][7];
//	sadTree32x8[1][7] += sadTree8x8[6][7];
//	sadTree32x8[1][7] += sadTree8x8[7][7];
//
//	sadTree8x32[0][0] += sadTree8x8[0][0];
//	sadTree8x32[0][0] += sadTree8x8[0][1];
//	sadTree8x32[0][0] += sadTree8x8[0][2];
//	sadTree8x32[0][0] += sadTree8x8[0][3];
//	sadTree8x32[0][1] += sadTree8x8[0][4];
//	sadTree8x32[0][1] += sadTree8x8[0][5];
//	sadTree8x32[0][1] += sadTree8x8[0][6];
//	sadTree8x32[0][1] += sadTree8x8[0][7];
//	sadTree8x32[1][0] += sadTree8x8[1][0];
//	sadTree8x32[1][0] += sadTree8x8[1][1];
//	sadTree8x32[1][0] += sadTree8x8[1][2];
//	sadTree8x32[1][0] += sadTree8x8[1][3];
//	sadTree8x32[1][1] += sadTree8x8[1][4];
//	sadTree8x32[1][1] += sadTree8x8[1][5];
//	sadTree8x32[1][1] += sadTree8x8[1][6];
//	sadTree8x32[1][1] += sadTree8x8[1][7];
//	sadTree8x32[2][0] += sadTree8x8[2][0];
//	sadTree8x32[2][0] += sadTree8x8[2][1];
//	sadTree8x32[2][0] += sadTree8x8[2][2];
//	sadTree8x32[2][0] += sadTree8x8[2][3];
//	sadTree8x32[2][1] += sadTree8x8[2][4];
//	sadTree8x32[2][1] += sadTree8x8[2][5];
//	sadTree8x32[2][1] += sadTree8x8[2][6];
//	sadTree8x32[2][1] += sadTree8x8[2][7];
//	sadTree8x32[3][0] += sadTree8x8[3][0];
//	sadTree8x32[3][0] += sadTree8x8[3][1];
//	sadTree8x32[3][0] += sadTree8x8[3][2];
//	sadTree8x32[3][0] += sadTree8x8[3][3];
//	sadTree8x32[3][1] += sadTree8x8[3][4];
//	sadTree8x32[3][1] += sadTree8x8[3][5];
//	sadTree8x32[3][1] += sadTree8x8[3][6];
//	sadTree8x32[3][1] += sadTree8x8[3][7];
//	sadTree8x32[4][0] += sadTree8x8[4][0];
//	sadTree8x32[4][0] += sadTree8x8[4][1];
//	sadTree8x32[4][0] += sadTree8x8[4][2];
//	sadTree8x32[4][0] += sadTree8x8[4][3];
//	sadTree8x32[4][1] += sadTree8x8[4][4];
//	sadTree8x32[4][1] += sadTree8x8[4][5];
//	sadTree8x32[4][1] += sadTree8x8[4][6];
//	sadTree8x32[4][1] += sadTree8x8[4][7];
//	sadTree8x32[5][0] += sadTree8x8[5][0];
//	sadTree8x32[5][0] += sadTree8x8[5][1];
//	sadTree8x32[5][0] += sadTree8x8[5][2];
//	sadTree8x32[5][0] += sadTree8x8[5][3];
//	sadTree8x32[5][1] += sadTree8x8[5][4];
//	sadTree8x32[5][1] += sadTree8x8[5][5];
//	sadTree8x32[5][1] += sadTree8x8[5][6];
//	sadTree8x32[5][1] += sadTree8x8[5][7];
//	sadTree8x32[6][0] += sadTree8x8[6][0];
//	sadTree8x32[6][0] += sadTree8x8[6][1];
//	sadTree8x32[6][0] += sadTree8x8[6][2];
//	sadTree8x32[6][0] += sadTree8x8[6][3];
//	sadTree8x32[6][1] += sadTree8x8[6][4];
//	sadTree8x32[6][1] += sadTree8x8[6][5];
//	sadTree8x32[6][1] += sadTree8x8[6][6];
//	sadTree8x32[6][1] += sadTree8x8[6][7];
//	sadTree8x32[7][0] += sadTree8x8[7][0];
//	sadTree8x32[7][0] += sadTree8x8[7][1];
//	sadTree8x32[7][0] += sadTree8x8[7][2];
//	sadTree8x32[7][0] += sadTree8x8[7][3];
//	sadTree8x32[7][1] += sadTree8x8[7][4];
//	sadTree8x32[7][1] += sadTree8x8[7][5];
//	sadTree8x32[7][1] += sadTree8x8[7][6];
//	sadTree8x32[7][1] += sadTree8x8[7][7];
//
//	sadTree64x8[0][0] += sadTree8x8[0][0];
//	sadTree64x8[0][0] += sadTree8x8[1][0];
//	sadTree64x8[0][0] += sadTree8x8[2][0];
//	sadTree64x8[0][0] += sadTree8x8[3][0];
//	sadTree64x8[0][0] += sadTree8x8[4][0];
//	sadTree64x8[0][0] += sadTree8x8[5][0];
//	sadTree64x8[0][0] += sadTree8x8[6][0];
//	sadTree64x8[0][0] += sadTree8x8[7][0];
//	sadTree64x8[0][1] += sadTree8x8[0][1];
//	sadTree64x8[0][1] += sadTree8x8[1][1];
//	sadTree64x8[0][1] += sadTree8x8[2][1];
//	sadTree64x8[0][1] += sadTree8x8[3][1];
//	sadTree64x8[0][1] += sadTree8x8[4][1];
//	sadTree64x8[0][1] += sadTree8x8[5][1];
//	sadTree64x8[0][1] += sadTree8x8[6][1];
//	sadTree64x8[0][1] += sadTree8x8[7][1];
//	sadTree64x8[0][2] += sadTree8x8[0][2];
//	sadTree64x8[0][2] += sadTree8x8[1][2];
//	sadTree64x8[0][2] += sadTree8x8[2][2];
//	sadTree64x8[0][2] += sadTree8x8[3][2];
//	sadTree64x8[0][2] += sadTree8x8[4][2];
//	sadTree64x8[0][2] += sadTree8x8[5][2];
//	sadTree64x8[0][2] += sadTree8x8[6][2];
//	sadTree64x8[0][2] += sadTree8x8[7][2];
//	sadTree64x8[0][3] += sadTree8x8[0][3];
//	sadTree64x8[0][3] += sadTree8x8[1][3];
//	sadTree64x8[0][3] += sadTree8x8[2][3];
//	sadTree64x8[0][3] += sadTree8x8[3][3];
//	sadTree64x8[0][3] += sadTree8x8[4][3];
//	sadTree64x8[0][3] += sadTree8x8[5][3];
//	sadTree64x8[0][3] += sadTree8x8[6][3];
//	sadTree64x8[0][3] += sadTree8x8[7][3];
//	sadTree64x8[0][4] += sadTree8x8[0][4];
//	sadTree64x8[0][4] += sadTree8x8[1][4];
//	sadTree64x8[0][4] += sadTree8x8[2][4];
//	sadTree64x8[0][4] += sadTree8x8[3][4];
//	sadTree64x8[0][4] += sadTree8x8[4][4];
//	sadTree64x8[0][4] += sadTree8x8[5][4];
//	sadTree64x8[0][4] += sadTree8x8[6][4];
//	sadTree64x8[0][4] += sadTree8x8[7][4];
//	sadTree64x8[0][5] += sadTree8x8[0][5];
//	sadTree64x8[0][5] += sadTree8x8[1][5];
//	sadTree64x8[0][5] += sadTree8x8[2][5];
//	sadTree64x8[0][5] += sadTree8x8[3][5];
//	sadTree64x8[0][5] += sadTree8x8[4][5];
//	sadTree64x8[0][5] += sadTree8x8[5][5];
//	sadTree64x8[0][5] += sadTree8x8[6][5];
//	sadTree64x8[0][5] += sadTree8x8[7][5];
//	sadTree64x8[0][6] += sadTree8x8[0][6];
//	sadTree64x8[0][6] += sadTree8x8[1][6];
//	sadTree64x8[0][6] += sadTree8x8[2][6];
//	sadTree64x8[0][6] += sadTree8x8[3][6];
//	sadTree64x8[0][6] += sadTree8x8[4][6];
//	sadTree64x8[0][6] += sadTree8x8[5][6];
//	sadTree64x8[0][6] += sadTree8x8[6][6];
//	sadTree64x8[0][6] += sadTree8x8[7][6];
//	sadTree64x8[0][7] += sadTree8x8[0][7];
//	sadTree64x8[0][7] += sadTree8x8[1][7];
//	sadTree64x8[0][7] += sadTree8x8[2][7];
//	sadTree64x8[0][7] += sadTree8x8[3][7];
//	sadTree64x8[0][7] += sadTree8x8[4][7];
//	sadTree64x8[0][7] += sadTree8x8[5][7];
//	sadTree64x8[0][7] += sadTree8x8[6][7];
//	sadTree64x8[0][7] += sadTree8x8[7][7];
//
//	sadTree8x64[0][0] += sadTree8x8[0][0];
//	sadTree8x64[0][0] += sadTree8x8[0][1];
//	sadTree8x64[0][0] += sadTree8x8[0][2];
//	sadTree8x64[0][0] += sadTree8x8[0][3];
//	sadTree8x64[0][0] += sadTree8x8[0][4];
//	sadTree8x64[0][0] += sadTree8x8[0][5];
//	sadTree8x64[0][0] += sadTree8x8[0][6];
//	sadTree8x64[0][0] += sadTree8x8[0][7];
//	sadTree8x64[1][0] += sadTree8x8[1][0];
//	sadTree8x64[1][0] += sadTree8x8[1][1];
//	sadTree8x64[1][0] += sadTree8x8[1][2];
//	sadTree8x64[1][0] += sadTree8x8[1][3];
//	sadTree8x64[1][0] += sadTree8x8[1][4];
//	sadTree8x64[1][0] += sadTree8x8[1][5];
//	sadTree8x64[1][0] += sadTree8x8[1][6];
//	sadTree8x64[1][0] += sadTree8x8[1][7];
//	sadTree8x64[2][0] += sadTree8x8[2][0];
//	sadTree8x64[2][0] += sadTree8x8[2][1];
//	sadTree8x64[2][0] += sadTree8x8[2][2];
//	sadTree8x64[2][0] += sadTree8x8[2][3];
//	sadTree8x64[2][0] += sadTree8x8[2][4];
//	sadTree8x64[2][0] += sadTree8x8[2][5];
//	sadTree8x64[2][0] += sadTree8x8[2][6];
//	sadTree8x64[2][0] += sadTree8x8[2][7];
//	sadTree8x64[3][0] += sadTree8x8[3][0];
//	sadTree8x64[3][0] += sadTree8x8[3][1];
//	sadTree8x64[3][0] += sadTree8x8[3][2];
//	sadTree8x64[3][0] += sadTree8x8[3][3];
//	sadTree8x64[3][0] += sadTree8x8[3][4];
//	sadTree8x64[3][0] += sadTree8x8[3][5];
//	sadTree8x64[3][0] += sadTree8x8[3][6];
//	sadTree8x64[3][0] += sadTree8x8[3][7];
//	sadTree8x64[4][0] += sadTree8x8[4][0];
//	sadTree8x64[4][0] += sadTree8x8[4][1];
//	sadTree8x64[4][0] += sadTree8x8[4][2];
//	sadTree8x64[4][0] += sadTree8x8[4][3];
//	sadTree8x64[4][0] += sadTree8x8[4][4];
//	sadTree8x64[4][0] += sadTree8x8[4][5];
//	sadTree8x64[4][0] += sadTree8x8[4][6];
//	sadTree8x64[4][0] += sadTree8x8[4][7];
//	sadTree8x64[5][0] += sadTree8x8[5][0];
//	sadTree8x64[5][0] += sadTree8x8[5][1];
//	sadTree8x64[5][0] += sadTree8x8[5][2];
//	sadTree8x64[5][0] += sadTree8x8[5][3];
//	sadTree8x64[5][0] += sadTree8x8[5][4];
//	sadTree8x64[5][0] += sadTree8x8[5][5];
//	sadTree8x64[5][0] += sadTree8x8[5][6];
//	sadTree8x64[5][0] += sadTree8x8[5][7];
//	sadTree8x64[6][0] += sadTree8x8[6][0];
//	sadTree8x64[6][0] += sadTree8x8[6][1];
//	sadTree8x64[6][0] += sadTree8x8[6][2];
//	sadTree8x64[6][0] += sadTree8x8[6][3];
//	sadTree8x64[6][0] += sadTree8x8[6][4];
//	sadTree8x64[6][0] += sadTree8x8[6][5];
//	sadTree8x64[6][0] += sadTree8x8[6][6];
//	sadTree8x64[6][0] += sadTree8x8[6][7];
//	sadTree8x64[7][0] += sadTree8x8[7][0];
//	sadTree8x64[7][0] += sadTree8x8[7][1];
//	sadTree8x64[7][0] += sadTree8x8[7][2];
//	sadTree8x64[7][0] += sadTree8x8[7][3];
//	sadTree8x64[7][0] += sadTree8x8[7][4];
//	sadTree8x64[7][0] += sadTree8x8[7][5];
//	sadTree8x64[7][0] += sadTree8x8[7][6];
//	sadTree8x64[7][0] += sadTree8x8[7][7];
//
//	// check sadTree16x16_org
//	for (int j = 0; j < 4; j++)
//	{
//		for (int i = 0; i < 4; i++)
//		{
//			if (sadTree16x16_org[j][i] != sadTree16x16[i][j])
//			{
//
//				printf("sadTree16x16_org error! \n");
//				printf("sadTree16x16_org[%d][%d] = %d\tsadTree16x16[%d][%d] = %d \n", j, i, sadTree16x16_org[j][i], i, j, sadTree16x16[i][j]);
//			}
//		}
//	}
//
//	// check sadTree8x16_org
//	for (int j = 0; j < 8; j++)
//	{
//		for (int i = 0; i < 4; i++)
//		{
//			if (sadTree8x16_org[j][i] != sadTree16x8[i][j])
//			{
//
//				printf("sadTree8x16_org error! \n");
//				printf("sadTree8x16_org[%d][%d] = %d\tsadTree16x8[%d][%d] = %d \n", j, i, sadTree8x16_org[j][i], i, j, sadTree16x8[i][j]);
//			}
//		}
//	}
//
//	// check sadTree16x8_org
//	for (int j = 0; j < 4; j++)
//	{
//		for (int i = 0; i < 8; i++)
//		{
//			if (sadTree16x8_org[j][i] != sadTree8x16[i][j])
//			{
//
//				printf("sadTree16x8_org error! \n");
//				printf("sadTree16x8_org[%d][%d] = %d\tsadTree8x16[%d][%d] = %d \n", j, i, sadTree16x8_org[j][i], i, j, sadTree8x16[i][j]);
//			}
//		}
//	}
//
//	// check sadTree8x32_org
//	for (int j = 0; j < 8; j++)
//	{
//		for (int i = 0; i < 2; i++)
//		{
//			if (sadTree8x32_org[j][i] != sadTree32x8[i][j])
//			{
//
//				printf("sadTree8x32_org error! \n");
//				printf("sadTree8x32_org[%d][%d] = %d\tsadTree32x8[%d][%d] = %d \n", j, i, sadTree8x32_org[j][i], i, j, sadTree32x8[i][j]);
//			}
//		}
//	}
//	// check sadTree32x8_org
//	for (int j = 0; j < 2; j++)
//	{
//		for (int i = 0; i < 8; i++)
//		{
//			if (sadTree32x8_org[j][i] != sadTree8x32[i][j])
//			{
//
//				printf("sadTree32x8_org error! \n");
//				printf("sadTree32x8_org[%d][%d] = %d\tsadTree8x32[%d][%d] = %d \n", j, i, sadTree32x8_org[j][i], i, j, sadTree8x32[i][j]);
//			}
//		}
//	}
//
//	// check sadTree8x64_org
//	for (int j = 0; j < 8; j++)
//	{
//		for (int i = 0; i < 1; i++)
//		{
//			if (sadTree8x64_org[j][i] != sadTree64x8[i][j])
//			{
//
//				printf("sadTree8x64_org error! \n");
//				printf("sadTree8x64_org[%d][%d] = %d\tsadTree64x8[%d][%d] = %d \n", j, i, sadTree8x64_org[j][i], i, j, sadTree64x8[i][j]);
//			}
//		}
//	}
//	
//	// check sadTree64x8_org
//	for (int j = 0; j < 1; j++)
//	{
//		for (int i = 0; i < 8; i++)
//		{
//			if (sadTree64x8_org[j][i] != sadTree8x64[i][j])
//			{
//
//				printf("sadTree64x8_org error! \n");
//				printf("sadTree64x8_org[%d][%d] = %d\tsadTree8x64[%d][%d] = %d \n", j, i, sadTree64x8_org[j][i], i, j, sadTree8x64[i][j]);
//			}
//		}
//	}

}

void constructSadTreeDepth2(
	U32 sadTree16x16_org[4][4], U32 sadTree32x32_org[2][2], U32 sadTree32x16_org[2][4],
	U32 sadTree16x32_org[4][2], U32 sadTree64x16_org[1][4], U32 sadTree16x64_org[4][1]
	//,
	//U32 sadTree16x16[4][4], U32 sadTree32x32[2][2], U32 sadTree32x16[2][4],
	//U32 sadTree16x32[4][2], U32 sadTree64x16[1][4], U32 sadTree16x64[4][1]
)
{
#pragma HLS inline off

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadTree16x16_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64_org complete dim=0

//#pragma HLS ARRAY_PARTITION variable=sadTree16x16 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x32 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x16 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x32 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x16 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x64 complete dim=0

#endif

#if VIVADO_HLS_IME

	sadTree32x32_org[0][0] = sadTree16x16_org[0][0];
	sadTree32x32_org[0][0] += sadTree16x16_org[0][1];
	sadTree32x32_org[0][0] += sadTree16x16_org[1][0];
	sadTree32x32_org[0][0] += sadTree16x16_org[1][1];

	sadTree32x32_org[1][0] = sadTree16x16_org[2][0];
	sadTree32x32_org[1][0] += sadTree16x16_org[2][1];
	sadTree32x32_org[1][0] += sadTree16x16_org[3][0];
	sadTree32x32_org[1][0] += sadTree16x16_org[3][1];

	sadTree32x32_org[0][1] = sadTree16x16_org[0][2];
	sadTree32x32_org[0][1] += sadTree16x16_org[0][3];
	sadTree32x32_org[0][1] += sadTree16x16_org[1][2];
	sadTree32x32_org[0][1] += sadTree16x16_org[1][3];

	sadTree32x32_org[1][1] = sadTree16x16_org[2][2];
	sadTree32x32_org[1][1] += sadTree16x16_org[2][3];
	sadTree32x32_org[1][1] += sadTree16x16_org[3][2];
	sadTree32x32_org[1][1] += sadTree16x16_org[3][3];

	sadTree32x16_org[0][0] = sadTree16x16_org[0][0];
	sadTree32x16_org[0][0] += sadTree16x16_org[1][0];

	sadTree32x16_org[0][1] = sadTree16x16_org[0][1];
	sadTree32x16_org[0][1] += sadTree16x16_org[1][1];

	sadTree32x16_org[0][2] = sadTree16x16_org[0][2];
	sadTree32x16_org[0][2] += sadTree16x16_org[1][2];

	sadTree32x16_org[0][3] = sadTree16x16_org[0][3];
	sadTree32x16_org[0][3] += sadTree16x16_org[1][3];

	sadTree32x16_org[1][0] = sadTree16x16_org[2][0];
	sadTree32x16_org[1][0] += sadTree16x16_org[3][0];

	sadTree32x16_org[1][1] = sadTree16x16_org[2][1];
	sadTree32x16_org[1][1] += sadTree16x16_org[3][1];

	sadTree32x16_org[1][2] = sadTree16x16_org[2][2];
	sadTree32x16_org[1][2] += sadTree16x16_org[3][2];

	sadTree32x16_org[1][3] = sadTree16x16_org[2][3];
	sadTree32x16_org[1][3] += sadTree16x16_org[3][3];

	sadTree16x32_org[0][0] = sadTree16x16_org[0][0];
	sadTree16x32_org[0][0] += sadTree16x16_org[0][1];

	sadTree16x32_org[1][0] = sadTree16x16_org[1][0];
	sadTree16x32_org[1][0] += sadTree16x16_org[1][1];

	sadTree16x32_org[2][0] = sadTree16x16_org[2][0];
	sadTree16x32_org[2][0] += sadTree16x16_org[2][1];

	sadTree16x32_org[3][0] = sadTree16x16_org[3][0];
	sadTree16x32_org[3][0] += sadTree16x16_org[3][1];

	sadTree16x32_org[0][1] = sadTree16x16_org[0][2];
	sadTree16x32_org[0][1] += sadTree16x16_org[0][3];

	sadTree16x32_org[1][1] = sadTree16x16_org[1][2];
	sadTree16x32_org[1][1] += sadTree16x16_org[1][3];

	sadTree16x32_org[2][1] = sadTree16x16_org[2][2];
	sadTree16x32_org[2][1] += sadTree16x16_org[2][3];

	sadTree16x32_org[3][1] = sadTree16x16_org[3][2];
	sadTree16x32_org[3][1] += sadTree16x16_org[3][3];


	sadTree64x16_org[0][0] = sadTree16x16_org[0][0];
	sadTree64x16_org[0][0] += sadTree16x16_org[1][0];
	sadTree64x16_org[0][0] += sadTree16x16_org[2][0];
	sadTree64x16_org[0][0] += sadTree16x16_org[3][0];

	sadTree64x16_org[0][1] = sadTree16x16_org[0][1];
	sadTree64x16_org[0][1] += sadTree16x16_org[1][1];
	sadTree64x16_org[0][1] += sadTree16x16_org[2][1];
	sadTree64x16_org[0][1] += sadTree16x16_org[3][1];

	sadTree64x16_org[0][2] = sadTree16x16_org[0][2];
	sadTree64x16_org[0][2] += sadTree16x16_org[1][2];
	sadTree64x16_org[0][2] += sadTree16x16_org[2][2];
	sadTree64x16_org[0][2] += sadTree16x16_org[3][2];

	sadTree64x16_org[0][3] = sadTree16x16_org[0][3];
	sadTree64x16_org[0][3] += sadTree16x16_org[1][3];
	sadTree64x16_org[0][3] += sadTree16x16_org[2][3];
	sadTree64x16_org[0][3] += sadTree16x16_org[3][3];

	sadTree16x64_org[0][0] = sadTree16x16_org[0][0];
	sadTree16x64_org[0][0] += sadTree16x16_org[0][1];
	sadTree16x64_org[0][0] += sadTree16x16_org[0][2];
	sadTree16x64_org[0][0] += sadTree16x16_org[0][3];

	sadTree16x64_org[1][0] = sadTree16x16_org[1][0];
	sadTree16x64_org[1][0] += sadTree16x16_org[1][1];
	sadTree16x64_org[1][0] += sadTree16x16_org[1][2];
	sadTree16x64_org[1][0] += sadTree16x16_org[1][3];

	sadTree16x64_org[2][0] = sadTree16x16_org[2][0];
	sadTree16x64_org[2][0] += sadTree16x16_org[2][1];
	sadTree16x64_org[2][0] += sadTree16x16_org[2][2];
	sadTree16x64_org[2][0] += sadTree16x16_org[2][3];

	sadTree16x64_org[3][0] = sadTree16x16_org[3][0];
	sadTree16x64_org[3][0] += sadTree16x16_org[3][1];
	sadTree16x64_org[3][0] += sadTree16x16_org[3][2];
	sadTree16x64_org[3][0] += sadTree16x16_org[3][3];


#else

	U3 y_16;
	U2 y_32;

	for (y_16 = 0; y_16 < 4; y_16++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		sadTree32x16_org[0][y_16] = 0;
		sadTree32x16_org[1][y_16] = 0;

		sadTree16x32_org[y_16][0] = 0;
		sadTree16x32_org[y_16][1] = 0;

		sadTree64x16_org[0][y_16] = 0;

		sadTree16x64_org[y_16][0] = 0;
	}

	for (y_32 = 0; y_32 < 2; y_32++) 
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		sadTree32x32_org[y_32][0] = 0;
		sadTree32x32_org[y_32][1] = 0;
	}

	sadTree32x32_org[0][0] += sadTree16x16_org[0][0];
	sadTree32x32_org[0][0] += sadTree16x16_org[0][1];
	sadTree32x32_org[0][0] += sadTree16x16_org[1][0];
	sadTree32x32_org[0][0] += sadTree16x16_org[1][1];
	sadTree32x32_org[1][0] += sadTree16x16_org[2][0];
	sadTree32x32_org[1][0] += sadTree16x16_org[2][1];
	sadTree32x32_org[1][0] += sadTree16x16_org[3][0];
	sadTree32x32_org[1][0] += sadTree16x16_org[3][1];
	sadTree32x32_org[0][1] += sadTree16x16_org[0][2];
	sadTree32x32_org[0][1] += sadTree16x16_org[0][3];
	sadTree32x32_org[0][1] += sadTree16x16_org[1][2];
	sadTree32x32_org[0][1] += sadTree16x16_org[1][3];
	sadTree32x32_org[1][1] += sadTree16x16_org[2][2];
	sadTree32x32_org[1][1] += sadTree16x16_org[2][3];
	sadTree32x32_org[1][1] += sadTree16x16_org[3][2];
	sadTree32x32_org[1][1] += sadTree16x16_org[3][3];

	sadTree32x16_org[0][0] += sadTree16x16_org[0][0];
	sadTree32x16_org[0][1] += sadTree16x16_org[0][1];
	sadTree32x16_org[0][0] += sadTree16x16_org[1][0];
	sadTree32x16_org[0][1] += sadTree16x16_org[1][1];

	sadTree32x16_org[0][2] += sadTree16x16_org[0][2];
	sadTree32x16_org[0][3] += sadTree16x16_org[0][3];
	sadTree32x16_org[0][2] += sadTree16x16_org[1][2];
	sadTree32x16_org[0][3] += sadTree16x16_org[1][3];

	sadTree32x16_org[1][0] += sadTree16x16_org[2][0];
	sadTree32x16_org[1][1] += sadTree16x16_org[2][1];
	sadTree32x16_org[1][0] += sadTree16x16_org[3][0];
	sadTree32x16_org[1][1] += sadTree16x16_org[3][1];

	sadTree32x16_org[1][2] += sadTree16x16_org[2][2];
	sadTree32x16_org[1][3] += sadTree16x16_org[2][3];
	sadTree32x16_org[1][2] += sadTree16x16_org[3][2];
	sadTree32x16_org[1][3] += sadTree16x16_org[3][3];

	sadTree16x32_org[0][0] += sadTree16x16_org[0][0];
	sadTree16x32_org[0][0] += sadTree16x16_org[0][1];
	sadTree16x32_org[1][0] += sadTree16x16_org[1][0];
	sadTree16x32_org[1][0] += sadTree16x16_org[1][1];
	sadTree16x32_org[2][0] += sadTree16x16_org[2][0];
	sadTree16x32_org[2][0] += sadTree16x16_org[2][1];
	sadTree16x32_org[3][0] += sadTree16x16_org[3][0];
	sadTree16x32_org[3][0] += sadTree16x16_org[3][1];

	sadTree16x32_org[0][1] += sadTree16x16_org[0][2];
	sadTree16x32_org[0][1] += sadTree16x16_org[0][3];
	sadTree16x32_org[1][1] += sadTree16x16_org[1][2];
	sadTree16x32_org[1][1] += sadTree16x16_org[1][3];
	sadTree16x32_org[2][1] += sadTree16x16_org[2][2];
	sadTree16x32_org[2][1] += sadTree16x16_org[2][3];
	sadTree16x32_org[3][1] += sadTree16x16_org[3][2];
	sadTree16x32_org[3][1] += sadTree16x16_org[3][3];


	sadTree64x16_org[0][0] += sadTree16x16_org[0][0];
	sadTree64x16_org[0][0] += sadTree16x16_org[1][0];
	sadTree64x16_org[0][0] += sadTree16x16_org[2][0];
	sadTree64x16_org[0][0] += sadTree16x16_org[3][0];
	sadTree64x16_org[0][1] += sadTree16x16_org[0][1];
	sadTree64x16_org[0][1] += sadTree16x16_org[1][1];
	sadTree64x16_org[0][1] += sadTree16x16_org[2][1];
	sadTree64x16_org[0][1] += sadTree16x16_org[3][1];
	sadTree64x16_org[0][2] += sadTree16x16_org[0][2];
	sadTree64x16_org[0][2] += sadTree16x16_org[1][2];
	sadTree64x16_org[0][2] += sadTree16x16_org[2][2];
	sadTree64x16_org[0][2] += sadTree16x16_org[3][2];
	sadTree64x16_org[0][3] += sadTree16x16_org[0][3];
	sadTree64x16_org[0][3] += sadTree16x16_org[1][3];
	sadTree64x16_org[0][3] += sadTree16x16_org[2][3];
	sadTree64x16_org[0][3] += sadTree16x16_org[3][3];

	sadTree16x64_org[0][0] += sadTree16x16_org[0][0];
	sadTree16x64_org[0][0] += sadTree16x16_org[0][1];
	sadTree16x64_org[0][0] += sadTree16x16_org[0][2];
	sadTree16x64_org[0][0] += sadTree16x16_org[0][3];
	sadTree16x64_org[1][0] += sadTree16x16_org[1][0];
	sadTree16x64_org[1][0] += sadTree16x16_org[1][1];
	sadTree16x64_org[1][0] += sadTree16x16_org[1][2];
	sadTree16x64_org[1][0] += sadTree16x16_org[1][3];
	sadTree16x64_org[2][0] += sadTree16x16_org[2][0];
	sadTree16x64_org[2][0] += sadTree16x16_org[2][1];
	sadTree16x64_org[2][0] += sadTree16x16_org[2][2];
	sadTree16x64_org[2][0] += sadTree16x16_org[2][3];
	sadTree16x64_org[3][0] += sadTree16x16_org[3][0];
	sadTree16x64_org[3][0] += sadTree16x16_org[3][1];
	sadTree16x64_org[3][0] += sadTree16x16_org[3][2];
	sadTree16x64_org[3][0] += sadTree16x16_org[3][3];

#endif	// #if VIVADO_HLS_IME

//	//==============================================================================================================
//	int x_32;
//	int x_16;
//
//	for (x_16 = 0; x_16 < 4; x_16++) {
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//		sadTree32x16[0][x_16] = 0;
//		sadTree32x16[1][x_16] = 0;
//
//		sadTree16x32[x_16][0] = 0;
//		sadTree16x32[x_16][1] = 0;
//
//		sadTree64x16[0][x_16] = 0;
//
//		sadTree16x64[x_16][0] = 0;
//	}
//
//	for (x_32 = 0; x_32 < 2; x_32++) {
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//		sadTree32x32[x_32][0] = 0;
//		sadTree32x32[x_32][1] = 0;
//	}
//
//	sadTree32x32[0][0] += sadTree16x16[0][0];
//	sadTree32x32[0][0] += sadTree16x16[1][0];
//	sadTree32x32[0][0] += sadTree16x16[0][1];
//	sadTree32x32[0][0] += sadTree16x16[1][1];
//	sadTree32x32[1][0] += sadTree16x16[2][0];
//	sadTree32x32[1][0] += sadTree16x16[3][0];
//	sadTree32x32[1][0] += sadTree16x16[2][1];
//	sadTree32x32[1][0] += sadTree16x16[3][1];
//	sadTree32x32[0][1] += sadTree16x16[0][2];
//	sadTree32x32[0][1] += sadTree16x16[1][2];
//	sadTree32x32[0][1] += sadTree16x16[0][3];
//	sadTree32x32[0][1] += sadTree16x16[1][3];
//	sadTree32x32[1][1] += sadTree16x16[2][2];
//	sadTree32x32[1][1] += sadTree16x16[3][2];
//	sadTree32x32[1][1] += sadTree16x16[2][3];
//	sadTree32x32[1][1] += sadTree16x16[3][3];
//
//	sadTree32x16[0][0] += sadTree16x16[0][0];
//	sadTree32x16[0][0] += sadTree16x16[1][0];
//	sadTree32x16[0][1] += sadTree16x16[0][1];
//	sadTree32x16[0][1] += sadTree16x16[1][1];
//	sadTree32x16[0][2] += sadTree16x16[0][2];
//	sadTree32x16[0][2] += sadTree16x16[1][2];
//	sadTree32x16[0][3] += sadTree16x16[0][3];
//	sadTree32x16[0][3] += sadTree16x16[1][3];
//	sadTree32x16[1][0] += sadTree16x16[2][0];
//	sadTree32x16[1][0] += sadTree16x16[3][0];
//	sadTree32x16[1][1] += sadTree16x16[2][1];
//	sadTree32x16[1][1] += sadTree16x16[3][1];
//	sadTree32x16[1][2] += sadTree16x16[2][2];
//	sadTree32x16[1][2] += sadTree16x16[3][2];
//	sadTree32x16[1][3] += sadTree16x16[2][3];
//	sadTree32x16[1][3] += sadTree16x16[3][3];
//
//	sadTree16x32[0][0] += sadTree16x16[0][0];
//	sadTree16x32[0][0] += sadTree16x16[0][1];
//	sadTree16x32[1][0] += sadTree16x16[1][0];
//	sadTree16x32[1][0] += sadTree16x16[1][1];
//	sadTree16x32[2][0] += sadTree16x16[2][0];
//	sadTree16x32[2][0] += sadTree16x16[2][1];
//	sadTree16x32[3][0] += sadTree16x16[3][0];
//	sadTree16x32[3][0] += sadTree16x16[3][1];
//	sadTree16x32[0][1] += sadTree16x16[0][2];
//	sadTree16x32[0][1] += sadTree16x16[0][3];
//	sadTree16x32[1][1] += sadTree16x16[1][2];
//	sadTree16x32[1][1] += sadTree16x16[1][3];
//	sadTree16x32[2][1] += sadTree16x16[2][2];
//	sadTree16x32[2][1] += sadTree16x16[2][3];
//	sadTree16x32[3][1] += sadTree16x16[3][2];
//	sadTree16x32[3][1] += sadTree16x16[3][3];
//
//
//	sadTree64x16[0][0] += sadTree16x16[0][0];
//	sadTree64x16[0][0] += sadTree16x16[1][0];
//	sadTree64x16[0][0] += sadTree16x16[2][0];
//	sadTree64x16[0][0] += sadTree16x16[3][0];
//	sadTree64x16[0][1] += sadTree16x16[0][1];
//	sadTree64x16[0][1] += sadTree16x16[1][1];
//	sadTree64x16[0][1] += sadTree16x16[2][1];
//	sadTree64x16[0][1] += sadTree16x16[3][1];
//	sadTree64x16[0][2] += sadTree16x16[0][2];
//	sadTree64x16[0][2] += sadTree16x16[1][2];
//	sadTree64x16[0][2] += sadTree16x16[2][2];
//	sadTree64x16[0][2] += sadTree16x16[3][2];
//	sadTree64x16[0][3] += sadTree16x16[0][3];
//	sadTree64x16[0][3] += sadTree16x16[1][3];
//	sadTree64x16[0][3] += sadTree16x16[2][3];
//	sadTree64x16[0][3] += sadTree16x16[3][3];
//
//	sadTree16x64[0][0] += sadTree16x16[0][0];
//	sadTree16x64[0][0] += sadTree16x16[0][1];
//	sadTree16x64[0][0] += sadTree16x16[0][2];
//	sadTree16x64[0][0] += sadTree16x16[0][3];
//	sadTree16x64[1][0] += sadTree16x16[1][0];
//	sadTree16x64[1][0] += sadTree16x16[1][1];
//	sadTree16x64[1][0] += sadTree16x16[1][2];
//	sadTree16x64[1][0] += sadTree16x16[1][3];
//	sadTree16x64[2][0] += sadTree16x16[2][0];
//	sadTree16x64[2][0] += sadTree16x16[2][1];
//	sadTree16x64[2][0] += sadTree16x16[2][2];
//	sadTree16x64[2][0] += sadTree16x16[2][3];
//	sadTree16x64[3][0] += sadTree16x16[3][0];
//	sadTree16x64[3][0] += sadTree16x16[3][1];
//	sadTree16x64[3][0] += sadTree16x16[3][2];
//	sadTree16x64[3][0] += sadTree16x16[3][3];
//
//	// check sadTree32x32_org
//	for (int j = 0; j < 2; j++)
//	{
//		for (int i = 0; i < 2; i++)
//		{
//			if (sadTree32x32_org[j][i] != sadTree32x32[i][j])
//			{
//
//				printf("sadTree32x32_org error! \n");
//				printf("sadTree32x32_org[%d][%d] = %d\tsadTree32x32[%d][%d] = %d \n", j, i, sadTree32x32_org[j][i], i, j, sadTree32x32[i][j]);
//			}
//		}
//	}
//	// check sadTree32x16_org
//	for (int j = 0; j < 2; j++)
//	{
//		for (int i = 0; i < 4; i++)
//		{
//			if (sadTree32x16_org[j][i] != sadTree16x32[i][j])
//			{
//
//				printf("sadTree32x16_org error! \n");
//				printf("sadTree32x16_org[%d][%d] = %d\tsadTree16x32[%d][%d] = %d \n", j, i, sadTree32x16_org[j][i], i, j, sadTree16x32[i][j]);
//			}
//		}
//	}
//	// check sadTree16x32_org
//	for (int j = 0; j < 4; j++)
//	{
//		for (int i = 0; i < 2; i++)
//		{
//			if (sadTree16x32_org[j][i] != sadTree32x16[i][j])
//			{
//
//				printf("sadTree16x32_org error! \n");
//				printf("sadTree16x32_org[%d][%d] = %d\tsadTree32x16[%d][%d] = %d \n", j, i, sadTree16x32_org[j][i], i, j, sadTree32x16[i][j]);
//			}
//		}
//	}
//
//	// check sadTree64x16_org
//	for (int j = 0; j < 1; j++)
//	{
//		for (int i = 0; i < 4; i++)
//		{
//			if (sadTree64x16_org[j][i] != sadTree16x64[i][j])
//			{
//
//				printf("sadTree64x16_org error! \n");
//				printf("sadTree64x16_org[%d][%d] = %d\tsadTree16x64[%d][%d] = %d \n", j, i, sadTree64x16_org[j][i], i, j, sadTree16x64[i][j]);
//			}
//		}
//	}
//
//	// check sadTree16x64_org
//	for (int j = 0; j < 4; j++)
//	{
//		for (int i = 0; i < 1; i++)
//		{
//			if (sadTree16x64_org[j][i] != sadTree64x16[i][j])
//			{
//
//				printf("sadTree16x64_org error! \n");
//				printf("sadTree16x64_org[%d][%d] = %d\tsadTree64x16[%d][%d] = %d \n", j, i, sadTree16x64_org[j][i], i, j, sadTree64x16[i][j]);
//			}
//		}
//	}

}

void constructSadTreeDepth1(U32 sadTree32x32_org[2][2], U32 sadTree64x64_org[1][1], U32 sadTree64x32_org[1][2],U32 sadTree32x64_org[2][1]
	//,
	//U32 sadTree32x32[2][2], U32 sadTree64x64[1][1], U32 sadTree64x32[1][2],U32 sadTree32x64[2][1]
)
{
#pragma HLS inline off

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadTree32x32_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x64_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64_org complete dim=0

//#pragma HLS ARRAY_PARTITION variable=sadTree32x32 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x64 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x32 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x64 complete dim=0

#endif
#if VIVADO_HLS_IME

	sadTree64x64_org[0][0] = sadTree32x32_org[0][0];
	sadTree64x64_org[0][0] += sadTree32x32_org[1][0];
	sadTree64x64_org[0][0] += sadTree32x32_org[0][1];
	sadTree64x64_org[0][0] += sadTree32x32_org[1][1];

	sadTree64x32_org[0][0] = sadTree32x32_org[0][0];
	sadTree64x32_org[0][0] += sadTree32x32_org[1][0];

	sadTree64x32_org[0][1] = sadTree32x32_org[0][1];
	sadTree64x32_org[0][1] += sadTree32x32_org[1][1];

	sadTree32x64_org[0][0] = sadTree32x32_org[0][0];
	sadTree32x64_org[0][0] += sadTree32x32_org[0][1];

	sadTree32x64_org[1][0] = sadTree32x32_org[1][0];
	sadTree32x64_org[1][0] += sadTree32x32_org[1][1];


#else

	U2 y_32;
	for (y_32 = 0; y_32 < 2; y_32++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		sadTree64x32_org[0][y_32] = 0;

		sadTree32x64_org[y_32][0] = 0;
	}

	sadTree64x64_org[0][0] = 0;

	sadTree64x64_org[0][0] += sadTree32x32_org[0][0];
	sadTree64x64_org[0][0] += sadTree32x32_org[1][0];
	sadTree64x64_org[0][0] += sadTree32x32_org[0][1];
	sadTree64x64_org[0][0] += sadTree32x32_org[1][1];

	sadTree64x32_org[0][0] += sadTree32x32_org[0][0];
	sadTree64x32_org[0][0] += sadTree32x32_org[1][0];
	sadTree64x32_org[0][1] += sadTree32x32_org[0][1];
	sadTree64x32_org[0][1] += sadTree32x32_org[1][1];

	sadTree32x64_org[0][0] += sadTree32x32_org[0][0];
	sadTree32x64_org[0][0] += sadTree32x32_org[0][1];
	sadTree32x64_org[1][0] += sadTree32x32_org[1][0];
	sadTree32x64_org[1][0] += sadTree32x32_org[1][1];

#endif	// #if VIVADO_HLS_IME

//	//=======================================================================
//	int x_32;
//
//	for (x_32 = 0; x_32 < 2; x_32++) {
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//		sadTree64x32[0][x_32] = 0;
//
//		sadTree32x64[x_32][0] = 0;
//	}
//
//	sadTree64x64[0][0] = 0;
//
//	sadTree64x64[0][0] += sadTree32x32[0][0];
//	sadTree64x64[0][0] += sadTree32x32[1][0];
//	sadTree64x64[0][0] += sadTree32x32[0][1];
//	sadTree64x64[0][0] += sadTree32x32[1][1];
//
//	sadTree64x32[0][0] += sadTree32x32[0][0];
//	sadTree64x32[0][0] += sadTree32x32[1][0];
//	sadTree64x32[0][1] += sadTree32x32[0][1];
//	sadTree64x32[0][1] += sadTree32x32[1][1];
//
//	sadTree32x64[0][0] += sadTree32x32[0][0];
//	sadTree32x64[0][0] += sadTree32x32[0][1];
//	sadTree32x64[1][0] += sadTree32x32[1][0];
//	sadTree32x64[1][0] += sadTree32x32[1][1];
//
//	// check sadTree64x64_org
//	for (int j = 0; j < 1; j++)
//	{
//		for (int i = 0; i < 1; i++)
//		{
//			if (sadTree64x64_org[j][i] != sadTree64x64[i][j])
//			{
//
//				printf("sadTree64x64_org error! \n");
//				printf("sadTree64x64_org[%d][%d] = %d\tsadTree64x64[%d][%d] = %d \n", j, i, sadTree64x64_org[j][i], i, j, sadTree64x64[i][j]);
//			}
//		}
//	}
//	// check sadTree64x32_org
//	for (int j = 0; j < 1; j++)
//	{
//		for (int i = 0; i < 2; i++)
//		{
//			if (sadTree64x32_org[j][i] != sadTree32x64[i][j])
//			{
//
//				printf("sadTree64x32_org error! \n");
//				printf("sadTree64x32_org[%d][%d] = %d\tsadTree32x64[%d][%d] = %d \n", j, i, sadTree64x32_org[j][i], i, j, sadTree32x64[i][j]);
//			}
//		}
//	}
//	// check sadTree32x64_org
//	for (int j = 0; j < 2; j++)
//	{
//		for (int i = 0; i < 1; i++)
//		{
//			if (sadTree32x64_org[j][i] != sadTree64x32[i][j])
//			{
//
//				printf("sadTree32x64_org error! \n");
//				printf("sadTree32x64_org[%d][%d] = %d\tsadTree64x32[%d][%d] = %d \n", j, i, sadTree32x64_org[j][i], i, j, sadTree64x32[i][j]);
//			}
//		}
//	}

}


void initBestInfo(U32 sadTree64x64[1][1],
	U32 sadTree32x32[2][2], U32 sadTree64x32[1][2], U32 sadTree32x64[2][1],
	U32 sadTree16x16[4][4], U32 sadTree32x16[2][4], U32 sadTree16x32[4][2], U32 sadTree64x16[1][4], U32 sadTree16x64[4][1],
	U16  sadTree8x8[8][8], U16 sadTree16x8[4][8], U16 sadTree8x16[8][4], U16 sadTree32x8[2][8], U16  sadTree8x32[8][2], U32 sadTree64x8[1][8], U32 sadTree8x64[8][1])
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadTree64x64 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64 complete dim=0
#endif

	U4 x_8;
	U3 x_16;
	U2 x_32;

	sadTree64x64[0][0] = 0xFFFFFFFF;

	for (x_8 = 0; x_8 < 8; x_8++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		sadTree8x8[x_8][0] = 0xFFFF;
		sadTree8x8[x_8][1] = 0xFFFF;
		sadTree8x8[x_8][2] = 0xFFFF;
		sadTree8x8[x_8][3] = 0xFFFF;
		sadTree8x8[x_8][4] = 0xFFFF;
		sadTree8x8[x_8][5] = 0xFFFF;
		sadTree8x8[x_8][6] = 0xFFFF;
		sadTree8x8[x_8][7] = 0xFFFF;
	}

	for (x_8 = 0; x_8 < 8; x_8++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif	
		sadTree64x8[0][x_8] = 0xFFFFFFFF;

		sadTree8x64[x_8][0] = 0xFFFFFFFF;

		sadTree32x8[0][x_8] = 0xFFFF;
		sadTree32x8[1][x_8] = 0xFFFF;

		sadTree8x32[x_8][0] = 0xFFFF;
		sadTree8x32[x_8][1] = 0xFFFF;

		sadTree16x8[0][x_8] = 0xFFFF;
		sadTree16x8[1][x_8] = 0xFFFF;
		sadTree16x8[2][x_8] = 0xFFFF;
		sadTree16x8[3][x_8] = 0xFFFF;

		sadTree8x16[x_8][0] = 0xFFFF;
		sadTree8x16[x_8][1] = 0xFFFF;
		sadTree8x16[x_8][2] = 0xFFFF;
		sadTree8x16[x_8][3] = 0xFFFF;
	}

	for (x_16 = 0; x_16 < 4; x_16++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		sadTree16x16[x_16][0] = 0xFFFFFFFF;
		sadTree16x16[x_16][1] = 0xFFFFFFFF;
		sadTree16x16[x_16][2] = 0xFFFFFFFF;
		sadTree16x16[x_16][3] = 0xFFFFFFFF;
	}

	for (x_16 = 0; x_16 < 4; x_16++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif	
		sadTree32x16[0][x_16] = 0xFFFFFFFF;
		sadTree32x16[1][x_16] = 0xFFFFFFFF;

		sadTree16x32[x_16][0] = 0xFFFFFFFF;
		sadTree16x32[x_16][1] = 0xFFFFFFFF;

		sadTree64x16[0][x_16] = 0xFFFFFFFF;

		sadTree16x64[x_16][0] = 0xFFFFFFFF;
	}

	for (x_32 = 0; x_32 < 2; x_32++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		sadTree32x32[x_32][0] = 0xFFFFFFFF;
		sadTree32x32[x_32][1] = 0xFFFFFFFF;
	}

	for (x_32 = 0; x_32 < 2; x_32++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif	
		sadTree64x32[0][x_32] = 0xFFFFFFFF;

		sadTree32x64[x_32][0] = 0xFFFFFFFF;
	}

}

void compareBestInfo8(S14 mvx, S14 mvy, U32 lambda_mv, U2 num_refp, S2 refi,
	U16 sadTree8x8[8][8], U16 sadTree16x8[4][8], U16 sadTree8x16[8][4], U16 sadTree32x8[2][8], U16 sadTree8x32[8][2], U32 sadTree64x8[1][8], U32 sadTree8x64[8][1],
#if BW_DEBUG
	U10 sadTree8x8Cur_org[8][8],
#else
	pel sadTree8x8Cur_org[8][8], 
#endif
	U16 sadTree16x8Cur_org[4][8], U16 sadTree8x16Cur_org[8][4], U16 sadTree32x8Cur_org[2][8], U16 sadTree8x32Cur_org[8][2], U32 sadTree64x8Cur_org[1][8], U32 sadTree8x64Cur_org[8][1],

	//pel sadTree8x8Cur[8][8], U16 sadTree16x8Cur[4][8], U16 sadTree8x16Cur[8][4], U16 sadTree32x8Cur[2][8], U16 sadTree8x32Cur[8][2], U32 sadTree64x8Cur[1][8], U32 sadTree8x64Cur[8][1],
	S14 sadTree8x8Mv[8][8][2], S14 sadTree16x8Mv[4][8][2], S14 sadTree8x16Mv[8][4][2], S14 sadTree32x8Mv[2][8][2], S14 sadTree8x32Mv[8][2][2], S14 sadTree64x8Mv[1][8][2], S14 sadTree8x64Mv[8][1][2],
	S14 sadTree8x8PMv[8][8][2], S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2])
{
#if IME_PRAGMA_ON

#pragma HLS ARRAY_PARTITION variable=sadTree8x8Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64Cur_org complete dim=0
//================================================================================

#pragma HLS ARRAY_PARTITION variable=sadTree8x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64 complete dim=0

//#pragma HLS ARRAY_PARTITION variable=sadTree8x8Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x8Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x16Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x8Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x32Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x8Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x64Cur complete dim=0

#if LV0_MV_PMV_PARTTION_ON
#pragma HLS ARRAY_PARTITION variable=sadTree8x8Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64Mv complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree8x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64PMv complete dim=0
#endif	// #if LV0_MV_PMV_PARTTION_ON

#endif



#if VIVADO_HLS_IME
//	for (x_8 = 0; x_8 < 8; x_8++)
//	{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
	//U4 x_8;

		//================================================================================================================================================
		//x_8 = 0;
		/*8x8*/
		sadTree8x8Cur_org[0][0] += getMvRcost(lambda_mv, sadTree8x8PMv[0][0][0] - mvx, sadTree8x8PMv[0][0][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[0][0] < sadTree8x8[0][0])
		{
			sadTree8x8[0][0] = sadTree8x8Cur_org[0][0];
			sadTree8x8Mv[0][0][0] = mvx;
			sadTree8x8Mv[0][0][1] = mvy;
		}
		sadTree8x8Cur_org[1][0] += getMvRcost(lambda_mv, sadTree8x8PMv[0][1][0] - mvx, sadTree8x8PMv[0][1][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[1][0] < sadTree8x8[0][1])
		{
			sadTree8x8[0][1] = sadTree8x8Cur_org[1][0];
			sadTree8x8Mv[0][1][0] = mvx;
			sadTree8x8Mv[0][1][1] = mvy;
		}
		sadTree8x8Cur_org[2][0] += getMvRcost(lambda_mv, sadTree8x8PMv[0][2][0] - mvx, sadTree8x8PMv[0][2][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[2][0] < sadTree8x8[0][2])
		{
			sadTree8x8[0][2] = sadTree8x8Cur_org[2][0];
			sadTree8x8Mv[0][2][0] = mvx;
			sadTree8x8Mv[0][2][1] = mvy;
		}
		sadTree8x8Cur_org[3][0] += getMvRcost(lambda_mv, sadTree8x8PMv[0][3][0] - mvx, sadTree8x8PMv[0][3][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[3][0] < sadTree8x8[0][3])
		{
			sadTree8x8[0][3] = sadTree8x8Cur_org[3][0];
			sadTree8x8Mv[0][3][0] = mvx;
			sadTree8x8Mv[0][3][1] = mvy;
		}
		sadTree8x8Cur_org[4][0] += getMvRcost(lambda_mv, sadTree8x8PMv[0][4][0] - mvx, sadTree8x8PMv[0][4][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[4][0] < sadTree8x8[0][4])
		{
			sadTree8x8[0][4] = sadTree8x8Cur_org[4][0];
			sadTree8x8Mv[0][4][0] = mvx;
			sadTree8x8Mv[0][4][1] = mvy;
		}
		sadTree8x8Cur_org[5][0] += getMvRcost(lambda_mv, sadTree8x8PMv[0][5][0] - mvx, sadTree8x8PMv[0][5][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[5][0] < sadTree8x8[0][5])
		{
			sadTree8x8[0][5] = sadTree8x8Cur_org[5][0];
			sadTree8x8Mv[0][5][0] = mvx;
			sadTree8x8Mv[0][5][1] = mvy;
		}
		sadTree8x8Cur_org[6][0] += getMvRcost(lambda_mv, sadTree8x8PMv[0][6][0] - mvx, sadTree8x8PMv[0][6][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[6][0] < sadTree8x8[0][6])
		{
			sadTree8x8[0][6] = sadTree8x8Cur_org[6][0];
			sadTree8x8Mv[0][6][0] = mvx;
			sadTree8x8Mv[0][6][1] = mvy;
		}
		sadTree8x8Cur_org[7][0] += getMvRcost(lambda_mv, sadTree8x8PMv[0][7][0] - mvx, sadTree8x8PMv[0][7][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[7][0] < sadTree8x8[0][7])
		{
			sadTree8x8[0][7] = sadTree8x8Cur_org[7][0];
			sadTree8x8Mv[0][7][0] = mvx;
			sadTree8x8Mv[0][7][1] = mvy;
		}
		/*16x8*/
		sadTree8x16Cur_org[0][0] += getMvRcost(lambda_mv, sadTree16x8PMv[0][0][0] - mvx, sadTree16x8PMv[0][0][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[0][0] < sadTree16x8[0][0])
		{
			sadTree16x8[0][0] = sadTree8x16Cur_org[0][0];
			sadTree16x8Mv[0][0][0] = mvx;
			sadTree16x8Mv[0][0][1] = mvy;
		}
		sadTree8x16Cur_org[0][1] += getMvRcost(lambda_mv, sadTree16x8PMv[1][0][0] - mvx, sadTree16x8PMv[1][0][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[0][1] < sadTree16x8[1][0])
		{
			sadTree16x8[1][0] = sadTree8x16Cur_org[0][1];
			sadTree16x8Mv[1][0][0] = mvx;
			sadTree16x8Mv[1][0][1] = mvy;
		}
		sadTree8x16Cur_org[0][2] += getMvRcost(lambda_mv, sadTree16x8PMv[2][0][0] - mvx, sadTree16x8PMv[2][0][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[0][2] < sadTree16x8[2][0])
		{
			sadTree16x8[2][0] = sadTree8x16Cur_org[0][2];
			sadTree16x8Mv[2][0][0] = mvx;
			sadTree16x8Mv[2][0][1] = mvy;
		}
		sadTree8x16Cur_org[0][3] += getMvRcost(lambda_mv, sadTree16x8PMv[3][0][0] - mvx, sadTree16x8PMv[3][0][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[0][3] < sadTree16x8[3][0])
		{
			sadTree16x8[3][0] = sadTree8x16Cur_org[0][3];
			sadTree16x8Mv[3][0][0] = mvx;
			sadTree16x8Mv[3][0][1] = mvy;
		}

		/*8x16*/
		sadTree16x8Cur_org[0][0] += getMvRcost(lambda_mv, sadTree8x16PMv[0][0][0] - mvx, sadTree8x16PMv[0][0][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[0][0] < sadTree8x16[0][0])
		{
			sadTree8x16[0][0] = sadTree16x8Cur_org[0][0];
			sadTree8x16Mv[0][0][0] = mvx;
			sadTree8x16Mv[0][0][1] = mvy;
		}
		sadTree16x8Cur_org[1][0] += getMvRcost(lambda_mv, sadTree8x16PMv[0][1][0] - mvx, sadTree8x16PMv[0][1][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[1][0] < sadTree8x16[0][1])
		{
			sadTree8x16[0][1] = sadTree16x8Cur_org[1][0];
			sadTree8x16Mv[0][1][0] = mvx;
			sadTree8x16Mv[0][1][1] = mvy;
		}
		sadTree16x8Cur_org[2][0] += getMvRcost(lambda_mv, sadTree8x16PMv[0][2][0] - mvx, sadTree8x16PMv[0][2][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[2][0] < sadTree8x16[0][2])
		{
			sadTree8x16[0][2] = sadTree16x8Cur_org[2][0];
			sadTree8x16Mv[0][2][0] = mvx;
			sadTree8x16Mv[0][2][1] = mvy;
		}
		sadTree16x8Cur_org[3][0] += getMvRcost(lambda_mv, sadTree8x16PMv[0][3][0] - mvx, sadTree8x16PMv[0][3][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[3][0] < sadTree8x16[0][3])
		{
			sadTree8x16[0][3] = sadTree16x8Cur_org[3][0];
			sadTree8x16Mv[0][3][0] = mvx;
			sadTree8x16Mv[0][3][1] = mvy;
		}

		/*32x8*/
		sadTree8x32Cur_org[0][0] += getMvRcost(lambda_mv, sadTree32x8PMv[0][0][0] - mvx, sadTree32x8PMv[0][0][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[0][0] < sadTree32x8[0][0])
		{
			sadTree32x8[0][0] = sadTree8x32Cur_org[0][0];
			sadTree32x8Mv[0][0][0] = mvx;
			sadTree32x8Mv[0][0][1] = mvy;
		}
		sadTree8x32Cur_org[0][1] += getMvRcost(lambda_mv, sadTree32x8PMv[1][0][0] - mvx, sadTree32x8PMv[1][0][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[0][1] < sadTree32x8[1][0])
		{
			sadTree32x8[1][0] = sadTree8x32Cur_org[0][1];
			sadTree32x8Mv[1][0][0] = mvx;
			sadTree32x8Mv[1][0][1] = mvy;
		}

		/*8x32*/
		sadTree32x8Cur_org[0][0] += getMvRcost(lambda_mv, sadTree8x32PMv[0][0][0] - mvx, sadTree8x32PMv[0][0][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[0][0] < sadTree8x32[0][0])
		{
			sadTree8x32[0][0] = sadTree32x8Cur_org[0][0];
			sadTree8x32Mv[0][0][0] = mvx;
			sadTree8x32Mv[0][0][1] = mvy;
		}
		sadTree32x8Cur_org[1][0] += getMvRcost(lambda_mv, sadTree8x32PMv[0][1][0] - mvx, sadTree8x32PMv[0][1][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[1][0] < sadTree8x32[0][1])
		{
			sadTree8x32[0][1] = sadTree32x8Cur_org[1][0];
			sadTree8x32Mv[0][1][0] = mvx;
			sadTree8x32Mv[0][1][1] = mvy;
		}

		/*8x64*/
		sadTree64x8Cur_org[0][0] += getMvRcost(lambda_mv, sadTree8x64PMv[0][0][0] - mvx, sadTree8x64PMv[0][0][1] - mvy, num_refp, refi);
		if (sadTree64x8Cur_org[0][0] < sadTree8x64[0][0])
		{
			sadTree8x64[0][0] = sadTree64x8Cur_org[0][0];
			sadTree8x64Mv[0][0][0] = mvx;
			sadTree8x64Mv[0][0][1] = mvy;
		}

		/*64x8*/
		sadTree8x64Cur_org[0][0] += getMvRcost(lambda_mv, sadTree64x8PMv[0][0][0] - mvx, sadTree64x8PMv[0][0][1] - mvy, num_refp, refi);
		if (sadTree8x64Cur_org[0][0] < sadTree64x8[0][0])
		{
			sadTree64x8[0][0] = sadTree8x64Cur_org[0][0];
			sadTree64x8Mv[0][0][0] = mvx;
			sadTree64x8Mv[0][0][1] = mvy;
		}
		//================================================================================================================================================

		//================================================================================================================================================
		//x_8 = 1;
		/*8x8*/
		sadTree8x8Cur_org[0][1] += getMvRcost(lambda_mv, sadTree8x8PMv[1][0][0] - mvx, sadTree8x8PMv[1][0][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[0][1] < sadTree8x8[1][0])
		{
			sadTree8x8[1][0] = sadTree8x8Cur_org[0][1];
			sadTree8x8Mv[1][0][0] = mvx;
			sadTree8x8Mv[1][0][1] = mvy;
		}
		sadTree8x8Cur_org[1][1] += getMvRcost(lambda_mv, sadTree8x8PMv[1][1][0] - mvx, sadTree8x8PMv[1][1][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[1][1] < sadTree8x8[1][1])
		{
			sadTree8x8[1][1] = sadTree8x8Cur_org[1][1];
			sadTree8x8Mv[1][1][0] = mvx;
			sadTree8x8Mv[1][1][1] = mvy;
		}
		sadTree8x8Cur_org[2][1] += getMvRcost(lambda_mv, sadTree8x8PMv[1][2][0] - mvx, sadTree8x8PMv[1][2][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[2][1] < sadTree8x8[1][2])
		{
			sadTree8x8[1][2] = sadTree8x8Cur_org[2][1];
			sadTree8x8Mv[1][2][0] = mvx;
			sadTree8x8Mv[1][2][1] = mvy;
		}
		sadTree8x8Cur_org[3][1] += getMvRcost(lambda_mv, sadTree8x8PMv[1][3][0] - mvx, sadTree8x8PMv[1][3][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[3][1] < sadTree8x8[1][3])
		{
			sadTree8x8[1][3] = sadTree8x8Cur_org[3][1];
			sadTree8x8Mv[1][3][0] = mvx;
			sadTree8x8Mv[1][3][1] = mvy;
		}
		sadTree8x8Cur_org[4][1] += getMvRcost(lambda_mv, sadTree8x8PMv[1][4][0] - mvx, sadTree8x8PMv[1][4][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[4][1] < sadTree8x8[1][4])
		{
			sadTree8x8[1][4] = sadTree8x8Cur_org[4][1];
			sadTree8x8Mv[1][4][0] = mvx;
			sadTree8x8Mv[1][4][1] = mvy;
		}
		sadTree8x8Cur_org[5][1] += getMvRcost(lambda_mv, sadTree8x8PMv[1][5][0] - mvx, sadTree8x8PMv[1][5][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[5][1] < sadTree8x8[1][5])
		{
			sadTree8x8[1][5] = sadTree8x8Cur_org[5][1];
			sadTree8x8Mv[1][5][0] = mvx;
			sadTree8x8Mv[1][5][1] = mvy;
		}
		sadTree8x8Cur_org[6][1] += getMvRcost(lambda_mv, sadTree8x8PMv[1][6][0] - mvx, sadTree8x8PMv[1][6][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[6][1] < sadTree8x8[1][6])
		{
			sadTree8x8[1][6] = sadTree8x8Cur_org[6][1];
			sadTree8x8Mv[1][6][0] = mvx;
			sadTree8x8Mv[1][6][1] = mvy;
		}
		sadTree8x8Cur_org[7][1] += getMvRcost(lambda_mv, sadTree8x8PMv[1][7][0] - mvx, sadTree8x8PMv[1][7][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[7][1] < sadTree8x8[1][7])
		{
			sadTree8x8[1][7] = sadTree8x8Cur_org[7][1];
			sadTree8x8Mv[1][7][0] = mvx;
			sadTree8x8Mv[1][7][1] = mvy;
		}
		/*16x8*/
		sadTree8x16Cur_org[1][0] += getMvRcost(lambda_mv, sadTree16x8PMv[0][1][0] - mvx, sadTree16x8PMv[0][1][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[1][0] < sadTree16x8[0][1])
		{
			sadTree16x8[0][1] = sadTree8x16Cur_org[1][0];
			sadTree16x8Mv[0][1][0] = mvx;
			sadTree16x8Mv[0][1][1] = mvy;
		}
		sadTree8x16Cur_org[1][1] += getMvRcost(lambda_mv, sadTree16x8PMv[1][1][0] - mvx, sadTree16x8PMv[1][1][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[1][1] < sadTree16x8[1][1])
		{
			sadTree16x8[1][1] = sadTree8x16Cur_org[1][1];
			sadTree16x8Mv[1][1][0] = mvx;
			sadTree16x8Mv[1][1][1] = mvy;
		}
		sadTree8x16Cur_org[1][2] += getMvRcost(lambda_mv, sadTree16x8PMv[2][1][0] - mvx, sadTree16x8PMv[2][1][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[1][2] < sadTree16x8[2][1])
		{
			sadTree16x8[2][1] = sadTree8x16Cur_org[1][2];
			sadTree16x8Mv[2][1][0] = mvx;
			sadTree16x8Mv[2][1][1] = mvy;
		}
		sadTree8x16Cur_org[1][3] += getMvRcost(lambda_mv, sadTree16x8PMv[3][1][0] - mvx, sadTree16x8PMv[3][1][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[1][3] < sadTree16x8[3][1])
		{
			sadTree16x8[3][1] = sadTree8x16Cur_org[1][3];
			sadTree16x8Mv[3][1][0] = mvx;
			sadTree16x8Mv[3][1][1] = mvy;
		}

		/*8x16*/
		sadTree16x8Cur_org[0][1] += getMvRcost(lambda_mv, sadTree8x16PMv[1][0][0] - mvx, sadTree8x16PMv[1][0][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[0][1] < sadTree8x16[1][0])
		{
			sadTree8x16[1][0] = sadTree16x8Cur_org[0][1];
			sadTree8x16Mv[1][0][0] = mvx;
			sadTree8x16Mv[1][0][1] = mvy;
		}
		sadTree16x8Cur_org[1][1] += getMvRcost(lambda_mv, sadTree8x16PMv[1][1][0] - mvx, sadTree8x16PMv[1][1][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[1][1] < sadTree8x16[1][1])
		{
			sadTree8x16[1][1] = sadTree16x8Cur_org[1][1];
			sadTree8x16Mv[1][1][0] = mvx;
			sadTree8x16Mv[1][1][1] = mvy;
		}
		sadTree16x8Cur_org[2][1] += getMvRcost(lambda_mv, sadTree8x16PMv[1][2][0] - mvx, sadTree8x16PMv[1][2][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[2][1] < sadTree8x16[1][2])
		{
			sadTree8x16[1][2] = sadTree16x8Cur_org[2][1];
			sadTree8x16Mv[1][2][0] = mvx;
			sadTree8x16Mv[1][2][1] = mvy;
		}
		sadTree16x8Cur_org[3][1] += getMvRcost(lambda_mv, sadTree8x16PMv[1][3][0] - mvx, sadTree8x16PMv[1][3][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[3][1] < sadTree8x16[1][3])
		{
			sadTree8x16[1][3] = sadTree16x8Cur_org[3][1];
			sadTree8x16Mv[1][3][0] = mvx;
			sadTree8x16Mv[1][3][1] = mvy;
		}

		/*32x8*/
		sadTree8x32Cur_org[1][0] += getMvRcost(lambda_mv, sadTree32x8PMv[0][1][0] - mvx, sadTree32x8PMv[0][1][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[1][0] < sadTree32x8[0][1])
		{
			sadTree32x8[0][1] = sadTree8x32Cur_org[1][0];
			sadTree32x8Mv[0][1][0] = mvx;
			sadTree32x8Mv[0][1][1] = mvy;
		}
		sadTree8x32Cur_org[1][1] += getMvRcost(lambda_mv, sadTree32x8PMv[1][1][0] - mvx, sadTree32x8PMv[1][1][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[1][1] < sadTree32x8[1][1])
		{
			sadTree32x8[1][1] = sadTree8x32Cur_org[1][1];
			sadTree32x8Mv[1][1][0] = mvx;
			sadTree32x8Mv[1][1][1] = mvy;
		}

		/*8x32*/
		sadTree32x8Cur_org[0][1] += getMvRcost(lambda_mv, sadTree8x32PMv[1][0][0] - mvx, sadTree8x32PMv[1][0][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[0][1] < sadTree8x32[1][0])
		{
			sadTree8x32[1][0] = sadTree32x8Cur_org[0][1];
			sadTree8x32Mv[1][0][0] = mvx;
			sadTree8x32Mv[1][0][1] = mvy;
		}
		sadTree32x8Cur_org[1][1] += getMvRcost(lambda_mv, sadTree8x32PMv[1][1][0] - mvx, sadTree8x32PMv[1][1][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[1][1] < sadTree8x32[1][1])
		{
			sadTree8x32[1][1] = sadTree32x8Cur_org[1][1];
			sadTree8x32Mv[1][1][0] = mvx;
			sadTree8x32Mv[1][1][1] = mvy;
		}

		/*8x64*/
		sadTree64x8Cur_org[0][1] += getMvRcost(lambda_mv, sadTree8x64PMv[1][0][0] - mvx, sadTree8x64PMv[1][0][1] - mvy, num_refp, refi);
		if (sadTree64x8Cur_org[0][1] < sadTree8x64[1][0])
		{
			sadTree8x64[1][0] = sadTree64x8Cur_org[0][1];
			sadTree8x64Mv[1][0][0] = mvx;
			sadTree8x64Mv[1][0][1] = mvy;
		}

		/*64x8*/
		sadTree8x64Cur_org[1][0] += getMvRcost(lambda_mv, sadTree64x8PMv[0][1][0] - mvx, sadTree64x8PMv[0][1][1] - mvy, num_refp, refi);
		if (sadTree8x64Cur_org[1][0] < sadTree64x8[0][1])
		{
			sadTree64x8[0][1] = sadTree8x64Cur_org[1][0];
			sadTree64x8Mv[0][1][0] = mvx;
			sadTree64x8Mv[0][1][1] = mvy;
		}
		//================================================================================================================================================

		//================================================================================================================================================
		//x_8 = 2;
		/*8x8*/
		sadTree8x8Cur_org[0][2] += getMvRcost(lambda_mv, sadTree8x8PMv[2][0][0] - mvx, sadTree8x8PMv[2][0][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[0][2] < sadTree8x8[2][0])
		{
			sadTree8x8[2][0] = sadTree8x8Cur_org[0][2];
			sadTree8x8Mv[2][0][0] = mvx;
			sadTree8x8Mv[2][0][1] = mvy;
		}
		sadTree8x8Cur_org[1][2] += getMvRcost(lambda_mv, sadTree8x8PMv[2][1][0] - mvx, sadTree8x8PMv[2][1][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[1][2] < sadTree8x8[2][1])
		{
			sadTree8x8[2][1] = sadTree8x8Cur_org[1][2];
			sadTree8x8Mv[2][1][0] = mvx;
			sadTree8x8Mv[2][1][1] = mvy;
		}
		sadTree8x8Cur_org[2][2] += getMvRcost(lambda_mv, sadTree8x8PMv[2][2][0] - mvx, sadTree8x8PMv[2][2][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[2][2] < sadTree8x8[2][2])
		{
			sadTree8x8[2][2] = sadTree8x8Cur_org[2][2];
			sadTree8x8Mv[2][2][0] = mvx;
			sadTree8x8Mv[2][2][1] = mvy;
		}
		sadTree8x8Cur_org[3][2] += getMvRcost(lambda_mv, sadTree8x8PMv[2][3][0] - mvx, sadTree8x8PMv[2][3][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[3][2] < sadTree8x8[2][3])
		{
			sadTree8x8[2][3] = sadTree8x8Cur_org[3][2];
			sadTree8x8Mv[2][3][0] = mvx;
			sadTree8x8Mv[2][3][1] = mvy;
		}
		sadTree8x8Cur_org[4][2] += getMvRcost(lambda_mv, sadTree8x8PMv[2][4][0] - mvx, sadTree8x8PMv[2][4][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[4][2] < sadTree8x8[2][4])
		{
			sadTree8x8[2][4] = sadTree8x8Cur_org[4][2];
			sadTree8x8Mv[2][4][0] = mvx;
			sadTree8x8Mv[2][4][1] = mvy;
		}
		sadTree8x8Cur_org[5][2] += getMvRcost(lambda_mv, sadTree8x8PMv[2][5][0] - mvx, sadTree8x8PMv[2][5][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[5][2] < sadTree8x8[2][5])
		{
			sadTree8x8[2][5] = sadTree8x8Cur_org[5][2];
			sadTree8x8Mv[2][5][0] = mvx;
			sadTree8x8Mv[2][5][1] = mvy;
		}
		sadTree8x8Cur_org[6][2] += getMvRcost(lambda_mv, sadTree8x8PMv[2][6][0] - mvx, sadTree8x8PMv[2][6][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[6][2] < sadTree8x8[2][6])
		{
			sadTree8x8[2][6] = sadTree8x8Cur_org[6][2];
			sadTree8x8Mv[2][6][0] = mvx;
			sadTree8x8Mv[2][6][1] = mvy;
		}
		sadTree8x8Cur_org[7][2] += getMvRcost(lambda_mv, sadTree8x8PMv[2][7][0] - mvx, sadTree8x8PMv[2][7][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[7][2] < sadTree8x8[2][7])
		{
			sadTree8x8[2][7] = sadTree8x8Cur_org[7][2];
			sadTree8x8Mv[2][7][0] = mvx;
			sadTree8x8Mv[2][7][1] = mvy;
		}
		/*16x8*/
		sadTree8x16Cur_org[2][0] += getMvRcost(lambda_mv, sadTree16x8PMv[0][2][0] - mvx, sadTree16x8PMv[0][2][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[2][0] < sadTree16x8[0][2])
		{
			sadTree16x8[0][2] = sadTree8x16Cur_org[2][0];
			sadTree16x8Mv[0][2][0] = mvx;
			sadTree16x8Mv[0][2][1] = mvy;
		}
		sadTree8x16Cur_org[2][1] += getMvRcost(lambda_mv, sadTree16x8PMv[1][2][0] - mvx, sadTree16x8PMv[1][2][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[2][1] < sadTree16x8[1][2])
		{
			sadTree16x8[1][2] = sadTree8x16Cur_org[2][1];
			sadTree16x8Mv[1][2][0] = mvx;
			sadTree16x8Mv[1][2][1] = mvy;
		}
		sadTree8x16Cur_org[2][2] += getMvRcost(lambda_mv, sadTree16x8PMv[2][2][0] - mvx, sadTree16x8PMv[2][2][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[2][2] < sadTree16x8[2][2])
		{
			sadTree16x8[2][2] = sadTree8x16Cur_org[2][2];
			sadTree16x8Mv[2][2][0] = mvx;
			sadTree16x8Mv[2][2][1] = mvy;
		}
		sadTree8x16Cur_org[2][3] += getMvRcost(lambda_mv, sadTree16x8PMv[3][2][0] - mvx, sadTree16x8PMv[3][2][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[2][3] < sadTree16x8[3][2])
		{
			sadTree16x8[3][2] = sadTree8x16Cur_org[2][3];
			sadTree16x8Mv[3][2][0] = mvx;
			sadTree16x8Mv[3][2][1] = mvy;
		}

		/*8x16*/
		sadTree16x8Cur_org[0][2] += getMvRcost(lambda_mv, sadTree8x16PMv[2][0][0] - mvx, sadTree8x16PMv[2][0][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[0][2] < sadTree8x16[2][0])
		{
			sadTree8x16[2][0] = sadTree16x8Cur_org[0][2];
			sadTree8x16Mv[2][0][0] = mvx;
			sadTree8x16Mv[2][0][1] = mvy;
		}
		sadTree16x8Cur_org[1][2] += getMvRcost(lambda_mv, sadTree8x16PMv[2][1][0] - mvx, sadTree8x16PMv[2][1][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[1][2] < sadTree8x16[2][1])
		{
			sadTree8x16[2][1] = sadTree16x8Cur_org[1][2];
			sadTree8x16Mv[2][1][0] = mvx;
			sadTree8x16Mv[2][1][1] = mvy;
		}
		sadTree16x8Cur_org[2][2] += getMvRcost(lambda_mv, sadTree8x16PMv[2][2][0] - mvx, sadTree8x16PMv[2][2][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[2][2] < sadTree8x16[2][2])
		{
			sadTree8x16[2][2] = sadTree16x8Cur_org[2][2];
			sadTree8x16Mv[2][2][0] = mvx;
			sadTree8x16Mv[2][2][1] = mvy;
		}
		sadTree16x8Cur_org[3][2] += getMvRcost(lambda_mv, sadTree8x16PMv[2][3][0] - mvx, sadTree8x16PMv[2][3][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[3][2] < sadTree8x16[2][3])
		{
			sadTree8x16[2][3] = sadTree16x8Cur_org[3][2];
			sadTree8x16Mv[2][3][0] = mvx;
			sadTree8x16Mv[2][3][1] = mvy;
		}

		/*32x8*/
		sadTree8x32Cur_org[2][0] += getMvRcost(lambda_mv, sadTree32x8PMv[0][2][0] - mvx, sadTree32x8PMv[0][2][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[2][0] < sadTree32x8[0][2])
		{
			sadTree32x8[0][2] = sadTree8x32Cur_org[2][0];
			sadTree32x8Mv[0][2][0] = mvx;
			sadTree32x8Mv[0][2][1] = mvy;
		}
		sadTree8x32Cur_org[2][1] += getMvRcost(lambda_mv, sadTree32x8PMv[1][2][0] - mvx, sadTree32x8PMv[1][2][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[2][1] < sadTree32x8[1][2])
		{
			sadTree32x8[1][2] = sadTree8x32Cur_org[2][1];
			sadTree32x8Mv[1][2][0] = mvx;
			sadTree32x8Mv[1][2][1] = mvy;
		}

		/*8x32*/
		sadTree32x8Cur_org[0][2] += getMvRcost(lambda_mv, sadTree8x32PMv[2][0][0] - mvx, sadTree8x32PMv[2][0][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[0][2] < sadTree8x32[2][0])
		{
			sadTree8x32[2][0] = sadTree32x8Cur_org[0][2];
			sadTree8x32Mv[2][0][0] = mvx;
			sadTree8x32Mv[2][0][1] = mvy;
		}
		sadTree32x8Cur_org[1][2] += getMvRcost(lambda_mv, sadTree8x32PMv[2][1][0] - mvx, sadTree8x32PMv[2][1][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[1][2] < sadTree8x32[2][1])
		{
			sadTree8x32[2][1] = sadTree32x8Cur_org[1][2];
			sadTree8x32Mv[2][1][0] = mvx;
			sadTree8x32Mv[2][1][1] = mvy;
		}

		/*8x64*/
		sadTree64x8Cur_org[0][2] += getMvRcost(lambda_mv, sadTree8x64PMv[2][0][0] - mvx, sadTree8x64PMv[2][0][1] - mvy, num_refp, refi);
		if (sadTree64x8Cur_org[0][2] < sadTree8x64[2][0])
		{
			sadTree8x64[2][0] = sadTree64x8Cur_org[0][2];
			sadTree8x64Mv[2][0][0] = mvx;
			sadTree8x64Mv[2][0][1] = mvy;
		}

		/*64x8*/
		sadTree8x64Cur_org[2][0] += getMvRcost(lambda_mv, sadTree64x8PMv[0][2][0] - mvx, sadTree64x8PMv[0][2][1] - mvy, num_refp, refi);
		if (sadTree8x64Cur_org[2][0] < sadTree64x8[0][2])
		{
			sadTree64x8[0][2] = sadTree8x64Cur_org[2][0];
			sadTree64x8Mv[0][2][0] = mvx;
			sadTree64x8Mv[0][2][1] = mvy;
		}
		//================================================================================================================================================

		//================================================================================================================================================
		//x_8 = 3;
		/*8x8*/
		sadTree8x8Cur_org[0][3] += getMvRcost(lambda_mv, sadTree8x8PMv[3][0][0] - mvx, sadTree8x8PMv[3][0][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[0][3] < sadTree8x8[3][0])
		{
			sadTree8x8[3][0] = sadTree8x8Cur_org[0][3];
			sadTree8x8Mv[3][0][0] = mvx;
			sadTree8x8Mv[3][0][1] = mvy;
		}
		sadTree8x8Cur_org[1][3] += getMvRcost(lambda_mv, sadTree8x8PMv[3][1][0] - mvx, sadTree8x8PMv[3][1][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[1][3] < sadTree8x8[3][1])
		{
			sadTree8x8[3][1] = sadTree8x8Cur_org[1][3];
			sadTree8x8Mv[3][1][0] = mvx;
			sadTree8x8Mv[3][1][1] = mvy;
		}
		sadTree8x8Cur_org[2][3] += getMvRcost(lambda_mv, sadTree8x8PMv[3][2][0] - mvx, sadTree8x8PMv[3][2][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[2][3] < sadTree8x8[3][2])
		{
			sadTree8x8[3][2] = sadTree8x8Cur_org[2][3];
			sadTree8x8Mv[3][2][0] = mvx;
			sadTree8x8Mv[3][2][1] = mvy;
		}
		sadTree8x8Cur_org[3][3] += getMvRcost(lambda_mv, sadTree8x8PMv[3][3][0] - mvx, sadTree8x8PMv[3][3][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[3][3] < sadTree8x8[3][3])
		{
			sadTree8x8[3][3] = sadTree8x8Cur_org[3][3];
			sadTree8x8Mv[3][3][0] = mvx;
			sadTree8x8Mv[3][3][1] = mvy;
		}
		sadTree8x8Cur_org[4][3] += getMvRcost(lambda_mv, sadTree8x8PMv[3][4][0] - mvx, sadTree8x8PMv[3][4][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[4][3] < sadTree8x8[3][4])
		{
			sadTree8x8[3][4] = sadTree8x8Cur_org[4][3];
			sadTree8x8Mv[3][4][0] = mvx;
			sadTree8x8Mv[3][4][1] = mvy;
		}
		sadTree8x8Cur_org[5][3] += getMvRcost(lambda_mv, sadTree8x8PMv[3][5][0] - mvx, sadTree8x8PMv[3][5][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[5][3] < sadTree8x8[3][5])
		{
			sadTree8x8[3][5] = sadTree8x8Cur_org[5][3];
			sadTree8x8Mv[3][5][0] = mvx;
			sadTree8x8Mv[3][5][1] = mvy;
		}
		sadTree8x8Cur_org[6][3] += getMvRcost(lambda_mv, sadTree8x8PMv[3][6][0] - mvx, sadTree8x8PMv[3][6][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[6][3] < sadTree8x8[3][6])
		{
			sadTree8x8[3][6] = sadTree8x8Cur_org[6][3];
			sadTree8x8Mv[3][6][0] = mvx;
			sadTree8x8Mv[3][6][1] = mvy;
		}
		sadTree8x8Cur_org[7][3] += getMvRcost(lambda_mv, sadTree8x8PMv[3][7][0] - mvx, sadTree8x8PMv[3][7][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[7][3] < sadTree8x8[3][7])
		{
			sadTree8x8[3][7] = sadTree8x8Cur_org[7][3];
			sadTree8x8Mv[3][7][0] = mvx;
			sadTree8x8Mv[3][7][1] = mvy;
		}
		/*16x8*/
		sadTree8x16Cur_org[3][0] += getMvRcost(lambda_mv, sadTree16x8PMv[0][3][0] - mvx, sadTree16x8PMv[0][3][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[3][0] < sadTree16x8[0][3])
		{
			sadTree16x8[0][3] = sadTree8x16Cur_org[3][0];
			sadTree16x8Mv[0][3][0] = mvx;
			sadTree16x8Mv[0][3][1] = mvy;
		}
		sadTree8x16Cur_org[3][1] += getMvRcost(lambda_mv, sadTree16x8PMv[1][3][0] - mvx, sadTree16x8PMv[1][3][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[3][1] < sadTree16x8[1][3])
		{
			sadTree16x8[1][3] = sadTree8x16Cur_org[3][1];
			sadTree16x8Mv[1][3][0] = mvx;
			sadTree16x8Mv[1][3][1] = mvy;
		}
		sadTree8x16Cur_org[3][2] += getMvRcost(lambda_mv, sadTree16x8PMv[2][3][0] - mvx, sadTree16x8PMv[2][3][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[3][2] < sadTree16x8[2][3])
		{
			sadTree16x8[2][3] = sadTree8x16Cur_org[3][2];
			sadTree16x8Mv[2][3][0] = mvx;
			sadTree16x8Mv[2][3][1] = mvy;
		}
		sadTree8x16Cur_org[3][3] += getMvRcost(lambda_mv, sadTree16x8PMv[3][3][0] - mvx, sadTree16x8PMv[3][3][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[3][3] < sadTree16x8[3][3])
		{
			sadTree16x8[3][3] = sadTree8x16Cur_org[3][3];
			sadTree16x8Mv[3][3][0] = mvx;
			sadTree16x8Mv[3][3][1] = mvy;
		}

		/*8x16*/
		sadTree16x8Cur_org[0][3] += getMvRcost(lambda_mv, sadTree8x16PMv[3][0][0] - mvx, sadTree8x16PMv[3][0][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[0][3] < sadTree8x16[3][0])
		{
			sadTree8x16[3][0] = sadTree16x8Cur_org[0][3];
			sadTree8x16Mv[3][0][0] = mvx;
			sadTree8x16Mv[3][0][1] = mvy;
		}
		sadTree16x8Cur_org[1][3] += getMvRcost(lambda_mv, sadTree8x16PMv[3][1][0] - mvx, sadTree8x16PMv[3][1][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[1][3] < sadTree8x16[3][1])
		{
			sadTree8x16[3][1] = sadTree16x8Cur_org[1][3];
			sadTree8x16Mv[3][1][0] = mvx;
			sadTree8x16Mv[3][1][1] = mvy;
		}
		sadTree16x8Cur_org[2][3] += getMvRcost(lambda_mv, sadTree8x16PMv[3][2][0] - mvx, sadTree8x16PMv[3][2][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[2][3] < sadTree8x16[3][2])
		{
			sadTree8x16[3][2] = sadTree16x8Cur_org[2][3];
			sadTree8x16Mv[3][2][0] = mvx;
			sadTree8x16Mv[3][2][1] = mvy;
		}
		sadTree16x8Cur_org[3][3] += getMvRcost(lambda_mv, sadTree8x16PMv[3][3][0] - mvx, sadTree8x16PMv[3][3][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[3][3] < sadTree8x16[3][3])
		{
			sadTree8x16[3][3] = sadTree16x8Cur_org[3][3];
			sadTree8x16Mv[3][3][0] = mvx;
			sadTree8x16Mv[3][3][1] = mvy;
		}

		/*32x8*/
		sadTree8x32Cur_org[3][0] += getMvRcost(lambda_mv, sadTree32x8PMv[0][3][0] - mvx, sadTree32x8PMv[0][3][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[3][0] < sadTree32x8[0][3])
		{
			sadTree32x8[0][3] = sadTree8x32Cur_org[3][0];
			sadTree32x8Mv[0][3][0] = mvx;
			sadTree32x8Mv[0][3][1] = mvy;
		}
		sadTree8x32Cur_org[3][1] += getMvRcost(lambda_mv, sadTree32x8PMv[1][3][0] - mvx, sadTree32x8PMv[1][3][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[3][1] < sadTree32x8[1][3])
		{
			sadTree32x8[1][3] = sadTree8x32Cur_org[3][1];
			sadTree32x8Mv[1][3][0] = mvx;
			sadTree32x8Mv[1][3][1] = mvy;
		}

		/*8x32*/
		sadTree32x8Cur_org[0][3] += getMvRcost(lambda_mv, sadTree8x32PMv[3][0][0] - mvx, sadTree8x32PMv[3][0][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[0][3] < sadTree8x32[3][0])
		{
			sadTree8x32[3][0] = sadTree32x8Cur_org[0][3];
			sadTree8x32Mv[3][0][0] = mvx;
			sadTree8x32Mv[3][0][1] = mvy;
		}
		sadTree32x8Cur_org[1][3] += getMvRcost(lambda_mv, sadTree8x32PMv[3][1][0] - mvx, sadTree8x32PMv[3][1][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[1][3] < sadTree8x32[3][1])
		{
			sadTree8x32[3][1] = sadTree32x8Cur_org[1][3];
			sadTree8x32Mv[3][1][0] = mvx;
			sadTree8x32Mv[3][1][1] = mvy;
		}

		/*8x64*/
		sadTree64x8Cur_org[0][3] += getMvRcost(lambda_mv, sadTree8x64PMv[3][0][0] - mvx, sadTree8x64PMv[3][0][1] - mvy, num_refp, refi);
		if (sadTree64x8Cur_org[0][3] < sadTree8x64[3][0])
		{
			sadTree8x64[3][0] = sadTree64x8Cur_org[0][3];
			sadTree8x64Mv[3][0][0] = mvx;
			sadTree8x64Mv[3][0][1] = mvy;
		}

		/*64x8*/
		sadTree8x64Cur_org[3][0] += getMvRcost(lambda_mv, sadTree64x8PMv[0][3][0] - mvx, sadTree64x8PMv[0][3][1] - mvy, num_refp, refi);
		if (sadTree8x64Cur_org[3][0] < sadTree64x8[0][3])
		{
			sadTree64x8[0][3] = sadTree8x64Cur_org[3][0];
			sadTree64x8Mv[0][3][0] = mvx;
			sadTree64x8Mv[0][3][1] = mvy;
		}
		//================================================================================================================================================

		//================================================================================================================================================
		//x_8 = 4;
		/*8x8*/
		sadTree8x8Cur_org[0][4] += getMvRcost(lambda_mv, sadTree8x8PMv[4][0][0] - mvx, sadTree8x8PMv[4][0][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[0][4] < sadTree8x8[4][0])
		{
			sadTree8x8[4][0] = sadTree8x8Cur_org[0][4];
			sadTree8x8Mv[4][0][0] = mvx;
			sadTree8x8Mv[4][0][1] = mvy;
		}
		sadTree8x8Cur_org[1][4] += getMvRcost(lambda_mv, sadTree8x8PMv[4][1][0] - mvx, sadTree8x8PMv[4][1][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[1][4] < sadTree8x8[4][1])
		{
			sadTree8x8[4][1] = sadTree8x8Cur_org[1][4];
			sadTree8x8Mv[4][1][0] = mvx;
			sadTree8x8Mv[4][1][1] = mvy;
		}
		sadTree8x8Cur_org[2][4] += getMvRcost(lambda_mv, sadTree8x8PMv[4][2][0] - mvx, sadTree8x8PMv[4][2][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[2][4] < sadTree8x8[4][2])
		{
			sadTree8x8[4][2] = sadTree8x8Cur_org[2][4];
			sadTree8x8Mv[4][2][0] = mvx;
			sadTree8x8Mv[4][2][1] = mvy;
		}
		sadTree8x8Cur_org[3][4] += getMvRcost(lambda_mv, sadTree8x8PMv[4][3][0] - mvx, sadTree8x8PMv[4][3][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[3][4] < sadTree8x8[4][3])
		{
			sadTree8x8[4][3] = sadTree8x8Cur_org[3][4];
			sadTree8x8Mv[4][3][0] = mvx;
			sadTree8x8Mv[4][3][1] = mvy;
		}
		sadTree8x8Cur_org[4][4] += getMvRcost(lambda_mv, sadTree8x8PMv[4][4][0] - mvx, sadTree8x8PMv[4][4][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[4][4] < sadTree8x8[4][4])
		{
			sadTree8x8[4][4] = sadTree8x8Cur_org[4][4];
			sadTree8x8Mv[4][4][0] = mvx;
			sadTree8x8Mv[4][4][1] = mvy;
		}
		sadTree8x8Cur_org[5][4] += getMvRcost(lambda_mv, sadTree8x8PMv[4][5][0] - mvx, sadTree8x8PMv[4][5][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[5][4] < sadTree8x8[4][5])
		{
			sadTree8x8[4][5] = sadTree8x8Cur_org[5][4];
			sadTree8x8Mv[4][5][0] = mvx;
			sadTree8x8Mv[4][5][1] = mvy;
		}
		sadTree8x8Cur_org[6][4] += getMvRcost(lambda_mv, sadTree8x8PMv[4][6][0] - mvx, sadTree8x8PMv[4][6][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[6][4] < sadTree8x8[4][6])
		{
			sadTree8x8[4][6] = sadTree8x8Cur_org[6][4];
			sadTree8x8Mv[4][6][0] = mvx;
			sadTree8x8Mv[4][6][1] = mvy;
		}
		sadTree8x8Cur_org[7][4] += getMvRcost(lambda_mv, sadTree8x8PMv[4][7][0] - mvx, sadTree8x8PMv[4][7][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[7][4] < sadTree8x8[4][7])
		{
			sadTree8x8[4][7] = sadTree8x8Cur_org[7][4];
			sadTree8x8Mv[4][7][0] = mvx;
			sadTree8x8Mv[4][7][1] = mvy;
		}
		/*16x8*/
		sadTree8x16Cur_org[4][0] += getMvRcost(lambda_mv, sadTree16x8PMv[0][4][0] - mvx, sadTree16x8PMv[0][4][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[4][0] < sadTree16x8[0][4])
		{
			sadTree16x8[0][4] = sadTree8x16Cur_org[4][0];
			sadTree16x8Mv[0][4][0] = mvx;
			sadTree16x8Mv[0][4][1] = mvy;
		}
		sadTree8x16Cur_org[4][1] += getMvRcost(lambda_mv, sadTree16x8PMv[1][4][0] - mvx, sadTree16x8PMv[1][4][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[4][1] < sadTree16x8[1][4])
		{
			sadTree16x8[1][4] = sadTree8x16Cur_org[4][1];
			sadTree16x8Mv[1][4][0] = mvx;
			sadTree16x8Mv[1][4][1] = mvy;
		}
		sadTree8x16Cur_org[4][2] += getMvRcost(lambda_mv, sadTree16x8PMv[2][4][0] - mvx, sadTree16x8PMv[2][4][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[4][2] < sadTree16x8[2][4])
		{
			sadTree16x8[2][4] = sadTree8x16Cur_org[4][2];
			sadTree16x8Mv[2][4][0] = mvx;
			sadTree16x8Mv[2][4][1] = mvy;
		}
		sadTree8x16Cur_org[4][3] += getMvRcost(lambda_mv, sadTree16x8PMv[3][4][0] - mvx, sadTree16x8PMv[3][4][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[4][3] < sadTree16x8[3][4])
		{
			sadTree16x8[3][4] = sadTree8x16Cur_org[4][3];
			sadTree16x8Mv[3][4][0] = mvx;
			sadTree16x8Mv[3][4][1] = mvy;
		}

		/*8x16*/
		sadTree16x8Cur_org[0][4] += getMvRcost(lambda_mv, sadTree8x16PMv[4][0][0] - mvx, sadTree8x16PMv[4][0][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[0][4] < sadTree8x16[4][0])
		{
			sadTree8x16[4][0] = sadTree16x8Cur_org[0][4];
			sadTree8x16Mv[4][0][0] = mvx;
			sadTree8x16Mv[4][0][1] = mvy;
		}
		sadTree16x8Cur_org[1][4] += getMvRcost(lambda_mv, sadTree8x16PMv[4][1][0] - mvx, sadTree8x16PMv[4][1][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[1][4] < sadTree8x16[4][1])
		{
			sadTree8x16[4][1] = sadTree16x8Cur_org[1][4];
			sadTree8x16Mv[4][1][0] = mvx;
			sadTree8x16Mv[4][1][1] = mvy;
		}
		sadTree16x8Cur_org[2][4] += getMvRcost(lambda_mv, sadTree8x16PMv[4][2][0] - mvx, sadTree8x16PMv[4][2][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[2][4] < sadTree8x16[4][2])
		{
			sadTree8x16[4][2] = sadTree16x8Cur_org[2][4];
			sadTree8x16Mv[4][2][0] = mvx;
			sadTree8x16Mv[4][2][1] = mvy;
		}
		sadTree16x8Cur_org[3][4] += getMvRcost(lambda_mv, sadTree8x16PMv[4][3][0] - mvx, sadTree8x16PMv[4][3][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[3][4] < sadTree8x16[4][3])
		{
			sadTree8x16[4][3] = sadTree16x8Cur_org[3][4];
			sadTree8x16Mv[4][3][0] = mvx;
			sadTree8x16Mv[4][3][1] = mvy;
		}

		/*32x8*/
		sadTree8x32Cur_org[4][0] += getMvRcost(lambda_mv, sadTree32x8PMv[0][4][0] - mvx, sadTree32x8PMv[0][4][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[4][0] < sadTree32x8[0][4])
		{
			sadTree32x8[0][4] = sadTree8x32Cur_org[4][0];
			sadTree32x8Mv[0][4][0] = mvx;
			sadTree32x8Mv[0][4][1] = mvy;
		}
		sadTree8x32Cur_org[4][1] += getMvRcost(lambda_mv, sadTree32x8PMv[1][4][0] - mvx, sadTree32x8PMv[1][4][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[4][1] < sadTree32x8[1][4])
		{
			sadTree32x8[1][4] = sadTree8x32Cur_org[4][1];
			sadTree32x8Mv[1][4][0] = mvx;
			sadTree32x8Mv[1][4][1] = mvy;
		}

		/*8x32*/
		sadTree32x8Cur_org[0][4] += getMvRcost(lambda_mv, sadTree8x32PMv[4][0][0] - mvx, sadTree8x32PMv[4][0][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[0][4] < sadTree8x32[4][0])
		{
			sadTree8x32[4][0] = sadTree32x8Cur_org[0][4];
			sadTree8x32Mv[4][0][0] = mvx;
			sadTree8x32Mv[4][0][1] = mvy;
		}
		sadTree32x8Cur_org[1][4] += getMvRcost(lambda_mv, sadTree8x32PMv[4][1][0] - mvx, sadTree8x32PMv[4][1][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[1][4] < sadTree8x32[4][1])
		{
			sadTree8x32[4][1] = sadTree32x8Cur_org[1][4];
			sadTree8x32Mv[4][1][0] = mvx;
			sadTree8x32Mv[4][1][1] = mvy;
		}

		/*8x64*/
		sadTree64x8Cur_org[0][4] += getMvRcost(lambda_mv, sadTree8x64PMv[4][0][0] - mvx, sadTree8x64PMv[4][0][1] - mvy, num_refp, refi);
		if (sadTree64x8Cur_org[0][4] < sadTree8x64[4][0])
		{
			sadTree8x64[4][0] = sadTree64x8Cur_org[0][4];
			sadTree8x64Mv[4][0][0] = mvx;
			sadTree8x64Mv[4][0][1] = mvy;
		}

		/*64x8*/
		sadTree8x64Cur_org[4][0] += getMvRcost(lambda_mv, sadTree64x8PMv[0][4][0] - mvx, sadTree64x8PMv[0][4][1] - mvy, num_refp, refi);
		if (sadTree8x64Cur_org[4][0] < sadTree64x8[0][4])
		{
			sadTree64x8[0][4] = sadTree8x64Cur_org[4][0];
			sadTree64x8Mv[0][4][0] = mvx;
			sadTree64x8Mv[0][4][1] = mvy;
		}
		//================================================================================================================================================

		//================================================================================================================================================
		//x_8 = 5;
		/*8x8*/
		sadTree8x8Cur_org[0][5] += getMvRcost(lambda_mv, sadTree8x8PMv[5][0][0] - mvx, sadTree8x8PMv[5][0][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[0][5] < sadTree8x8[5][0])
		{
			sadTree8x8[5][0] = sadTree8x8Cur_org[0][5];
			sadTree8x8Mv[5][0][0] = mvx;
			sadTree8x8Mv[5][0][1] = mvy;
		}
		sadTree8x8Cur_org[1][5] += getMvRcost(lambda_mv, sadTree8x8PMv[5][1][0] - mvx, sadTree8x8PMv[5][1][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[1][5] < sadTree8x8[5][1])
		{
			sadTree8x8[5][1] = sadTree8x8Cur_org[1][5];
			sadTree8x8Mv[5][1][0] = mvx;
			sadTree8x8Mv[5][1][1] = mvy;
		}
		sadTree8x8Cur_org[2][5] += getMvRcost(lambda_mv, sadTree8x8PMv[5][2][0] - mvx, sadTree8x8PMv[5][2][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[2][5] < sadTree8x8[5][2])
		{
			sadTree8x8[5][2] = sadTree8x8Cur_org[2][5];
			sadTree8x8Mv[5][2][0] = mvx;
			sadTree8x8Mv[5][2][1] = mvy;
		}
		sadTree8x8Cur_org[3][5] += getMvRcost(lambda_mv, sadTree8x8PMv[5][3][0] - mvx, sadTree8x8PMv[5][3][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[3][5] < sadTree8x8[5][3])
		{
			sadTree8x8[5][3] = sadTree8x8Cur_org[3][5];
			sadTree8x8Mv[5][3][0] = mvx;
			sadTree8x8Mv[5][3][1] = mvy;
		}
		sadTree8x8Cur_org[4][5] += getMvRcost(lambda_mv, sadTree8x8PMv[5][4][0] - mvx, sadTree8x8PMv[5][4][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[4][5] < sadTree8x8[5][4])
		{
			sadTree8x8[5][4] = sadTree8x8Cur_org[4][5];
			sadTree8x8Mv[5][4][0] = mvx;
			sadTree8x8Mv[5][4][1] = mvy;
		}
		sadTree8x8Cur_org[5][5] += getMvRcost(lambda_mv, sadTree8x8PMv[5][5][0] - mvx, sadTree8x8PMv[5][5][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[5][5] < sadTree8x8[5][5])
		{
			sadTree8x8[5][5] = sadTree8x8Cur_org[5][5];
			sadTree8x8Mv[5][5][0] = mvx;
			sadTree8x8Mv[5][5][1] = mvy;
		}
		sadTree8x8Cur_org[6][5] += getMvRcost(lambda_mv, sadTree8x8PMv[5][6][0] - mvx, sadTree8x8PMv[5][6][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[6][5] < sadTree8x8[5][6])
		{
			sadTree8x8[5][6] = sadTree8x8Cur_org[6][5];
			sadTree8x8Mv[5][6][0] = mvx;
			sadTree8x8Mv[5][6][1] = mvy;
		}
		sadTree8x8Cur_org[7][5] += getMvRcost(lambda_mv, sadTree8x8PMv[5][7][0] - mvx, sadTree8x8PMv[5][7][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[7][5] < sadTree8x8[5][7])
		{
			sadTree8x8[5][7] = sadTree8x8Cur_org[7][5];
			sadTree8x8Mv[5][7][0] = mvx;
			sadTree8x8Mv[5][7][1] = mvy;
		}
		/*16x8*/
		sadTree8x16Cur_org[5][0] += getMvRcost(lambda_mv, sadTree16x8PMv[0][5][0] - mvx, sadTree16x8PMv[0][5][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[5][0] < sadTree16x8[0][5])
		{
			sadTree16x8[0][5] = sadTree8x16Cur_org[5][0];
			sadTree16x8Mv[0][5][0] = mvx;
			sadTree16x8Mv[0][5][1] = mvy;
		}
		sadTree8x16Cur_org[5][1] += getMvRcost(lambda_mv, sadTree16x8PMv[1][5][0] - mvx, sadTree16x8PMv[1][5][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[5][1] < sadTree16x8[1][5])
		{
			sadTree16x8[1][5] = sadTree8x16Cur_org[5][1];
			sadTree16x8Mv[1][5][0] = mvx;
			sadTree16x8Mv[1][5][1] = mvy;
		}
		sadTree8x16Cur_org[5][2] += getMvRcost(lambda_mv, sadTree16x8PMv[2][5][0] - mvx, sadTree16x8PMv[2][5][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[5][2] < sadTree16x8[2][5])
		{
			sadTree16x8[2][5] = sadTree8x16Cur_org[5][2];
			sadTree16x8Mv[2][5][0] = mvx;
			sadTree16x8Mv[2][5][1] = mvy;
		}
		sadTree8x16Cur_org[5][3] += getMvRcost(lambda_mv, sadTree16x8PMv[3][5][0] - mvx, sadTree16x8PMv[3][5][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[5][3] < sadTree16x8[3][5])
		{
			sadTree16x8[3][5] = sadTree8x16Cur_org[5][3];
			sadTree16x8Mv[3][5][0] = mvx;
			sadTree16x8Mv[3][5][1] = mvy;
		}

		/*8x16*/
		sadTree16x8Cur_org[0][5] += getMvRcost(lambda_mv, sadTree8x16PMv[5][0][0] - mvx, sadTree8x16PMv[5][0][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[0][5] < sadTree8x16[5][0])
		{
			sadTree8x16[5][0] = sadTree16x8Cur_org[0][5];
			sadTree8x16Mv[5][0][0] = mvx;
			sadTree8x16Mv[5][0][1] = mvy;
		}
		sadTree16x8Cur_org[1][5] += getMvRcost(lambda_mv, sadTree8x16PMv[5][1][0] - mvx, sadTree8x16PMv[5][1][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[1][5] < sadTree8x16[5][1])
		{
			sadTree8x16[5][1] = sadTree16x8Cur_org[1][5];
			sadTree8x16Mv[5][1][0] = mvx;
			sadTree8x16Mv[5][1][1] = mvy;
		}
		sadTree16x8Cur_org[2][5] += getMvRcost(lambda_mv, sadTree8x16PMv[5][2][0] - mvx, sadTree8x16PMv[5][2][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[2][5] < sadTree8x16[5][2])
		{
			sadTree8x16[5][2] = sadTree16x8Cur_org[2][5];
			sadTree8x16Mv[5][2][0] = mvx;
			sadTree8x16Mv[5][2][1] = mvy;
		}
		sadTree16x8Cur_org[3][5] += getMvRcost(lambda_mv, sadTree8x16PMv[5][3][0] - mvx, sadTree8x16PMv[5][3][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[3][5] < sadTree8x16[5][3])
		{
			sadTree8x16[5][3] = sadTree16x8Cur_org[3][5];
			sadTree8x16Mv[5][3][0] = mvx;
			sadTree8x16Mv[5][3][1] = mvy;
		}

		/*32x8*/
		sadTree8x32Cur_org[5][0] += getMvRcost(lambda_mv, sadTree32x8PMv[0][5][0] - mvx, sadTree32x8PMv[0][5][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[5][0] < sadTree32x8[0][5])
		{
			sadTree32x8[0][5] = sadTree8x32Cur_org[5][0];
			sadTree32x8Mv[0][5][0] = mvx;
			sadTree32x8Mv[0][5][1] = mvy;
		}
		sadTree8x32Cur_org[5][1] += getMvRcost(lambda_mv, sadTree32x8PMv[1][5][0] - mvx, sadTree32x8PMv[1][5][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[5][1] < sadTree32x8[1][5])
		{
			sadTree32x8[1][5] = sadTree8x32Cur_org[5][1];
			sadTree32x8Mv[1][5][0] = mvx;
			sadTree32x8Mv[1][5][1] = mvy;
		}

		/*8x32*/
		sadTree32x8Cur_org[0][5] += getMvRcost(lambda_mv, sadTree8x32PMv[5][0][0] - mvx, sadTree8x32PMv[5][0][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[0][5] < sadTree8x32[5][0])
		{
			sadTree8x32[5][0] = sadTree32x8Cur_org[0][5];
			sadTree8x32Mv[5][0][0] = mvx;
			sadTree8x32Mv[5][0][1] = mvy;
		}
		sadTree32x8Cur_org[1][5] += getMvRcost(lambda_mv, sadTree8x32PMv[5][1][0] - mvx, sadTree8x32PMv[5][1][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[1][5] < sadTree8x32[5][1])
		{
			sadTree8x32[5][1] = sadTree32x8Cur_org[1][5];
			sadTree8x32Mv[5][1][0] = mvx;
			sadTree8x32Mv[5][1][1] = mvy;
		}

		/*8x64*/
		sadTree64x8Cur_org[0][5] += getMvRcost(lambda_mv, sadTree8x64PMv[5][0][0] - mvx, sadTree8x64PMv[5][0][1] - mvy, num_refp, refi);
		if (sadTree64x8Cur_org[0][5] < sadTree8x64[5][0])
		{
			sadTree8x64[5][0] = sadTree64x8Cur_org[0][5];
			sadTree8x64Mv[5][0][0] = mvx;
			sadTree8x64Mv[5][0][1] = mvy;
		}

		/*64x8*/
		sadTree8x64Cur_org[5][0] += getMvRcost(lambda_mv, sadTree64x8PMv[0][5][0] - mvx, sadTree64x8PMv[0][5][1] - mvy, num_refp, refi);
		if (sadTree8x64Cur_org[5][0] < sadTree64x8[0][5])
		{
			sadTree64x8[0][5] = sadTree8x64Cur_org[5][0];
			sadTree64x8Mv[0][5][0] = mvx;
			sadTree64x8Mv[0][5][1] = mvy;
		}
		//================================================================================================================================================

		//================================================================================================================================================
		//x_8 = 6;
		/*8x8*/
		sadTree8x8Cur_org[0][6] += getMvRcost(lambda_mv, sadTree8x8PMv[6][0][0] - mvx, sadTree8x8PMv[6][0][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[0][6] < sadTree8x8[6][0])
		{
			sadTree8x8[6][0] = sadTree8x8Cur_org[0][6];
			sadTree8x8Mv[6][0][0] = mvx;
			sadTree8x8Mv[6][0][1] = mvy;
		}
		sadTree8x8Cur_org[1][6] += getMvRcost(lambda_mv, sadTree8x8PMv[6][1][0] - mvx, sadTree8x8PMv[6][1][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[1][6] < sadTree8x8[6][1])
		{
			sadTree8x8[6][1] = sadTree8x8Cur_org[1][6];
			sadTree8x8Mv[6][1][0] = mvx;
			sadTree8x8Mv[6][1][1] = mvy;
		}
		sadTree8x8Cur_org[2][6] += getMvRcost(lambda_mv, sadTree8x8PMv[6][2][0] - mvx, sadTree8x8PMv[6][2][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[2][6] < sadTree8x8[6][2])
		{
			sadTree8x8[6][2] = sadTree8x8Cur_org[2][6];
			sadTree8x8Mv[6][2][0] = mvx;
			sadTree8x8Mv[6][2][1] = mvy;
		}
		sadTree8x8Cur_org[3][6] += getMvRcost(lambda_mv, sadTree8x8PMv[6][3][0] - mvx, sadTree8x8PMv[6][3][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[3][6] < sadTree8x8[6][3])
		{
			sadTree8x8[6][3] = sadTree8x8Cur_org[3][6];
			sadTree8x8Mv[6][3][0] = mvx;
			sadTree8x8Mv[6][3][1] = mvy;
		}
		sadTree8x8Cur_org[4][6] += getMvRcost(lambda_mv, sadTree8x8PMv[6][4][0] - mvx, sadTree8x8PMv[6][4][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[4][6] < sadTree8x8[6][4])
		{
			sadTree8x8[6][4] = sadTree8x8Cur_org[4][6];
			sadTree8x8Mv[6][4][0] = mvx;
			sadTree8x8Mv[6][4][1] = mvy;
		}
		sadTree8x8Cur_org[5][6] += getMvRcost(lambda_mv, sadTree8x8PMv[6][5][0] - mvx, sadTree8x8PMv[6][5][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[5][6] < sadTree8x8[6][5])
		{
			sadTree8x8[6][5] = sadTree8x8Cur_org[5][6];
			sadTree8x8Mv[6][5][0] = mvx;
			sadTree8x8Mv[6][5][1] = mvy;
		}
		sadTree8x8Cur_org[6][6] += getMvRcost(lambda_mv, sadTree8x8PMv[6][6][0] - mvx, sadTree8x8PMv[6][6][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[6][6] < sadTree8x8[6][6])
		{
			sadTree8x8[6][6] = sadTree8x8Cur_org[6][6];
			sadTree8x8Mv[6][6][0] = mvx;
			sadTree8x8Mv[6][6][1] = mvy;
		}
		sadTree8x8Cur_org[7][6] += getMvRcost(lambda_mv, sadTree8x8PMv[6][7][0] - mvx, sadTree8x8PMv[6][7][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[7][6] < sadTree8x8[6][7])
		{
			sadTree8x8[6][7] = sadTree8x8Cur_org[7][6];
			sadTree8x8Mv[6][7][0] = mvx;
			sadTree8x8Mv[6][7][1] = mvy;
		}
		/*16x8*/
		sadTree8x16Cur_org[6][0] += getMvRcost(lambda_mv, sadTree16x8PMv[0][6][0] - mvx, sadTree16x8PMv[0][6][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[6][0] < sadTree16x8[0][6])
		{
			sadTree16x8[0][6] = sadTree8x16Cur_org[6][0];
			sadTree16x8Mv[0][6][0] = mvx;
			sadTree16x8Mv[0][6][1] = mvy;
		}
		sadTree8x16Cur_org[6][1] += getMvRcost(lambda_mv, sadTree16x8PMv[1][6][0] - mvx, sadTree16x8PMv[1][6][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[6][1] < sadTree16x8[1][6])
		{
			sadTree16x8[1][6] = sadTree8x16Cur_org[6][1];
			sadTree16x8Mv[1][6][0] = mvx;
			sadTree16x8Mv[1][6][1] = mvy;
		}
		sadTree8x16Cur_org[6][2] += getMvRcost(lambda_mv, sadTree16x8PMv[2][6][0] - mvx, sadTree16x8PMv[2][6][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[6][2] < sadTree16x8[2][6])
		{
			sadTree16x8[2][6] = sadTree8x16Cur_org[6][2];
			sadTree16x8Mv[2][6][0] = mvx;
			sadTree16x8Mv[2][6][1] = mvy;
		}
		sadTree8x16Cur_org[6][3] += getMvRcost(lambda_mv, sadTree16x8PMv[3][6][0] - mvx, sadTree16x8PMv[3][6][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[6][3] < sadTree16x8[3][6])
		{
			sadTree16x8[3][6] = sadTree8x16Cur_org[6][3];
			sadTree16x8Mv[3][6][0] = mvx;
			sadTree16x8Mv[3][6][1] = mvy;
		}

		/*8x16*/
		sadTree16x8Cur_org[0][6] += getMvRcost(lambda_mv, sadTree8x16PMv[6][0][0] - mvx, sadTree8x16PMv[6][0][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[0][6] < sadTree8x16[6][0])
		{
			sadTree8x16[6][0] = sadTree16x8Cur_org[0][6];
			sadTree8x16Mv[6][0][0] = mvx;
			sadTree8x16Mv[6][0][1] = mvy;
		}
		sadTree16x8Cur_org[1][6] += getMvRcost(lambda_mv, sadTree8x16PMv[6][1][0] - mvx, sadTree8x16PMv[6][1][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[1][6] < sadTree8x16[6][1])
		{
			sadTree8x16[6][1] = sadTree16x8Cur_org[1][6];
			sadTree8x16Mv[6][1][0] = mvx;
			sadTree8x16Mv[6][1][1] = mvy;
		}
		sadTree16x8Cur_org[2][6] += getMvRcost(lambda_mv, sadTree8x16PMv[6][2][0] - mvx, sadTree8x16PMv[6][2][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[2][6] < sadTree8x16[6][2])
		{
			sadTree8x16[6][2] = sadTree16x8Cur_org[2][6];
			sadTree8x16Mv[6][2][0] = mvx;
			sadTree8x16Mv[6][2][1] = mvy;
		}
		sadTree16x8Cur_org[3][6] += getMvRcost(lambda_mv, sadTree8x16PMv[6][3][0] - mvx, sadTree8x16PMv[6][3][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[3][6] < sadTree8x16[6][3])
		{
			sadTree8x16[6][3] = sadTree16x8Cur_org[3][6];
			sadTree8x16Mv[6][3][0] = mvx;
			sadTree8x16Mv[6][3][1] = mvy;
		}

		/*32x8*/
		sadTree8x32Cur_org[6][0] += getMvRcost(lambda_mv, sadTree32x8PMv[0][6][0] - mvx, sadTree32x8PMv[0][6][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[6][0] < sadTree32x8[0][6])
		{
			sadTree32x8[0][6] = sadTree8x32Cur_org[6][0];
			sadTree32x8Mv[0][6][0] = mvx;
			sadTree32x8Mv[0][6][1] = mvy;
		}
		sadTree8x32Cur_org[6][1] += getMvRcost(lambda_mv, sadTree32x8PMv[1][6][0] - mvx, sadTree32x8PMv[1][6][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[6][1] < sadTree32x8[1][6])
		{
			sadTree32x8[1][6] = sadTree8x32Cur_org[6][1];
			sadTree32x8Mv[1][6][0] = mvx;
			sadTree32x8Mv[1][6][1] = mvy;
		}

		/*8x32*/
		sadTree32x8Cur_org[0][6] += getMvRcost(lambda_mv, sadTree8x32PMv[6][0][0] - mvx, sadTree8x32PMv[6][0][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[0][6] < sadTree8x32[6][0])
		{
			sadTree8x32[6][0] = sadTree32x8Cur_org[0][6];
			sadTree8x32Mv[6][0][0] = mvx;
			sadTree8x32Mv[6][0][1] = mvy;
		}
		sadTree32x8Cur_org[1][6] += getMvRcost(lambda_mv, sadTree8x32PMv[6][1][0] - mvx, sadTree8x32PMv[6][1][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[1][6] < sadTree8x32[6][1])
		{
			sadTree8x32[6][1] = sadTree32x8Cur_org[1][6];
			sadTree8x32Mv[6][1][0] = mvx;
			sadTree8x32Mv[6][1][1] = mvy;
		}

		/*8x64*/
		sadTree64x8Cur_org[0][6] += getMvRcost(lambda_mv, sadTree8x64PMv[6][0][0] - mvx, sadTree8x64PMv[6][0][1] - mvy, num_refp, refi);
		if (sadTree64x8Cur_org[0][6] < sadTree8x64[6][0])
		{
			sadTree8x64[6][0] = sadTree64x8Cur_org[0][6];
			sadTree8x64Mv[6][0][0] = mvx;
			sadTree8x64Mv[6][0][1] = mvy;
		}

		/*64x8*/
		sadTree8x64Cur_org[6][0] += getMvRcost(lambda_mv, sadTree64x8PMv[0][6][0] - mvx, sadTree64x8PMv[0][6][1] - mvy, num_refp, refi);
		if (sadTree8x64Cur_org[6][0] < sadTree64x8[0][6])
		{
			sadTree64x8[0][6] = sadTree8x64Cur_org[6][0];
			sadTree64x8Mv[0][6][0] = mvx;
			sadTree64x8Mv[0][6][1] = mvy;
		}
		//================================================================================================================================================

		//================================================================================================================================================
		//x_8 = 7;
		/*8x8*/
		sadTree8x8Cur_org[0][7] += getMvRcost(lambda_mv, sadTree8x8PMv[7][0][0] - mvx, sadTree8x8PMv[7][0][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[0][7] < sadTree8x8[7][0])
		{
			sadTree8x8[7][0] = sadTree8x8Cur_org[0][7];
			sadTree8x8Mv[7][0][0] = mvx;
			sadTree8x8Mv[7][0][1] = mvy;
		}
		sadTree8x8Cur_org[1][7] += getMvRcost(lambda_mv, sadTree8x8PMv[7][1][0] - mvx, sadTree8x8PMv[7][1][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[1][7] < sadTree8x8[7][1])
		{
			sadTree8x8[7][1] = sadTree8x8Cur_org[1][7];
			sadTree8x8Mv[7][1][0] = mvx;
			sadTree8x8Mv[7][1][1] = mvy;
		}
		sadTree8x8Cur_org[2][7] += getMvRcost(lambda_mv, sadTree8x8PMv[7][2][0] - mvx, sadTree8x8PMv[7][2][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[2][7] < sadTree8x8[7][2])
		{
			sadTree8x8[7][2] = sadTree8x8Cur_org[2][7];
			sadTree8x8Mv[7][2][0] = mvx;
			sadTree8x8Mv[7][2][1] = mvy;
		}
		sadTree8x8Cur_org[3][7] += getMvRcost(lambda_mv, sadTree8x8PMv[7][3][0] - mvx, sadTree8x8PMv[7][3][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[3][7] < sadTree8x8[7][3])
		{
			sadTree8x8[7][3] = sadTree8x8Cur_org[3][7];
			sadTree8x8Mv[7][3][0] = mvx;
			sadTree8x8Mv[7][3][1] = mvy;
		}
		sadTree8x8Cur_org[4][7] += getMvRcost(lambda_mv, sadTree8x8PMv[7][4][0] - mvx, sadTree8x8PMv[7][4][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[4][7] < sadTree8x8[7][4])
		{
			sadTree8x8[7][4] = sadTree8x8Cur_org[4][7];
			sadTree8x8Mv[7][4][0] = mvx;
			sadTree8x8Mv[7][4][1] = mvy;
		}
		sadTree8x8Cur_org[5][7] += getMvRcost(lambda_mv, sadTree8x8PMv[7][5][0] - mvx, sadTree8x8PMv[7][5][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[5][7] < sadTree8x8[7][5])
		{
			sadTree8x8[7][5] = sadTree8x8Cur_org[5][7];
			sadTree8x8Mv[7][5][0] = mvx;
			sadTree8x8Mv[7][5][1] = mvy;
		}
		sadTree8x8Cur_org[6][7] += getMvRcost(lambda_mv, sadTree8x8PMv[7][6][0] - mvx, sadTree8x8PMv[7][6][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[6][7] < sadTree8x8[7][6])
		{
			sadTree8x8[7][6] = sadTree8x8Cur_org[6][7];
			sadTree8x8Mv[7][6][0] = mvx;
			sadTree8x8Mv[7][6][1] = mvy;
		}
		sadTree8x8Cur_org[7][7] += getMvRcost(lambda_mv, sadTree8x8PMv[7][7][0] - mvx, sadTree8x8PMv[7][7][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[7][7] < sadTree8x8[7][7])
		{
			sadTree8x8[7][7] = sadTree8x8Cur_org[7][7];
			sadTree8x8Mv[7][7][0] = mvx;
			sadTree8x8Mv[7][7][1] = mvy;
		}
		/*16x8*/
		sadTree8x16Cur_org[7][0] += getMvRcost(lambda_mv, sadTree16x8PMv[0][7][0] - mvx, sadTree16x8PMv[0][7][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[7][0] < sadTree16x8[0][7])
		{
			sadTree16x8[0][7] = sadTree8x16Cur_org[7][0];
			sadTree16x8Mv[0][7][0] = mvx;
			sadTree16x8Mv[0][7][1] = mvy;
		}
		sadTree8x16Cur_org[7][1] += getMvRcost(lambda_mv, sadTree16x8PMv[1][7][0] - mvx, sadTree16x8PMv[1][7][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[7][1] < sadTree16x8[1][7])
		{
			sadTree16x8[1][7] = sadTree8x16Cur_org[7][1];
			sadTree16x8Mv[1][7][0] = mvx;
			sadTree16x8Mv[1][7][1] = mvy;
		}
		sadTree8x16Cur_org[7][2] += getMvRcost(lambda_mv, sadTree16x8PMv[2][7][0] - mvx, sadTree16x8PMv[2][7][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[7][2] < sadTree16x8[2][7])
		{
			sadTree16x8[2][7] = sadTree8x16Cur_org[7][2];
			sadTree16x8Mv[2][7][0] = mvx;
			sadTree16x8Mv[2][7][1] = mvy;
		}
		sadTree8x16Cur_org[7][3] += getMvRcost(lambda_mv, sadTree16x8PMv[3][7][0] - mvx, sadTree16x8PMv[3][7][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[7][3] < sadTree16x8[3][7])
		{
			sadTree16x8[3][7] = sadTree8x16Cur_org[7][3];
			sadTree16x8Mv[3][7][0] = mvx;
			sadTree16x8Mv[3][7][1] = mvy;
		}

		/*8x16*/
		sadTree16x8Cur_org[0][7] += getMvRcost(lambda_mv, sadTree8x16PMv[7][0][0] - mvx, sadTree8x16PMv[7][0][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[0][7] < sadTree8x16[7][0])
		{
			sadTree8x16[7][0] = sadTree16x8Cur_org[0][7];
			sadTree8x16Mv[7][0][0] = mvx;
			sadTree8x16Mv[7][0][1] = mvy;
		}
		sadTree16x8Cur_org[1][7] += getMvRcost(lambda_mv, sadTree8x16PMv[7][1][0] - mvx, sadTree8x16PMv[7][1][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[1][7] < sadTree8x16[7][1])
		{
			sadTree8x16[7][1] = sadTree16x8Cur_org[1][7];
			sadTree8x16Mv[7][1][0] = mvx;
			sadTree8x16Mv[7][1][1] = mvy;
		}
		sadTree16x8Cur_org[2][7] += getMvRcost(lambda_mv, sadTree8x16PMv[7][2][0] - mvx, sadTree8x16PMv[7][2][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[2][7] < sadTree8x16[7][2])
		{
			sadTree8x16[7][2] = sadTree16x8Cur_org[2][7];
			sadTree8x16Mv[7][2][0] = mvx;
			sadTree8x16Mv[7][2][1] = mvy;
		}
		sadTree16x8Cur_org[3][7] += getMvRcost(lambda_mv, sadTree8x16PMv[7][3][0] - mvx, sadTree8x16PMv[7][3][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[3][7] < sadTree8x16[7][3])
		{
			sadTree8x16[7][3] = sadTree16x8Cur_org[3][7];
			sadTree8x16Mv[7][3][0] = mvx;
			sadTree8x16Mv[7][3][1] = mvy;
		}

		/*32x8*/
		sadTree8x32Cur_org[7][0] += getMvRcost(lambda_mv, sadTree32x8PMv[0][7][0] - mvx, sadTree32x8PMv[0][7][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[7][0] < sadTree32x8[0][7])
		{
			sadTree32x8[0][7] = sadTree8x32Cur_org[7][0];
			sadTree32x8Mv[0][7][0] = mvx;
			sadTree32x8Mv[0][7][1] = mvy;
		}
		sadTree8x32Cur_org[7][1] += getMvRcost(lambda_mv, sadTree32x8PMv[1][7][0] - mvx, sadTree32x8PMv[1][7][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[7][1] < sadTree32x8[1][7])
		{
			sadTree32x8[1][7] = sadTree8x32Cur_org[7][1];
			sadTree32x8Mv[1][7][0] = mvx;
			sadTree32x8Mv[1][7][1] = mvy;
		}

		/*8x32*/
		sadTree32x8Cur_org[0][7] += getMvRcost(lambda_mv, sadTree8x32PMv[7][0][0] - mvx, sadTree8x32PMv[7][0][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[0][7] < sadTree8x32[7][0])
		{
			sadTree8x32[7][0] = sadTree32x8Cur_org[0][7];
			sadTree8x32Mv[7][0][0] = mvx;
			sadTree8x32Mv[7][0][1] = mvy;
		}
		sadTree32x8Cur_org[1][7] += getMvRcost(lambda_mv, sadTree8x32PMv[7][1][0] - mvx, sadTree8x32PMv[7][1][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[1][7] < sadTree8x32[7][1])
		{
			sadTree8x32[7][1] = sadTree32x8Cur_org[1][7];
			sadTree8x32Mv[7][1][0] = mvx;
			sadTree8x32Mv[7][1][1] = mvy;
		}

		/*8x64*/
		sadTree64x8Cur_org[0][7] += getMvRcost(lambda_mv, sadTree8x64PMv[7][0][0] - mvx, sadTree8x64PMv[7][0][1] - mvy, num_refp, refi);
		if (sadTree64x8Cur_org[0][7] < sadTree8x64[7][0])
		{
			sadTree8x64[7][0] = sadTree64x8Cur_org[0][7];
			sadTree8x64Mv[7][0][0] = mvx;
			sadTree8x64Mv[7][0][1] = mvy;
		}

		/*64x8*/
		sadTree8x64Cur_org[7][0] += getMvRcost(lambda_mv, sadTree64x8PMv[0][7][0] - mvx, sadTree64x8PMv[0][7][1] - mvy, num_refp, refi);
		if (sadTree8x64Cur_org[7][0] < sadTree64x8[0][7])
		{
			sadTree64x8[0][7] = sadTree8x64Cur_org[7][0];
			sadTree64x8Mv[0][7][0] = mvx;
			sadTree64x8Mv[0][7][1] = mvy;
		}
		//================================================================================================================================================



	//}

#else
	//int x_8;
	U4 x_8;

	for (x_8 = 0; x_8 < 8; x_8++) 
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif


		
#if 0
		/*8x8*/
		sadTree8x8Cur[x_8][0] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][0][0] - mvx, sadTree8x8PMv[x_8][0][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur[x_8][0] < sadTree8x8[x_8][0])
		{
			sadTree8x8[x_8][0] = sadTree8x8Cur[x_8][0];
			sadTree8x8Mv[x_8][0][0] = mvx;
			sadTree8x8Mv[x_8][0][1] = mvy;
		}
		sadTree8x8Cur[x_8][1] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][1][0] - mvx, sadTree8x8PMv[x_8][1][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur[x_8][1] < sadTree8x8[x_8][1])
		{
			sadTree8x8[x_8][1] = sadTree8x8Cur[x_8][1];
			sadTree8x8Mv[x_8][1][0] = mvx;
			sadTree8x8Mv[x_8][1][1] = mvy;
		}
		sadTree8x8Cur[x_8][2] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][2][0] - mvx, sadTree8x8PMv[x_8][2][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur[x_8][2] < sadTree8x8[x_8][2])
		{
			sadTree8x8[x_8][2] = sadTree8x8Cur[x_8][2];
			sadTree8x8Mv[x_8][2][0] = mvx;
			sadTree8x8Mv[x_8][2][1] = mvy;
		}
		sadTree8x8Cur[x_8][3] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][3][0] - mvx, sadTree8x8PMv[x_8][3][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur[x_8][3] < sadTree8x8[x_8][3])
		{
			sadTree8x8[x_8][3] = sadTree8x8Cur[x_8][3];
			sadTree8x8Mv[x_8][3][0] = mvx;
			sadTree8x8Mv[x_8][3][1] = mvy;
		}
		sadTree8x8Cur[x_8][4] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][4][0] - mvx, sadTree8x8PMv[x_8][4][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur[x_8][4] < sadTree8x8[x_8][4])
		{
			sadTree8x8[x_8][4] = sadTree8x8Cur[x_8][4];
			sadTree8x8Mv[x_8][4][0] = mvx;
			sadTree8x8Mv[x_8][4][1] = mvy;
		}
		sadTree8x8Cur[x_8][5] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][5][0] - mvx, sadTree8x8PMv[x_8][5][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur[x_8][5] < sadTree8x8[x_8][5])
		{
			sadTree8x8[x_8][5] = sadTree8x8Cur[x_8][5];
			sadTree8x8Mv[x_8][5][0] = mvx;
			sadTree8x8Mv[x_8][5][1] = mvy;
		}
		sadTree8x8Cur[x_8][6] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][6][0] - mvx, sadTree8x8PMv[x_8][6][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur[x_8][6] < sadTree8x8[x_8][6])
		{
			sadTree8x8[x_8][6] = sadTree8x8Cur[x_8][6];
			sadTree8x8Mv[x_8][6][0] = mvx;
			sadTree8x8Mv[x_8][6][1] = mvy;
		}
		sadTree8x8Cur[x_8][7] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][7][0] - mvx, sadTree8x8PMv[x_8][7][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur[x_8][7] < sadTree8x8[x_8][7])
		{
			sadTree8x8[x_8][7] = sadTree8x8Cur[x_8][7];
			sadTree8x8Mv[x_8][7][0] = mvx;
			sadTree8x8Mv[x_8][7][1] = mvy;
		}

		/*16x8*/
		sadTree16x8Cur[0][x_8] += getMvRcost(lambda_mv, sadTree16x8PMv[0][x_8][0] - mvx, sadTree16x8PMv[0][x_8][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur[0][x_8] < sadTree16x8[0][x_8])
		{
			sadTree16x8[0][x_8] = sadTree16x8Cur[0][x_8];
			sadTree16x8Mv[0][x_8][0] = mvx;
			sadTree16x8Mv[0][x_8][1] = mvy;
		}
		sadTree16x8Cur[1][x_8] += getMvRcost(lambda_mv, sadTree16x8PMv[1][x_8][0] - mvx, sadTree16x8PMv[1][x_8][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur[1][x_8] < sadTree16x8[1][x_8])
		{
			sadTree16x8[1][x_8] = sadTree16x8Cur[1][x_8];
			sadTree16x8Mv[1][x_8][0] = mvx;
			sadTree16x8Mv[1][x_8][1] = mvy;
		}
		sadTree16x8Cur[2][x_8] += getMvRcost(lambda_mv, sadTree16x8PMv[2][x_8][0] - mvx, sadTree16x8PMv[2][x_8][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur[2][x_8] < sadTree16x8[2][x_8])
		{
			sadTree16x8[2][x_8] = sadTree16x8Cur[2][x_8];
			sadTree16x8Mv[2][x_8][0] = mvx;
			sadTree16x8Mv[2][x_8][1] = mvy;
		}
		sadTree16x8Cur[3][x_8] += getMvRcost(lambda_mv, sadTree16x8PMv[3][x_8][0] - mvx, sadTree16x8PMv[3][x_8][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur[3][x_8] < sadTree16x8[3][x_8])
		{
			sadTree16x8[3][x_8] = sadTree16x8Cur[3][x_8];
			sadTree16x8Mv[3][x_8][0] = mvx;
			sadTree16x8Mv[3][x_8][1] = mvy;
		}

		/*8x16*/
		sadTree8x16Cur[x_8][0] += getMvRcost(lambda_mv, sadTree8x16PMv[x_8][0][0] - mvx, sadTree8x16PMv[x_8][0][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur[x_8][0] < sadTree8x16[x_8][0])
		{
			sadTree8x16[x_8][0] = sadTree8x16Cur[x_8][0];
			sadTree8x16Mv[x_8][0][0] = mvx;
			sadTree8x16Mv[x_8][0][1] = mvy;
		}
		sadTree8x16Cur[x_8][1] += getMvRcost(lambda_mv, sadTree8x16PMv[x_8][1][0] - mvx, sadTree8x16PMv[x_8][1][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur[x_8][1] < sadTree8x16[x_8][1])
		{
			sadTree8x16[x_8][1] = sadTree8x16Cur[x_8][1];
			sadTree8x16Mv[x_8][1][0] = mvx;
			sadTree8x16Mv[x_8][1][1] = mvy;
		}
		sadTree8x16Cur[x_8][2] += getMvRcost(lambda_mv, sadTree8x16PMv[x_8][2][0] - mvx, sadTree8x16PMv[x_8][2][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur[x_8][2] < sadTree8x16[x_8][2])
		{
			sadTree8x16[x_8][2] = sadTree8x16Cur[x_8][2];
			sadTree8x16Mv[x_8][2][0] = mvx;
			sadTree8x16Mv[x_8][2][1] = mvy;
		}
		sadTree8x16Cur[x_8][3] += getMvRcost(lambda_mv, sadTree8x16PMv[x_8][3][0] - mvx, sadTree8x16PMv[x_8][3][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur[x_8][3] < sadTree8x16[x_8][3])
		{
			sadTree8x16[x_8][3] = sadTree8x16Cur[x_8][3];
			sadTree8x16Mv[x_8][3][0] = mvx;
			sadTree8x16Mv[x_8][3][1] = mvy;
		}

		/*32x8*/
		sadTree32x8Cur[0][x_8] += getMvRcost(lambda_mv, sadTree32x8PMv[0][x_8][0] - mvx, sadTree32x8PMv[0][x_8][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur[0][x_8] < sadTree32x8[0][x_8])
		{
			sadTree32x8[0][x_8] = sadTree32x8Cur[0][x_8];
			sadTree32x8Mv[0][x_8][0] = mvx;
			sadTree32x8Mv[0][x_8][1] = mvy;
		}
		sadTree32x8Cur[1][x_8] += getMvRcost(lambda_mv, sadTree32x8PMv[1][x_8][0] - mvx, sadTree32x8PMv[1][x_8][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur[1][x_8] < sadTree32x8[1][x_8])
		{
			sadTree32x8[1][x_8] = sadTree32x8Cur[1][x_8];
			sadTree32x8Mv[1][x_8][0] = mvx;
			sadTree32x8Mv[1][x_8][1] = mvy;
		}

		/*8x32*/
		sadTree8x32Cur[x_8][0] += getMvRcost(lambda_mv, sadTree8x32PMv[x_8][0][0] - mvx, sadTree8x32PMv[x_8][0][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur[x_8][0] < sadTree8x32[x_8][0])
		{
			sadTree8x32[x_8][0] = sadTree8x32Cur[x_8][0];
			sadTree8x32Mv[x_8][0][0] = mvx;
			sadTree8x32Mv[x_8][0][1] = mvy;
		}
		sadTree8x32Cur[x_8][1] += getMvRcost(lambda_mv, sadTree8x32PMv[x_8][1][0] - mvx, sadTree8x32PMv[x_8][1][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur[x_8][1] < sadTree8x32[x_8][1])
		{
			sadTree8x32[x_8][1] = sadTree8x32Cur[x_8][1];
			sadTree8x32Mv[x_8][1][0] = mvx;
			sadTree8x32Mv[x_8][1][1] = mvy;
		}

		/*8x64*/
		sadTree8x64Cur[x_8][0] += getMvRcost(lambda_mv, sadTree8x64PMv[x_8][0][0] - mvx, sadTree8x64PMv[x_8][0][1] - mvy, num_refp, refi);
		if (sadTree8x64Cur[x_8][0] < sadTree8x64[x_8][0])
		{
			sadTree8x64[x_8][0] = sadTree8x64Cur[x_8][0];
			sadTree8x64Mv[x_8][0][0] = mvx;
			sadTree8x64Mv[x_8][0][1] = mvy;
		}

		/*64x8*/
		sadTree64x8Cur[0][x_8] += getMvRcost(lambda_mv, sadTree64x8PMv[0][x_8][0] - mvx, sadTree64x8PMv[0][x_8][1] - mvy, num_refp, refi);
		if (sadTree64x8Cur[0][x_8] < sadTree64x8[0][x_8])
		{
			sadTree64x8[0][x_8] = sadTree64x8Cur[0][x_8];
			sadTree64x8Mv[0][x_8][0] = mvx;
			sadTree64x8Mv[0][x_8][1] = mvy;
		}
#else


		/*8x8*/
		sadTree8x8Cur_org[0][x_8] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][0][0] - mvx, sadTree8x8PMv[x_8][0][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[0][x_8] < sadTree8x8[x_8][0])
		{
			sadTree8x8[x_8][0] = sadTree8x8Cur_org[0][x_8];
			sadTree8x8Mv[x_8][0][0] = mvx;
			sadTree8x8Mv[x_8][0][1] = mvy;
		}
		sadTree8x8Cur_org[1][x_8] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][1][0] - mvx, sadTree8x8PMv[x_8][1][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[1][x_8] < sadTree8x8[x_8][1])
		{
			sadTree8x8[x_8][1] = sadTree8x8Cur_org[1][x_8];
			sadTree8x8Mv[x_8][1][0] = mvx;
			sadTree8x8Mv[x_8][1][1] = mvy;
		}
		sadTree8x8Cur_org[2][x_8] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][2][0] - mvx, sadTree8x8PMv[x_8][2][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[2][x_8] < sadTree8x8[x_8][2])
		{
			sadTree8x8[x_8][2] = sadTree8x8Cur_org[2][x_8];
			sadTree8x8Mv[x_8][2][0] = mvx;
			sadTree8x8Mv[x_8][2][1] = mvy;
		}
		sadTree8x8Cur_org[3][x_8] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][3][0] - mvx, sadTree8x8PMv[x_8][3][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[3][x_8] < sadTree8x8[x_8][3])
		{
			sadTree8x8[x_8][3] = sadTree8x8Cur_org[3][x_8];
			sadTree8x8Mv[x_8][3][0] = mvx;
			sadTree8x8Mv[x_8][3][1] = mvy;
		}
		sadTree8x8Cur_org[4][x_8] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][4][0] - mvx, sadTree8x8PMv[x_8][4][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[4][x_8] < sadTree8x8[x_8][4])
		{
			sadTree8x8[x_8][4] = sadTree8x8Cur_org[4][x_8];
			sadTree8x8Mv[x_8][4][0] = mvx;
			sadTree8x8Mv[x_8][4][1] = mvy;
		}
		sadTree8x8Cur_org[5][x_8] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][5][0] - mvx, sadTree8x8PMv[x_8][5][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[5][x_8] < sadTree8x8[x_8][5])
		{
			sadTree8x8[x_8][5] = sadTree8x8Cur_org[5][x_8];
			sadTree8x8Mv[x_8][5][0] = mvx;
			sadTree8x8Mv[x_8][5][1] = mvy;
		}
		sadTree8x8Cur_org[6][x_8] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][6][0] - mvx, sadTree8x8PMv[x_8][6][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[6][x_8] < sadTree8x8[x_8][6])
		{
			sadTree8x8[x_8][6] = sadTree8x8Cur_org[6][x_8];
			sadTree8x8Mv[x_8][6][0] = mvx;
			sadTree8x8Mv[x_8][6][1] = mvy;
		}
		sadTree8x8Cur_org[7][x_8] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][7][0] - mvx, sadTree8x8PMv[x_8][7][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[7][x_8] < sadTree8x8[x_8][7])
		{
			sadTree8x8[x_8][7] = sadTree8x8Cur_org[7][x_8];
			sadTree8x8Mv[x_8][7][0] = mvx;
			sadTree8x8Mv[x_8][7][1] = mvy;
		}
		/*16x8*/
		sadTree8x16Cur_org[x_8][0] += getMvRcost(lambda_mv, sadTree16x8PMv[0][x_8][0] - mvx, sadTree16x8PMv[0][x_8][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[x_8][0] < sadTree16x8[0][x_8])
		{
			sadTree16x8[0][x_8] = sadTree8x16Cur_org[x_8][0];
			sadTree16x8Mv[0][x_8][0] = mvx;
			sadTree16x8Mv[0][x_8][1] = mvy;
		}
		sadTree8x16Cur_org[x_8][1] += getMvRcost(lambda_mv, sadTree16x8PMv[1][x_8][0] - mvx, sadTree16x8PMv[1][x_8][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[x_8][1] < sadTree16x8[1][x_8])
		{
			sadTree16x8[1][x_8] = sadTree8x16Cur_org[x_8][1];
			sadTree16x8Mv[1][x_8][0] = mvx;
			sadTree16x8Mv[1][x_8][1] = mvy;
		}
		sadTree8x16Cur_org[x_8][2] += getMvRcost(lambda_mv, sadTree16x8PMv[2][x_8][0] - mvx, sadTree16x8PMv[2][x_8][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[x_8][2] < sadTree16x8[2][x_8])
		{
			sadTree16x8[2][x_8] = sadTree8x16Cur_org[x_8][2];
			sadTree16x8Mv[2][x_8][0] = mvx;
			sadTree16x8Mv[2][x_8][1] = mvy;
		}
		sadTree8x16Cur_org[x_8][3] += getMvRcost(lambda_mv, sadTree16x8PMv[3][x_8][0] - mvx, sadTree16x8PMv[3][x_8][1] - mvy, num_refp, refi);
		if (sadTree8x16Cur_org[x_8][3] < sadTree16x8[3][x_8])
		{
			sadTree16x8[3][x_8] = sadTree8x16Cur_org[x_8][3];
			sadTree16x8Mv[3][x_8][0] = mvx;
			sadTree16x8Mv[3][x_8][1] = mvy;
		}

		/*8x16*/
		sadTree16x8Cur_org[0][x_8] += getMvRcost(lambda_mv, sadTree8x16PMv[x_8][0][0] - mvx, sadTree8x16PMv[x_8][0][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[0][x_8] < sadTree8x16[x_8][0])
		{
			sadTree8x16[x_8][0] = sadTree16x8Cur_org[0][x_8];
			sadTree8x16Mv[x_8][0][0] = mvx;
			sadTree8x16Mv[x_8][0][1] = mvy;
		}
		sadTree16x8Cur_org[1][x_8] += getMvRcost(lambda_mv, sadTree8x16PMv[x_8][1][0] - mvx, sadTree8x16PMv[x_8][1][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[1][x_8] < sadTree8x16[x_8][1])
		{
			sadTree8x16[x_8][1] = sadTree16x8Cur_org[1][x_8];
			sadTree8x16Mv[x_8][1][0] = mvx;
			sadTree8x16Mv[x_8][1][1] = mvy;
		}
		sadTree16x8Cur_org[2][x_8] += getMvRcost(lambda_mv, sadTree8x16PMv[x_8][2][0] - mvx, sadTree8x16PMv[x_8][2][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[2][x_8] < sadTree8x16[x_8][2])
		{
			sadTree8x16[x_8][2] = sadTree16x8Cur_org[2][x_8];
			sadTree8x16Mv[x_8][2][0] = mvx;
			sadTree8x16Mv[x_8][2][1] = mvy;
		}
		sadTree16x8Cur_org[3][x_8] += getMvRcost(lambda_mv, sadTree8x16PMv[x_8][3][0] - mvx, sadTree8x16PMv[x_8][3][1] - mvy, num_refp, refi);
		if (sadTree16x8Cur_org[3][x_8] < sadTree8x16[x_8][3])
		{
			sadTree8x16[x_8][3] = sadTree16x8Cur_org[3][x_8];
			sadTree8x16Mv[x_8][3][0] = mvx;
			sadTree8x16Mv[x_8][3][1] = mvy;
		}

		/*32x8*/
		sadTree8x32Cur_org[x_8][0] += getMvRcost(lambda_mv, sadTree32x8PMv[0][x_8][0] - mvx, sadTree32x8PMv[0][x_8][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[x_8][0] < sadTree32x8[0][x_8])
		{
			sadTree32x8[0][x_8] = sadTree8x32Cur_org[x_8][0];
			sadTree32x8Mv[0][x_8][0] = mvx;
			sadTree32x8Mv[0][x_8][1] = mvy;
		}
		sadTree8x32Cur_org[x_8][1] += getMvRcost(lambda_mv, sadTree32x8PMv[1][x_8][0] - mvx, sadTree32x8PMv[1][x_8][1] - mvy, num_refp, refi);
		if (sadTree8x32Cur_org[x_8][1] < sadTree32x8[1][x_8])
		{
			sadTree32x8[1][x_8] = sadTree8x32Cur_org[x_8][1];
			sadTree32x8Mv[1][x_8][0] = mvx;
			sadTree32x8Mv[1][x_8][1] = mvy;
		}

		/*8x32*/
		sadTree32x8Cur_org[0][x_8] += getMvRcost(lambda_mv, sadTree8x32PMv[x_8][0][0] - mvx, sadTree8x32PMv[x_8][0][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[0][x_8] < sadTree8x32[x_8][0])
		{
			sadTree8x32[x_8][0] = sadTree32x8Cur_org[0][x_8];
			sadTree8x32Mv[x_8][0][0] = mvx;
			sadTree8x32Mv[x_8][0][1] = mvy;
		}
		sadTree32x8Cur_org[1][x_8] += getMvRcost(lambda_mv, sadTree8x32PMv[x_8][1][0] - mvx, sadTree8x32PMv[x_8][1][1] - mvy, num_refp, refi);
		if (sadTree32x8Cur_org[1][x_8] < sadTree8x32[x_8][1])
		{
			sadTree8x32[x_8][1] = sadTree32x8Cur_org[1][x_8];
			sadTree8x32Mv[x_8][1][0] = mvx;
			sadTree8x32Mv[x_8][1][1] = mvy;
		}

		/*8x64*/
		sadTree64x8Cur_org[0][x_8] += getMvRcost(lambda_mv, sadTree8x64PMv[x_8][0][0] - mvx, sadTree8x64PMv[x_8][0][1] - mvy, num_refp, refi);
		if (sadTree64x8Cur_org[0][x_8] < sadTree8x64[x_8][0])
		{
			sadTree8x64[x_8][0] = sadTree64x8Cur_org[0][x_8];
			sadTree8x64Mv[x_8][0][0] = mvx;
			sadTree8x64Mv[x_8][0][1] = mvy;
		}

		/*64x8*/
		sadTree8x64Cur_org[x_8][0] += getMvRcost(lambda_mv, sadTree64x8PMv[0][x_8][0] - mvx, sadTree64x8PMv[0][x_8][1] - mvy, num_refp, refi);
		if (sadTree8x64Cur_org[x_8][0] < sadTree64x8[0][x_8])
		{
			sadTree64x8[0][x_8] = sadTree8x64Cur_org[x_8][0];
			sadTree64x8Mv[0][x_8][0] = mvx;
			sadTree64x8Mv[0][x_8][1] = mvy;
		}

		//// check sadTree8x64Cur_org
		//for (int j = 0; j < 8; j++)
		//{
		//	for (int i = 0; i < 1; i++)
		//	{
		//		if (sadTree8x64Cur_org[j][i] != sadTree64x8Cur[i][j])
		//		{

		//			printf("sadTree8x64Cur_org error! \n");
		//			printf("sadTree8x64Cur_org[%d][%d] = %d\tsadTree64x8Cur[%d][%d] = %d \n", j, i, sadTree8x64Cur_org[j][i], i, j, sadTree64x8Cur[i][j]);
		//		}
		//	}
		//}

		//// check sadTree64x8Cur_org
		//for (int j = 0; j < 8; j++)
		//{
		//	for (int i = 0; i < 1; i++)
		//	{
		//		if (sadTree64x8Cur_org[j][i] != sadTree64x8Cur[i][j])
		//		{

		//			printf("sadTree64x8Cur_org error! \n");
		//			printf("sadTree64x8Cur_org[%d][%d] = %d\tsadTree64x8Cur[%d][%d] = %d \n", j, i, sadTree64x8Cur_org[j][i], i, j, sadTree64x8Cur[i][j]);
		//		}
		//	}
		//}



#endif



	}

#endif
}

void mergeBestInfo8(
	U16 sadTree8x8[8][8], U16 sadTree16x8[4][8], U16 sadTree8x16[8][4], U16 sadTree32x8[2][8], U16 sadTree8x32[8][2], U32 sadTree64x8[1][8], U32 sadTree8x64[8][1],
	U16 sadTree8x8Cur[8][8], U16 sadTree16x8Cur[4][8], U16 sadTree8x16Cur[8][4], U16 sadTree32x8Cur[2][8], U16 sadTree8x32Cur[8][2], U32 sadTree64x8Cur[1][8], U32 sadTree8x64Cur[8][1],
	S14 sadTree8x8Mv[8][8][2], S14 sadTree16x8Mv[4][8][2], S14 sadTree8x16Mv[8][4][2], S14 sadTree32x8Mv[2][8][2], S14 sadTree8x32Mv[8][2][2], S14 sadTree64x8Mv[1][8][2], S14 sadTree8x64Mv[8][1][2],
	S14 sadTree8x8MvCur[8][8][2], S14 sadTree16x8MvCur[4][8][2], S14 sadTree8x16MvCur[8][4][2], S14 sadTree32x8MvCur[2][8][2], S14 sadTree8x32MvCur[8][2][2], S14 sadTree64x8MvCur[1][8][2], S14 sadTree8x64MvCur[8][1][2])
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadTree8x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree8x8Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64Cur complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree8x8Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64Mv complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree8x8MvCur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8MvCur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16MvCur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8MvCur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32MvCur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8MvCur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64MvCur complete dim=0
#endif

	int x_8;

	for (x_8 = 0; x_8 < 8; x_8++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

		/*8x8*/
		if (sadTree8x8Cur[x_8][0] < sadTree8x8[x_8][0])
		{
			sadTree8x8[x_8][0] = sadTree8x8Cur[x_8][0];
			sadTree8x8Mv[x_8][0][0] = sadTree8x8MvCur[x_8][0][0];
			sadTree8x8Mv[x_8][0][1] = sadTree8x8MvCur[x_8][0][1];
		}

		if (sadTree8x8Cur[x_8][1] < sadTree8x8[x_8][1])
		{
			sadTree8x8[x_8][1] = sadTree8x8Cur[x_8][1];
			sadTree8x8Mv[x_8][1][0] = sadTree8x8MvCur[x_8][1][0];
			sadTree8x8Mv[x_8][1][1] = sadTree8x8MvCur[x_8][1][1];
		}

		if (sadTree8x8Cur[x_8][2] < sadTree8x8[x_8][2])
		{
			sadTree8x8[x_8][2] = sadTree8x8Cur[x_8][2];
			sadTree8x8Mv[x_8][2][0] = sadTree8x8MvCur[x_8][2][0];
			sadTree8x8Mv[x_8][2][1] = sadTree8x8MvCur[x_8][2][1];
		}

		if (sadTree8x8Cur[x_8][3] < sadTree8x8[x_8][3])
		{
			sadTree8x8[x_8][3] = sadTree8x8Cur[x_8][3];
			sadTree8x8Mv[x_8][3][0] = sadTree8x8MvCur[x_8][3][0];
			sadTree8x8Mv[x_8][3][1] = sadTree8x8MvCur[x_8][3][1];
		}

		if (sadTree8x8Cur[x_8][4] < sadTree8x8[x_8][4])
		{
			sadTree8x8[x_8][4] = sadTree8x8Cur[x_8][4];
			sadTree8x8Mv[x_8][4][0] = sadTree8x8MvCur[x_8][4][0];
			sadTree8x8Mv[x_8][4][1] = sadTree8x8MvCur[x_8][4][1];
		}

		if (sadTree8x8Cur[x_8][5] < sadTree8x8[x_8][5])
		{
			sadTree8x8[x_8][5] = sadTree8x8Cur[x_8][5];
			sadTree8x8Mv[x_8][5][0] = sadTree8x8MvCur[x_8][5][0];
			sadTree8x8Mv[x_8][5][1] = sadTree8x8MvCur[x_8][5][1];
		}

		if (sadTree8x8Cur[x_8][6] < sadTree8x8[x_8][6])
		{
			sadTree8x8[x_8][6] = sadTree8x8Cur[x_8][6];
			sadTree8x8Mv[x_8][6][0] = sadTree8x8MvCur[x_8][6][0];
			sadTree8x8Mv[x_8][6][1] = sadTree8x8MvCur[x_8][6][1];
		}

		if (sadTree8x8Cur[x_8][7] < sadTree8x8[x_8][7])
		{
			sadTree8x8[x_8][7] = sadTree8x8Cur[x_8][7];
			sadTree8x8Mv[x_8][7][0] = sadTree8x8MvCur[x_8][7][0];
			sadTree8x8Mv[x_8][7][1] = sadTree8x8MvCur[x_8][7][1];
		}

		/*16x8*/

		if (sadTree16x8Cur[0][x_8] < sadTree16x8[0][x_8])
		{
			sadTree16x8[0][x_8] = sadTree16x8Cur[0][x_8];
			sadTree16x8Mv[0][x_8][0] = sadTree16x8MvCur[0][x_8][0];
			sadTree16x8Mv[0][x_8][1] = sadTree16x8MvCur[0][x_8][1];
		}

		if (sadTree16x8Cur[1][x_8] < sadTree16x8[1][x_8])
		{
			sadTree16x8[1][x_8] = sadTree16x8Cur[1][x_8];
			sadTree16x8Mv[1][x_8][0] = sadTree16x8MvCur[1][x_8][0];
			sadTree16x8Mv[1][x_8][1] = sadTree16x8MvCur[1][x_8][1];
		}

		if (sadTree16x8Cur[2][x_8] < sadTree16x8[2][x_8])
		{
			sadTree16x8[2][x_8] = sadTree16x8Cur[2][x_8];
			sadTree16x8Mv[2][x_8][0] = sadTree16x8MvCur[2][x_8][0];
			sadTree16x8Mv[2][x_8][1] = sadTree16x8MvCur[2][x_8][1];
		}

		if (sadTree16x8Cur[3][x_8] < sadTree16x8[3][x_8])
		{
			sadTree16x8[3][x_8] = sadTree16x8Cur[3][x_8];
			sadTree16x8Mv[3][x_8][0] = sadTree16x8MvCur[3][x_8][0];
			sadTree16x8Mv[3][x_8][1] = sadTree16x8MvCur[3][x_8][1];
		}

		/*8x16*/

		if (sadTree8x16Cur[x_8][0] < sadTree8x16[x_8][0])
		{
			sadTree8x16[x_8][0] = sadTree8x16Cur[x_8][0];
			sadTree8x16Mv[x_8][0][0] = sadTree8x16MvCur[x_8][0][0];
			sadTree8x16Mv[x_8][0][1] = sadTree8x16MvCur[x_8][0][1];
		}

		if (sadTree8x16Cur[x_8][1] < sadTree8x16[x_8][1])
		{
			sadTree8x16[x_8][1] = sadTree8x16Cur[x_8][1];
			sadTree8x16Mv[x_8][1][0] = sadTree8x16MvCur[x_8][1][0];
			sadTree8x16Mv[x_8][1][1] = sadTree8x16MvCur[x_8][1][1];
		}

		if (sadTree8x16Cur[x_8][2] < sadTree8x16[x_8][2])
		{
			sadTree8x16[x_8][2] = sadTree8x16Cur[x_8][2];
			sadTree8x16Mv[x_8][2][0] = sadTree8x16MvCur[x_8][2][0];
			sadTree8x16Mv[x_8][2][1] = sadTree8x16MvCur[x_8][2][1];
		}

		if (sadTree8x16Cur[x_8][3] < sadTree8x16[x_8][3])
		{
			sadTree8x16[x_8][3] = sadTree8x16Cur[x_8][3];
			sadTree8x16Mv[x_8][3][0] = sadTree8x16MvCur[x_8][3][0];
			sadTree8x16Mv[x_8][3][1] = sadTree8x16MvCur[x_8][3][1];
		}

		/*32x8*/

		if (sadTree32x8Cur[0][x_8] < sadTree32x8[0][x_8])
		{
			sadTree32x8[0][x_8] = sadTree32x8Cur[0][x_8];
			sadTree32x8Mv[0][x_8][0] = sadTree32x8MvCur[0][x_8][0];
			sadTree32x8Mv[0][x_8][1] = sadTree32x8MvCur[0][x_8][1];
		}

		if (sadTree32x8Cur[1][x_8] < sadTree32x8[1][x_8])
		{
			sadTree32x8[1][x_8] = sadTree32x8Cur[1][x_8];
			sadTree32x8Mv[1][x_8][0] = sadTree32x8MvCur[1][x_8][0];
			sadTree32x8Mv[1][x_8][1] = sadTree32x8MvCur[1][x_8][1];
		}

		/*8x32*/

		if (sadTree8x32Cur[x_8][0] < sadTree8x32[x_8][0])
		{
			sadTree8x32[x_8][0] = sadTree8x32Cur[x_8][0];
			sadTree8x32Mv[x_8][0][0] = sadTree8x32MvCur[x_8][0][0];
			sadTree8x32Mv[x_8][0][1] = sadTree8x32MvCur[x_8][0][1];
		}

		if (sadTree8x32Cur[x_8][1] < sadTree8x32[x_8][1])
		{
			sadTree8x32[x_8][1] = sadTree8x32Cur[x_8][1];
			sadTree8x32Mv[x_8][1][0] = sadTree8x32MvCur[x_8][1][0];
			sadTree8x32Mv[x_8][1][1] = sadTree8x32MvCur[x_8][1][1];
		}

		/*8x64*/

		if (sadTree8x64Cur[x_8][0] < sadTree8x64[x_8][0])
		{
			sadTree8x64[x_8][0] = sadTree8x64Cur[x_8][0];
			sadTree8x64Mv[x_8][0][0] = sadTree8x64MvCur[x_8][0][0];
			sadTree8x64Mv[x_8][0][1] = sadTree8x64MvCur[x_8][0][1];
		}

		/*64x8*/

		if (sadTree64x8Cur[0][x_8] < sadTree64x8[0][x_8])
		{
			sadTree64x8[0][x_8] = sadTree64x8Cur[0][x_8];
			sadTree64x8Mv[0][x_8][0] = sadTree64x8MvCur[0][x_8][0];
			sadTree64x8Mv[0][x_8][1] = sadTree64x8MvCur[0][x_8][1];
		}
	}
}


void compareBestInfo16(S14 mvx, S14 mvy, U32 lambda_mv, U2 num_refp, S2 refi,
	U32 sadTree16x16[4][4], U32 sadTree32x16[2][4], U32 sadTree16x32[4][2], U32 sadTree64x16[1][4], U32 sadTree16x64[4][1],

	U32 sadTree16x16Cur_org[4][4], U32 sadTree32x16Cur_org[2][4], U32 sadTree16x32Cur_org[4][2], U32 sadTree64x16Cur_org[1][4], U32 sadTree16x64Cur_org[4][1],
	//============================================
	//U32 sadTree16x16Cur[4][4], U32 sadTree32x16Cur[2][4], U32 sadTree16x32Cur[4][2], U32 sadTree64x16Cur[1][4], U32 sadTree16x64Cur[4][1],
	S14 sadTree16x16Mv[4][4][2], S14 sadTree32x16Mv[2][4][2], S14 sadTree16x32Mv[4][2][2], S14 sadTree64x16Mv[1][4][2], S14 sadTree16x64Mv[4][1][2],
	S14 sadTree16x16PMv[4][4][2], S14 sadTree32x16PMv[2][4][2], S14 sadTree16x32PMv[4][2][2], S14 sadTree64x16PMv[1][4][2], S14 sadTree16x64PMv[4][1][2])
{
#if IME_PRAGMA_ON

#pragma HLS ARRAY_PARTITION variable=sadTree16x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree16x16Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64Cur_org complete dim=0
	//============================================
//#pragma HLS ARRAY_PARTITION variable=sadTree16x16Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x16Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x32Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x16Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x64Cur complete dim=0

#if LV0_MV_PMV_PARTTION_ON
#pragma HLS ARRAY_PARTITION variable=sadTree16x16Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64Mv complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree16x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64PMv complete dim=0
#endif // #if LV0_MV_PMV_PARTTION_ON

#endif

#if VIVADO_HLS_IME

	//U3 x_16;

		/*16x16*/
		sadTree16x16Cur_org[0][0] += getMvRcost(lambda_mv, sadTree16x16PMv[0][0][0] - mvx, sadTree16x16PMv[0][0][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[0][0] < sadTree16x16[0][0])
		{
			sadTree16x16[0][0] = sadTree16x16Cur_org[0][0];
			sadTree16x16Mv[0][0][0] = mvx;
			sadTree16x16Mv[0][0][1] = mvy;
		}

		sadTree16x16Cur_org[1][0] += getMvRcost(lambda_mv, sadTree16x16PMv[0][1][0] - mvx, sadTree16x16PMv[0][1][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[1][0] < sadTree16x16[0][1])
		{
			sadTree16x16[0][1] = sadTree16x16Cur_org[1][0];
			sadTree16x16Mv[0][1][0] = mvx;
			sadTree16x16Mv[0][1][1] = mvy;
		}

		sadTree16x16Cur_org[2][0] += getMvRcost(lambda_mv, sadTree16x16PMv[0][2][0] - mvx, sadTree16x16PMv[0][2][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[2][0] < sadTree16x16[0][2])
		{
			sadTree16x16[0][2] = sadTree16x16Cur_org[2][0];
			sadTree16x16Mv[0][2][0] = mvx;
			sadTree16x16Mv[0][2][1] = mvy;
		}

		sadTree16x16Cur_org[3][0] += getMvRcost(lambda_mv, sadTree16x16PMv[0][3][0] - mvx, sadTree16x16PMv[0][3][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[3][0] < sadTree16x16[0][3])
		{
			sadTree16x16[0][3] = sadTree16x16Cur_org[3][0];
			sadTree16x16Mv[0][3][0] = mvx;
			sadTree16x16Mv[0][3][1] = mvy;
		}

		/*16x32*/
		sadTree32x16Cur_org[0][0] += getMvRcost(lambda_mv, sadTree16x32PMv[0][0][0] - mvx, sadTree16x32PMv[0][0][1] - mvy, num_refp, refi);
		if (sadTree32x16Cur_org[0][0] < sadTree16x32[0][0])
		{
			sadTree16x32[0][0] = sadTree32x16Cur_org[0][0];
			sadTree16x32Mv[0][0][0] = mvx;
			sadTree16x32Mv[0][0][1] = mvy;
		}

		sadTree32x16Cur_org[1][0] += getMvRcost(lambda_mv, sadTree16x32PMv[0][1][0] - mvx, sadTree16x32PMv[0][1][1] - mvy, num_refp, refi);
		if (sadTree32x16Cur_org[1][0] < sadTree16x32[0][1])
		{
			sadTree16x32[0][1] = sadTree32x16Cur_org[1][0];
			sadTree16x32Mv[0][1][0] = mvx;
			sadTree16x32Mv[0][1][1] = mvy;
		}


		/*16x64*/
		sadTree64x16Cur_org[0][0] += getMvRcost(lambda_mv, sadTree16x64PMv[0][0][0] - mvx, sadTree16x64PMv[0][0][1] - mvy, num_refp, refi);
		if (sadTree64x16Cur_org[0][0] < sadTree16x64[0][0])
		{
			sadTree16x64[0][0] = sadTree64x16Cur_org[0][0];
			sadTree16x64Mv[0][0][0] = mvx;
			sadTree16x64Mv[0][0][1] = mvy;
		}

		/*32x16*/
		sadTree16x32Cur_org[0][0] += getMvRcost(lambda_mv, sadTree32x16PMv[0][0][0] - mvx, sadTree32x16PMv[0][0][1] - mvy, num_refp, refi);
		if (sadTree16x32Cur_org[0][0] < sadTree32x16[0][0])
		{
			sadTree32x16[0][0] = sadTree16x32Cur_org[0][0];
			sadTree32x16Mv[0][0][0] = mvx;
			sadTree32x16Mv[0][0][1] = mvy;
		}

		sadTree16x32Cur_org[0][1] += getMvRcost(lambda_mv, sadTree32x16PMv[1][0][0] - mvx, sadTree32x16PMv[1][0][1] - mvy, num_refp, refi);
		if (sadTree16x32Cur_org[0][1] < sadTree32x16[1][0])
		{
			sadTree32x16[1][0] = sadTree16x32Cur_org[0][1];
			sadTree32x16Mv[1][0][0] = mvx;
			sadTree32x16Mv[1][0][1] = mvy;
		}


		/*64x16*/
		sadTree16x64Cur_org[0][0] += getMvRcost(lambda_mv, sadTree64x16PMv[0][0][0] - mvx, sadTree64x16PMv[0][0][1] - mvy, num_refp, refi);
		if (sadTree16x64Cur_org[0][0] < sadTree64x16[0][0])
		{
			sadTree64x16[0][0] = sadTree16x64Cur_org[0][0];
			sadTree64x16Mv[0][0][0] = mvx;
			sadTree64x16Mv[0][0][1] = mvy;
		}
		//==============================================================================================================================================

				/*16x16*/
		sadTree16x16Cur_org[0][1] += getMvRcost(lambda_mv, sadTree16x16PMv[1][0][0] - mvx, sadTree16x16PMv[1][0][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[0][1] < sadTree16x16[1][0])
		{
			sadTree16x16[1][0] = sadTree16x16Cur_org[0][1];
			sadTree16x16Mv[1][0][0] = mvx;
			sadTree16x16Mv[1][0][1] = mvy;
		}

		sadTree16x16Cur_org[1][1] += getMvRcost(lambda_mv, sadTree16x16PMv[1][1][0] - mvx, sadTree16x16PMv[1][1][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[1][1] < sadTree16x16[1][1])
		{
			sadTree16x16[1][1] = sadTree16x16Cur_org[1][1];
			sadTree16x16Mv[1][1][0] = mvx;
			sadTree16x16Mv[1][1][1] = mvy;
		}

		sadTree16x16Cur_org[2][1] += getMvRcost(lambda_mv, sadTree16x16PMv[1][2][0] - mvx, sadTree16x16PMv[1][2][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[2][1] < sadTree16x16[1][2])
		{
			sadTree16x16[1][2] = sadTree16x16Cur_org[2][1];
			sadTree16x16Mv[1][2][0] = mvx;
			sadTree16x16Mv[1][2][1] = mvy;
		}

		sadTree16x16Cur_org[3][1] += getMvRcost(lambda_mv, sadTree16x16PMv[1][3][0] - mvx, sadTree16x16PMv[1][3][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[3][1] < sadTree16x16[1][3])
		{
			sadTree16x16[1][3] = sadTree16x16Cur_org[3][1];
			sadTree16x16Mv[1][3][0] = mvx;
			sadTree16x16Mv[1][3][1] = mvy;
		}

		/*16x32*/
		sadTree32x16Cur_org[0][1] += getMvRcost(lambda_mv, sadTree16x32PMv[1][0][0] - mvx, sadTree16x32PMv[1][0][1] - mvy, num_refp, refi);
		if (sadTree32x16Cur_org[0][1] < sadTree16x32[1][0])
		{
			sadTree16x32[1][0] = sadTree32x16Cur_org[0][1];
			sadTree16x32Mv[1][0][0] = mvx;
			sadTree16x32Mv[1][0][1] = mvy;
		}

		sadTree32x16Cur_org[1][1] += getMvRcost(lambda_mv, sadTree16x32PMv[1][1][0] - mvx, sadTree16x32PMv[1][1][1] - mvy, num_refp, refi);
		if (sadTree32x16Cur_org[1][1] < sadTree16x32[1][1])
		{
			sadTree16x32[1][1] = sadTree32x16Cur_org[1][1];
			sadTree16x32Mv[1][1][0] = mvx;
			sadTree16x32Mv[1][1][1] = mvy;
		}


		/*16x64*/
		sadTree64x16Cur_org[0][1] += getMvRcost(lambda_mv, sadTree16x64PMv[1][0][0] - mvx, sadTree16x64PMv[1][0][1] - mvy, num_refp, refi);
		if (sadTree64x16Cur_org[0][1] < sadTree16x64[1][0])
		{
			sadTree16x64[1][0] = sadTree64x16Cur_org[0][1];
			sadTree16x64Mv[1][0][0] = mvx;
			sadTree16x64Mv[1][0][1] = mvy;
		}

		/*32x16*/
		sadTree16x32Cur_org[1][0] += getMvRcost(lambda_mv, sadTree32x16PMv[0][1][0] - mvx, sadTree32x16PMv[0][1][1] - mvy, num_refp, refi);
		if (sadTree16x32Cur_org[1][0] < sadTree32x16[0][1])
		{
			sadTree32x16[0][1] = sadTree16x32Cur_org[1][0];
			sadTree32x16Mv[0][1][0] = mvx;
			sadTree32x16Mv[0][1][1] = mvy;
		}

		sadTree16x32Cur_org[1][1] += getMvRcost(lambda_mv, sadTree32x16PMv[1][1][0] - mvx, sadTree32x16PMv[1][1][1] - mvy, num_refp, refi);
		if (sadTree16x32Cur_org[1][1] < sadTree32x16[1][1])
		{
			sadTree32x16[1][1] = sadTree16x32Cur_org[1][1];
			sadTree32x16Mv[1][1][0] = mvx;
			sadTree32x16Mv[1][1][1] = mvy;
		}


		/*64x16*/
		sadTree16x64Cur_org[1][0] += getMvRcost(lambda_mv, sadTree64x16PMv[0][1][0] - mvx, sadTree64x16PMv[0][1][1] - mvy, num_refp, refi);
		if (sadTree16x64Cur_org[1][0] < sadTree64x16[0][1])
		{
			sadTree64x16[0][1] = sadTree16x64Cur_org[1][0];
			sadTree64x16Mv[0][1][0] = mvx;
			sadTree64x16Mv[0][1][1] = mvy;
		}
		//==============================================================================================================================================

				/*16x16*/
		sadTree16x16Cur_org[0][2] += getMvRcost(lambda_mv, sadTree16x16PMv[2][0][0] - mvx, sadTree16x16PMv[2][0][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[0][2] < sadTree16x16[2][0])
		{
			sadTree16x16[2][0] = sadTree16x16Cur_org[0][2];
			sadTree16x16Mv[2][0][0] = mvx;
			sadTree16x16Mv[2][0][1] = mvy;
		}

		sadTree16x16Cur_org[1][2] += getMvRcost(lambda_mv, sadTree16x16PMv[2][1][0] - mvx, sadTree16x16PMv[2][1][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[1][2] < sadTree16x16[2][1])
		{
			sadTree16x16[2][1] = sadTree16x16Cur_org[1][2];
			sadTree16x16Mv[2][1][0] = mvx;
			sadTree16x16Mv[2][1][1] = mvy;
		}

		sadTree16x16Cur_org[2][2] += getMvRcost(lambda_mv, sadTree16x16PMv[2][2][0] - mvx, sadTree16x16PMv[2][2][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[2][2] < sadTree16x16[2][2])
		{
			sadTree16x16[2][2] = sadTree16x16Cur_org[2][2];
			sadTree16x16Mv[2][2][0] = mvx;
			sadTree16x16Mv[2][2][1] = mvy;
		}

		sadTree16x16Cur_org[3][2] += getMvRcost(lambda_mv, sadTree16x16PMv[2][3][0] - mvx, sadTree16x16PMv[2][3][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[3][2] < sadTree16x16[2][3])
		{
			sadTree16x16[2][3] = sadTree16x16Cur_org[3][2];
			sadTree16x16Mv[2][3][0] = mvx;
			sadTree16x16Mv[2][3][1] = mvy;
		}

		/*16x32*/
		sadTree32x16Cur_org[0][2] += getMvRcost(lambda_mv, sadTree16x32PMv[2][0][0] - mvx, sadTree16x32PMv[2][0][1] - mvy, num_refp, refi);
		if (sadTree32x16Cur_org[0][2] < sadTree16x32[2][0])
		{
			sadTree16x32[2][0] = sadTree32x16Cur_org[0][2];
			sadTree16x32Mv[2][0][0] = mvx;
			sadTree16x32Mv[2][0][1] = mvy;
		}

		sadTree32x16Cur_org[1][2] += getMvRcost(lambda_mv, sadTree16x32PMv[2][1][0] - mvx, sadTree16x32PMv[2][1][1] - mvy, num_refp, refi);
		if (sadTree32x16Cur_org[1][2] < sadTree16x32[2][1])
		{
			sadTree16x32[2][1] = sadTree32x16Cur_org[1][2];
			sadTree16x32Mv[2][1][0] = mvx;
			sadTree16x32Mv[2][1][1] = mvy;
		}


		/*16x64*/
		sadTree64x16Cur_org[0][2] += getMvRcost(lambda_mv, sadTree16x64PMv[2][0][0] - mvx, sadTree16x64PMv[2][0][1] - mvy, num_refp, refi);
		if (sadTree64x16Cur_org[0][2] < sadTree16x64[2][0])
		{
			sadTree16x64[2][0] = sadTree64x16Cur_org[0][2];
			sadTree16x64Mv[2][0][0] = mvx;
			sadTree16x64Mv[2][0][1] = mvy;
		}

		/*32x16*/
		sadTree16x32Cur_org[2][0] += getMvRcost(lambda_mv, sadTree32x16PMv[0][2][0] - mvx, sadTree32x16PMv[0][2][1] - mvy, num_refp, refi);
		if (sadTree16x32Cur_org[2][0] < sadTree32x16[0][2])
		{
			sadTree32x16[0][2] = sadTree16x32Cur_org[2][0];
			sadTree32x16Mv[0][2][0] = mvx;
			sadTree32x16Mv[0][2][1] = mvy;
		}

		sadTree16x32Cur_org[2][1] += getMvRcost(lambda_mv, sadTree32x16PMv[1][2][0] - mvx, sadTree32x16PMv[1][2][1] - mvy, num_refp, refi);
		if (sadTree16x32Cur_org[2][1] < sadTree32x16[1][2])
		{
			sadTree32x16[1][2] = sadTree16x32Cur_org[2][1];
			sadTree32x16Mv[1][2][0] = mvx;
			sadTree32x16Mv[1][2][1] = mvy;
		}


		/*64x16*/
		sadTree16x64Cur_org[2][0] += getMvRcost(lambda_mv, sadTree64x16PMv[0][2][0] - mvx, sadTree64x16PMv[0][2][1] - mvy, num_refp, refi);
		if (sadTree16x64Cur_org[2][0] < sadTree64x16[0][2])
		{
			sadTree64x16[0][2] = sadTree16x64Cur_org[2][0];
			sadTree64x16Mv[0][2][0] = mvx;
			sadTree64x16Mv[0][2][1] = mvy;
		}
		//==============================================================================================================================================

				/*16x16*/
		sadTree16x16Cur_org[0][3] += getMvRcost(lambda_mv, sadTree16x16PMv[3][0][0] - mvx, sadTree16x16PMv[3][0][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[0][3] < sadTree16x16[3][0])
		{
			sadTree16x16[3][0] = sadTree16x16Cur_org[0][3];
			sadTree16x16Mv[3][0][0] = mvx;
			sadTree16x16Mv[3][0][1] = mvy;
		}

		sadTree16x16Cur_org[1][3] += getMvRcost(lambda_mv, sadTree16x16PMv[3][1][0] - mvx, sadTree16x16PMv[3][1][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[1][3] < sadTree16x16[3][1])
		{
			sadTree16x16[3][1] = sadTree16x16Cur_org[1][3];
			sadTree16x16Mv[3][1][0] = mvx;
			sadTree16x16Mv[3][1][1] = mvy;
		}

		sadTree16x16Cur_org[2][3] += getMvRcost(lambda_mv, sadTree16x16PMv[3][2][0] - mvx, sadTree16x16PMv[3][2][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[2][3] < sadTree16x16[3][2])
		{
			sadTree16x16[3][2] = sadTree16x16Cur_org[2][3];
			sadTree16x16Mv[3][2][0] = mvx;
			sadTree16x16Mv[3][2][1] = mvy;
		}

		sadTree16x16Cur_org[3][3] += getMvRcost(lambda_mv, sadTree16x16PMv[3][3][0] - mvx, sadTree16x16PMv[3][3][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[3][3] < sadTree16x16[3][3])
		{
			sadTree16x16[3][3] = sadTree16x16Cur_org[3][3];
			sadTree16x16Mv[3][3][0] = mvx;
			sadTree16x16Mv[3][3][1] = mvy;
		}

		/*16x32*/
		sadTree32x16Cur_org[0][3] += getMvRcost(lambda_mv, sadTree16x32PMv[3][0][0] - mvx, sadTree16x32PMv[3][0][1] - mvy, num_refp, refi);
		if (sadTree32x16Cur_org[0][3] < sadTree16x32[3][0])
		{
			sadTree16x32[3][0] = sadTree32x16Cur_org[0][3];
			sadTree16x32Mv[3][0][0] = mvx;
			sadTree16x32Mv[3][0][1] = mvy;
		}

		sadTree32x16Cur_org[1][3] += getMvRcost(lambda_mv, sadTree16x32PMv[3][1][0] - mvx, sadTree16x32PMv[3][1][1] - mvy, num_refp, refi);
		if (sadTree32x16Cur_org[1][3] < sadTree16x32[3][1])
		{
			sadTree16x32[3][1] = sadTree32x16Cur_org[1][3];
			sadTree16x32Mv[3][1][0] = mvx;
			sadTree16x32Mv[3][1][1] = mvy;
		}


		/*16x64*/
		sadTree64x16Cur_org[0][3] += getMvRcost(lambda_mv, sadTree16x64PMv[3][0][0] - mvx, sadTree16x64PMv[3][0][1] - mvy, num_refp, refi);
		if (sadTree64x16Cur_org[0][3] < sadTree16x64[3][0])
		{
			sadTree16x64[3][0] = sadTree64x16Cur_org[0][3];
			sadTree16x64Mv[3][0][0] = mvx;
			sadTree16x64Mv[3][0][1] = mvy;
		}

		/*32x16*/
		sadTree16x32Cur_org[3][0] += getMvRcost(lambda_mv, sadTree32x16PMv[0][3][0] - mvx, sadTree32x16PMv[0][3][1] - mvy, num_refp, refi);
		if (sadTree16x32Cur_org[3][0] < sadTree32x16[0][3])
		{
			sadTree32x16[0][3] = sadTree16x32Cur_org[3][0];
			sadTree32x16Mv[0][3][0] = mvx;
			sadTree32x16Mv[0][3][1] = mvy;
		}

		sadTree16x32Cur_org[3][1] += getMvRcost(lambda_mv, sadTree32x16PMv[1][3][0] - mvx, sadTree32x16PMv[1][3][1] - mvy, num_refp, refi);
		if (sadTree16x32Cur_org[3][1] < sadTree32x16[1][3])
		{
			sadTree32x16[1][3] = sadTree16x32Cur_org[3][1];
			sadTree32x16Mv[1][3][0] = mvx;
			sadTree32x16Mv[1][3][1] = mvy;
		}


		/*64x16*/
		sadTree16x64Cur_org[3][0] += getMvRcost(lambda_mv, sadTree64x16PMv[0][3][0] - mvx, sadTree64x16PMv[0][3][1] - mvy, num_refp, refi);
		if (sadTree16x64Cur_org[3][0] < sadTree64x16[0][3])
		{
			sadTree64x16[0][3] = sadTree16x64Cur_org[3][0];
			sadTree64x16Mv[0][3][0] = mvx;
			sadTree64x16Mv[0][3][1] = mvy;
		}
		//==============================================================================================================================================


#else
	//int x_16;
	U3 x_16;

	for (x_16 = 0; x_16 < 4; x_16++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
#if 0//1
		/*16x16*/
		sadTree16x16Cur[x_16][0] += getMvRcost(lambda_mv, sadTree16x16PMv[x_16][0][0] - mvx, sadTree16x16PMv[x_16][0][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur[x_16][0] < sadTree16x16[x_16][0])
		{
			sadTree16x16[x_16][0] = sadTree16x16Cur[x_16][0];
			sadTree16x16Mv[x_16][0][0] = mvx;
			sadTree16x16Mv[x_16][0][1] = mvy;
		}

		sadTree16x16Cur[x_16][1] += getMvRcost(lambda_mv, sadTree16x16PMv[x_16][1][0] - mvx, sadTree16x16PMv[x_16][1][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur[x_16][1] < sadTree16x16[x_16][1])
		{
			sadTree16x16[x_16][1] = sadTree16x16Cur[x_16][1];
			sadTree16x16Mv[x_16][1][0] = mvx;
			sadTree16x16Mv[x_16][1][1] = mvy;
		}

		sadTree16x16Cur[x_16][2] += getMvRcost(lambda_mv, sadTree16x16PMv[x_16][2][0] - mvx, sadTree16x16PMv[x_16][2][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur[x_16][2] < sadTree16x16[x_16][2])
		{
			sadTree16x16[x_16][2] = sadTree16x16Cur[x_16][2];
			sadTree16x16Mv[x_16][2][0] = mvx;
			sadTree16x16Mv[x_16][2][1] = mvy;
		}

		sadTree16x16Cur[x_16][3] += getMvRcost(lambda_mv, sadTree16x16PMv[x_16][3][0] - mvx, sadTree16x16PMv[x_16][3][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur[x_16][3] < sadTree16x16[x_16][3])
		{
			sadTree16x16[x_16][3] = sadTree16x16Cur[x_16][3];
			sadTree16x16Mv[x_16][3][0] = mvx;
			sadTree16x16Mv[x_16][3][1] = mvy;
		}

		/*16x32*/
		sadTree16x32Cur[x_16][0] += getMvRcost(lambda_mv, sadTree16x32PMv[x_16][0][0] - mvx, sadTree16x32PMv[x_16][0][1] - mvy, num_refp, refi);
		if (sadTree16x32Cur[x_16][0] < sadTree16x32[x_16][0])
		{
			sadTree16x32[x_16][0] = sadTree16x32Cur[x_16][0];
			sadTree16x32Mv[x_16][0][0] = mvx;
			sadTree16x32Mv[x_16][0][1] = mvy;
		}

		sadTree16x32Cur[x_16][1] += getMvRcost(lambda_mv, sadTree16x32PMv[x_16][1][0] - mvx, sadTree16x32PMv[x_16][1][1] - mvy, num_refp, refi);
		if (sadTree16x32Cur[x_16][1] < sadTree16x32[x_16][1])
		{
			sadTree16x32[x_16][1] = sadTree16x32Cur[x_16][1];
			sadTree16x32Mv[x_16][1][0] = mvx;
			sadTree16x32Mv[x_16][1][1] = mvy;
		}


		/*16x64*/
		sadTree16x64Cur[x_16][0] += getMvRcost(lambda_mv, sadTree16x64PMv[x_16][0][0] - mvx, sadTree16x64PMv[x_16][0][1] - mvy, num_refp, refi);
		if (sadTree16x64Cur[x_16][0] < sadTree16x64[x_16][0])
		{
			sadTree16x64[x_16][0] = sadTree16x64Cur[x_16][0];
			sadTree16x64Mv[x_16][0][0] = mvx;
			sadTree16x64Mv[x_16][0][1] = mvy;
		}

		/*32x16*/
		sadTree32x16Cur[0][x_16] += getMvRcost(lambda_mv, sadTree32x16PMv[0][x_16][0] - mvx, sadTree32x16PMv[0][x_16][1] - mvy, num_refp, refi);
		if (sadTree32x16Cur[0][x_16] < sadTree32x16[0][x_16])
		{
			sadTree32x16[0][x_16] = sadTree32x16Cur[0][x_16];
			sadTree32x16Mv[0][x_16][0] = mvx;
			sadTree32x16Mv[0][x_16][1] = mvy;
		}

		sadTree32x16Cur[1][x_16] += getMvRcost(lambda_mv, sadTree32x16PMv[1][x_16][0] - mvx, sadTree32x16PMv[1][x_16][1] - mvy, num_refp, refi);
		if (sadTree32x16Cur[1][x_16] < sadTree32x16[1][x_16])
		{
			sadTree32x16[1][x_16] = sadTree32x16Cur[1][x_16];
			sadTree32x16Mv[1][x_16][0] = mvx;
			sadTree32x16Mv[1][x_16][1] = mvy;
		}


		/*64x16*/
		sadTree64x16Cur[0][x_16] += getMvRcost(lambda_mv, sadTree64x16PMv[0][x_16][0] - mvx, sadTree64x16PMv[0][x_16][1] - mvy, num_refp, refi);
		if (sadTree64x16Cur[0][x_16] < sadTree64x16[0][x_16])
		{
			sadTree64x16[0][x_16] = sadTree64x16Cur[0][x_16];
			sadTree64x16Mv[0][x_16][0] = mvx;
			sadTree64x16Mv[0][x_16][1] = mvy;
		}
#else

		/*16x16*/
		sadTree16x16Cur_org[0][x_16] += getMvRcost(lambda_mv, sadTree16x16PMv[x_16][0][0] - mvx, sadTree16x16PMv[x_16][0][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[0][x_16] < sadTree16x16[x_16][0])
		{
			sadTree16x16[x_16][0] = sadTree16x16Cur_org[0][x_16];
			sadTree16x16Mv[x_16][0][0] = mvx;
			sadTree16x16Mv[x_16][0][1] = mvy;
		}

		sadTree16x16Cur_org[1][x_16] += getMvRcost(lambda_mv, sadTree16x16PMv[x_16][1][0] - mvx, sadTree16x16PMv[x_16][1][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[1][x_16] < sadTree16x16[x_16][1])
		{
			sadTree16x16[x_16][1] = sadTree16x16Cur_org[1][x_16];
			sadTree16x16Mv[x_16][1][0] = mvx;
			sadTree16x16Mv[x_16][1][1] = mvy;
		}

		sadTree16x16Cur_org[2][x_16] += getMvRcost(lambda_mv, sadTree16x16PMv[x_16][2][0] - mvx, sadTree16x16PMv[x_16][2][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[2][x_16] < sadTree16x16[x_16][2])
		{
			sadTree16x16[x_16][2] = sadTree16x16Cur_org[2][x_16];
			sadTree16x16Mv[x_16][2][0] = mvx;
			sadTree16x16Mv[x_16][2][1] = mvy;
		}

		sadTree16x16Cur_org[3][x_16] += getMvRcost(lambda_mv, sadTree16x16PMv[x_16][3][0] - mvx, sadTree16x16PMv[x_16][3][1] - mvy, num_refp, refi);
		if (sadTree16x16Cur_org[3][x_16] < sadTree16x16[x_16][3])
		{
			sadTree16x16[x_16][3] = sadTree16x16Cur_org[3][x_16];
			sadTree16x16Mv[x_16][3][0] = mvx;
			sadTree16x16Mv[x_16][3][1] = mvy;
		}

		/*16x32*/
		sadTree32x16Cur_org[0][x_16] += getMvRcost(lambda_mv, sadTree16x32PMv[x_16][0][0] - mvx, sadTree16x32PMv[x_16][0][1] - mvy, num_refp, refi);
		if (sadTree32x16Cur_org[0][x_16] < sadTree16x32[x_16][0])
		{
			sadTree16x32[x_16][0] = sadTree32x16Cur_org[0][x_16];
			sadTree16x32Mv[x_16][0][0] = mvx;
			sadTree16x32Mv[x_16][0][1] = mvy;
		}

		sadTree32x16Cur_org[1][x_16] += getMvRcost(lambda_mv, sadTree16x32PMv[x_16][1][0] - mvx, sadTree16x32PMv[x_16][1][1] - mvy, num_refp, refi);
		if (sadTree32x16Cur_org[1][x_16] < sadTree16x32[x_16][1])
		{
			sadTree16x32[x_16][1] = sadTree32x16Cur_org[1][x_16];
			sadTree16x32Mv[x_16][1][0] = mvx;
			sadTree16x32Mv[x_16][1][1] = mvy;
		}


		/*16x64*/
		sadTree64x16Cur_org[0][x_16] += getMvRcost(lambda_mv, sadTree16x64PMv[x_16][0][0] - mvx, sadTree16x64PMv[x_16][0][1] - mvy, num_refp, refi);
		if (sadTree64x16Cur_org[0][x_16] < sadTree16x64[x_16][0])
		{
			sadTree16x64[x_16][0] = sadTree64x16Cur_org[0][x_16];
			sadTree16x64Mv[x_16][0][0] = mvx;
			sadTree16x64Mv[x_16][0][1] = mvy;
		}

		/*32x16*/
		sadTree16x32Cur_org[x_16][0] += getMvRcost(lambda_mv, sadTree32x16PMv[0][x_16][0] - mvx, sadTree32x16PMv[0][x_16][1] - mvy, num_refp, refi);
		if (sadTree16x32Cur_org[x_16][0] < sadTree32x16[0][x_16])
		{
			sadTree32x16[0][x_16] = sadTree16x32Cur_org[x_16][0];
			sadTree32x16Mv[0][x_16][0] = mvx;
			sadTree32x16Mv[0][x_16][1] = mvy;
		}

		sadTree16x32Cur_org[x_16][1] += getMvRcost(lambda_mv, sadTree32x16PMv[1][x_16][0] - mvx, sadTree32x16PMv[1][x_16][1] - mvy, num_refp, refi);
		if (sadTree16x32Cur_org[x_16][1] < sadTree32x16[1][x_16])
		{
			sadTree32x16[1][x_16] = sadTree16x32Cur_org[x_16][1];
			sadTree32x16Mv[1][x_16][0] = mvx;
			sadTree32x16Mv[1][x_16][1] = mvy;
		}


		/*64x16*/
		sadTree16x64Cur_org[x_16][0] += getMvRcost(lambda_mv, sadTree64x16PMv[0][x_16][0] - mvx, sadTree64x16PMv[0][x_16][1] - mvy, num_refp, refi);
		if (sadTree16x64Cur_org[x_16][0] < sadTree64x16[0][x_16])
		{
			sadTree64x16[0][x_16] = sadTree16x64Cur_org[x_16][0];
			sadTree64x16Mv[0][x_16][0] = mvx;
			sadTree64x16Mv[0][x_16][1] = mvy;
		}
#endif
	}

#endif	// #if VIVADO_HLS_IME
}

void mergeBestInfo16(
	U32 sadTree16x16[4][4], U32 sadTree32x16[2][4], U32 sadTree16x32[4][2], U32 sadTree64x16[1][4], U32 sadTree16x64[4][1],
	U32 sadTree16x16Cur[4][4], U32 sadTree32x16Cur[2][4], U32 sadTree16x32Cur[4][2], U32 sadTree64x16Cur[1][4], U32 sadTree16x64Cur[4][1],
	S14 sadTree16x16Mv[4][4][2], S14 sadTree32x16Mv[2][4][2], S14 sadTree16x32Mv[4][2][2], S14 sadTree64x16Mv[1][4][2], S14 sadTree16x64Mv[4][1][2],
	S14 sadTree16x16MvCur[4][4][2], S14 sadTree32x16MvCur[2][4][2], S14 sadTree16x32MvCur[4][2][2], S14 sadTree64x16MvCur[1][4][2], S14 sadTree16x64MvCur[4][1][2])
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadTree16x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree16x16Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64Cur complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree16x16Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64Mv complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree16x16MvCur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16MvCur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32MvCur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16MvCur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64MvCur complete dim=0
#endif

	int x_16;

	for (x_16 = 0; x_16 < 4; x_16++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

		/*16x16*/
		if (sadTree16x16Cur[x_16][0] < sadTree16x16[x_16][0])
		{
			sadTree16x16[x_16][0] = sadTree16x16Cur[x_16][0];
			sadTree16x16Mv[x_16][0][0] = sadTree16x16MvCur[x_16][0][0];
			sadTree16x16Mv[x_16][0][1] = sadTree16x16MvCur[x_16][0][1];
		}

		if (sadTree16x16Cur[x_16][1] < sadTree16x16[x_16][1])
		{
			sadTree16x16[x_16][1] = sadTree16x16Cur[x_16][1];
			sadTree16x16Mv[x_16][1][0] = sadTree16x16MvCur[x_16][1][0];
			sadTree16x16Mv[x_16][1][1] = sadTree16x16MvCur[x_16][1][1];
		}

		if (sadTree16x16Cur[x_16][2] < sadTree16x16[x_16][2])
		{
			sadTree16x16[x_16][2] = sadTree16x16Cur[x_16][2];
			sadTree16x16Mv[x_16][2][0] = sadTree16x16MvCur[x_16][2][0];
			sadTree16x16Mv[x_16][2][1] = sadTree16x16MvCur[x_16][2][1];
		}

		if (sadTree16x16Cur[x_16][3] < sadTree16x16[x_16][3])
		{
			sadTree16x16[x_16][3] = sadTree16x16Cur[x_16][3];
			sadTree16x16Mv[x_16][3][0] = sadTree16x16MvCur[x_16][3][0];
			sadTree16x16Mv[x_16][3][1] = sadTree16x16MvCur[x_16][3][1];
		}

		/*16x32*/
		if (sadTree16x32Cur[x_16][0] < sadTree16x32[x_16][0])
		{
			sadTree16x32[x_16][0] = sadTree16x32Cur[x_16][0];
			sadTree16x32Mv[x_16][0][0] = sadTree16x32MvCur[x_16][0][0];
			sadTree16x32Mv[x_16][0][1] = sadTree16x32MvCur[x_16][0][1];
		}

		if (sadTree16x32Cur[x_16][1] < sadTree16x32[x_16][1])
		{
			sadTree16x32[x_16][1] = sadTree16x32Cur[x_16][1];
			sadTree16x32Mv[x_16][1][0] = sadTree16x32MvCur[x_16][1][0];
			sadTree16x32Mv[x_16][1][1] = sadTree16x32MvCur[x_16][1][1];
		}


		/*16x64*/
		if (sadTree16x64Cur[x_16][0] < sadTree16x64[x_16][0])
		{
			sadTree16x64[x_16][0] = sadTree16x64Cur[x_16][0];
			sadTree16x64Mv[x_16][0][0] = sadTree16x64MvCur[x_16][0][0];
			sadTree16x64Mv[x_16][0][1] = sadTree16x64MvCur[x_16][0][1];
		}

		/*32x16*/
		if (sadTree32x16Cur[0][x_16] < sadTree32x16[0][x_16])
		{
			sadTree32x16[0][x_16] = sadTree32x16Cur[0][x_16];
			sadTree32x16Mv[0][x_16][0] = sadTree32x16MvCur[0][x_16][0];
			sadTree32x16Mv[0][x_16][1] = sadTree32x16MvCur[0][x_16][1];
		}

		if (sadTree32x16Cur[1][x_16] < sadTree32x16[1][x_16])
		{
			sadTree32x16[1][x_16] = sadTree32x16Cur[1][x_16];
			sadTree32x16Mv[1][x_16][0] = sadTree32x16MvCur[1][x_16][0];
			sadTree32x16Mv[1][x_16][1] = sadTree32x16MvCur[1][x_16][1];
		}


		/*64x16*/
		if (sadTree64x16Cur[0][x_16] < sadTree64x16[0][x_16])
		{
			sadTree64x16[0][x_16] = sadTree64x16Cur[0][x_16];
			sadTree64x16Mv[0][x_16][0] = sadTree64x16MvCur[0][x_16][0];
			sadTree64x16Mv[0][x_16][1] = sadTree64x16MvCur[0][x_16][1];
		}
	}
}



void compareBestInfo32(S14 mvx, S14 mvy, U32 lambda_mv, U2 num_refp, S2 refi,
	U32 sadTree32x32[2][2], U32 sadTree64x32[1][2], U32 sadTree32x64[2][1],

	U32 sadTree32x32Cur_org[2][2], U32 sadTree64x32Cur_org[1][2], U32 sadTree32x64Cur_org[2][1],
	//=====================================================================================
	//U32 sadTree32x32Cur[2][2], U32 sadTree64x32Cur[1][2], U32 sadTree32x64Cur[2][1],
	S14 sadTree32x32Mv[2][2][2], S14 sadTree64x32Mv[1][2][2], S14 sadTree32x64Mv[2][1][2],
	S14 sadTree32x32PMv[2][2][2], S14 sadTree64x32PMv[1][2][2], S14 sadTree32x64PMv[2][1][2])
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadTree32x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree32x32Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64Cur_org complete dim=0
//=====================================================================================
//#pragma HLS ARRAY_PARTITION variable=sadTree32x32Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x32Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x64Cur complete dim=0

#if LV0_MV_PMV_PARTTION_ON
#pragma HLS ARRAY_PARTITION variable=sadTree32x32Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64Mv complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree32x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64PMv complete dim=0
#endif

#endif

#if VIVADO_HLS_IME

		/*32x32*/
		sadTree32x32Cur_org[0][0] += getMvRcost(lambda_mv, sadTree32x32PMv[0][0][0] - mvx, sadTree32x32PMv[0][0][1] - mvy, num_refp, refi);
		if (sadTree32x32Cur_org[0][0] < sadTree32x32[0][0])
		{
			sadTree32x32[0][0] = sadTree32x32Cur_org[0][0];
			sadTree32x32Mv[0][0][0] = mvx;
			sadTree32x32Mv[0][0][1] = mvy;
		}

		sadTree32x32Cur_org[1][0] += getMvRcost(lambda_mv, sadTree32x32PMv[0][1][0] - mvx, sadTree32x32PMv[0][1][1] - mvy, num_refp, refi);
		if (sadTree32x32Cur_org[1][0] < sadTree32x32[0][1])
		{
			sadTree32x32[0][1] = sadTree32x32Cur_org[1][0];
			sadTree32x32Mv[0][1][0] = mvx;
			sadTree32x32Mv[0][1][1] = mvy;
		}

		/*32x64*/
		sadTree64x32Cur_org[0][0] += getMvRcost(lambda_mv, sadTree32x64PMv[0][0][0] - mvx, sadTree32x64PMv[0][0][1] - mvy, num_refp, refi);
		if (sadTree64x32Cur_org[0][0] < sadTree32x64[0][0])
		{
			sadTree32x64[0][0] = sadTree64x32Cur_org[0][0];
			sadTree32x64Mv[0][0][0] = mvx;
			sadTree32x64Mv[0][0][1] = mvy;
		}

		/*64x32*/
		sadTree32x64Cur_org[0][0] += getMvRcost(lambda_mv, sadTree64x32PMv[0][0][0] - mvx, sadTree64x32PMv[0][0][1] - mvy, num_refp, refi);
		if (sadTree32x64Cur_org[0][0] < sadTree64x32[0][0])
		{
			sadTree64x32[0][0] = sadTree32x64Cur_org[0][0];
			sadTree64x32Mv[0][0][0] = mvx;
			sadTree64x32Mv[0][0][1] = mvy;
		}
		//==============================================================================================================================================

				/*32x32*/
		sadTree32x32Cur_org[0][1] += getMvRcost(lambda_mv, sadTree32x32PMv[1][0][0] - mvx, sadTree32x32PMv[1][0][1] - mvy, num_refp, refi);
		if (sadTree32x32Cur_org[0][1] < sadTree32x32[1][0])
		{
			sadTree32x32[1][0] = sadTree32x32Cur_org[0][1];
			sadTree32x32Mv[1][0][0] = mvx;
			sadTree32x32Mv[1][0][1] = mvy;
		}

		sadTree32x32Cur_org[1][1] += getMvRcost(lambda_mv, sadTree32x32PMv[1][1][0] - mvx, sadTree32x32PMv[1][1][1] - mvy, num_refp, refi);
		if (sadTree32x32Cur_org[1][1] < sadTree32x32[1][1])
		{
			sadTree32x32[1][1] = sadTree32x32Cur_org[1][1];
			sadTree32x32Mv[1][1][0] = mvx;
			sadTree32x32Mv[1][1][1] = mvy;
		}

		/*32x64*/
		sadTree64x32Cur_org[0][1] += getMvRcost(lambda_mv, sadTree32x64PMv[1][0][0] - mvx, sadTree32x64PMv[1][0][1] - mvy, num_refp, refi);
		if (sadTree64x32Cur_org[0][1] < sadTree32x64[1][0])
		{
			sadTree32x64[1][0] = sadTree64x32Cur_org[0][1];
			sadTree32x64Mv[1][0][0] = mvx;
			sadTree32x64Mv[1][0][1] = mvy;
		}

		/*64x32*/
		sadTree32x64Cur_org[1][0] += getMvRcost(lambda_mv, sadTree64x32PMv[0][1][0] - mvx, sadTree64x32PMv[0][1][1] - mvy, num_refp, refi);
		if (sadTree32x64Cur_org[1][0] < sadTree64x32[0][1])
		{
			sadTree64x32[0][1] = sadTree32x64Cur_org[1][0];
			sadTree64x32Mv[0][1][0] = mvx;
			sadTree64x32Mv[0][1][1] = mvy;
		}
		//==============================================================================================================================================


#else

	//int x_32;
	U2 x_32;

	for (x_32 = 0; x_32 < 2; x_32++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
#if 0//1
		/*32x32*/
		sadTree32x32Cur[x_32][0] += getMvRcost(lambda_mv, sadTree32x32PMv[x_32][0][0] - mvx, sadTree32x32PMv[x_32][0][1] - mvy, num_refp, refi);
		if (sadTree32x32Cur[x_32][0] < sadTree32x32[x_32][0])
		{
			sadTree32x32[x_32][0] = sadTree32x32Cur[x_32][0];
			sadTree32x32Mv[x_32][0][0] = mvx;
			sadTree32x32Mv[x_32][0][1] = mvy;
		}

		sadTree32x32Cur[x_32][1] += getMvRcost(lambda_mv, sadTree32x32PMv[x_32][1][0] - mvx, sadTree32x32PMv[x_32][1][1] - mvy, num_refp, refi);
		if (sadTree32x32Cur[x_32][1] < sadTree32x32[x_32][1])
		{
			sadTree32x32[x_32][1] = sadTree32x32Cur[x_32][1];
			sadTree32x32Mv[x_32][1][0] = mvx;
			sadTree32x32Mv[x_32][1][1] = mvy;
		}

		/*32x64*/
		sadTree32x64Cur[x_32][0] += getMvRcost(lambda_mv, sadTree32x64PMv[x_32][0][0] - mvx, sadTree32x64PMv[x_32][0][1] - mvy, num_refp, refi);
		if (sadTree32x64Cur[x_32][0] < sadTree32x64[x_32][0])
		{
			sadTree32x64[x_32][0] = sadTree32x64Cur[x_32][0];
			sadTree32x64Mv[x_32][0][0] = mvx;
			sadTree32x64Mv[x_32][0][1] = mvy;
		}

		/*64x32*/
		sadTree64x32Cur[0][x_32] += getMvRcost(lambda_mv, sadTree64x32PMv[0][x_32][0] - mvx, sadTree64x32PMv[0][x_32][1] - mvy, num_refp, refi);
		if (sadTree64x32Cur[0][x_32] < sadTree64x32[0][x_32])
		{
			sadTree64x32[0][x_32] = sadTree64x32Cur[0][x_32];
			sadTree64x32Mv[0][x_32][0] = mvx;
			sadTree64x32Mv[0][x_32][1] = mvy;
		}
#else

		/*32x32*/
		sadTree32x32Cur_org[0][x_32] += getMvRcost(lambda_mv, sadTree32x32PMv[x_32][0][0] - mvx, sadTree32x32PMv[x_32][0][1] - mvy, num_refp, refi);
		if (sadTree32x32Cur_org[0][x_32] < sadTree32x32[x_32][0])
		{
			sadTree32x32[x_32][0] = sadTree32x32Cur_org[0][x_32];
			sadTree32x32Mv[x_32][0][0] = mvx;
			sadTree32x32Mv[x_32][0][1] = mvy;
		}

		sadTree32x32Cur_org[1][x_32] += getMvRcost(lambda_mv, sadTree32x32PMv[x_32][1][0] - mvx, sadTree32x32PMv[x_32][1][1] - mvy, num_refp, refi);
		if (sadTree32x32Cur_org[1][x_32] < sadTree32x32[x_32][1])
		{
			sadTree32x32[x_32][1] = sadTree32x32Cur_org[1][x_32];
			sadTree32x32Mv[x_32][1][0] = mvx;
			sadTree32x32Mv[x_32][1][1] = mvy;
		}

		/*32x64*/
		sadTree64x32Cur_org[0][x_32] += getMvRcost(lambda_mv, sadTree32x64PMv[x_32][0][0] - mvx, sadTree32x64PMv[x_32][0][1] - mvy, num_refp, refi);
		if (sadTree64x32Cur_org[0][x_32] < sadTree32x64[x_32][0])
		{
			sadTree32x64[x_32][0] = sadTree64x32Cur_org[0][x_32];
			sadTree32x64Mv[x_32][0][0] = mvx;
			sadTree32x64Mv[x_32][0][1] = mvy;
		}

		/*64x32*/
		sadTree32x64Cur_org[x_32][0] += getMvRcost(lambda_mv, sadTree64x32PMv[0][x_32][0] - mvx, sadTree64x32PMv[0][x_32][1] - mvy, num_refp, refi);
		if (sadTree32x64Cur_org[x_32][0] < sadTree64x32[0][x_32])
		{
			sadTree64x32[0][x_32] = sadTree32x64Cur_org[x_32][0];
			sadTree64x32Mv[0][x_32][0] = mvx;
			sadTree64x32Mv[0][x_32][1] = mvy;
		}
#endif
	}

#endif
}

void mergeBestInfo32(
	U32 sadTree32x32[2][2], U32 sadTree64x32[1][2], U32 sadTree32x64[2][1],
	U32 sadTree32x32Cur[2][2], U32 sadTree64x32Cur[1][2], U32 sadTree32x64Cur[2][1],
	S14 sadTree32x32Mv[2][2][2], S14 sadTree64x32Mv[1][2][2], S14 sadTree32x64Mv[2][1][2],
	S14 sadTree32x32MvCur[2][2][2], S14 sadTree64x32MvCur[1][2][2], S14 sadTree32x64MvCur[2][1][2])
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadTree32x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree32x32Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64Cur complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree32x32Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64Mv complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree32x32MvCur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32MvCur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64MvCur complete dim=0
#endif

	int x_32;

	for (x_32 = 0; x_32 < 2; x_32++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

		/*32x32*/
		if (sadTree32x32Cur[x_32][0] < sadTree32x32[x_32][0])
		{
			sadTree32x32[x_32][0] = sadTree32x32Cur[x_32][0];
			sadTree32x32Mv[x_32][0][0] = sadTree32x32MvCur[x_32][0][0];
			sadTree32x32Mv[x_32][0][1] = sadTree32x32MvCur[x_32][0][1];
		}

		if (sadTree32x32Cur[x_32][1] < sadTree32x32[x_32][1])
		{
			sadTree32x32[x_32][1] = sadTree32x32Cur[x_32][1];
			sadTree32x32Mv[x_32][1][0] = sadTree32x32MvCur[x_32][1][0];
			sadTree32x32Mv[x_32][1][1] = sadTree32x32MvCur[x_32][1][1];
		}

		/*32x64*/
		if (sadTree32x64Cur[x_32][0] < sadTree32x64[x_32][0])
		{
			sadTree32x64[x_32][0] = sadTree32x64Cur[x_32][0];
			sadTree32x64Mv[x_32][0][0] = sadTree32x64MvCur[x_32][0][0];
			sadTree32x64Mv[x_32][0][1] = sadTree32x64MvCur[x_32][0][1];
		}

		/*64x32*/
		if (sadTree64x32Cur[0][x_32] < sadTree64x32[0][x_32])
		{
			sadTree64x32[0][x_32] = sadTree64x32Cur[0][x_32];
			sadTree64x32Mv[0][x_32][0] = sadTree64x32MvCur[0][x_32][0];
			sadTree64x32Mv[0][x_32][1] = sadTree64x32MvCur[0][x_32][1];
		}
	}
}

void compareBestInfo(S14 mvx, S14 mvy, U32 lambda_mv, U2 num_refp, S2 refi,
	U32 sadTree64x64[1][1],
	U32 sadTree32x32[2][2], U32 sadTree64x32[1][2], U32 sadTree32x64[2][1],
	U32 sadTree16x16[4][4], U32 sadTree32x16[2][4], U32 sadTree16x32[4][2], U32 sadTree64x16[1][4], U32 sadTree16x64[4][1],
	U16 sadTree8x8[8][8], U16 sadTree16x8[4][8], U16 sadTree8x16[8][4], U16 sadTree32x8[2][8], U16 sadTree8x32[8][2], U32 sadTree64x8[1][8], U32 sadTree8x64[8][1],

	U32 sadTree64x64Cur_org[1][1],
	U32 sadTree32x32Cur_org[2][2], U32 sadTree64x32Cur_org[1][2], U32 sadTree32x64Cur_org[2][1],
	U32 sadTree16x16Cur_org[4][4], U32 sadTree32x16Cur_org[2][4], U32 sadTree16x32Cur_org[4][2], U32 sadTree64x16Cur_org[1][4], U32 sadTree16x64Cur_org[4][1],
#if BW_DEBUG
	U10 sadTree8x8Cur_org[8][8], 
#else
	pel sadTree8x8Cur_org[8][8],
#endif
	U16 sadTree16x8Cur_org[4][8], U16 sadTree8x16Cur_org[8][4], U16 sadTree32x8Cur_org[2][8], U16 sadTree8x32Cur_org[8][2], U32 sadTree64x8Cur_org[1][8], U32 sadTree8x64Cur_org[8][1],
	////==============================================================================================================================================================================================================================
	//U32 sadTree64x64Cur[1][1],
	//U32 sadTree32x32Cur[2][2], U32 sadTree64x32Cur[1][2], U32 sadTree32x64Cur[2][1],
	//U32 sadTree16x16Cur[4][4], U32 sadTree32x16Cur[2][4], U32 sadTree16x32Cur[4][2], U32 sadTree64x16Cur[1][4], U32 sadTree16x64Cur[4][1],
	//pel sadTree8x8Cur[8][8], U16 sadTree16x8Cur[4][8], U16 sadTree8x16Cur[8][4], U16 sadTree32x8Cur[2][8], U16 sadTree8x32Cur[8][2], U32 sadTree64x8Cur[1][8], U32 sadTree8x64Cur[8][1],

	S14 sadTree64x64Mv[1][1][2],
	S14 sadTree32x32Mv[2][2][2], S14 sadTree64x32Mv[1][2][2], S14 sadTree32x64Mv[2][1][2],
	S14 sadTree16x16Mv[4][4][2], S14 sadTree32x16Mv[2][4][2], S14 sadTree16x32Mv[4][2][2], S14 sadTree64x16Mv[1][4][2], S14 sadTree16x64Mv[4][1][2],
	S14 sadTree8x8Mv[8][8][2], S14 sadTree16x8Mv[4][8][2], S14 sadTree8x16Mv[8][4][2], S14 sadTree32x8Mv[2][8][2], S14 sadTree8x32Mv[8][2][2], S14 sadTree64x8Mv[1][8][2], S14 sadTree8x64Mv[8][1][2],
	S14 sadTree64x64PMv[1][1][2],
	S14 sadTree32x32PMv[2][2][2], S14 sadTree64x32PMv[1][2][2], S14 sadTree32x64PMv[2][1][2],
	S14 sadTree16x16PMv[4][4][2], S14 sadTree32x16PMv[2][4][2], S14 sadTree16x32PMv[4][2][2], S14 sadTree64x16PMv[1][4][2], S14 sadTree16x64PMv[4][1][2],
	S14 sadTree8x8PMv[8][8][2], S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2]
)
{

	//static S14 sadTree64x64Mv_org[1][1][2];
	//static S14 sadTree32x32Mv_org[2][2][2]; 
	//static S14 sadTree64x32Mv_org[1][2][2]; 
	//static S14 sadTree32x64Mv_org[2][1][2];
	//static S14 sadTree16x16Mv_org[4][4][2]; 
	//static S14 sadTree32x16Mv_org[2][4][2]; 
	//static S14 sadTree16x32Mv_org[4][2][2]; 
	//static S14 sadTree64x16Mv_org[1][4][2]; 
	//static S14 sadTree16x64Mv_org[4][1][2];
	//static S14 sadTree8x8Mv_org[8][8][2]; 
	//static S14 sadTree16x8Mv_org[4][8][2]; 
	//static S14 sadTree8x16Mv_org[8][4][2]; 
	//static S14 sadTree32x8Mv_org[2][8][2]; 
	//static S14 sadTree8x32Mv_org[8][2][2]; 
	//static S14 sadTree64x8Mv_org[1][8][2]; 
	//static S14 sadTree8x64Mv_org[8][1][2];

	//static S14 sadTree64x64PMv[1][1][2];
	//static S14 sadTree32x32PMv[2][2][2]; 
	//static S14 sadTree64x32PMv[1][2][2]; 
	//static S14 sadTree32x64PMv[2][1][2];
	//static S14 sadTree16x16PMv[4][4][2]; 
	//static S14 sadTree32x16PMv[2][4][2]; 
	//static S14 sadTree16x32PMv[4][2][2]; 
	//static S14 sadTree64x16PMv[1][4][2]; 
	//static S14 sadTree16x64PMv[4][1][2];
	//static S14 sadTree8x8PMv[8][8][2]; 
	//static S14 sadTree16x8PMv[4][8][2]; 
	//static S14 sadTree8x16PMv[8][4][2]; 
	//static S14 sadTree32x8PMv[2][8][2]; 
	//static S14 sadTree8x32PMv[8][2][2]; 
	//static S14 sadTree64x8PMv[1][8][2]; 
	//static S14 sadTree8x64PMv[8][1][2];

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON

#pragma HLS ARRAY_PARTITION variable=sadTree64x64Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8Cur_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64Cur_org complete dim=0
//=====================================================================
#pragma HLS ARRAY_PARTITION variable=sadTree64x64 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64 complete dim=0

//#pragma HLS ARRAY_PARTITION variable=sadTree64x64Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x32Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x32Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x64Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x16Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x16Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x32Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x16Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x64Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x8Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x8Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x16Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x8Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x32Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x8Cur complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x64Cur complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree64x64Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64Mv complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree64x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64PMv complete dim=0

#endif
#endif	// #if !IME_PRAGMA_ON_OP

#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif

	sadTree64x64Cur_org[0][0] += getMvRcost(lambda_mv, sadTree64x64PMv[0][0][0] - mvx, sadTree64x64PMv[0][0][1] - mvy, num_refp, refi);
	if (sadTree64x64Cur_org[0][0] < sadTree64x64[0][0])
	{
		sadTree64x64[0][0] = sadTree64x64Cur_org[0][0];
		sadTree64x64Mv[0][0][0] = mvx;
		sadTree64x64Mv[0][0][1] = mvy;
	}

	compareBestInfo8(mvx, mvy, lambda_mv, num_refp, refi,
		sadTree8x8, sadTree16x8, sadTree8x16, sadTree32x8, sadTree8x32, sadTree64x8, sadTree8x64,

		sadTree8x8Cur_org, sadTree16x8Cur_org, sadTree8x16Cur_org, sadTree32x8Cur_org, sadTree8x32Cur_org, sadTree64x8Cur_org, sadTree8x64Cur_org,
		//================================================================================================================================================
		//sadTree8x8Cur, sadTree16x8Cur, sadTree8x16Cur, sadTree32x8Cur, sadTree8x32Cur, sadTree64x8Cur, sadTree8x64Cur,

		sadTree8x8Mv, sadTree16x8Mv, sadTree8x16Mv, sadTree32x8Mv, sadTree8x32Mv, sadTree64x8Mv, sadTree8x64Mv,
		sadTree8x8PMv, sadTree16x8PMv, sadTree8x16PMv, sadTree32x8PMv, sadTree8x32PMv, sadTree64x8PMv, sadTree8x64PMv);


	compareBestInfo16(mvx, mvy, lambda_mv, num_refp, refi,
		sadTree16x16, sadTree32x16, sadTree16x32, sadTree64x16, sadTree16x64,

		sadTree16x16Cur_org, sadTree32x16Cur_org, sadTree16x32Cur_org, sadTree64x16Cur_org, sadTree16x64Cur_org,
		//================================================================================================================================================
		//sadTree16x16Cur, sadTree32x16Cur, sadTree16x32Cur, sadTree64x16Cur, sadTree16x64Cur,
		sadTree16x16Mv, sadTree32x16Mv, sadTree16x32Mv, sadTree64x16Mv, sadTree16x64Mv,
		sadTree16x16PMv, sadTree32x16PMv, sadTree16x32PMv, sadTree64x16PMv, sadTree16x64PMv);


	compareBestInfo32(mvx, mvy, lambda_mv, num_refp, refi,
		sadTree32x32, sadTree64x32, sadTree32x64,
		sadTree32x32Cur_org, sadTree64x32Cur_org, sadTree32x64Cur_org,
		//================================================================================================================================================
		//sadTree32x32Cur, sadTree64x32Cur, sadTree32x64Cur,

		sadTree32x32Mv, sadTree64x32Mv, sadTree32x64Mv,
		sadTree32x32PMv, sadTree64x32PMv, sadTree32x64PMv);


}

void mergeBestInfo(
	U32 sadTree64x64[1][1],
	U32 sadTree32x32[2][2], U32 sadTree64x32[1][2], U32 sadTree32x64[2][1],
	U32 sadTree16x16[4][4], U32 sadTree32x16[2][4], U32 sadTree16x32[4][2], U32 sadTree64x16[1][4], U32 sadTree16x64[4][1],
	U16 sadTree8x8[8][8], U16 sadTree16x8[4][8], U16 sadTree8x16[8][4], U16 sadTree32x8[2][8], U16 sadTree8x32[8][2], U32 sadTree64x8[1][8], U32 sadTree8x64[8][1],
	U32 sadTree64x64Cur[1][1],
	U32 sadTree32x32Cur[2][2], U32 sadTree64x32Cur[1][2], U32 sadTree32x64Cur[2][1],
	U32 sadTree16x16Cur[4][4], U32 sadTree32x16Cur[2][4], U32 sadTree16x32Cur[4][2], U32 sadTree64x16Cur[1][4], U32 sadTree16x64Cur[4][1],
	U16 sadTree8x8Cur[8][8], U16 sadTree16x8Cur[4][8], U16 sadTree8x16Cur[8][4], U16 sadTree32x8Cur[2][8], U16 sadTree8x32Cur[8][2], U32 sadTree64x8Cur[1][8], U32 sadTree8x64Cur[8][1],
	S14 sadTree64x64Mv[1][1][2],
	S14 sadTree32x32Mv[2][2][2], S14 sadTree64x32Mv[1][2][2], S14 sadTree32x64Mv[2][1][2],
	S14 sadTree16x16Mv[4][4][2], S14 sadTree32x16Mv[2][4][2], S14 sadTree16x32Mv[4][2][2], S14 sadTree64x16Mv[1][4][2], S14 sadTree16x64Mv[4][1][2],
	S14 sadTree8x8Mv[8][8][2], S14 sadTree16x8Mv[4][8][2], S14 sadTree8x16Mv[8][4][2], S14 sadTree32x8Mv[2][8][2], S14 sadTree8x32Mv[8][2][2], S14 sadTree64x8Mv[1][8][2], S14 sadTree8x64Mv[8][1][2],
	S14 sadTree64x64MvCur[1][1][2],
	S14 sadTree32x32MvCur[2][2][2], S14 sadTree64x32MvCur[1][2][2], S14 sadTree32x64MvCur[2][1][2],
	S14 sadTree16x16MvCur[4][4][2], S14 sadTree32x16MvCur[2][4][2], S14 sadTree16x32MvCur[4][2][2], S14 sadTree64x16MvCur[1][4][2], S14 sadTree16x64MvCur[4][1][2],
	S14 sadTree8x8MvCur[8][8][2], S14 sadTree16x8MvCur[4][8][2], S14 sadTree8x16MvCur[8][4][2], S14 sadTree32x8MvCur[2][8][2], S14 sadTree8x32MvCur[8][2][2], S14 sadTree64x8MvCur[1][8][2], S14 sadTree8x64MvCur[8][1][2])
{
#if IME_PRAGMA_ON
#pragma HLS inline off
#pragma HLS ARRAY_PARTITION variable=sadTree64x64 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x64Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8Cur complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64Cur complete dim=0
#endif

	if (sadTree64x64Cur[0][0] < sadTree64x64[0][0])
	{
		sadTree64x64[0][0] = sadTree64x64Cur[0][0];
		sadTree64x64Mv[0][0][0] = sadTree64x64MvCur[0][0][0];
		sadTree64x64Mv[0][0][1] = sadTree64x64MvCur[0][0][1];
	}

	mergeBestInfo8(
		sadTree8x8, sadTree16x8, sadTree8x16, sadTree32x8, sadTree8x32, sadTree64x8, sadTree8x64,
		sadTree8x8Cur, sadTree16x8Cur, sadTree8x16Cur, sadTree32x8Cur, sadTree8x32Cur, sadTree64x8Cur, sadTree8x64Cur,
		sadTree8x8Mv, sadTree16x8Mv, sadTree8x16Mv, sadTree32x8Mv, sadTree8x32Mv, sadTree64x8Mv, sadTree8x64Mv,
		sadTree8x8MvCur, sadTree16x8MvCur, sadTree8x16MvCur, sadTree32x8MvCur, sadTree8x32MvCur, sadTree64x8MvCur, sadTree8x64MvCur);


	mergeBestInfo16(
		sadTree16x16, sadTree32x16, sadTree16x32, sadTree64x16, sadTree16x64,
		sadTree16x16Cur, sadTree32x16Cur, sadTree16x32Cur, sadTree64x16Cur, sadTree16x64Cur,
		sadTree16x16Mv, sadTree32x16Mv, sadTree16x32Mv, sadTree64x16Mv, sadTree16x64Mv,
		sadTree16x16MvCur, sadTree32x16MvCur, sadTree16x32MvCur, sadTree64x16MvCur, sadTree16x64MvCur);


	mergeBestInfo32(
		sadTree32x32, sadTree64x32, sadTree32x64,
		sadTree32x32Cur, sadTree64x32Cur, sadTree32x64Cur,
		sadTree32x32Mv, sadTree64x32Mv, sadTree32x64Mv,
		sadTree32x32MvCur, sadTree64x32MvCur, sadTree32x64MvCur);
}

//#define SAD_OCT_ACC_ORG(b,a) sadPelOct(lineBufferRef_org[reltY + baseSwH][a], lineBufferOrg_org[reltY + baseOrgH][b],\
//	lineBufferRef_org[reltY + baseSwH][a + 1], lineBufferOrg_org[reltY + baseOrgH][b + 1], \
//	lineBufferRef_org[reltY + baseSwH][a + 2], lineBufferOrg_org[reltY + baseOrgH][b + 2], \
//	lineBufferRef_org[reltY + baseSwH][a + 3], lineBufferOrg_org[reltY + baseOrgH][b + 3], \
//	lineBufferRef_org[reltY + baseSwH][a + 4], lineBufferOrg_org[reltY + baseOrgH][b + 4], \
//	lineBufferRef_org[reltY + baseSwH][a + 5], lineBufferOrg_org[reltY + baseOrgH][b + 5], \
//	lineBufferRef_org[reltY + baseSwH][a + 6], lineBufferOrg_org[reltY + baseOrgH][b + 6], \
//	lineBufferRef_org[reltY + baseSwH][a + 7], lineBufferOrg_org[reltY + baseOrgH][b + 7], bit_depth)
//
//#define SAD_OCT_INIT_ORG(b,a) sadPelOct(lineBufferRef_org[baseSwH][a], lineBufferOrg_org[baseOrgH][b],\
//	lineBufferRef_org[baseSwH][a + 1], lineBufferOrg_org[baseOrgH][b + 1], \
//	lineBufferRef_org[baseSwH][a + 2], lineBufferOrg_org[baseOrgH][b + 2], \
//	lineBufferRef_org[baseSwH][a + 3], lineBufferOrg_org[baseOrgH][b + 3], \
//	lineBufferRef_org[baseSwH][a + 4], lineBufferOrg_org[baseOrgH][b + 4], \
//	lineBufferRef_org[baseSwH][a + 5], lineBufferOrg_org[baseOrgH][b + 5], \
//	lineBufferRef_org[baseSwH][a + 6], lineBufferOrg_org[baseOrgH][b + 6], \
//	lineBufferRef_org[baseSwH][a + 7], lineBufferOrg_org[baseOrgH][b + 7], bit_depth)

#define SAD_OCT_ACC_ORG(b,a) sadPelOct_test1(lineBufferRef_org[reltY + baseSwH][a], lineBufferOrg_org[reltY + baseOrgH][b],\
	lineBufferRef_org[reltY + baseSwH][a + 1], lineBufferOrg_org[reltY + baseOrgH][b + 1], \
	lineBufferRef_org[reltY + baseSwH][a + 2], lineBufferOrg_org[reltY + baseOrgH][b + 2], \
	lineBufferRef_org[reltY + baseSwH][a + 3], lineBufferOrg_org[reltY + baseOrgH][b + 3], \
	lineBufferRef_org[reltY + baseSwH][a + 4], lineBufferOrg_org[reltY + baseOrgH][b + 4], \
	lineBufferRef_org[reltY + baseSwH][a + 5], lineBufferOrg_org[reltY + baseOrgH][b + 5], \
	lineBufferRef_org[reltY + baseSwH][a + 6], lineBufferOrg_org[reltY + baseOrgH][b + 6], \
	lineBufferRef_org[reltY + baseSwH][a + 7], lineBufferOrg_org[reltY + baseOrgH][b + 7], bit_depth)

#define SAD_OCT_INIT_ORG(b,a) sadPelOct_test1(lineBufferRef_org[baseSwH][a], lineBufferOrg_org[baseOrgH][b],\
	lineBufferRef_org[baseSwH][a + 1], lineBufferOrg_org[baseOrgH][b + 1], \
	lineBufferRef_org[baseSwH][a + 2], lineBufferOrg_org[baseOrgH][b + 2], \
	lineBufferRef_org[baseSwH][a + 3], lineBufferOrg_org[baseOrgH][b + 3], \
	lineBufferRef_org[baseSwH][a + 4], lineBufferOrg_org[baseOrgH][b + 4], \
	lineBufferRef_org[baseSwH][a + 5], lineBufferOrg_org[baseOrgH][b + 5], \
	lineBufferRef_org[baseSwH][a + 6], lineBufferOrg_org[baseOrgH][b + 6], \
	lineBufferRef_org[baseSwH][a + 7], lineBufferOrg_org[baseOrgH][b + 7], bit_depth)


#define SAD_OCT_ACC(a,b) sadPelOct(lineBufferRef[a][reltY + baseSwH], lineBufferOrg[b][reltY + baseOrgH],\
	lineBufferRef[a + 1][reltY + baseSwH], lineBufferOrg[b + 1][reltY + baseOrgH], \
	lineBufferRef[a + 2][reltY + baseSwH], lineBufferOrg[b + 2][reltY + baseOrgH], \
	lineBufferRef[a + 3][reltY + baseSwH], lineBufferOrg[b + 3][reltY + baseOrgH], \
	lineBufferRef[a + 4][reltY + baseSwH], lineBufferOrg[b + 4][reltY + baseOrgH], \
	lineBufferRef[a + 5][reltY + baseSwH], lineBufferOrg[b + 5][reltY + baseOrgH], \
	lineBufferRef[a + 6][reltY + baseSwH], lineBufferOrg[b + 6][reltY + baseOrgH], \
	lineBufferRef[a + 7][reltY + baseSwH], lineBufferOrg[b + 7][reltY + baseOrgH], bit_depth)

#define SAD_OCT_INIT(a,b) sadPelOct(lineBufferRef[a][baseSwH], lineBufferOrg[b][baseOrgH],\
	lineBufferRef[a + 1][baseSwH], lineBufferOrg[b + 1][baseOrgH], \
	lineBufferRef[a + 2][baseSwH], lineBufferOrg[b + 2][baseOrgH], \
	lineBufferRef[a + 3][baseSwH], lineBufferOrg[b + 3][baseOrgH], \
	lineBufferRef[a + 4][baseSwH], lineBufferOrg[b + 4][baseOrgH], \
	lineBufferRef[a + 5][baseSwH], lineBufferOrg[b + 5][baseOrgH], \
	lineBufferRef[a + 6][baseSwH], lineBufferOrg[b + 6][baseOrgH], \
	lineBufferRef[a + 7][baseSwH], lineBufferOrg[b + 7][baseOrgH], bit_depth)

void calcLineSadMore(
#if BW_DEBUG
	U10 lineBufferRef_org[80][80],
	U10 lineBufferOrg_org[64][64],
	U10 sadScu0_org[8][8],
	U10 sadScu1_org[8][8],
	U10 sadScu2_org[8][8],
	U10 sadScu3_org[8][8],
	U10 sadScu4_org[8][8],
	U10 sadScu5_org[8][8],
	U10 sadScu6_org[8][8],
	U10 sadScu7_org[8][8],
	U10 sadScu8_org[8][8],
	U10 sadScu9_org[8][8],
	U10 sadScu10_org[8][8],
	U10 sadScu11_org[8][8],
	U10 sadScu12_org[8][8],
	U10 sadScu13_org[8][8],
	U10 sadScu14_org[8][8],
	U10 sadScu15_org[8][8],
#else
	pel lineBufferRef_org[80][80], 
	pel lineBufferOrg_org[64][64],
	pel sadScu0_org[8][8], 
	pel sadScu1_org[8][8], 
	pel sadScu2_org[8][8], 
	pel sadScu3_org[8][8], 
	pel sadScu4_org[8][8], 
	pel sadScu5_org[8][8], 
	pel sadScu6_org[8][8],
	pel sadScu7_org[8][8],
	pel sadScu8_org[8][8], 
	pel sadScu9_org[8][8], 
	pel sadScu10_org[8][8], 
	pel sadScu11_org[8][8], 
	pel sadScu12_org[8][8],
	pel sadScu13_org[8][8], 
	pel sadScu14_org[8][8], 
	pel sadScu15_org[8][8],
#endif

	//pel lineBufferRef[80][80], pel lineBufferOrg[64][64], 
	//pel sadScu0[8][8], pel sadScu1[8][8], pel sadScu2[8][8], pel sadScu3[8][8], pel sadScu4[8][8], pel sadScu5[8][8], pel sadScu6[8][8], pel sadScu7[8][8],
	//pel sadScu8[8][8], pel sadScu9[8][8], pel sadScu10[8][8], pel sadScu11[8][8], pel sadScu12[8][8], pel sadScu13[8][8], pel sadScu14[8][8], pel sadScu15[8][8], 
	U8 yScu, U8 baseSwH, U8 baseOrgH, U4 bit_depth
)
{
#if 0
	// template:
	for (int i = 0; i < 16; i++) // y offset // pipeline.
	{
		for (int  j = 0; j < 64; j++) // 64 lines // pipeline
		{
			int sad[8][8][16];
			int sad_tmp[8][16]; // 8\A3\BA8\B8\F6block, 16: MVs. 
			if (j%8==0)
			{
				sad_tmp = 0; // memset 
			}
			// 16 MV calc sad.
			for (mv =0 ; mv<16; mv++) // unroll.
			for pel =0 64 
			sad += lineBufferOrg_org[j][64] - lineBufferRef_org[i + j][mv+64];
		}

		// finish.
		// fully. pipeline. stream interface 
		// sad cost combine and compare. 

	}
#endif

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=lineBufferRef_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=lineBufferOrg_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=sadScu0_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_org complete dim=0

//#pragma HLS ARRAY_PARTITION variable=lineBufferRef complete dim=1
//#pragma HLS ARRAY_PARTITION variable=lineBufferOrg complete dim=1
//#pragma HLS ARRAY_PARTITION variable=sadScu0 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu1 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu2 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu3 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu4 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu5 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu6 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu7 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu8 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu9 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu10 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu11 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu12 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu13 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu14 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu15 complete dim=0
#endif

	//// check
	//for (int j = 0; j < 80; j++)
	//{
	//	for (int i = 0; i < 80; i++)
	//	{
	//		if (lineBufferRef_org[j][i] != lineBufferRef[i][j])
	//		{

	//			printf("lineBufferRef_org error! \n");
	//			printf("lineBufferRef_org[%d][%d] = %d\tlineBufferRef[%d][%d] = %d \n", j, i, lineBufferRef_org[j][i], i, j, lineBufferRef[i][j]);
	//		}
	//	}
	//}
	//for (int j = 0; j < 64; j++)
	//{
	//	for (int i = 0; i < 64; i++)
	//	{
	//		if (lineBufferOrg_org[j][i] != lineBufferOrg[i][j])
	//		{

	//			printf("lineBufferOrg_org error! \n");
	//			printf("lineBufferOrg_org[%d][%d] = %d\tlineBufferOrg[%d][%d] = %d \n", j, i, lineBufferOrg_org[j][i], i, j, lineBufferOrg[i][j]);
	//		}
	//	}
	//}

	U8 reltY;

	/*sadScu0_org[yScu][0] = SAD_OCT_INIT_ORG(0, 0);  		sadScu0_org[yScu][1] = SAD_OCT_INIT_ORG(8, 8);  		sadScu0_org[yScu][2] = SAD_OCT_INIT_ORG(16, 16);  		sadScu0_org[yScu][3] = SAD_OCT_INIT_ORG(24, 24);  		sadScu0_org[yScu][4] = SAD_OCT_INIT_ORG(32, 32);  		sadScu0_org[yScu][5] = SAD_OCT_INIT_ORG(40, 40);  		sadScu0_org[yScu][6] = SAD_OCT_INIT_ORG(48, 48);  		sadScu0_org[yScu][7] = SAD_OCT_INIT_ORG(56, 56);
	sadScu1_org[yScu][0] = SAD_OCT_INIT_ORG(0, 1);  		sadScu1_org[yScu][1] = SAD_OCT_INIT_ORG(8, 9);  		sadScu1_org[yScu][2] = SAD_OCT_INIT_ORG(16, 17);  		sadScu1_org[yScu][3] = SAD_OCT_INIT_ORG(24, 25);  		sadScu1_org[yScu][4] = SAD_OCT_INIT_ORG(32, 33);  		sadScu1_org[yScu][5] = SAD_OCT_INIT_ORG(40, 41);  		sadScu1_org[yScu][6] = SAD_OCT_INIT_ORG(48, 49);  		sadScu1_org[yScu][7] = SAD_OCT_INIT_ORG(56, 57);
	sadScu2_org[yScu][0] = SAD_OCT_INIT_ORG(0, 2);  		sadScu2_org[yScu][1] = SAD_OCT_INIT_ORG(8, 10);  		sadScu2_org[yScu][2] = SAD_OCT_INIT_ORG(16, 18);  		sadScu2_org[yScu][3] = SAD_OCT_INIT_ORG(24, 26);  		sadScu2_org[yScu][4] = SAD_OCT_INIT_ORG(32, 34);  		sadScu2_org[yScu][5] = SAD_OCT_INIT_ORG(40, 42);  		sadScu2_org[yScu][6] = SAD_OCT_INIT_ORG(48, 50);  		sadScu2_org[yScu][7] = SAD_OCT_INIT_ORG(56, 58);
	sadScu3_org[yScu][0] = SAD_OCT_INIT_ORG(0, 3);  		sadScu3_org[yScu][1] = SAD_OCT_INIT_ORG(8, 11);  		sadScu3_org[yScu][2] = SAD_OCT_INIT_ORG(16, 19);  		sadScu3_org[yScu][3] = SAD_OCT_INIT_ORG(24, 27);  		sadScu3_org[yScu][4] = SAD_OCT_INIT_ORG(32, 35);  		sadScu3_org[yScu][5] = SAD_OCT_INIT_ORG(40, 43);  		sadScu3_org[yScu][6] = SAD_OCT_INIT_ORG(48, 51);  		sadScu3_org[yScu][7] = SAD_OCT_INIT_ORG(56, 59);
	sadScu4_org[yScu][0] = SAD_OCT_INIT_ORG(0, 4);  		sadScu4_org[yScu][1] = SAD_OCT_INIT_ORG(8, 12);  		sadScu4_org[yScu][2] = SAD_OCT_INIT_ORG(16, 20);  		sadScu4_org[yScu][3] = SAD_OCT_INIT_ORG(24, 28);  		sadScu4_org[yScu][4] = SAD_OCT_INIT_ORG(32, 36);  		sadScu4_org[yScu][5] = SAD_OCT_INIT_ORG(40, 44);  		sadScu4_org[yScu][6] = SAD_OCT_INIT_ORG(48, 52);  		sadScu4_org[yScu][7] = SAD_OCT_INIT_ORG(56, 60);
	sadScu5_org[yScu][0] = SAD_OCT_INIT_ORG(0, 5);  		sadScu5_org[yScu][1] = SAD_OCT_INIT_ORG(8, 13);  		sadScu5_org[yScu][2] = SAD_OCT_INIT_ORG(16, 21);  		sadScu5_org[yScu][3] = SAD_OCT_INIT_ORG(24, 29);  		sadScu5_org[yScu][4] = SAD_OCT_INIT_ORG(32, 37);  		sadScu5_org[yScu][5] = SAD_OCT_INIT_ORG(40, 45);  		sadScu5_org[yScu][6] = SAD_OCT_INIT_ORG(48, 53);  		sadScu5_org[yScu][7] = SAD_OCT_INIT_ORG(56, 61);
	sadScu6_org[yScu][0] = SAD_OCT_INIT_ORG(0, 6);  		sadScu6_org[yScu][1] = SAD_OCT_INIT_ORG(8, 14);  		sadScu6_org[yScu][2] = SAD_OCT_INIT_ORG(16, 22);  		sadScu6_org[yScu][3] = SAD_OCT_INIT_ORG(24, 30);  		sadScu6_org[yScu][4] = SAD_OCT_INIT_ORG(32, 38);  		sadScu6_org[yScu][5] = SAD_OCT_INIT_ORG(40, 46);  		sadScu6_org[yScu][6] = SAD_OCT_INIT_ORG(48, 54);  		sadScu6_org[yScu][7] = SAD_OCT_INIT_ORG(56, 62);
	sadScu7_org[yScu][0] = SAD_OCT_INIT_ORG(0, 7);  		sadScu7_org[yScu][1] = SAD_OCT_INIT_ORG(8, 15);  		sadScu7_org[yScu][2] = SAD_OCT_INIT_ORG(16, 23);  		sadScu7_org[yScu][3] = SAD_OCT_INIT_ORG(24, 31);  		sadScu7_org[yScu][4] = SAD_OCT_INIT_ORG(32, 39);  		sadScu7_org[yScu][5] = SAD_OCT_INIT_ORG(40, 47);  		sadScu7_org[yScu][6] = SAD_OCT_INIT_ORG(48, 55);  		sadScu7_org[yScu][7] = SAD_OCT_INIT_ORG(56, 63);
	sadScu8_org[yScu][0] = SAD_OCT_INIT_ORG(0, 8);  		sadScu8_org[yScu][1] = SAD_OCT_INIT_ORG(8, 16);  		sadScu8_org[yScu][2] = SAD_OCT_INIT_ORG(16, 24);  		sadScu8_org[yScu][3] = SAD_OCT_INIT_ORG(24, 32);  		sadScu8_org[yScu][4] = SAD_OCT_INIT_ORG(32, 40);  		sadScu8_org[yScu][5] = SAD_OCT_INIT_ORG(40, 48);  		sadScu8_org[yScu][6] = SAD_OCT_INIT_ORG(48, 56);  		sadScu8_org[yScu][7] = SAD_OCT_INIT_ORG(56, 64);
	sadScu9_org[yScu][0] = SAD_OCT_INIT_ORG(0, 9);  		sadScu9_org[yScu][1] = SAD_OCT_INIT_ORG(8, 17);  		sadScu9_org[yScu][2] = SAD_OCT_INIT_ORG(16, 25);  		sadScu9_org[yScu][3] = SAD_OCT_INIT_ORG(24, 33);  		sadScu9_org[yScu][4] = SAD_OCT_INIT_ORG(32, 41);  		sadScu9_org[yScu][5] = SAD_OCT_INIT_ORG(40, 49);  		sadScu9_org[yScu][6] = SAD_OCT_INIT_ORG(48, 57);  		sadScu9_org[yScu][7] = SAD_OCT_INIT_ORG(56, 65);
	sadScu10_org[yScu][0] = SAD_OCT_INIT_ORG(0, 10);  		sadScu10_org[yScu][1] = SAD_OCT_INIT_ORG(8, 18);  		sadScu10_org[yScu][2] = SAD_OCT_INIT_ORG(16, 26);  		sadScu10_org[yScu][3] = SAD_OCT_INIT_ORG(24, 34);  		sadScu10_org[yScu][4] = SAD_OCT_INIT_ORG(32, 42);  		sadScu10_org[yScu][5] = SAD_OCT_INIT_ORG(40, 50);  		sadScu10_org[yScu][6] = SAD_OCT_INIT_ORG(48, 58);  		sadScu10_org[yScu][7] = SAD_OCT_INIT_ORG(56, 66);
	sadScu11_org[yScu][0] = SAD_OCT_INIT_ORG(0, 11);  		sadScu11_org[yScu][1] = SAD_OCT_INIT_ORG(8, 19);  		sadScu11_org[yScu][2] = SAD_OCT_INIT_ORG(16, 27);  		sadScu11_org[yScu][3] = SAD_OCT_INIT_ORG(24, 35);  		sadScu11_org[yScu][4] = SAD_OCT_INIT_ORG(32, 43);  		sadScu11_org[yScu][5] = SAD_OCT_INIT_ORG(40, 51);  		sadScu11_org[yScu][6] = SAD_OCT_INIT_ORG(48, 59);  		sadScu11_org[yScu][7] = SAD_OCT_INIT_ORG(56, 67);
	sadScu12_org[yScu][0] = SAD_OCT_INIT_ORG(0, 12);  		sadScu12_org[yScu][1] = SAD_OCT_INIT_ORG(8, 20);  		sadScu12_org[yScu][2] = SAD_OCT_INIT_ORG(16, 28);  		sadScu12_org[yScu][3] = SAD_OCT_INIT_ORG(24, 36);  		sadScu12_org[yScu][4] = SAD_OCT_INIT_ORG(32, 44);  		sadScu12_org[yScu][5] = SAD_OCT_INIT_ORG(40, 52);  		sadScu12_org[yScu][6] = SAD_OCT_INIT_ORG(48, 60);  		sadScu12_org[yScu][7] = SAD_OCT_INIT_ORG(56, 68);
	sadScu13_org[yScu][0] = SAD_OCT_INIT_ORG(0, 13);  		sadScu13_org[yScu][1] = SAD_OCT_INIT_ORG(8, 21);  		sadScu13_org[yScu][2] = SAD_OCT_INIT_ORG(16, 29);  		sadScu13_org[yScu][3] = SAD_OCT_INIT_ORG(24, 37);  		sadScu13_org[yScu][4] = SAD_OCT_INIT_ORG(32, 45);  		sadScu13_org[yScu][5] = SAD_OCT_INIT_ORG(40, 53);  		sadScu13_org[yScu][6] = SAD_OCT_INIT_ORG(48, 61);  		sadScu13_org[yScu][7] = SAD_OCT_INIT_ORG(56, 69);
	sadScu14_org[yScu][0] = SAD_OCT_INIT_ORG(0, 14);  		sadScu14_org[yScu][1] = SAD_OCT_INIT_ORG(8, 22);  		sadScu14_org[yScu][2] = SAD_OCT_INIT_ORG(16, 30);  		sadScu14_org[yScu][3] = SAD_OCT_INIT_ORG(24, 38);  		sadScu14_org[yScu][4] = SAD_OCT_INIT_ORG(32, 46);  		sadScu14_org[yScu][5] = SAD_OCT_INIT_ORG(40, 54);  		sadScu14_org[yScu][6] = SAD_OCT_INIT_ORG(48, 62);  		sadScu14_org[yScu][7] = SAD_OCT_INIT_ORG(56, 70);
	sadScu15_org[yScu][0] = SAD_OCT_INIT_ORG(0, 15);  		sadScu15_org[yScu][1] = SAD_OCT_INIT_ORG(8, 23);  		sadScu15_org[yScu][2] = SAD_OCT_INIT_ORG(16, 31);  		sadScu15_org[yScu][3] = SAD_OCT_INIT_ORG(24, 39);  		sadScu15_org[yScu][4] = SAD_OCT_INIT_ORG(32, 47);  		sadScu15_org[yScu][5] = SAD_OCT_INIT_ORG(40, 55);  		sadScu15_org[yScu][6] = SAD_OCT_INIT_ORG(48, 63);  		sadScu15_org[yScu][7] = SAD_OCT_INIT_ORG(56, 71);
	*///===========================================================================

	//sadScu0[0][yScu] = SAD_OCT_INIT(0, 0);  		sadScu0[1][yScu] = SAD_OCT_INIT(8, 8);  		sadScu0[2][yScu] = SAD_OCT_INIT(16, 16);  		sadScu0[3][yScu] = SAD_OCT_INIT(24, 24);  		sadScu0[4][yScu] = SAD_OCT_INIT(32, 32);  		sadScu0[5][yScu] = SAD_OCT_INIT(40, 40);  		sadScu0[6][yScu] = SAD_OCT_INIT(48, 48);  		sadScu0[7][yScu] = SAD_OCT_INIT(56, 56);
	//sadScu1[0][yScu] = SAD_OCT_INIT(1, 0);  		sadScu1[1][yScu] = SAD_OCT_INIT(9, 8);  		sadScu1[2][yScu] = SAD_OCT_INIT(17, 16);  		sadScu1[3][yScu] = SAD_OCT_INIT(25, 24);  		sadScu1[4][yScu] = SAD_OCT_INIT(33, 32);  		sadScu1[5][yScu] = SAD_OCT_INIT(41, 40);  		sadScu1[6][yScu] = SAD_OCT_INIT(49, 48);  		sadScu1[7][yScu] = SAD_OCT_INIT(57, 56);
	//sadScu2[0][yScu] = SAD_OCT_INIT(2, 0);  		sadScu2[1][yScu] = SAD_OCT_INIT(10, 8);  		sadScu2[2][yScu] = SAD_OCT_INIT(18, 16);  		sadScu2[3][yScu] = SAD_OCT_INIT(26, 24);  		sadScu2[4][yScu] = SAD_OCT_INIT(34, 32);  		sadScu2[5][yScu] = SAD_OCT_INIT(42, 40);  		sadScu2[6][yScu] = SAD_OCT_INIT(50, 48);  		sadScu2[7][yScu] = SAD_OCT_INIT(58, 56);
	//sadScu3[0][yScu] = SAD_OCT_INIT(3, 0);  		sadScu3[1][yScu] = SAD_OCT_INIT(11, 8);  		sadScu3[2][yScu] = SAD_OCT_INIT(19, 16);  		sadScu3[3][yScu] = SAD_OCT_INIT(27, 24);  		sadScu3[4][yScu] = SAD_OCT_INIT(35, 32);  		sadScu3[5][yScu] = SAD_OCT_INIT(43, 40);  		sadScu3[6][yScu] = SAD_OCT_INIT(51, 48);  		sadScu3[7][yScu] = SAD_OCT_INIT(59, 56);
	//sadScu4[0][yScu] = SAD_OCT_INIT(4, 0);  		sadScu4[1][yScu] = SAD_OCT_INIT(12, 8);  		sadScu4[2][yScu] = SAD_OCT_INIT(20, 16);  		sadScu4[3][yScu] = SAD_OCT_INIT(28, 24);  		sadScu4[4][yScu] = SAD_OCT_INIT(36, 32);  		sadScu4[5][yScu] = SAD_OCT_INIT(44, 40);  		sadScu4[6][yScu] = SAD_OCT_INIT(52, 48);  		sadScu4[7][yScu] = SAD_OCT_INIT(60, 56);
	//sadScu5[0][yScu] = SAD_OCT_INIT(5, 0);  		sadScu5[1][yScu] = SAD_OCT_INIT(13, 8);  		sadScu5[2][yScu] = SAD_OCT_INIT(21, 16);  		sadScu5[3][yScu] = SAD_OCT_INIT(29, 24);  		sadScu5[4][yScu] = SAD_OCT_INIT(37, 32);  		sadScu5[5][yScu] = SAD_OCT_INIT(45, 40);  		sadScu5[6][yScu] = SAD_OCT_INIT(53, 48);  		sadScu5[7][yScu] = SAD_OCT_INIT(61, 56);
	//sadScu6[0][yScu] = SAD_OCT_INIT(6, 0);  		sadScu6[1][yScu] = SAD_OCT_INIT(14, 8);  		sadScu6[2][yScu] = SAD_OCT_INIT(22, 16);  		sadScu6[3][yScu] = SAD_OCT_INIT(30, 24);  		sadScu6[4][yScu] = SAD_OCT_INIT(38, 32);  		sadScu6[5][yScu] = SAD_OCT_INIT(46, 40);  		sadScu6[6][yScu] = SAD_OCT_INIT(54, 48);  		sadScu6[7][yScu] = SAD_OCT_INIT(62, 56);
	//sadScu7[0][yScu] = SAD_OCT_INIT(7, 0);  		sadScu7[1][yScu] = SAD_OCT_INIT(15, 8);  		sadScu7[2][yScu] = SAD_OCT_INIT(23, 16);  		sadScu7[3][yScu] = SAD_OCT_INIT(31, 24);  		sadScu7[4][yScu] = SAD_OCT_INIT(39, 32);  		sadScu7[5][yScu] = SAD_OCT_INIT(47, 40);  		sadScu7[6][yScu] = SAD_OCT_INIT(55, 48);  		sadScu7[7][yScu] = SAD_OCT_INIT(63, 56);
	//sadScu8[0][yScu] = SAD_OCT_INIT(8, 0);  		sadScu8[1][yScu] = SAD_OCT_INIT(16, 8);  		sadScu8[2][yScu] = SAD_OCT_INIT(24, 16);  		sadScu8[3][yScu] = SAD_OCT_INIT(32, 24);  		sadScu8[4][yScu] = SAD_OCT_INIT(40, 32);  		sadScu8[5][yScu] = SAD_OCT_INIT(48, 40);  		sadScu8[6][yScu] = SAD_OCT_INIT(56, 48);  		sadScu8[7][yScu] = SAD_OCT_INIT(64, 56);
	//sadScu9[0][yScu] = SAD_OCT_INIT(9, 0);  		sadScu9[1][yScu] = SAD_OCT_INIT(17, 8);  		sadScu9[2][yScu] = SAD_OCT_INIT(25, 16);  		sadScu9[3][yScu] = SAD_OCT_INIT(33, 24);  		sadScu9[4][yScu] = SAD_OCT_INIT(41, 32);  		sadScu9[5][yScu] = SAD_OCT_INIT(49, 40);  		sadScu9[6][yScu] = SAD_OCT_INIT(57, 48);  		sadScu9[7][yScu] = SAD_OCT_INIT(65, 56);
	//sadScu10[0][yScu] = SAD_OCT_INIT(10, 0);  		sadScu10[1][yScu] = SAD_OCT_INIT(18, 8);  		sadScu10[2][yScu] = SAD_OCT_INIT(26, 16);  		sadScu10[3][yScu] = SAD_OCT_INIT(34, 24);  		sadScu10[4][yScu] = SAD_OCT_INIT(42, 32);  		sadScu10[5][yScu] = SAD_OCT_INIT(50, 40);  		sadScu10[6][yScu] = SAD_OCT_INIT(58, 48);  		sadScu10[7][yScu] = SAD_OCT_INIT(66, 56);
	//sadScu11[0][yScu] = SAD_OCT_INIT(11, 0);  		sadScu11[1][yScu] = SAD_OCT_INIT(19, 8);  		sadScu11[2][yScu] = SAD_OCT_INIT(27, 16);  		sadScu11[3][yScu] = SAD_OCT_INIT(35, 24);  		sadScu11[4][yScu] = SAD_OCT_INIT(43, 32);  		sadScu11[5][yScu] = SAD_OCT_INIT(51, 40);  		sadScu11[6][yScu] = SAD_OCT_INIT(59, 48);  		sadScu11[7][yScu] = SAD_OCT_INIT(67, 56);
	//sadScu12[0][yScu] = SAD_OCT_INIT(12, 0);  		sadScu12[1][yScu] = SAD_OCT_INIT(20, 8);  		sadScu12[2][yScu] = SAD_OCT_INIT(28, 16);  		sadScu12[3][yScu] = SAD_OCT_INIT(36, 24);  		sadScu12[4][yScu] = SAD_OCT_INIT(44, 32);  		sadScu12[5][yScu] = SAD_OCT_INIT(52, 40);  		sadScu12[6][yScu] = SAD_OCT_INIT(60, 48);  		sadScu12[7][yScu] = SAD_OCT_INIT(68, 56);
	//sadScu13[0][yScu] = SAD_OCT_INIT(13, 0);  		sadScu13[1][yScu] = SAD_OCT_INIT(21, 8);  		sadScu13[2][yScu] = SAD_OCT_INIT(29, 16);  		sadScu13[3][yScu] = SAD_OCT_INIT(37, 24);  		sadScu13[4][yScu] = SAD_OCT_INIT(45, 32);  		sadScu13[5][yScu] = SAD_OCT_INIT(53, 40);  		sadScu13[6][yScu] = SAD_OCT_INIT(61, 48);  		sadScu13[7][yScu] = SAD_OCT_INIT(69, 56);
	//sadScu14[0][yScu] = SAD_OCT_INIT(14, 0);  		sadScu14[1][yScu] = SAD_OCT_INIT(22, 8);  		sadScu14[2][yScu] = SAD_OCT_INIT(30, 16);  		sadScu14[3][yScu] = SAD_OCT_INIT(38, 24);  		sadScu14[4][yScu] = SAD_OCT_INIT(46, 32);  		sadScu14[5][yScu] = SAD_OCT_INIT(54, 40);  		sadScu14[6][yScu] = SAD_OCT_INIT(62, 48);  		sadScu14[7][yScu] = SAD_OCT_INIT(70, 56);
	//sadScu15[0][yScu] = SAD_OCT_INIT(15, 0);  		sadScu15[1][yScu] = SAD_OCT_INIT(23, 8);  		sadScu15[2][yScu] = SAD_OCT_INIT(31, 16);  		sadScu15[3][yScu] = SAD_OCT_INIT(39, 24);  		sadScu15[4][yScu] = SAD_OCT_INIT(47, 32);  		sadScu15[5][yScu] = SAD_OCT_INIT(55, 40);  		sadScu15[6][yScu] = SAD_OCT_INIT(63, 48);  		sadScu15[7][yScu] = SAD_OCT_INIT(71, 56);

	//if (sadScu1_org[yScu][0] != sadScu1[0][yScu])
	//{
	//	printf("sadScu1_org error! \n");
	//	printf("sadScu1_org[%d][%d] = %d\tsadScu1[%d][%d] = %d \n", yScu, 0, sadScu1_org[yScu][0], 0, yScu, sadScu1[0][yScu]);
	//}

	pel sadScu0_org_tmp[8];
	pel sadScu1_org_tmp[8];
	pel sadScu2_org_tmp[8];
	pel sadScu3_org_tmp[8];
	pel sadScu4_org_tmp[8];
	pel sadScu5_org_tmp[8];
	pel sadScu6_org_tmp[8];
	pel sadScu7_org_tmp[8];
	pel sadScu8_org_tmp[8];
	pel sadScu9_org_tmp[8];
	pel sadScu10_org_tmp[8];
	pel sadScu11_org_tmp[8];
	pel sadScu12_org_tmp[8];
	pel sadScu13_org_tmp[8];
	pel sadScu14_org_tmp[8];
	pel sadScu15_org_tmp[8];

	for (int i = 0; i < 8; i++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
            sadScu0_org_tmp[i] = 0;
            sadScu1_org_tmp[i] = 0;
            sadScu2_org_tmp[i] = 0;
            sadScu3_org_tmp[i] = 0;
            sadScu4_org_tmp[i] = 0;
            sadScu5_org_tmp[i] = 0;
            sadScu6_org_tmp[i] = 0;
            sadScu7_org_tmp[i] = 0;
            sadScu8_org_tmp[i] = 0;
            sadScu9_org_tmp[i] = 0;
            sadScu10_org_tmp[i] = 0;
            sadScu11_org_tmp[i] = 0;
            sadScu12_org_tmp[i] = 0;
            sadScu13_org_tmp[i] = 0;
            sadScu14_org_tmp[i] = 0;
            sadScu15_org_tmp[i] = 0;
        }
/*for (reltY = 1; reltY < 8; reltY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif

		sadScu0_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 0);  		sadScu0_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 8);  		sadScu0_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 16);  		sadScu0_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 24);  		sadScu0_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 32);  		sadScu0_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 40);  		sadScu0_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 48);  		sadScu0_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 56);
		sadScu1_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 1);  		sadScu1_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 9);  		sadScu1_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 17);  		sadScu1_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 25);  		sadScu1_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 33);  		sadScu1_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 41);  		sadScu1_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 49);  		sadScu1_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 57);
		sadScu2_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 2);  		sadScu2_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 10);  		sadScu2_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 18);  		sadScu2_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 26);  		sadScu2_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 34);  		sadScu2_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 42);  		sadScu2_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 50);  		sadScu2_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 58);
		sadScu3_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 3);  		sadScu3_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 11);  		sadScu3_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 19);  		sadScu3_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 27);  		sadScu3_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 35);  		sadScu3_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 43);  		sadScu3_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 51);  		sadScu3_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 59);
		sadScu4_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 4);  		sadScu4_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 12);  		sadScu4_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 20);  		sadScu4_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 28);  		sadScu4_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 36);  		sadScu4_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 44);  		sadScu4_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 52);  		sadScu4_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 60);
		sadScu5_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 5);  		sadScu5_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 13);  		sadScu5_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 21);  		sadScu5_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 29);  		sadScu5_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 37);  		sadScu5_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 45);  		sadScu5_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 53);  		sadScu5_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 61);
		sadScu6_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 6);  		sadScu6_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 14);  		sadScu6_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 22);  		sadScu6_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 30);  		sadScu6_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 38);  		sadScu6_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 46);  		sadScu6_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 54);  		sadScu6_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 62);
		sadScu7_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 7);  		sadScu7_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 15);  		sadScu7_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 23);  		sadScu7_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 31);  		sadScu7_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 39);  		sadScu7_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 47);  		sadScu7_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 55);  		sadScu7_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 63);
		sadScu8_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 8);  		sadScu8_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 16);  		sadScu8_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 24);  		sadScu8_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 32);  		sadScu8_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 40);  		sadScu8_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 48);  		sadScu8_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 56);  		sadScu8_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 64);
		sadScu9_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 9);  		sadScu9_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 17);  		sadScu9_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 25);  		sadScu9_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 33);  		sadScu9_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 41);  		sadScu9_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 49);  		sadScu9_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 57);  		sadScu9_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 65);
		sadScu10_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 10);  		sadScu10_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 18);  		sadScu10_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 26);  	sadScu10_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 34);  	sadScu10_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 42);  	sadScu10_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 50);  	sadScu10_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 58);  		sadScu10_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 66);
		sadScu11_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 11);  		sadScu11_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 19);  		sadScu11_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 27);  	sadScu11_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 35);  	sadScu11_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 43);  	sadScu11_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 51);  	sadScu11_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 59);  		sadScu11_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 67);
		sadScu12_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 12);  		sadScu12_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 20);  		sadScu12_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 28);  	sadScu12_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 36);  	sadScu12_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 44);  	sadScu12_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 52);  	sadScu12_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 60);  		sadScu12_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 68);
		sadScu13_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 13);  		sadScu13_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 21);  		sadScu13_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 29);  	sadScu13_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 37);  	sadScu13_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 45);  	sadScu13_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 53);  	sadScu13_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 61);  		sadScu13_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 69);
		sadScu14_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 14);  		sadScu14_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 22);  		sadScu14_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 30);  	sadScu14_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 38);  	sadScu14_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 46);  	sadScu14_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 54);  	sadScu14_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 62);  		sadScu14_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 70);
		sadScu15_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 15);  		sadScu15_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 23);  		sadScu15_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 31);  	sadScu15_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 39);  	sadScu15_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 47);  	sadScu15_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 55);  	sadScu15_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 63);  		sadScu15_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 71);
	}*/
	for (reltY = 0; reltY < 8; reltY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif

		sadScu0_org_tmp[0]  += SAD_OCT_ACC_ORG(0, 0);  		sadScu0_org_tmp[1]  += SAD_OCT_ACC_ORG(8, 8);  		sadScu0_org_tmp[2]  += SAD_OCT_ACC_ORG(16, 16);  		sadScu0_org_tmp[3]  += SAD_OCT_ACC_ORG(24, 24);  		sadScu0_org_tmp[4]  += SAD_OCT_ACC_ORG(32, 32);  		sadScu0_org_tmp[5]  += SAD_OCT_ACC_ORG(40, 40);  		sadScu0_org_tmp[6]  += SAD_OCT_ACC_ORG(48, 48);  		sadScu0_org_tmp[7]  += SAD_OCT_ACC_ORG(56, 56);
		sadScu1_org_tmp[0]  += SAD_OCT_ACC_ORG(0, 1);  		sadScu1_org_tmp[1]  += SAD_OCT_ACC_ORG(8, 9);  		sadScu1_org_tmp[2]  += SAD_OCT_ACC_ORG(16, 17);  		sadScu1_org_tmp[3]  += SAD_OCT_ACC_ORG(24, 25);  		sadScu1_org_tmp[4]  += SAD_OCT_ACC_ORG(32, 33);  		sadScu1_org_tmp[5]  += SAD_OCT_ACC_ORG(40, 41);  		sadScu1_org_tmp[6]  += SAD_OCT_ACC_ORG(48, 49);  		sadScu1_org_tmp[7]  += SAD_OCT_ACC_ORG(56, 57);
		sadScu2_org_tmp[0]  += SAD_OCT_ACC_ORG(0, 2);  		sadScu2_org_tmp[1]  += SAD_OCT_ACC_ORG(8, 10);  		sadScu2_org_tmp[2]  += SAD_OCT_ACC_ORG(16, 18);  		sadScu2_org_tmp[3]  += SAD_OCT_ACC_ORG(24, 26);  		sadScu2_org_tmp[4]  += SAD_OCT_ACC_ORG(32, 34);  		sadScu2_org_tmp[5]  += SAD_OCT_ACC_ORG(40, 42);  		sadScu2_org_tmp[6]  += SAD_OCT_ACC_ORG(48, 50);  		sadScu2_org_tmp[7]  += SAD_OCT_ACC_ORG(56, 58);
		sadScu3_org_tmp[0]  += SAD_OCT_ACC_ORG(0, 3);  		sadScu3_org_tmp[1]  += SAD_OCT_ACC_ORG(8, 11);  		sadScu3_org_tmp[2]  += SAD_OCT_ACC_ORG(16, 19);  		sadScu3_org_tmp[3]  += SAD_OCT_ACC_ORG(24, 27);  		sadScu3_org_tmp[4]  += SAD_OCT_ACC_ORG(32, 35);  		sadScu3_org_tmp[5]  += SAD_OCT_ACC_ORG(40, 43);  		sadScu3_org_tmp[6]  += SAD_OCT_ACC_ORG(48, 51);  		sadScu3_org_tmp[7]  += SAD_OCT_ACC_ORG(56, 59);
		sadScu4_org_tmp[0]  += SAD_OCT_ACC_ORG(0, 4);  		sadScu4_org_tmp[1]  += SAD_OCT_ACC_ORG(8, 12);  		sadScu4_org_tmp[2]  += SAD_OCT_ACC_ORG(16, 20);  		sadScu4_org_tmp[3]  += SAD_OCT_ACC_ORG(24, 28);  		sadScu4_org_tmp[4]  += SAD_OCT_ACC_ORG(32, 36);  		sadScu4_org_tmp[5]  += SAD_OCT_ACC_ORG(40, 44);  		sadScu4_org_tmp[6]  += SAD_OCT_ACC_ORG(48, 52);  		sadScu4_org_tmp[7]  += SAD_OCT_ACC_ORG(56, 60);
		sadScu5_org_tmp[0]  += SAD_OCT_ACC_ORG(0, 5);  		sadScu5_org_tmp[1]  += SAD_OCT_ACC_ORG(8, 13);  		sadScu5_org_tmp[2]  += SAD_OCT_ACC_ORG(16, 21);  		sadScu5_org_tmp[3]  += SAD_OCT_ACC_ORG(24, 29);  		sadScu5_org_tmp[4]  += SAD_OCT_ACC_ORG(32, 37);  		sadScu5_org_tmp[5]  += SAD_OCT_ACC_ORG(40, 45);  		sadScu5_org_tmp[6]  += SAD_OCT_ACC_ORG(48, 53);  		sadScu5_org_tmp[7]  += SAD_OCT_ACC_ORG(56, 61);
		sadScu6_org_tmp[0]  += SAD_OCT_ACC_ORG(0, 6);  		sadScu6_org_tmp[1]  += SAD_OCT_ACC_ORG(8, 14);  		sadScu6_org_tmp[2]  += SAD_OCT_ACC_ORG(16, 22);  		sadScu6_org_tmp[3]  += SAD_OCT_ACC_ORG(24, 30);  		sadScu6_org_tmp[4]  += SAD_OCT_ACC_ORG(32, 38);  		sadScu6_org_tmp[5]  += SAD_OCT_ACC_ORG(40, 46);  		sadScu6_org_tmp[6]  += SAD_OCT_ACC_ORG(48, 54);  		sadScu6_org_tmp[7]  += SAD_OCT_ACC_ORG(56, 62);
		sadScu7_org_tmp[0]  += SAD_OCT_ACC_ORG(0, 7);  		sadScu7_org_tmp[1]  += SAD_OCT_ACC_ORG(8, 15);  		sadScu7_org_tmp[2]  += SAD_OCT_ACC_ORG(16, 23);  		sadScu7_org_tmp[3]  += SAD_OCT_ACC_ORG(24, 31);  		sadScu7_org_tmp[4]  += SAD_OCT_ACC_ORG(32, 39);  		sadScu7_org_tmp[5]  += SAD_OCT_ACC_ORG(40, 47);  		sadScu7_org_tmp[6]  += SAD_OCT_ACC_ORG(48, 55);  		sadScu7_org_tmp[7]  += SAD_OCT_ACC_ORG(56, 63);
		sadScu8_org_tmp[0]  += SAD_OCT_ACC_ORG(0, 8);  		sadScu8_org_tmp[1]  += SAD_OCT_ACC_ORG(8, 16);  		sadScu8_org_tmp[2]  += SAD_OCT_ACC_ORG(16, 24);  		sadScu8_org_tmp[3]  += SAD_OCT_ACC_ORG(24, 32);  		sadScu8_org_tmp[4]  += SAD_OCT_ACC_ORG(32, 40);  		sadScu8_org_tmp[5]  += SAD_OCT_ACC_ORG(40, 48);  		sadScu8_org_tmp[6]  += SAD_OCT_ACC_ORG(48, 56);  		sadScu8_org_tmp[7]  += SAD_OCT_ACC_ORG(56, 64);
		sadScu9_org_tmp[0]  += SAD_OCT_ACC_ORG(0, 9);  		sadScu9_org_tmp[1]  += SAD_OCT_ACC_ORG(8, 17);  		sadScu9_org_tmp[2]  += SAD_OCT_ACC_ORG(16, 25);  		sadScu9_org_tmp[3]  += SAD_OCT_ACC_ORG(24, 33);  		sadScu9_org_tmp[4]  += SAD_OCT_ACC_ORG(32, 41);  		sadScu9_org_tmp[5]  += SAD_OCT_ACC_ORG(40, 49);  		sadScu9_org_tmp[6]  += SAD_OCT_ACC_ORG(48, 57);  		sadScu9_org_tmp[7]  += SAD_OCT_ACC_ORG(56, 65);
		sadScu10_org_tmp[0]  += SAD_OCT_ACC_ORG(0, 10);  		sadScu10_org_tmp[1]  += SAD_OCT_ACC_ORG(8, 18);  		sadScu10_org_tmp[2]  += SAD_OCT_ACC_ORG(16, 26);  	sadScu10_org_tmp[3]  += SAD_OCT_ACC_ORG(24, 34);  	sadScu10_org_tmp[4]  += SAD_OCT_ACC_ORG(32, 42);  	sadScu10_org_tmp[5]  += SAD_OCT_ACC_ORG(40, 50);  	sadScu10_org_tmp[6]  += SAD_OCT_ACC_ORG(48, 58);  		sadScu10_org_tmp[7]  += SAD_OCT_ACC_ORG(56, 66);
		sadScu11_org_tmp[0]  += SAD_OCT_ACC_ORG(0, 11);  		sadScu11_org_tmp[1]  += SAD_OCT_ACC_ORG(8, 19);  		sadScu11_org_tmp[2]  += SAD_OCT_ACC_ORG(16, 27);  	sadScu11_org_tmp[3]  += SAD_OCT_ACC_ORG(24, 35);  	sadScu11_org_tmp[4]  += SAD_OCT_ACC_ORG(32, 43);  	sadScu11_org_tmp[5]  += SAD_OCT_ACC_ORG(40, 51);  	sadScu11_org_tmp[6]  += SAD_OCT_ACC_ORG(48, 59);  		sadScu11_org_tmp[7]  += SAD_OCT_ACC_ORG(56, 67);
		sadScu12_org_tmp[0]  += SAD_OCT_ACC_ORG(0, 12);  		sadScu12_org_tmp[1]  += SAD_OCT_ACC_ORG(8, 20);  		sadScu12_org_tmp[2]  += SAD_OCT_ACC_ORG(16, 28);  	sadScu12_org_tmp[3]  += SAD_OCT_ACC_ORG(24, 36);  	sadScu12_org_tmp[4]  += SAD_OCT_ACC_ORG(32, 44);  	sadScu12_org_tmp[5]  += SAD_OCT_ACC_ORG(40, 52);  	sadScu12_org_tmp[6]  += SAD_OCT_ACC_ORG(48, 60);  		sadScu12_org_tmp[7]  += SAD_OCT_ACC_ORG(56, 68);
		sadScu13_org_tmp[0]  += SAD_OCT_ACC_ORG(0, 13);  		sadScu13_org_tmp[1]  += SAD_OCT_ACC_ORG(8, 21);  		sadScu13_org_tmp[2]  += SAD_OCT_ACC_ORG(16, 29);  	sadScu13_org_tmp[3]  += SAD_OCT_ACC_ORG(24, 37);  	sadScu13_org_tmp[4]  += SAD_OCT_ACC_ORG(32, 45);  	sadScu13_org_tmp[5]  += SAD_OCT_ACC_ORG(40, 53);  	sadScu13_org_tmp[6]  += SAD_OCT_ACC_ORG(48, 61);  		sadScu13_org_tmp[7]  += SAD_OCT_ACC_ORG(56, 69);
		sadScu14_org_tmp[0]  += SAD_OCT_ACC_ORG(0, 14);  		sadScu14_org_tmp[1]  += SAD_OCT_ACC_ORG(8, 22);  		sadScu14_org_tmp[2]  += SAD_OCT_ACC_ORG(16, 30);  	sadScu14_org_tmp[3]  += SAD_OCT_ACC_ORG(24, 38);  	sadScu14_org_tmp[4]  += SAD_OCT_ACC_ORG(32, 46);  	sadScu14_org_tmp[5]  += SAD_OCT_ACC_ORG(40, 54);  	sadScu14_org_tmp[6]  += SAD_OCT_ACC_ORG(48, 62);  		sadScu14_org_tmp[7]  += SAD_OCT_ACC_ORG(56, 70);
		sadScu15_org_tmp[0]  += SAD_OCT_ACC_ORG(0, 15);  		sadScu15_org_tmp[1]  += SAD_OCT_ACC_ORG(8, 23);  		sadScu15_org_tmp[2]  += SAD_OCT_ACC_ORG(16, 31);  	sadScu15_org_tmp[3]  += SAD_OCT_ACC_ORG(24, 39);  	sadScu15_org_tmp[4]  += SAD_OCT_ACC_ORG(32, 47);  	sadScu15_org_tmp[5]  += SAD_OCT_ACC_ORG(40, 55);  	sadScu15_org_tmp[6]  += SAD_OCT_ACC_ORG(48, 63);  		sadScu15_org_tmp[7]  += SAD_OCT_ACC_ORG(56, 71);
       }


	for (int i = 0; i < 8; i++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif

            sadScu0_org[yScu][i] = sadScu0_org_tmp[i];
            sadScu1_org[yScu][i] = sadScu1_org_tmp[i];
            sadScu2_org[yScu][i] = sadScu2_org_tmp[i];
            sadScu3_org[yScu][i] = sadScu3_org_tmp[i];
            sadScu4_org[yScu][i] = sadScu4_org_tmp[i];
            sadScu5_org[yScu][i] = sadScu5_org_tmp[i];
            sadScu6_org[yScu][i] = sadScu6_org_tmp[i];
            sadScu7_org[yScu][i] = sadScu7_org_tmp[i];
            sadScu8_org[yScu][i] = sadScu8_org_tmp[i];
            sadScu9_org[yScu][i] = sadScu9_org_tmp[i];
            sadScu10_org[yScu][i] = sadScu10_org_tmp[i];
            sadScu11_org[yScu][i] = sadScu11_org_tmp[i];
            sadScu12_org[yScu][i] = sadScu12_org_tmp[i];
            sadScu13_org[yScu][i] = sadScu13_org_tmp[i];
            sadScu14_org[yScu][i] = sadScu14_org_tmp[i];
            sadScu15_org[yScu][i] = sadScu15_org_tmp[i];
        }

/*
	for (reltY = 0; reltY < 8; reltY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif

		sadScu0_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 0);  		sadScu0_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 8);  		sadScu0_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 16);  		sadScu0_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 24);  		sadScu0_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 32);  		sadScu0_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 40);  		sadScu0_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 48);  		sadScu0_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 56);
		sadScu1_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 1);  		sadScu1_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 9);  		sadScu1_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 17);  		sadScu1_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 25);  		sadScu1_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 33);  		sadScu1_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 41);  		sadScu1_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 49);  		sadScu1_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 57);
		sadScu2_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 2);  		sadScu2_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 10);  		sadScu2_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 18);  		sadScu2_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 26);  		sadScu2_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 34);  		sadScu2_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 42);  		sadScu2_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 50);  		sadScu2_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 58);
		sadScu3_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 3);  		sadScu3_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 11);  		sadScu3_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 19);  		sadScu3_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 27);  		sadScu3_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 35);  		sadScu3_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 43);  		sadScu3_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 51);  		sadScu3_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 59);
		sadScu4_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 4);  		sadScu4_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 12);  		sadScu4_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 20);  		sadScu4_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 28);  		sadScu4_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 36);  		sadScu4_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 44);  		sadScu4_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 52);  		sadScu4_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 60);
		sadScu5_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 5);  		sadScu5_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 13);  		sadScu5_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 21);  		sadScu5_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 29);  		sadScu5_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 37);  		sadScu5_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 45);  		sadScu5_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 53);  		sadScu5_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 61);
		sadScu6_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 6);  		sadScu6_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 14);  		sadScu6_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 22);  		sadScu6_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 30);  		sadScu6_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 38);  		sadScu6_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 46);  		sadScu6_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 54);  		sadScu6_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 62);
		sadScu7_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 7);  		sadScu7_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 15);  		sadScu7_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 23);  		sadScu7_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 31);  		sadScu7_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 39);  		sadScu7_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 47);  		sadScu7_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 55);  		sadScu7_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 63);
		sadScu8_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 8);  		sadScu8_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 16);  		sadScu8_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 24);  		sadScu8_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 32);  		sadScu8_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 40);  		sadScu8_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 48);  		sadScu8_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 56);  		sadScu8_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 64);
		sadScu9_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 9);  		sadScu9_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 17);  		sadScu9_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 25);  		sadScu9_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 33);  		sadScu9_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 41);  		sadScu9_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 49);  		sadScu9_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 57);  		sadScu9_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 65);
		sadScu10_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 10);  		sadScu10_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 18);  		sadScu10_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 26);  	sadScu10_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 34);  	sadScu10_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 42);  	sadScu10_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 50);  	sadScu10_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 58);  		sadScu10_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 66);
		sadScu11_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 11);  		sadScu11_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 19);  		sadScu11_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 27);  	sadScu11_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 35);  	sadScu11_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 43);  	sadScu11_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 51);  	sadScu11_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 59);  		sadScu11_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 67);
		sadScu12_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 12);  		sadScu12_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 20);  		sadScu12_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 28);  	sadScu12_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 36);  	sadScu12_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 44);  	sadScu12_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 52);  	sadScu12_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 60);  		sadScu12_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 68);
		sadScu13_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 13);  		sadScu13_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 21);  		sadScu13_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 29);  	sadScu13_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 37);  	sadScu13_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 45);  	sadScu13_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 53);  	sadScu13_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 61);  		sadScu13_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 69);
		sadScu14_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 14);  		sadScu14_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 22);  		sadScu14_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 30);  	sadScu14_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 38);  	sadScu14_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 46);  	sadScu14_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 54);  	sadScu14_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 62);  		sadScu14_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 70);
		sadScu15_org[yScu][0]  += SAD_OCT_ACC_ORG(0, 15);  		sadScu15_org[yScu][1]  += SAD_OCT_ACC_ORG(8, 23);  		sadScu15_org[yScu][2]  += SAD_OCT_ACC_ORG(16, 31);  	sadScu15_org[yScu][3]  += SAD_OCT_ACC_ORG(24, 39);  	sadScu15_org[yScu][4]  += SAD_OCT_ACC_ORG(32, 47);  	sadScu15_org[yScu][5]  += SAD_OCT_ACC_ORG(40, 55);  	sadScu15_org[yScu][6]  += SAD_OCT_ACC_ORG(48, 63);  		sadScu15_org[yScu][7]  += SAD_OCT_ACC_ORG(56, 71);
		//===========================================================================

		//sadScu0[0][yScu] += SAD_OCT_ACC(0, 0);  		sadScu0[1][yScu] += SAD_OCT_ACC(8, 8);  		sadScu0[2][yScu] += SAD_OCT_ACC(16, 16);  		sadScu0[3][yScu] += SAD_OCT_ACC(24, 24);  		sadScu0[4][yScu] += SAD_OCT_ACC(32, 32);  		sadScu0[5][yScu] += SAD_OCT_ACC(40, 40);  		sadScu0[6][yScu] += SAD_OCT_ACC(48, 48);  		sadScu0[7][yScu] += SAD_OCT_ACC(56, 56);
		//sadScu1[0][yScu] += SAD_OCT_ACC(1, 0);  		sadScu1[1][yScu] += SAD_OCT_ACC(9, 8);  		sadScu1[2][yScu] += SAD_OCT_ACC(17, 16);  		sadScu1[3][yScu] += SAD_OCT_ACC(25, 24);  		sadScu1[4][yScu] += SAD_OCT_ACC(33, 32);  		sadScu1[5][yScu] += SAD_OCT_ACC(41, 40);  		sadScu1[6][yScu] += SAD_OCT_ACC(49, 48);  		sadScu1[7][yScu] += SAD_OCT_ACC(57, 56);
		//sadScu2[0][yScu] += SAD_OCT_ACC(2, 0);  		sadScu2[1][yScu] += SAD_OCT_ACC(10, 8);  		sadScu2[2][yScu] += SAD_OCT_ACC(18, 16);  		sadScu2[3][yScu] += SAD_OCT_ACC(26, 24);  		sadScu2[4][yScu] += SAD_OCT_ACC(34, 32);  		sadScu2[5][yScu] += SAD_OCT_ACC(42, 40);  		sadScu2[6][yScu] += SAD_OCT_ACC(50, 48);  		sadScu2[7][yScu] += SAD_OCT_ACC(58, 56);
		//sadScu3[0][yScu] += SAD_OCT_ACC(3, 0);  		sadScu3[1][yScu] += SAD_OCT_ACC(11, 8);  		sadScu3[2][yScu] += SAD_OCT_ACC(19, 16);  		sadScu3[3][yScu] += SAD_OCT_ACC(27, 24);  		sadScu3[4][yScu] += SAD_OCT_ACC(35, 32);  		sadScu3[5][yScu] += SAD_OCT_ACC(43, 40);  		sadScu3[6][yScu] += SAD_OCT_ACC(51, 48);  		sadScu3[7][yScu] += SAD_OCT_ACC(59, 56);
		//sadScu4[0][yScu] += SAD_OCT_ACC(4, 0);  		sadScu4[1][yScu] += SAD_OCT_ACC(12, 8);  		sadScu4[2][yScu] += SAD_OCT_ACC(20, 16);  		sadScu4[3][yScu] += SAD_OCT_ACC(28, 24);  		sadScu4[4][yScu] += SAD_OCT_ACC(36, 32);  		sadScu4[5][yScu] += SAD_OCT_ACC(44, 40);  		sadScu4[6][yScu] += SAD_OCT_ACC(52, 48);  		sadScu4[7][yScu] += SAD_OCT_ACC(60, 56);
		//sadScu5[0][yScu] += SAD_OCT_ACC(5, 0);  		sadScu5[1][yScu] += SAD_OCT_ACC(13, 8);  		sadScu5[2][yScu] += SAD_OCT_ACC(21, 16);  		sadScu5[3][yScu] += SAD_OCT_ACC(29, 24);  		sadScu5[4][yScu] += SAD_OCT_ACC(37, 32);  		sadScu5[5][yScu] += SAD_OCT_ACC(45, 40);  		sadScu5[6][yScu] += SAD_OCT_ACC(53, 48);  		sadScu5[7][yScu] += SAD_OCT_ACC(61, 56);
		//sadScu6[0][yScu] += SAD_OCT_ACC(6, 0);  		sadScu6[1][yScu] += SAD_OCT_ACC(14, 8);  		sadScu6[2][yScu] += SAD_OCT_ACC(22, 16);  		sadScu6[3][yScu] += SAD_OCT_ACC(30, 24);  		sadScu6[4][yScu] += SAD_OCT_ACC(38, 32);  		sadScu6[5][yScu] += SAD_OCT_ACC(46, 40);  		sadScu6[6][yScu] += SAD_OCT_ACC(54, 48);  		sadScu6[7][yScu] += SAD_OCT_ACC(62, 56);
		//sadScu7[0][yScu] += SAD_OCT_ACC(7, 0);  		sadScu7[1][yScu] += SAD_OCT_ACC(15, 8);  		sadScu7[2][yScu] += SAD_OCT_ACC(23, 16);  		sadScu7[3][yScu] += SAD_OCT_ACC(31, 24);  		sadScu7[4][yScu] += SAD_OCT_ACC(39, 32);  		sadScu7[5][yScu] += SAD_OCT_ACC(47, 40);  		sadScu7[6][yScu] += SAD_OCT_ACC(55, 48);  		sadScu7[7][yScu] += SAD_OCT_ACC(63, 56);
		//sadScu8[0][yScu] += SAD_OCT_ACC(8, 0);  		sadScu8[1][yScu] += SAD_OCT_ACC(16, 8);  		sadScu8[2][yScu] += SAD_OCT_ACC(24, 16);  		sadScu8[3][yScu] += SAD_OCT_ACC(32, 24);  		sadScu8[4][yScu] += SAD_OCT_ACC(40, 32);  		sadScu8[5][yScu] += SAD_OCT_ACC(48, 40);  		sadScu8[6][yScu] += SAD_OCT_ACC(56, 48);  		sadScu8[7][yScu] += SAD_OCT_ACC(64, 56);
		//sadScu9[0][yScu] += SAD_OCT_ACC(9, 0);  		sadScu9[1][yScu] += SAD_OCT_ACC(17, 8);  		sadScu9[2][yScu] += SAD_OCT_ACC(25, 16);  		sadScu9[3][yScu] += SAD_OCT_ACC(33, 24);  		sadScu9[4][yScu] += SAD_OCT_ACC(41, 32);  		sadScu9[5][yScu] += SAD_OCT_ACC(49, 40);  		sadScu9[6][yScu] += SAD_OCT_ACC(57, 48);  		sadScu9[7][yScu] += SAD_OCT_ACC(65, 56);
		//sadScu10[0][yScu] += SAD_OCT_ACC(10, 0);  		sadScu10[1][yScu] += SAD_OCT_ACC(18, 8);  		sadScu10[2][yScu] += SAD_OCT_ACC(26, 16);  		sadScu10[3][yScu] += SAD_OCT_ACC(34, 24);  		sadScu10[4][yScu] += SAD_OCT_ACC(42, 32);  		sadScu10[5][yScu] += SAD_OCT_ACC(50, 40);  		sadScu10[6][yScu] += SAD_OCT_ACC(58, 48);  		sadScu10[7][yScu] += SAD_OCT_ACC(66, 56);
		//sadScu11[0][yScu] += SAD_OCT_ACC(11, 0);  		sadScu11[1][yScu] += SAD_OCT_ACC(19, 8);  		sadScu11[2][yScu] += SAD_OCT_ACC(27, 16);  		sadScu11[3][yScu] += SAD_OCT_ACC(35, 24);  		sadScu11[4][yScu] += SAD_OCT_ACC(43, 32);  		sadScu11[5][yScu] += SAD_OCT_ACC(51, 40);  		sadScu11[6][yScu] += SAD_OCT_ACC(59, 48);  		sadScu11[7][yScu] += SAD_OCT_ACC(67, 56);
		//sadScu12[0][yScu] += SAD_OCT_ACC(12, 0);  		sadScu12[1][yScu] += SAD_OCT_ACC(20, 8);  		sadScu12[2][yScu] += SAD_OCT_ACC(28, 16);  		sadScu12[3][yScu] += SAD_OCT_ACC(36, 24);  		sadScu12[4][yScu] += SAD_OCT_ACC(44, 32);  		sadScu12[5][yScu] += SAD_OCT_ACC(52, 40);  		sadScu12[6][yScu] += SAD_OCT_ACC(60, 48);  		sadScu12[7][yScu] += SAD_OCT_ACC(68, 56);
		//sadScu13[0][yScu] += SAD_OCT_ACC(13, 0);  		sadScu13[1][yScu] += SAD_OCT_ACC(21, 8);  		sadScu13[2][yScu] += SAD_OCT_ACC(29, 16);  		sadScu13[3][yScu] += SAD_OCT_ACC(37, 24);  		sadScu13[4][yScu] += SAD_OCT_ACC(45, 32);  		sadScu13[5][yScu] += SAD_OCT_ACC(53, 40);  		sadScu13[6][yScu] += SAD_OCT_ACC(61, 48);  		sadScu13[7][yScu] += SAD_OCT_ACC(69, 56);
		//sadScu14[0][yScu] += SAD_OCT_ACC(14, 0);  		sadScu14[1][yScu] += SAD_OCT_ACC(22, 8);  		sadScu14[2][yScu] += SAD_OCT_ACC(30, 16);  		sadScu14[3][yScu] += SAD_OCT_ACC(38, 24);  		sadScu14[4][yScu] += SAD_OCT_ACC(46, 32);  		sadScu14[5][yScu] += SAD_OCT_ACC(54, 40);  		sadScu14[6][yScu] += SAD_OCT_ACC(62, 48);  		sadScu14[7][yScu] += SAD_OCT_ACC(70, 56);
		//sadScu15[0][yScu] += SAD_OCT_ACC(15, 0);  		sadScu15[1][yScu] += SAD_OCT_ACC(23, 8);  		sadScu15[2][yScu] += SAD_OCT_ACC(31, 16);  		sadScu15[3][yScu] += SAD_OCT_ACC(39, 24);  		sadScu15[4][yScu] += SAD_OCT_ACC(47, 32);  		sadScu15[5][yScu] += SAD_OCT_ACC(55, 40);  		sadScu15[6][yScu] += SAD_OCT_ACC(63, 48);  		sadScu15[7][yScu] += SAD_OCT_ACC(71, 56);

	}
*/
	//// check sadScu0
	//for (int j = yScu; j < yScu + 1; j++)
	//{

	//	for (int i = 0; i < 8; i++)
	//	{
	//		if (sadScu0_org[j][i] != sadScu0[i][j])
	//		{
	//			printf("sadScu0_org error! ");
	//			printf("sadScu0_org[%d][%d] = %d\tsadScu0[%d][%d] = %d \n", j, i, sadScu0_org[j][i], i, j, sadScu0[i][j]);
	//		}

	//		if (sadScu1_org[j][i] != sadScu1[i][j])
	//		{
	//			printf("sadScu1_org error! ");
	//			printf("sadScu1_org[%d][%d] = %d\tsadScu1[%d][%d] = %d \n", j, i, sadScu1_org[j][i], i, j, sadScu1[i][j]);
	//		}

	//		if (sadScu15_org[j][i] != sadScu15[i][j])
	//		{
	//			printf("sadScu15_org error! ");
	//			printf("sadScu15_org[%d][%d] = %d\tsadScu15[%d][%d] = %d \n", j, i, sadScu15_org[j][i], i, j, sadScu15[i][j]);
	//		}
	//	}
	//}
}

void calcLineSadMore_test1(
	pel lineBufferRef_org[80][80], pel lineBufferOrg_org[64][64],
	pel sadScu0_org[8][8], pel sadScu1_org[8][8], pel sadScu2_org[8][8], pel sadScu3_org[8][8], pel sadScu4_org[8][8], pel sadScu5_org[8][8], pel sadScu6_org[8][8], pel sadScu7_org[8][8],
	pel sadScu8_org[8][8], pel sadScu9_org[8][8], pel sadScu10_org[8][8], pel sadScu11_org[8][8], pel sadScu12_org[8][8], pel sadScu13_org[8][8], pel sadScu14_org[8][8], pel sadScu15_org[8][8],

	U8 yScu, U8 baseSwH, U8 baseOrgH, U4 bit_depth
)
{
#if 0//1
	static pel sad[16][16];
	for (U8 j = 0; j < 16; j++)
	{
		for (U8 i = 0; i < 16; i++)
		{
			for (U8 y = 0; y < 64; y++)
			{
				for (U8 x = 0; x < 64; x++)
				{
					sad[i][j] += ABS_my(lineBufferRef_org[j + y][i + x], lineBufferRef_org[y][x]);
				}
			}
		}
	}

#endif

#if 0
	// template:
	for (int i = 0; i < 16; i++) // y offset // pipeline.
	{
		for (int j = 0; j < 64; j++) // 64 lines // pipeline
		{
			int sad[8][8][16];
			int sad_tmp[8][16]; // 8\A3\BA8\B8\F6block, 16: MVs. 
			if (j % 8 == 0)
			{
				sad_tmp = 0; // memset 
			}
			// 16 MV calc sad.
			for (mv = 0; mv < 16; mv++) // unroll.
				for pel = 0 64
					sad += lineBufferOrg_org[j][64] - lineBufferRef_org[i + j][mv + 64];
		}

		// finish.
		// fully. pipeline. stream interface 
		// sad cost combine and compare. 

	}
#endif

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=lineBufferRef_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=lineBufferOrg_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=sadScu0_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_org complete dim=0

#endif


	U8 reltY;

	sadScu0_org[yScu][0] = SAD_OCT_INIT_ORG(0, 0);  		sadScu0_org[yScu][1] = SAD_OCT_INIT_ORG(8, 8);  		sadScu0_org[yScu][2] = SAD_OCT_INIT_ORG(16, 16);  		sadScu0_org[yScu][3] = SAD_OCT_INIT_ORG(24, 24);  		sadScu0_org[yScu][4] = SAD_OCT_INIT_ORG(32, 32);  		sadScu0_org[yScu][5] = SAD_OCT_INIT_ORG(40, 40);  		sadScu0_org[yScu][6] = SAD_OCT_INIT_ORG(48, 48);  		sadScu0_org[yScu][7] = SAD_OCT_INIT_ORG(56, 56);
	sadScu1_org[yScu][0] = SAD_OCT_INIT_ORG(0, 1);  		sadScu1_org[yScu][1] = SAD_OCT_INIT_ORG(8, 9);  		sadScu1_org[yScu][2] = SAD_OCT_INIT_ORG(16, 17);  		sadScu1_org[yScu][3] = SAD_OCT_INIT_ORG(24, 25);  		sadScu1_org[yScu][4] = SAD_OCT_INIT_ORG(32, 33);  		sadScu1_org[yScu][5] = SAD_OCT_INIT_ORG(40, 41);  		sadScu1_org[yScu][6] = SAD_OCT_INIT_ORG(48, 49);  		sadScu1_org[yScu][7] = SAD_OCT_INIT_ORG(56, 57);
	sadScu2_org[yScu][0] = SAD_OCT_INIT_ORG(0, 2);  		sadScu2_org[yScu][1] = SAD_OCT_INIT_ORG(8, 10);  		sadScu2_org[yScu][2] = SAD_OCT_INIT_ORG(16, 18);  		sadScu2_org[yScu][3] = SAD_OCT_INIT_ORG(24, 26);  		sadScu2_org[yScu][4] = SAD_OCT_INIT_ORG(32, 34);  		sadScu2_org[yScu][5] = SAD_OCT_INIT_ORG(40, 42);  		sadScu2_org[yScu][6] = SAD_OCT_INIT_ORG(48, 50);  		sadScu2_org[yScu][7] = SAD_OCT_INIT_ORG(56, 58);
	sadScu3_org[yScu][0] = SAD_OCT_INIT_ORG(0, 3);  		sadScu3_org[yScu][1] = SAD_OCT_INIT_ORG(8, 11);  		sadScu3_org[yScu][2] = SAD_OCT_INIT_ORG(16, 19);  		sadScu3_org[yScu][3] = SAD_OCT_INIT_ORG(24, 27);  		sadScu3_org[yScu][4] = SAD_OCT_INIT_ORG(32, 35);  		sadScu3_org[yScu][5] = SAD_OCT_INIT_ORG(40, 43);  		sadScu3_org[yScu][6] = SAD_OCT_INIT_ORG(48, 51);  		sadScu3_org[yScu][7] = SAD_OCT_INIT_ORG(56, 59);
	sadScu4_org[yScu][0] = SAD_OCT_INIT_ORG(0, 4);  		sadScu4_org[yScu][1] = SAD_OCT_INIT_ORG(8, 12);  		sadScu4_org[yScu][2] = SAD_OCT_INIT_ORG(16, 20);  		sadScu4_org[yScu][3] = SAD_OCT_INIT_ORG(24, 28);  		sadScu4_org[yScu][4] = SAD_OCT_INIT_ORG(32, 36);  		sadScu4_org[yScu][5] = SAD_OCT_INIT_ORG(40, 44);  		sadScu4_org[yScu][6] = SAD_OCT_INIT_ORG(48, 52);  		sadScu4_org[yScu][7] = SAD_OCT_INIT_ORG(56, 60);
	sadScu5_org[yScu][0] = SAD_OCT_INIT_ORG(0, 5);  		sadScu5_org[yScu][1] = SAD_OCT_INIT_ORG(8, 13);  		sadScu5_org[yScu][2] = SAD_OCT_INIT_ORG(16, 21);  		sadScu5_org[yScu][3] = SAD_OCT_INIT_ORG(24, 29);  		sadScu5_org[yScu][4] = SAD_OCT_INIT_ORG(32, 37);  		sadScu5_org[yScu][5] = SAD_OCT_INIT_ORG(40, 45);  		sadScu5_org[yScu][6] = SAD_OCT_INIT_ORG(48, 53);  		sadScu5_org[yScu][7] = SAD_OCT_INIT_ORG(56, 61);
	sadScu6_org[yScu][0] = SAD_OCT_INIT_ORG(0, 6);  		sadScu6_org[yScu][1] = SAD_OCT_INIT_ORG(8, 14);  		sadScu6_org[yScu][2] = SAD_OCT_INIT_ORG(16, 22);  		sadScu6_org[yScu][3] = SAD_OCT_INIT_ORG(24, 30);  		sadScu6_org[yScu][4] = SAD_OCT_INIT_ORG(32, 38);  		sadScu6_org[yScu][5] = SAD_OCT_INIT_ORG(40, 46);  		sadScu6_org[yScu][6] = SAD_OCT_INIT_ORG(48, 54);  		sadScu6_org[yScu][7] = SAD_OCT_INIT_ORG(56, 62);
	sadScu7_org[yScu][0] = SAD_OCT_INIT_ORG(0, 7);  		sadScu7_org[yScu][1] = SAD_OCT_INIT_ORG(8, 15);  		sadScu7_org[yScu][2] = SAD_OCT_INIT_ORG(16, 23);  		sadScu7_org[yScu][3] = SAD_OCT_INIT_ORG(24, 31);  		sadScu7_org[yScu][4] = SAD_OCT_INIT_ORG(32, 39);  		sadScu7_org[yScu][5] = SAD_OCT_INIT_ORG(40, 47);  		sadScu7_org[yScu][6] = SAD_OCT_INIT_ORG(48, 55);  		sadScu7_org[yScu][7] = SAD_OCT_INIT_ORG(56, 63);
	sadScu8_org[yScu][0] = SAD_OCT_INIT_ORG(0, 8);  		sadScu8_org[yScu][1] = SAD_OCT_INIT_ORG(8, 16);  		sadScu8_org[yScu][2] = SAD_OCT_INIT_ORG(16, 24);  		sadScu8_org[yScu][3] = SAD_OCT_INIT_ORG(24, 32);  		sadScu8_org[yScu][4] = SAD_OCT_INIT_ORG(32, 40);  		sadScu8_org[yScu][5] = SAD_OCT_INIT_ORG(40, 48);  		sadScu8_org[yScu][6] = SAD_OCT_INIT_ORG(48, 56);  		sadScu8_org[yScu][7] = SAD_OCT_INIT_ORG(56, 64);
	sadScu9_org[yScu][0] = SAD_OCT_INIT_ORG(0, 9);  		sadScu9_org[yScu][1] = SAD_OCT_INIT_ORG(8, 17);  		sadScu9_org[yScu][2] = SAD_OCT_INIT_ORG(16, 25);  		sadScu9_org[yScu][3] = SAD_OCT_INIT_ORG(24, 33);  		sadScu9_org[yScu][4] = SAD_OCT_INIT_ORG(32, 41);  		sadScu9_org[yScu][5] = SAD_OCT_INIT_ORG(40, 49);  		sadScu9_org[yScu][6] = SAD_OCT_INIT_ORG(48, 57);  		sadScu9_org[yScu][7] = SAD_OCT_INIT_ORG(56, 65);
	sadScu10_org[yScu][0] = SAD_OCT_INIT_ORG(0, 10);  		sadScu10_org[yScu][1] = SAD_OCT_INIT_ORG(8, 18);  		sadScu10_org[yScu][2] = SAD_OCT_INIT_ORG(16, 26);  		sadScu10_org[yScu][3] = SAD_OCT_INIT_ORG(24, 34);  		sadScu10_org[yScu][4] = SAD_OCT_INIT_ORG(32, 42);  		sadScu10_org[yScu][5] = SAD_OCT_INIT_ORG(40, 50);  		sadScu10_org[yScu][6] = SAD_OCT_INIT_ORG(48, 58);  		sadScu10_org[yScu][7] = SAD_OCT_INIT_ORG(56, 66);
	sadScu11_org[yScu][0] = SAD_OCT_INIT_ORG(0, 11);  		sadScu11_org[yScu][1] = SAD_OCT_INIT_ORG(8, 19);  		sadScu11_org[yScu][2] = SAD_OCT_INIT_ORG(16, 27);  		sadScu11_org[yScu][3] = SAD_OCT_INIT_ORG(24, 35);  		sadScu11_org[yScu][4] = SAD_OCT_INIT_ORG(32, 43);  		sadScu11_org[yScu][5] = SAD_OCT_INIT_ORG(40, 51);  		sadScu11_org[yScu][6] = SAD_OCT_INIT_ORG(48, 59);  		sadScu11_org[yScu][7] = SAD_OCT_INIT_ORG(56, 67);
	sadScu12_org[yScu][0] = SAD_OCT_INIT_ORG(0, 12);  		sadScu12_org[yScu][1] = SAD_OCT_INIT_ORG(8, 20);  		sadScu12_org[yScu][2] = SAD_OCT_INIT_ORG(16, 28);  		sadScu12_org[yScu][3] = SAD_OCT_INIT_ORG(24, 36);  		sadScu12_org[yScu][4] = SAD_OCT_INIT_ORG(32, 44);  		sadScu12_org[yScu][5] = SAD_OCT_INIT_ORG(40, 52);  		sadScu12_org[yScu][6] = SAD_OCT_INIT_ORG(48, 60);  		sadScu12_org[yScu][7] = SAD_OCT_INIT_ORG(56, 68);
	sadScu13_org[yScu][0] = SAD_OCT_INIT_ORG(0, 13);  		sadScu13_org[yScu][1] = SAD_OCT_INIT_ORG(8, 21);  		sadScu13_org[yScu][2] = SAD_OCT_INIT_ORG(16, 29);  		sadScu13_org[yScu][3] = SAD_OCT_INIT_ORG(24, 37);  		sadScu13_org[yScu][4] = SAD_OCT_INIT_ORG(32, 45);  		sadScu13_org[yScu][5] = SAD_OCT_INIT_ORG(40, 53);  		sadScu13_org[yScu][6] = SAD_OCT_INIT_ORG(48, 61);  		sadScu13_org[yScu][7] = SAD_OCT_INIT_ORG(56, 69);
	sadScu14_org[yScu][0] = SAD_OCT_INIT_ORG(0, 14);  		sadScu14_org[yScu][1] = SAD_OCT_INIT_ORG(8, 22);  		sadScu14_org[yScu][2] = SAD_OCT_INIT_ORG(16, 30);  		sadScu14_org[yScu][3] = SAD_OCT_INIT_ORG(24, 38);  		sadScu14_org[yScu][4] = SAD_OCT_INIT_ORG(32, 46);  		sadScu14_org[yScu][5] = SAD_OCT_INIT_ORG(40, 54);  		sadScu14_org[yScu][6] = SAD_OCT_INIT_ORG(48, 62);  		sadScu14_org[yScu][7] = SAD_OCT_INIT_ORG(56, 70);
	sadScu15_org[yScu][0] = SAD_OCT_INIT_ORG(0, 15);  		sadScu15_org[yScu][1] = SAD_OCT_INIT_ORG(8, 23);  		sadScu15_org[yScu][2] = SAD_OCT_INIT_ORG(16, 31);  		sadScu15_org[yScu][3] = SAD_OCT_INIT_ORG(24, 39);  		sadScu15_org[yScu][4] = SAD_OCT_INIT_ORG(32, 47);  		sadScu15_org[yScu][5] = SAD_OCT_INIT_ORG(40, 55);  		sadScu15_org[yScu][6] = SAD_OCT_INIT_ORG(48, 63);  		sadScu15_org[yScu][7] = SAD_OCT_INIT_ORG(56, 71);


	for (reltY = 1; reltY < 8; reltY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif

		sadScu0_org[yScu][0] += SAD_OCT_ACC_ORG(0, 0);  		sadScu0_org[yScu][1] += SAD_OCT_ACC_ORG(8, 8);  		sadScu0_org[yScu][2] += SAD_OCT_ACC_ORG(16, 16);  		sadScu0_org[yScu][3] += SAD_OCT_ACC_ORG(24, 24);  		sadScu0_org[yScu][4] += SAD_OCT_ACC_ORG(32, 32);  		sadScu0_org[yScu][5] += SAD_OCT_ACC_ORG(40, 40);  		sadScu0_org[yScu][6] += SAD_OCT_ACC_ORG(48, 48);  		sadScu0_org[yScu][7] += SAD_OCT_ACC_ORG(56, 56);
		sadScu1_org[yScu][0] += SAD_OCT_ACC_ORG(0, 1);  		sadScu1_org[yScu][1] += SAD_OCT_ACC_ORG(8, 9);  		sadScu1_org[yScu][2] += SAD_OCT_ACC_ORG(16, 17);  		sadScu1_org[yScu][3] += SAD_OCT_ACC_ORG(24, 25);  		sadScu1_org[yScu][4] += SAD_OCT_ACC_ORG(32, 33);  		sadScu1_org[yScu][5] += SAD_OCT_ACC_ORG(40, 41);  		sadScu1_org[yScu][6] += SAD_OCT_ACC_ORG(48, 49);  		sadScu1_org[yScu][7] += SAD_OCT_ACC_ORG(56, 57);
		sadScu2_org[yScu][0] += SAD_OCT_ACC_ORG(0, 2);  		sadScu2_org[yScu][1] += SAD_OCT_ACC_ORG(8, 10);  		sadScu2_org[yScu][2] += SAD_OCT_ACC_ORG(16, 18);  		sadScu2_org[yScu][3] += SAD_OCT_ACC_ORG(24, 26);  		sadScu2_org[yScu][4] += SAD_OCT_ACC_ORG(32, 34);  		sadScu2_org[yScu][5] += SAD_OCT_ACC_ORG(40, 42);  		sadScu2_org[yScu][6] += SAD_OCT_ACC_ORG(48, 50);  		sadScu2_org[yScu][7] += SAD_OCT_ACC_ORG(56, 58);
		sadScu3_org[yScu][0] += SAD_OCT_ACC_ORG(0, 3);  		sadScu3_org[yScu][1] += SAD_OCT_ACC_ORG(8, 11);  		sadScu3_org[yScu][2] += SAD_OCT_ACC_ORG(16, 19);  		sadScu3_org[yScu][3] += SAD_OCT_ACC_ORG(24, 27);  		sadScu3_org[yScu][4] += SAD_OCT_ACC_ORG(32, 35);  		sadScu3_org[yScu][5] += SAD_OCT_ACC_ORG(40, 43);  		sadScu3_org[yScu][6] += SAD_OCT_ACC_ORG(48, 51);  		sadScu3_org[yScu][7] += SAD_OCT_ACC_ORG(56, 59);
		sadScu4_org[yScu][0] += SAD_OCT_ACC_ORG(0, 4);  		sadScu4_org[yScu][1] += SAD_OCT_ACC_ORG(8, 12);  		sadScu4_org[yScu][2] += SAD_OCT_ACC_ORG(16, 20);  		sadScu4_org[yScu][3] += SAD_OCT_ACC_ORG(24, 28);  		sadScu4_org[yScu][4] += SAD_OCT_ACC_ORG(32, 36);  		sadScu4_org[yScu][5] += SAD_OCT_ACC_ORG(40, 44);  		sadScu4_org[yScu][6] += SAD_OCT_ACC_ORG(48, 52);  		sadScu4_org[yScu][7] += SAD_OCT_ACC_ORG(56, 60);
		sadScu5_org[yScu][0] += SAD_OCT_ACC_ORG(0, 5);  		sadScu5_org[yScu][1] += SAD_OCT_ACC_ORG(8, 13);  		sadScu5_org[yScu][2] += SAD_OCT_ACC_ORG(16, 21);  		sadScu5_org[yScu][3] += SAD_OCT_ACC_ORG(24, 29);  		sadScu5_org[yScu][4] += SAD_OCT_ACC_ORG(32, 37);  		sadScu5_org[yScu][5] += SAD_OCT_ACC_ORG(40, 45);  		sadScu5_org[yScu][6] += SAD_OCT_ACC_ORG(48, 53);  		sadScu5_org[yScu][7] += SAD_OCT_ACC_ORG(56, 61);
		sadScu6_org[yScu][0] += SAD_OCT_ACC_ORG(0, 6);  		sadScu6_org[yScu][1] += SAD_OCT_ACC_ORG(8, 14);  		sadScu6_org[yScu][2] += SAD_OCT_ACC_ORG(16, 22);  		sadScu6_org[yScu][3] += SAD_OCT_ACC_ORG(24, 30);  		sadScu6_org[yScu][4] += SAD_OCT_ACC_ORG(32, 38);  		sadScu6_org[yScu][5] += SAD_OCT_ACC_ORG(40, 46);  		sadScu6_org[yScu][6] += SAD_OCT_ACC_ORG(48, 54);  		sadScu6_org[yScu][7] += SAD_OCT_ACC_ORG(56, 62);
		sadScu7_org[yScu][0] += SAD_OCT_ACC_ORG(0, 7);  		sadScu7_org[yScu][1] += SAD_OCT_ACC_ORG(8, 15);  		sadScu7_org[yScu][2] += SAD_OCT_ACC_ORG(16, 23);  		sadScu7_org[yScu][3] += SAD_OCT_ACC_ORG(24, 31);  		sadScu7_org[yScu][4] += SAD_OCT_ACC_ORG(32, 39);  		sadScu7_org[yScu][5] += SAD_OCT_ACC_ORG(40, 47);  		sadScu7_org[yScu][6] += SAD_OCT_ACC_ORG(48, 55);  		sadScu7_org[yScu][7] += SAD_OCT_ACC_ORG(56, 63);
		sadScu8_org[yScu][0] += SAD_OCT_ACC_ORG(0, 8);  		sadScu8_org[yScu][1] += SAD_OCT_ACC_ORG(8, 16);  		sadScu8_org[yScu][2] += SAD_OCT_ACC_ORG(16, 24);  		sadScu8_org[yScu][3] += SAD_OCT_ACC_ORG(24, 32);  		sadScu8_org[yScu][4] += SAD_OCT_ACC_ORG(32, 40);  		sadScu8_org[yScu][5] += SAD_OCT_ACC_ORG(40, 48);  		sadScu8_org[yScu][6] += SAD_OCT_ACC_ORG(48, 56);  		sadScu8_org[yScu][7] += SAD_OCT_ACC_ORG(56, 64);
		sadScu9_org[yScu][0] += SAD_OCT_ACC_ORG(0, 9);  		sadScu9_org[yScu][1] += SAD_OCT_ACC_ORG(8, 17);  		sadScu9_org[yScu][2] += SAD_OCT_ACC_ORG(16, 25);  		sadScu9_org[yScu][3] += SAD_OCT_ACC_ORG(24, 33);  		sadScu9_org[yScu][4] += SAD_OCT_ACC_ORG(32, 41);  		sadScu9_org[yScu][5] += SAD_OCT_ACC_ORG(40, 49);  		sadScu9_org[yScu][6] += SAD_OCT_ACC_ORG(48, 57);  		sadScu9_org[yScu][7] += SAD_OCT_ACC_ORG(56, 65);
		sadScu10_org[yScu][0] += SAD_OCT_ACC_ORG(0, 10);  		sadScu10_org[yScu][1] += SAD_OCT_ACC_ORG(8, 18);  		sadScu10_org[yScu][2] += SAD_OCT_ACC_ORG(16, 26);  	sadScu10_org[yScu][3] += SAD_OCT_ACC_ORG(24, 34);  	sadScu10_org[yScu][4] += SAD_OCT_ACC_ORG(32, 42);  	sadScu10_org[yScu][5] += SAD_OCT_ACC_ORG(40, 50);  	sadScu10_org[yScu][6] += SAD_OCT_ACC_ORG(48, 58);  		sadScu10_org[yScu][7] += SAD_OCT_ACC_ORG(56, 66);
		sadScu11_org[yScu][0] += SAD_OCT_ACC_ORG(0, 11);  		sadScu11_org[yScu][1] += SAD_OCT_ACC_ORG(8, 19);  		sadScu11_org[yScu][2] += SAD_OCT_ACC_ORG(16, 27);  	sadScu11_org[yScu][3] += SAD_OCT_ACC_ORG(24, 35);  	sadScu11_org[yScu][4] += SAD_OCT_ACC_ORG(32, 43);  	sadScu11_org[yScu][5] += SAD_OCT_ACC_ORG(40, 51);  	sadScu11_org[yScu][6] += SAD_OCT_ACC_ORG(48, 59);  		sadScu11_org[yScu][7] += SAD_OCT_ACC_ORG(56, 67);
		sadScu12_org[yScu][0] += SAD_OCT_ACC_ORG(0, 12);  		sadScu12_org[yScu][1] += SAD_OCT_ACC_ORG(8, 20);  		sadScu12_org[yScu][2] += SAD_OCT_ACC_ORG(16, 28);  	sadScu12_org[yScu][3] += SAD_OCT_ACC_ORG(24, 36);  	sadScu12_org[yScu][4] += SAD_OCT_ACC_ORG(32, 44);  	sadScu12_org[yScu][5] += SAD_OCT_ACC_ORG(40, 52);  	sadScu12_org[yScu][6] += SAD_OCT_ACC_ORG(48, 60);  		sadScu12_org[yScu][7] += SAD_OCT_ACC_ORG(56, 68);
		sadScu13_org[yScu][0] += SAD_OCT_ACC_ORG(0, 13);  		sadScu13_org[yScu][1] += SAD_OCT_ACC_ORG(8, 21);  		sadScu13_org[yScu][2] += SAD_OCT_ACC_ORG(16, 29);  	sadScu13_org[yScu][3] += SAD_OCT_ACC_ORG(24, 37);  	sadScu13_org[yScu][4] += SAD_OCT_ACC_ORG(32, 45);  	sadScu13_org[yScu][5] += SAD_OCT_ACC_ORG(40, 53);  	sadScu13_org[yScu][6] += SAD_OCT_ACC_ORG(48, 61);  		sadScu13_org[yScu][7] += SAD_OCT_ACC_ORG(56, 69);
		sadScu14_org[yScu][0] += SAD_OCT_ACC_ORG(0, 14);  		sadScu14_org[yScu][1] += SAD_OCT_ACC_ORG(8, 22);  		sadScu14_org[yScu][2] += SAD_OCT_ACC_ORG(16, 30);  	sadScu14_org[yScu][3] += SAD_OCT_ACC_ORG(24, 38);  	sadScu14_org[yScu][4] += SAD_OCT_ACC_ORG(32, 46);  	sadScu14_org[yScu][5] += SAD_OCT_ACC_ORG(40, 54);  	sadScu14_org[yScu][6] += SAD_OCT_ACC_ORG(48, 62);  		sadScu14_org[yScu][7] += SAD_OCT_ACC_ORG(56, 70);
		sadScu15_org[yScu][0] += SAD_OCT_ACC_ORG(0, 15);  		sadScu15_org[yScu][1] += SAD_OCT_ACC_ORG(8, 23);  		sadScu15_org[yScu][2] += SAD_OCT_ACC_ORG(16, 31);  	sadScu15_org[yScu][3] += SAD_OCT_ACC_ORG(24, 39);  	sadScu15_org[yScu][4] += SAD_OCT_ACC_ORG(32, 47);  	sadScu15_org[yScu][5] += SAD_OCT_ACC_ORG(40, 55);  	sadScu15_org[yScu][6] += SAD_OCT_ACC_ORG(48, 63);  		sadScu15_org[yScu][7] += SAD_OCT_ACC_ORG(56, 71);

	}


}


#if IME_DEBUG_calcSadScuLv0TestCaseMore

void calcLineSadMore_test(
	pel lineBufferRef[80][80],
	pel lineBufferOrg[64][64],
	pel sadScu0[8],
	pel sadScu1[8],
	pel sadScu2[8],
	pel sadScu3[8],
	pel sadScu4[8],
	pel sadScu5[8],
	pel sadScu6[8],
	pel sadScu7[8],
	pel sadScu8[8],
	pel sadScu9[8],
	pel sadScu10[8],
	pel sadScu11[8],
	pel sadScu12[8],
	pel sadScu13[8],
	pel sadScu14[8],
	pel sadScu15[8],
	pel yScu,
	U8 baseSwH,
	U8 baseOrgH,
	U4 bit_depth
)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=lineBufferRef complete dim=1
#pragma HLS ARRAY_PARTITION variable=lineBufferOrg complete dim=1
#pragma HLS ARRAY_PARTITION variable=sadScu0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15 complete dim=0
#endif
	U8 reltY;

	sadScu0[0] = SAD_OCT_INIT(0, 0);  		sadScu0[1] = SAD_OCT_INIT(8, 8);  		sadScu0[2] = SAD_OCT_INIT(16, 16);  		sadScu0[3] = SAD_OCT_INIT(24, 24);  		sadScu0[4] = SAD_OCT_INIT(32, 32);  		sadScu0[5] = SAD_OCT_INIT(40, 40);  		sadScu0[6] = SAD_OCT_INIT(48, 48);  		sadScu0[7] = SAD_OCT_INIT(56, 56);
	sadScu1[0] = SAD_OCT_INIT(1, 0);  		sadScu1[1] = SAD_OCT_INIT(9, 8);  		sadScu1[2] = SAD_OCT_INIT(17, 16);  		sadScu1[3] = SAD_OCT_INIT(25, 24);  		sadScu1[4] = SAD_OCT_INIT(33, 32);  		sadScu1[5] = SAD_OCT_INIT(41, 40);  		sadScu1[6] = SAD_OCT_INIT(49, 48);  		sadScu1[7] = SAD_OCT_INIT(57, 56);
	sadScu2[0] = SAD_OCT_INIT(2, 0);  		sadScu2[1] = SAD_OCT_INIT(10, 8);  		sadScu2[2] = SAD_OCT_INIT(18, 16);  		sadScu2[3] = SAD_OCT_INIT(26, 24);  		sadScu2[4] = SAD_OCT_INIT(34, 32);  		sadScu2[5] = SAD_OCT_INIT(42, 40);  		sadScu2[6] = SAD_OCT_INIT(50, 48);  		sadScu2[7] = SAD_OCT_INIT(58, 56);
	sadScu3[0] = SAD_OCT_INIT(3, 0);  		sadScu3[1] = SAD_OCT_INIT(11, 8);  		sadScu3[2] = SAD_OCT_INIT(19, 16);  		sadScu3[3] = SAD_OCT_INIT(27, 24);  		sadScu3[4] = SAD_OCT_INIT(35, 32);  		sadScu3[5] = SAD_OCT_INIT(43, 40);  		sadScu3[6] = SAD_OCT_INIT(51, 48);  		sadScu3[7] = SAD_OCT_INIT(59, 56);
	sadScu4[0] = SAD_OCT_INIT(4, 0);  		sadScu4[1] = SAD_OCT_INIT(12, 8);  		sadScu4[2] = SAD_OCT_INIT(20, 16);  		sadScu4[3] = SAD_OCT_INIT(28, 24);  		sadScu4[4] = SAD_OCT_INIT(36, 32);  		sadScu4[5] = SAD_OCT_INIT(44, 40);  		sadScu4[6] = SAD_OCT_INIT(52, 48);  		sadScu4[7] = SAD_OCT_INIT(60, 56);
	sadScu5[0] = SAD_OCT_INIT(5, 0);  		sadScu5[1] = SAD_OCT_INIT(13, 8);  		sadScu5[2] = SAD_OCT_INIT(21, 16);  		sadScu5[3] = SAD_OCT_INIT(29, 24);  		sadScu5[4] = SAD_OCT_INIT(37, 32);  		sadScu5[5] = SAD_OCT_INIT(45, 40);  		sadScu5[6] = SAD_OCT_INIT(53, 48);  		sadScu5[7] = SAD_OCT_INIT(61, 56);
	sadScu6[0] = SAD_OCT_INIT(6, 0);  		sadScu6[1] = SAD_OCT_INIT(14, 8);  		sadScu6[2] = SAD_OCT_INIT(22, 16);  		sadScu6[3] = SAD_OCT_INIT(30, 24);  		sadScu6[4] = SAD_OCT_INIT(38, 32);  		sadScu6[5] = SAD_OCT_INIT(46, 40);  		sadScu6[6] = SAD_OCT_INIT(54, 48);  		sadScu6[7] = SAD_OCT_INIT(62, 56);
	sadScu7[0] = SAD_OCT_INIT(7, 0);  		sadScu7[1] = SAD_OCT_INIT(15, 8);  		sadScu7[2] = SAD_OCT_INIT(23, 16);  		sadScu7[3] = SAD_OCT_INIT(31, 24);  		sadScu7[4] = SAD_OCT_INIT(39, 32);  		sadScu7[5] = SAD_OCT_INIT(47, 40);  		sadScu7[6] = SAD_OCT_INIT(55, 48);  		sadScu7[7] = SAD_OCT_INIT(63, 56);
	sadScu8[0] = SAD_OCT_INIT(8, 0);  		sadScu8[1] = SAD_OCT_INIT(16, 8);  		sadScu8[2] = SAD_OCT_INIT(24, 16);  		sadScu8[3] = SAD_OCT_INIT(32, 24);  		sadScu8[4] = SAD_OCT_INIT(40, 32);  		sadScu8[5] = SAD_OCT_INIT(48, 40);  		sadScu8[6] = SAD_OCT_INIT(56, 48);  		sadScu8[7] = SAD_OCT_INIT(64, 56);
	sadScu9[0] = SAD_OCT_INIT(9, 0);  		sadScu9[1] = SAD_OCT_INIT(17, 8);  		sadScu9[2] = SAD_OCT_INIT(25, 16);  		sadScu9[3] = SAD_OCT_INIT(33, 24);  		sadScu9[4] = SAD_OCT_INIT(41, 32);  		sadScu9[5] = SAD_OCT_INIT(49, 40);  		sadScu9[6] = SAD_OCT_INIT(57, 48);  		sadScu9[7] = SAD_OCT_INIT(65, 56);
	sadScu10[0] = SAD_OCT_INIT(10, 0);  		sadScu10[1] = SAD_OCT_INIT(18, 8);  		sadScu10[2] = SAD_OCT_INIT(26, 16);  		sadScu10[3] = SAD_OCT_INIT(34, 24);  		sadScu10[4] = SAD_OCT_INIT(42, 32);  		sadScu10[5] = SAD_OCT_INIT(50, 40);  		sadScu10[6] = SAD_OCT_INIT(58, 48);  		sadScu10[7] = SAD_OCT_INIT(66, 56);
	sadScu11[0] = SAD_OCT_INIT(11, 0);  		sadScu11[1] = SAD_OCT_INIT(19, 8);  		sadScu11[2] = SAD_OCT_INIT(27, 16);  		sadScu11[3] = SAD_OCT_INIT(35, 24);  		sadScu11[4] = SAD_OCT_INIT(43, 32);  		sadScu11[5] = SAD_OCT_INIT(51, 40);  		sadScu11[6] = SAD_OCT_INIT(59, 48);  		sadScu11[7] = SAD_OCT_INIT(67, 56);
	sadScu12[0] = SAD_OCT_INIT(12, 0);  		sadScu12[1] = SAD_OCT_INIT(20, 8);  		sadScu12[2] = SAD_OCT_INIT(28, 16);  		sadScu12[3] = SAD_OCT_INIT(36, 24);  		sadScu12[4] = SAD_OCT_INIT(44, 32);  		sadScu12[5] = SAD_OCT_INIT(52, 40);  		sadScu12[6] = SAD_OCT_INIT(60, 48);  		sadScu12[7] = SAD_OCT_INIT(68, 56);
	sadScu13[0] = SAD_OCT_INIT(13, 0);  		sadScu13[1] = SAD_OCT_INIT(21, 8);  		sadScu13[2] = SAD_OCT_INIT(29, 16);  		sadScu13[3] = SAD_OCT_INIT(37, 24);  		sadScu13[4] = SAD_OCT_INIT(45, 32);  		sadScu13[5] = SAD_OCT_INIT(53, 40);  		sadScu13[6] = SAD_OCT_INIT(61, 48);  		sadScu13[7] = SAD_OCT_INIT(69, 56);
	sadScu14[0] = SAD_OCT_INIT(14, 0);  		sadScu14[1] = SAD_OCT_INIT(22, 8);  		sadScu14[2] = SAD_OCT_INIT(30, 16);  		sadScu14[3] = SAD_OCT_INIT(38, 24);  		sadScu14[4] = SAD_OCT_INIT(46, 32);  		sadScu14[5] = SAD_OCT_INIT(54, 40);  		sadScu14[6] = SAD_OCT_INIT(62, 48);  		sadScu14[7] = SAD_OCT_INIT(70, 56);
	sadScu15[0] = SAD_OCT_INIT(15, 0);  		sadScu15[1] = SAD_OCT_INIT(23, 8);  		sadScu15[2] = SAD_OCT_INIT(31, 16);  		sadScu15[3] = SAD_OCT_INIT(39, 24);  		sadScu15[4] = SAD_OCT_INIT(47, 32);  		sadScu15[5] = SAD_OCT_INIT(55, 40);  		sadScu15[6] = SAD_OCT_INIT(63, 48);  		sadScu15[7] = SAD_OCT_INIT(71, 56);

	for (reltY = 1; reltY < 8; reltY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		sadScu0[0] += SAD_OCT_ACC(0, 0);  		sadScu0[1] += SAD_OCT_ACC(8, 8);  		sadScu0[2] += SAD_OCT_ACC(16, 16);  		sadScu0[3] += SAD_OCT_ACC(24, 24);  		sadScu0[4] += SAD_OCT_ACC(32, 32);  		sadScu0[5] += SAD_OCT_ACC(40, 40);  		sadScu0[6] += SAD_OCT_ACC(48, 48);  		sadScu0[7] += SAD_OCT_ACC(56, 56);
		sadScu1[0] += SAD_OCT_ACC(1, 0);  		sadScu1[1] += SAD_OCT_ACC(9, 8);  		sadScu1[2] += SAD_OCT_ACC(17, 16);  		sadScu1[3] += SAD_OCT_ACC(25, 24);  		sadScu1[4] += SAD_OCT_ACC(33, 32);  		sadScu1[5] += SAD_OCT_ACC(41, 40);  		sadScu1[6] += SAD_OCT_ACC(49, 48);  		sadScu1[7] += SAD_OCT_ACC(57, 56);
		sadScu2[0] += SAD_OCT_ACC(2, 0);  		sadScu2[1] += SAD_OCT_ACC(10, 8);  		sadScu2[2] += SAD_OCT_ACC(18, 16);  		sadScu2[3] += SAD_OCT_ACC(26, 24);  		sadScu2[4] += SAD_OCT_ACC(34, 32);  		sadScu2[5] += SAD_OCT_ACC(42, 40);  		sadScu2[6] += SAD_OCT_ACC(50, 48);  		sadScu2[7] += SAD_OCT_ACC(58, 56);
		sadScu3[0] += SAD_OCT_ACC(3, 0);  		sadScu3[1] += SAD_OCT_ACC(11, 8);  		sadScu3[2] += SAD_OCT_ACC(19, 16);  		sadScu3[3] += SAD_OCT_ACC(27, 24);  		sadScu3[4] += SAD_OCT_ACC(35, 32);  		sadScu3[5] += SAD_OCT_ACC(43, 40);  		sadScu3[6] += SAD_OCT_ACC(51, 48);  		sadScu3[7] += SAD_OCT_ACC(59, 56);
		sadScu4[0] += SAD_OCT_ACC(4, 0);  		sadScu4[1] += SAD_OCT_ACC(12, 8);  		sadScu4[2] += SAD_OCT_ACC(20, 16);  		sadScu4[3] += SAD_OCT_ACC(28, 24);  		sadScu4[4] += SAD_OCT_ACC(36, 32);  		sadScu4[5] += SAD_OCT_ACC(44, 40);  		sadScu4[6] += SAD_OCT_ACC(52, 48);  		sadScu4[7] += SAD_OCT_ACC(60, 56);
		sadScu5[0] += SAD_OCT_ACC(5, 0);  		sadScu5[1] += SAD_OCT_ACC(13, 8);  		sadScu5[2] += SAD_OCT_ACC(21, 16);  		sadScu5[3] += SAD_OCT_ACC(29, 24);  		sadScu5[4] += SAD_OCT_ACC(37, 32);  		sadScu5[5] += SAD_OCT_ACC(45, 40);  		sadScu5[6] += SAD_OCT_ACC(53, 48);  		sadScu5[7] += SAD_OCT_ACC(61, 56);
		sadScu6[0] += SAD_OCT_ACC(6, 0);  		sadScu6[1] += SAD_OCT_ACC(14, 8);  		sadScu6[2] += SAD_OCT_ACC(22, 16);  		sadScu6[3] += SAD_OCT_ACC(30, 24);  		sadScu6[4] += SAD_OCT_ACC(38, 32);  		sadScu6[5] += SAD_OCT_ACC(46, 40);  		sadScu6[6] += SAD_OCT_ACC(54, 48);  		sadScu6[7] += SAD_OCT_ACC(62, 56);
		sadScu7[0] += SAD_OCT_ACC(7, 0);  		sadScu7[1] += SAD_OCT_ACC(15, 8);  		sadScu7[2] += SAD_OCT_ACC(23, 16);  		sadScu7[3] += SAD_OCT_ACC(31, 24);  		sadScu7[4] += SAD_OCT_ACC(39, 32);  		sadScu7[5] += SAD_OCT_ACC(47, 40);  		sadScu7[6] += SAD_OCT_ACC(55, 48);  		sadScu7[7] += SAD_OCT_ACC(63, 56);
		sadScu8[0] += SAD_OCT_ACC(8, 0);  		sadScu8[1] += SAD_OCT_ACC(16, 8);  		sadScu8[2] += SAD_OCT_ACC(24, 16);  		sadScu8[3] += SAD_OCT_ACC(32, 24);  		sadScu8[4] += SAD_OCT_ACC(40, 32);  		sadScu8[5] += SAD_OCT_ACC(48, 40);  		sadScu8[6] += SAD_OCT_ACC(56, 48);  		sadScu8[7] += SAD_OCT_ACC(64, 56);
		sadScu9[0] += SAD_OCT_ACC(9, 0);  		sadScu9[1] += SAD_OCT_ACC(17, 8);  		sadScu9[2] += SAD_OCT_ACC(25, 16);  		sadScu9[3] += SAD_OCT_ACC(33, 24);  		sadScu9[4] += SAD_OCT_ACC(41, 32);  		sadScu9[5] += SAD_OCT_ACC(49, 40);  		sadScu9[6] += SAD_OCT_ACC(57, 48);  		sadScu9[7] += SAD_OCT_ACC(65, 56);
		sadScu10[0] += SAD_OCT_ACC(10, 0);  		sadScu10[1] += SAD_OCT_ACC(18, 8);  		sadScu10[2] += SAD_OCT_ACC(26, 16);  		sadScu10[3] += SAD_OCT_ACC(34, 24);  		sadScu10[4] += SAD_OCT_ACC(42, 32);  		sadScu10[5] += SAD_OCT_ACC(50, 40);  		sadScu10[6] += SAD_OCT_ACC(58, 48);  		sadScu10[7] += SAD_OCT_ACC(66, 56);
		sadScu11[0] += SAD_OCT_ACC(11, 0);  		sadScu11[1] += SAD_OCT_ACC(19, 8);  		sadScu11[2] += SAD_OCT_ACC(27, 16);  		sadScu11[3] += SAD_OCT_ACC(35, 24);  		sadScu11[4] += SAD_OCT_ACC(43, 32);  		sadScu11[5] += SAD_OCT_ACC(51, 40);  		sadScu11[6] += SAD_OCT_ACC(59, 48);  		sadScu11[7] += SAD_OCT_ACC(67, 56);
		sadScu12[0] += SAD_OCT_ACC(12, 0);  		sadScu12[1] += SAD_OCT_ACC(20, 8);  		sadScu12[2] += SAD_OCT_ACC(28, 16);  		sadScu12[3] += SAD_OCT_ACC(36, 24);  		sadScu12[4] += SAD_OCT_ACC(44, 32);  		sadScu12[5] += SAD_OCT_ACC(52, 40);  		sadScu12[6] += SAD_OCT_ACC(60, 48);  		sadScu12[7] += SAD_OCT_ACC(68, 56);
		sadScu13[0] += SAD_OCT_ACC(13, 0);  		sadScu13[1] += SAD_OCT_ACC(21, 8);  		sadScu13[2] += SAD_OCT_ACC(29, 16);  		sadScu13[3] += SAD_OCT_ACC(37, 24);  		sadScu13[4] += SAD_OCT_ACC(45, 32);  		sadScu13[5] += SAD_OCT_ACC(53, 40);  		sadScu13[6] += SAD_OCT_ACC(61, 48);  		sadScu13[7] += SAD_OCT_ACC(69, 56);
		sadScu14[0] += SAD_OCT_ACC(14, 0);  		sadScu14[1] += SAD_OCT_ACC(22, 8);  		sadScu14[2] += SAD_OCT_ACC(30, 16);  		sadScu14[3] += SAD_OCT_ACC(38, 24);  		sadScu14[4] += SAD_OCT_ACC(46, 32);  		sadScu14[5] += SAD_OCT_ACC(54, 40);  		sadScu14[6] += SAD_OCT_ACC(62, 48);  		sadScu14[7] += SAD_OCT_ACC(70, 56);
		sadScu15[0] += SAD_OCT_ACC(15, 0);  		sadScu15[1] += SAD_OCT_ACC(23, 8);  		sadScu15[2] += SAD_OCT_ACC(31, 16);  		sadScu15[3] += SAD_OCT_ACC(39, 24);  		sadScu15[4] += SAD_OCT_ACC(47, 32);  		sadScu15[5] += SAD_OCT_ACC(55, 40);  		sadScu15[6] += SAD_OCT_ACC(63, 48);  		sadScu15[7] += SAD_OCT_ACC(71, 56);

	}
}

void copyOrgLv0_8(
	pel org_org[64][64],
	pel orgCp0_org[64][64],
	pel orgCp1_org[64][64],
	pel orgCp2_org[64][64],
	pel orgCp3_org[64][64],
	pel orgCp4_org[64][64],
	pel orgCp5_org[64][64],
	pel orgCp6_org[64][64],
	pel orgCp7_org[64][64],

	pel org[64][64],
	pel orgCp0[64][64],
	pel orgCp1[64][64],
	pel orgCp2[64][64],
	pel orgCp3[64][64],
	pel orgCp4[64][64],
	pel orgCp5[64][64],
	pel orgCp6[64][64],
	pel orgCp7[64][64]
)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=org_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp0_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp1_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp2_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp3_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp4_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp5_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp6_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp7_org complete dim=2

#pragma HLS ARRAY_PARTITION variable=org complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp4 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp5 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp6 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp7 complete dim=1

#pragma HLS INLINE off
#endif
	S14 x, y;
	for (y = 0; y < 64; y++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < 64; x++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			orgCp0[x][y] = org[x][y];
			orgCp1[x][y] = org[x][y];
			orgCp2[x][y] = org[x][y];
			orgCp3[x][y] = org[x][y];
			orgCp4[x][y] = org[x][y];
			orgCp5[x][y] = org[x][y];
			orgCp6[x][y] = org[x][y];
			orgCp7[x][y] = org[x][y];

		}
	}

	for (y = 0; y < 64; y++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < 64; x++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			orgCp0_org[y][x] = org_org[y][x];
			orgCp1_org[y][x] = org_org[y][x];
			orgCp2_org[y][x] = org_org[y][x];
			orgCp3_org[y][x] = org_org[y][x];
			orgCp4_org[y][x] = org_org[y][x];
			orgCp5_org[y][x] = org_org[y][x];
			orgCp6_org[y][x] = org_org[y][x];
			orgCp7_org[y][x] = org_org[y][x];

		}
	}
	// check orgCp0_org
	for (U7 i = 0; i < 64; i++)
	{
		for (U7 j = 0; j < 64; j++)
		{
			if (orgCp0_org[j][i] != orgCp0[i][j])
			{
				printf("error org !");
			}
		}
	}
}

void CopySadScuLv0(
	pel sadScu0[8][8],
	pel sadScu1[8][8],
	pel sadScu2[8][8],
	pel sadScu3[8][8],
	pel sadScu4[8][8],
	pel sadScu5[8][8],
	pel sadScu6[8][8],
	pel sadScu7[8][8],
	pel sadScu8[8][8],
	pel sadScu9[8][8],
	pel sadScu10[8][8],
	pel sadScu11[8][8],
	pel sadScu12[8][8],
	pel sadScu13[8][8],
	pel sadScu14[8][8],
	pel sadScu15[8][8],

	pel sadScu0_0[8],
	pel sadScu1_0[8],
	pel sadScu2_0[8],
	pel sadScu3_0[8],
	pel sadScu4_0[8],
	pel sadScu5_0[8],
	pel sadScu6_0[8],
	pel sadScu7_0[8],
	pel sadScu8_0[8],
	pel sadScu9_0[8],
	pel sadScu10_0[8],
	pel sadScu11_0[8],
	pel sadScu12_0[8],
	pel sadScu13_0[8],
	pel sadScu14_0[8],
	pel sadScu15_0[8],

	pel sadScu0_1[8],
	pel sadScu1_1[8],
	pel sadScu2_1[8],
	pel sadScu3_1[8],
	pel sadScu4_1[8],
	pel sadScu5_1[8],
	pel sadScu6_1[8],
	pel sadScu7_1[8],
	pel sadScu8_1[8],
	pel sadScu9_1[8],
	pel sadScu10_1[8],
	pel sadScu11_1[8],
	pel sadScu12_1[8],
	pel sadScu13_1[8],
	pel sadScu14_1[8],
	pel sadScu15_1[8],

	pel sadScu0_2[8],
	pel sadScu1_2[8],
	pel sadScu2_2[8],
	pel sadScu3_2[8],
	pel sadScu4_2[8],
	pel sadScu5_2[8],
	pel sadScu6_2[8],
	pel sadScu7_2[8],
	pel sadScu8_2[8],
	pel sadScu9_2[8],
	pel sadScu10_2[8],
	pel sadScu11_2[8],
	pel sadScu12_2[8],
	pel sadScu13_2[8],
	pel sadScu14_2[8],
	pel sadScu15_2[8],

	pel sadScu0_3[8],
	pel sadScu1_3[8],
	pel sadScu2_3[8],
	pel sadScu3_3[8],
	pel sadScu4_3[8],
	pel sadScu5_3[8],
	pel sadScu6_3[8],
	pel sadScu7_3[8],
	pel sadScu8_3[8],
	pel sadScu9_3[8],
	pel sadScu10_3[8],
	pel sadScu11_3[8],
	pel sadScu12_3[8],
	pel sadScu13_3[8],
	pel sadScu14_3[8],
	pel sadScu15_3[8],

	pel sadScu0_4[8],
	pel sadScu1_4[8],
	pel sadScu2_4[8],
	pel sadScu3_4[8],
	pel sadScu4_4[8],
	pel sadScu5_4[8],
	pel sadScu6_4[8],
	pel sadScu7_4[8],
	pel sadScu8_4[8],
	pel sadScu9_4[8],
	pel sadScu10_4[8],
	pel sadScu11_4[8],
	pel sadScu12_4[8],
	pel sadScu13_4[8],
	pel sadScu14_4[8],
	pel sadScu15_4[8],

	pel sadScu0_5[8],
	pel sadScu1_5[8],
	pel sadScu2_5[8],
	pel sadScu3_5[8],
	pel sadScu4_5[8],
	pel sadScu5_5[8],
	pel sadScu6_5[8],
	pel sadScu7_5[8],
	pel sadScu8_5[8],
	pel sadScu9_5[8],
	pel sadScu10_5[8],
	pel sadScu11_5[8],
	pel sadScu12_5[8],
	pel sadScu13_5[8],
	pel sadScu14_5[8],
	pel sadScu15_5[8],

	pel sadScu0_6[8],
	pel sadScu1_6[8],
	pel sadScu2_6[8],
	pel sadScu3_6[8],
	pel sadScu4_6[8],
	pel sadScu5_6[8],
	pel sadScu6_6[8],
	pel sadScu7_6[8],
	pel sadScu8_6[8],
	pel sadScu9_6[8],
	pel sadScu10_6[8],
	pel sadScu11_6[8],
	pel sadScu12_6[8],
	pel sadScu13_6[8],
	pel sadScu14_6[8],
	pel sadScu15_6[8],

	pel sadScu0_7[8],
	pel sadScu1_7[8],
	pel sadScu2_7[8],
	pel sadScu3_7[8],
	pel sadScu4_7[8],
	pel sadScu5_7[8],
	pel sadScu6_7[8],
	pel sadScu7_7[8],
	pel sadScu8_7[8],
	pel sadScu9_7[8],
	pel sadScu10_7[8],
	pel sadScu11_7[8],
	pel sadScu12_7[8],
	pel sadScu13_7[8],
	pel sadScu14_7[8],
	pel sadScu15_7[8]

)
{
#if IME_PRAGMA_ON
#pragma HLS inline off

#pragma HLS ARRAY_PARTITION variable=sadScu0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15 complete dim=0
#endif

#if IME_PRAGMA_ON

#pragma HLS ARRAY_PARTITION variable=sadScu0_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_0 complete dim=0


#pragma HLS ARRAY_PARTITION variable=sadScu0_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_1 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadScu0_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_2 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadScu0_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_3 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadScu0_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_4 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadScu0_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_5 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadScu0_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_6 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadScu0_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_7 complete dim=0

#endif

	U8 i;
	for (i = 0; i < 8; i++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		sadScu0[i][0] = sadScu0_0[i];
		sadScu0[i][1] = sadScu0_1[i];
		sadScu0[i][2] = sadScu0_2[i];
		sadScu0[i][3] = sadScu0_3[i];
		sadScu0[i][4] = sadScu0_4[i];
		sadScu0[i][5] = sadScu0_5[i];
		sadScu0[i][6] = sadScu0_6[i];
		sadScu0[i][7] = sadScu0_7[i];

		sadScu1[i][0] = sadScu1_0[i];
		sadScu1[i][1] = sadScu1_1[i];
		sadScu1[i][2] = sadScu1_2[i];
		sadScu1[i][3] = sadScu1_3[i];
		sadScu1[i][4] = sadScu1_4[i];
		sadScu1[i][5] = sadScu1_5[i];
		sadScu1[i][6] = sadScu1_6[i];
		sadScu1[i][7] = sadScu1_7[i];

		sadScu2[i][0] = sadScu2_0[i];
		sadScu2[i][1] = sadScu2_1[i];
		sadScu2[i][2] = sadScu2_2[i];
		sadScu2[i][3] = sadScu2_3[i];
		sadScu2[i][4] = sadScu2_4[i];
		sadScu2[i][5] = sadScu2_5[i];
		sadScu2[i][6] = sadScu2_6[i];
		sadScu2[i][7] = sadScu2_7[i];

		sadScu3[i][0] = sadScu3_0[i];
		sadScu3[i][1] = sadScu3_1[i];
		sadScu3[i][2] = sadScu3_2[i];
		sadScu3[i][3] = sadScu3_3[i];
		sadScu3[i][4] = sadScu3_4[i];
		sadScu3[i][5] = sadScu3_5[i];
		sadScu3[i][6] = sadScu3_6[i];
		sadScu3[i][7] = sadScu3_7[i];

		sadScu4[i][0] = sadScu4_0[i];
		sadScu4[i][1] = sadScu4_1[i];
		sadScu4[i][2] = sadScu4_2[i];
		sadScu4[i][3] = sadScu4_3[i];
		sadScu4[i][4] = sadScu4_4[i];
		sadScu4[i][5] = sadScu4_5[i];
		sadScu4[i][6] = sadScu4_6[i];
		sadScu4[i][7] = sadScu4_7[i];

		sadScu5[i][0] = sadScu5_0[i];
		sadScu5[i][1] = sadScu5_1[i];
		sadScu5[i][2] = sadScu5_2[i];
		sadScu5[i][3] = sadScu5_3[i];
		sadScu5[i][4] = sadScu5_4[i];
		sadScu5[i][5] = sadScu5_5[i];
		sadScu5[i][6] = sadScu5_6[i];
		sadScu5[i][7] = sadScu5_7[i];

		sadScu6[i][0] = sadScu6_0[i];
		sadScu6[i][1] = sadScu6_1[i];
		sadScu6[i][2] = sadScu6_2[i];
		sadScu6[i][3] = sadScu6_3[i];
		sadScu6[i][4] = sadScu6_4[i];
		sadScu6[i][5] = sadScu6_5[i];
		sadScu6[i][6] = sadScu6_6[i];
		sadScu6[i][7] = sadScu6_7[i];

		sadScu7[i][0] = sadScu7_0[i];
		sadScu7[i][1] = sadScu7_1[i];
		sadScu7[i][2] = sadScu7_2[i];
		sadScu7[i][3] = sadScu7_3[i];
		sadScu7[i][4] = sadScu7_4[i];
		sadScu7[i][5] = sadScu7_5[i];
		sadScu7[i][6] = sadScu7_6[i];
		sadScu7[i][7] = sadScu7_7[i];

		sadScu8[i][0] = sadScu8_0[i];
		sadScu8[i][1] = sadScu8_1[i];
		sadScu8[i][2] = sadScu8_2[i];
		sadScu8[i][3] = sadScu8_3[i];
		sadScu8[i][4] = sadScu8_4[i];
		sadScu8[i][5] = sadScu8_5[i];
		sadScu8[i][6] = sadScu8_6[i];
		sadScu8[i][7] = sadScu8_7[i];

		sadScu9[i][0] = sadScu9_0[i];
		sadScu9[i][1] = sadScu9_1[i];
		sadScu9[i][2] = sadScu9_2[i];
		sadScu9[i][3] = sadScu9_3[i];
		sadScu9[i][4] = sadScu9_4[i];
		sadScu9[i][5] = sadScu9_5[i];
		sadScu9[i][6] = sadScu9_6[i];
		sadScu9[i][7] = sadScu9_7[i];

		sadScu10[i][0] = sadScu10_0[i];
		sadScu10[i][1] = sadScu10_1[i];
		sadScu10[i][2] = sadScu10_2[i];
		sadScu10[i][3] = sadScu10_3[i];
		sadScu10[i][4] = sadScu10_4[i];
		sadScu10[i][5] = sadScu10_5[i];
		sadScu10[i][6] = sadScu10_6[i];
		sadScu10[i][7] = sadScu10_7[i];

		sadScu11[i][0] = sadScu11_0[i];
		sadScu11[i][1] = sadScu11_1[i];
		sadScu11[i][2] = sadScu11_2[i];
		sadScu11[i][3] = sadScu11_3[i];
		sadScu11[i][4] = sadScu11_4[i];
		sadScu11[i][5] = sadScu11_5[i];
		sadScu11[i][6] = sadScu11_6[i];
		sadScu11[i][7] = sadScu11_7[i];

		sadScu12[i][0] = sadScu12_0[i];
		sadScu12[i][1] = sadScu12_1[i];
		sadScu12[i][2] = sadScu12_2[i];
		sadScu12[i][3] = sadScu12_3[i];
		sadScu12[i][4] = sadScu12_4[i];
		sadScu12[i][5] = sadScu12_5[i];
		sadScu12[i][6] = sadScu12_6[i];
		sadScu12[i][7] = sadScu12_7[i];

		sadScu13[i][0] = sadScu13_0[i];
		sadScu13[i][1] = sadScu13_1[i];
		sadScu13[i][2] = sadScu13_2[i];
		sadScu13[i][3] = sadScu13_3[i];
		sadScu13[i][4] = sadScu13_4[i];
		sadScu13[i][5] = sadScu13_5[i];
		sadScu13[i][6] = sadScu13_6[i];
		sadScu13[i][7] = sadScu13_7[i];

		sadScu14[i][0] = sadScu14_0[i];
		sadScu14[i][1] = sadScu14_1[i];
		sadScu14[i][2] = sadScu14_2[i];
		sadScu14[i][3] = sadScu14_3[i];
		sadScu14[i][4] = sadScu14_4[i];
		sadScu14[i][5] = sadScu14_5[i];
		sadScu14[i][6] = sadScu14_6[i];
		sadScu14[i][7] = sadScu14_7[i];

		sadScu15[i][0] = sadScu15_0[i];
		sadScu15[i][1] = sadScu15_1[i];
		sadScu15[i][2] = sadScu15_2[i];
		sadScu15[i][3] = sadScu15_3[i];
		sadScu15[i][4] = sadScu15_4[i];
		sadScu15[i][5] = sadScu15_5[i];
		sadScu15[i][6] = sadScu15_6[i];
		sadScu15[i][7] = sadScu15_7[i];
	}

}

#endif	// IME_DEBUG_calcSadScuLv0TestCaseMore

void calcSadScuLv0(
#if BW_DEBUG
	U10 sadScu0_org[8][8],
	U10 sadScu1_org[8][8],
	U10 sadScu2_org[8][8],
	U10 sadScu3_org[8][8],
	U10 sadScu4_org[8][8],
	U10 sadScu5_org[8][8],
	U10 sadScu6_org[8][8],
	U10 sadScu7_org[8][8],
	U10 sadScu8_org[8][8],
	U10 sadScu9_org[8][8],
	U10 sadScu10_org[8][8],
	U10 sadScu11_org[8][8],
	U10 sadScu12_org[8][8],
	U10 sadScu13_org[8][8],
	U10 sadScu14_org[8][8],
	U10 sadScu15_org[8][8],
	U10 swSubLv0_org[80][80],
	U10 org_org[64][64],
#else
	pel sadScu0_org[8][8],
	pel sadScu1_org[8][8],
	pel sadScu2_org[8][8],
	pel sadScu3_org[8][8],
	pel sadScu4_org[8][8],
	pel sadScu5_org[8][8],
	pel sadScu6_org[8][8],
	pel sadScu7_org[8][8],
	pel sadScu8_org[8][8],
	pel sadScu9_org[8][8],
	pel sadScu10_org[8][8],
	pel sadScu11_org[8][8],
	pel sadScu12_org[8][8],
	pel sadScu13_org[8][8],
	pel sadScu14_org[8][8],
	pel sadScu15_org[8][8],

	//pel sadScu0[8][8],
	//pel sadScu1[8][8],
	//pel sadScu2[8][8],
	//pel sadScu3[8][8],
	//pel sadScu4[8][8],
	//pel sadScu5[8][8],
	//pel sadScu6[8][8],
	//pel sadScu7[8][8],
	//pel sadScu8[8][8],
	//pel sadScu9[8][8],
	//pel sadScu10[8][8],
	//pel sadScu11[8][8],
	//pel sadScu12[8][8],
	//pel sadScu13[8][8],
	//pel sadScu14[8][8],
	//pel sadScu15[8][8],
#if IME_DEBUG_calcSadScuLv0TestCaseMore
	pel swSubLv0Cp0[80][80],
	pel swSubLv0Cp1[80][80],
	pel swSubLv0Cp2[80][80],
	pel swSubLv0Cp3[80][80],
	pel swSubLv0Cp4[80][80],
	pel swSubLv0Cp5[80][80],
	pel swSubLv0Cp6[80][80],
	pel swSubLv0Cp7[80][80],

	pel orgCp0[64][64],
	pel orgCp1[64][64],
	pel orgCp2[64][64],
	pel orgCp3[64][64],
	pel orgCp4[64][64],
	pel orgCp5[64][64],
	pel orgCp6[64][64],
	pel orgCp7[64][64],
#else
	pel swSubLv0_org[80][80],
	pel org_org[64][64],

	//pel swSubLv0[80][80],
	//pel org[64][64],

#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
#endif
	U7 baseH,
	U4 bit_depth
)
{

#pragma HLS inline off

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON

#if IME_DEBUG_calcSadScuLv0TestCaseMore
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp0 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp1 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp2 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp3 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp4 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp5 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp6 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp7 complete dim=1
#else
#pragma HLS ARRAY_PARTITION variable=swSubLv0_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=org_org complete dim=2

//#pragma HLS ARRAY_PARTITION variable=swSubLv0 complete dim=1
//#pragma HLS ARRAY_PARTITION variable=org complete dim=1
#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore

#pragma HLS ARRAY_PARTITION variable=sadScu0_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_org complete dim=0

//#pragma HLS ARRAY_PARTITION variable=sadScu0 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu1 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu2 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu3 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu4 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu5 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu6 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu7 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu8 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu9 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu10 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu11 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu12 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu13 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu14 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScu15 complete dim=0

#endif
#endif	// #if !IME_PRAGMA_ON_OP

#if IME_DEBUG_calcSadScuLv0TestCaseMore	

	static pel sadScu0_0[8];
	static pel sadScu1_0[8];
	static pel sadScu2_0[8];
	static pel sadScu3_0[8];
	static pel sadScu4_0[8];
	static pel sadScu5_0[8];
	static pel sadScu6_0[8];
	static pel sadScu7_0[8];
	static pel sadScu8_0[8];
	static pel sadScu9_0[8];
	static pel sadScu10_0[8];
	static pel sadScu11_0[8];
	static pel sadScu12_0[8];
	static pel sadScu13_0[8];
	static pel sadScu14_0[8];
	static pel sadScu15_0[8];

	static pel sadScu0_1[8];
	static pel sadScu1_1[8];
	static pel sadScu2_1[8];
	static pel sadScu3_1[8];
	static pel sadScu4_1[8];
	static pel sadScu5_1[8];
	static pel sadScu6_1[8];
	static pel sadScu7_1[8];
	static pel sadScu8_1[8];
	static pel sadScu9_1[8];
	static pel sadScu10_1[8];
	static pel sadScu11_1[8];
	static pel sadScu12_1[8];
	static pel sadScu13_1[8];
	static pel sadScu14_1[8];
	static pel sadScu15_1[8];

	static pel sadScu0_2[8];
	static pel sadScu1_2[8];
	static pel sadScu2_2[8];
	static pel sadScu3_2[8];
	static pel sadScu4_2[8];
	static pel sadScu5_2[8];
	static pel sadScu6_2[8];
	static pel sadScu7_2[8];
	static pel sadScu8_2[8];
	static pel sadScu9_2[8];
	static pel sadScu10_2[8];
	static pel sadScu11_2[8];
	static pel sadScu12_2[8];
	static pel sadScu13_2[8];
	static pel sadScu14_2[8];
	static pel sadScu15_2[8];

	static pel sadScu0_3[8];
	static pel sadScu1_3[8];
	static pel sadScu2_3[8];
	static pel sadScu3_3[8];
	static pel sadScu4_3[8];
	static pel sadScu5_3[8];
	static pel sadScu6_3[8];
	static pel sadScu7_3[8];
	static pel sadScu8_3[8];
	static pel sadScu9_3[8];
	static pel sadScu10_3[8];
	static pel sadScu11_3[8];
	static pel sadScu12_3[8];
	static pel sadScu13_3[8];
	static pel sadScu14_3[8];
	static pel sadScu15_3[8];

	static pel sadScu0_4[8];
	static pel sadScu1_4[8];
	static pel sadScu2_4[8];
	static pel sadScu3_4[8];
	static pel sadScu4_4[8];
	static pel sadScu5_4[8];
	static pel sadScu6_4[8];
	static pel sadScu7_4[8];
	static pel sadScu8_4[8];
	static pel sadScu9_4[8];
	static pel sadScu10_4[8];
	static pel sadScu11_4[8];
	static pel sadScu12_4[8];
	static pel sadScu13_4[8];
	static pel sadScu14_4[8];
	static pel sadScu15_4[8];

	static pel sadScu0_5[8];
	static pel sadScu1_5[8];
	static pel sadScu2_5[8];
	static pel sadScu3_5[8];
	static pel sadScu4_5[8];
	static pel sadScu5_5[8];
	static pel sadScu6_5[8];
	static pel sadScu7_5[8];
	static pel sadScu8_5[8];
	static pel sadScu9_5[8];
	static pel sadScu10_5[8];
	static pel sadScu11_5[8];
	static pel sadScu12_5[8];
	static pel sadScu13_5[8];
	static pel sadScu14_5[8];
	static pel sadScu15_5[8];

	static pel sadScu0_6[8];
	static pel sadScu1_6[8];
	static pel sadScu2_6[8];
	static pel sadScu3_6[8];
	static pel sadScu4_6[8];
	static pel sadScu5_6[8];
	static pel sadScu6_6[8];
	static pel sadScu7_6[8];
	static pel sadScu8_6[8];
	static pel sadScu9_6[8];
	static pel sadScu10_6[8];
	static pel sadScu11_6[8];
	static pel sadScu12_6[8];
	static pel sadScu13_6[8];
	static pel sadScu14_6[8];
	static pel sadScu15_6[8];

	static pel sadScu0_7[8];
	static pel sadScu1_7[8];
	static pel sadScu2_7[8];
	static pel sadScu3_7[8];
	static pel sadScu4_7[8];
	static pel sadScu5_7[8];
	static pel sadScu6_7[8];
	static pel sadScu7_7[8];
	static pel sadScu8_7[8];
	static pel sadScu9_7[8];
	static pel sadScu10_7[8];
	static pel sadScu11_7[8];
	static pel sadScu12_7[8];
	static pel sadScu13_7[8];
	static pel sadScu14_7[8];
	static pel sadScu15_7[8];

#if IME_PRAGMA_ON

#pragma HLS ARRAY_PARTITION variable=orgCp0 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp4 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp5 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp6 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp7 complete dim=1


#pragma HLS ARRAY_PARTITION variable=sadScu0_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_0 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadScu0_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_1 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_1 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadScu0_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_2 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadScu0_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_3 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_3 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadScu0_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_4 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_4 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadScu0_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_5 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_5 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadScu0_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_6 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_6 complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadScu0_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_7 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_7 complete dim=0

#endif

	calcLineSadMore_test(swSubLv0Cp0, orgCp0, sadScu0_0, sadScu1_0, sadScu2_0, sadScu3_0, sadScu4_0, sadScu5_0, sadScu6_0, sadScu7_0,
		sadScu8_0, sadScu9_0, sadScu10_0, sadScu11_0, sadScu12_0, sadScu13_0, sadScu14_0, sadScu15_0, 0, (0 << 3) + baseH, 0 << 3, bit_depth);
	calcLineSadMore_test(swSubLv0Cp1, orgCp1, sadScu0_1, sadScu1_1, sadScu2_1, sadScu3_1, sadScu4_1, sadScu5_1, sadScu6_1, sadScu7_1,
		sadScu8_1, sadScu9_1, sadScu10_1, sadScu11_1, sadScu12_1, sadScu13_1, sadScu14_1, sadScu15_1, 1, (1 << 3) + baseH, 1 << 3, bit_depth);
	calcLineSadMore_test(swSubLv0Cp2, orgCp2, sadScu0_2, sadScu1_2, sadScu2_2, sadScu3_2, sadScu4_2, sadScu5_2, sadScu6_2, sadScu7_2,
		sadScu8_2, sadScu9_2, sadScu10_2, sadScu11_2, sadScu12_2, sadScu13_2, sadScu14_2, sadScu15_2, 2, (2 << 3) + baseH, 2 << 3, bit_depth);
	calcLineSadMore_test(swSubLv0Cp3, orgCp3, sadScu0_3, sadScu1_3, sadScu2_3, sadScu3_3, sadScu4_3, sadScu5_3, sadScu6_3, sadScu7_3,
		sadScu8_3, sadScu9_3, sadScu10_3, sadScu11_3, sadScu12_3, sadScu13_3, sadScu14_3, sadScu15_3, 3, (3 << 3) + baseH, 3 << 3, bit_depth);
	calcLineSadMore_test(swSubLv0Cp4, orgCp4, sadScu0_4, sadScu1_4, sadScu2_4, sadScu3_4, sadScu4_4, sadScu5_4, sadScu6_4, sadScu7_4,
		sadScu8_4, sadScu9_4, sadScu10_4, sadScu11_4, sadScu12_4, sadScu13_4, sadScu14_4, sadScu15_4, 4, (4 << 3) + baseH, 4 << 3, bit_depth);
	calcLineSadMore_test(swSubLv0Cp5, orgCp5, sadScu0_5, sadScu1_5, sadScu2_5, sadScu3_5, sadScu4_5, sadScu5_5, sadScu6_5, sadScu7_5,
		sadScu8_5, sadScu9_5, sadScu10_5, sadScu11_5, sadScu12_5, sadScu13_5, sadScu14_5, sadScu15_5, 5, (5 << 3) + baseH, 5 << 3, bit_depth);
	calcLineSadMore_test(swSubLv0Cp6, orgCp6, sadScu0_6, sadScu1_6, sadScu2_6, sadScu3_6, sadScu4_6, sadScu5_6, sadScu6_6, sadScu7_6,
		sadScu8_6, sadScu9_6, sadScu10_6, sadScu11_6, sadScu12_6, sadScu13_6, sadScu14_6, sadScu15_6, 6, (6 << 3) + baseH, 6 << 3, bit_depth);
	calcLineSadMore_test(swSubLv0Cp7, orgCp7, sadScu0_7, sadScu1_7, sadScu2_7, sadScu3_7, sadScu4_7, sadScu5_7, sadScu6_7, sadScu7_7,
		sadScu8_7, sadScu9_7, sadScu10_7, sadScu11_7, sadScu12_7, sadScu13_7, sadScu14_7, sadScu15_7, 7, (7 << 3) + baseH, 7 << 3, bit_depth);


	CopySadScuLv0(
		sadScu0,
		sadScu1,
		sadScu2,
		sadScu3,
		sadScu4,
		sadScu5,
		sadScu6,
		sadScu7,
		sadScu8,
		sadScu9,
		sadScu10,
		sadScu11,
		sadScu12,
		sadScu13,
		sadScu14,
		sadScu15,

		sadScu0_0,
		sadScu1_0,
		sadScu2_0,
		sadScu3_0,
		sadScu4_0,
		sadScu5_0,
		sadScu6_0,
		sadScu7_0,
		sadScu8_0,
		sadScu9_0,
		sadScu10_0,
		sadScu11_0,
		sadScu12_0,
		sadScu13_0,
		sadScu14_0,
		sadScu15_0,

		sadScu0_1,
		sadScu1_1,
		sadScu2_1,
		sadScu3_1,
		sadScu4_1,
		sadScu5_1,
		sadScu6_1,
		sadScu7_1,
		sadScu8_1,
		sadScu9_1,
		sadScu10_1,
		sadScu11_1,
		sadScu12_1,
		sadScu13_1,
		sadScu14_1,
		sadScu15_1,

		sadScu0_2,
		sadScu1_2,
		sadScu2_2,
		sadScu3_2,
		sadScu4_2,
		sadScu5_2,
		sadScu6_2,
		sadScu7_2,
		sadScu8_2,
		sadScu9_2,
		sadScu10_2,
		sadScu11_2,
		sadScu12_2,
		sadScu13_2,
		sadScu14_2,
		sadScu15_2,

		sadScu0_3,
		sadScu1_3,
		sadScu2_3,
		sadScu3_3,
		sadScu4_3,
		sadScu5_3,
		sadScu6_3,
		sadScu7_3,
		sadScu8_3,
		sadScu9_3,
		sadScu10_3,
		sadScu11_3,
		sadScu12_3,
		sadScu13_3,
		sadScu14_3,
		sadScu15_3,

		sadScu0_4,
		sadScu1_4,
		sadScu2_4,
		sadScu3_4,
		sadScu4_4,
		sadScu5_4,
		sadScu6_4,
		sadScu7_4,
		sadScu8_4,
		sadScu9_4,
		sadScu10_4,
		sadScu11_4,
		sadScu12_4,
		sadScu13_4,
		sadScu14_4,
		sadScu15_4,

		sadScu0_5,
		sadScu1_5,
		sadScu2_5,
		sadScu3_5,
		sadScu4_5,
		sadScu5_5,
		sadScu6_5,
		sadScu7_5,
		sadScu8_5,
		sadScu9_5,
		sadScu10_5,
		sadScu11_5,
		sadScu12_5,
		sadScu13_5,
		sadScu14_5,
		sadScu15_5,

		sadScu0_6,
		sadScu1_6,
		sadScu2_6,
		sadScu3_6,
		sadScu4_6,
		sadScu5_6,
		sadScu6_6,
		sadScu7_6,
		sadScu8_6,
		sadScu9_6,
		sadScu10_6,
		sadScu11_6,
		sadScu12_6,
		sadScu13_6,
		sadScu14_6,
		sadScu15_6,

		sadScu0_7,
		sadScu1_7,
		sadScu2_7,
		sadScu3_7,
		sadScu4_7,
		sadScu5_7,
		sadScu6_7,
		sadScu7_7,
		sadScu8_7,
		sadScu9_7,
		sadScu10_7,
		sadScu11_7,
		sadScu12_7,
		sadScu13_7,
		sadScu14_7,
		sadScu15_7
	);

#else

#if 1 
	U8 yScu;

	for (yScu = 0; yScu < 8; yScu++)
	{
//#if IME_PRAGMA_ON
//#pragma HLS pipeline
//#endif

		//calcLineSadMore(
#if ZJJ_OP_OFF
		calcLineSadMore_test1(
#else
		calcLineSadMore(
#endif
			swSubLv0_org, org_org,
			sadScu0_org, sadScu1_org, sadScu2_org, sadScu3_org, sadScu4_org, sadScu5_org, sadScu6_org, sadScu7_org,
			sadScu8_org, sadScu9_org, sadScu10_org, sadScu11_org, sadScu12_org, sadScu13_org, sadScu14_org, sadScu15_org,

			//swSubLv0, org, 
			//sadScu0, sadScu1, sadScu2, sadScu3, sadScu4, sadScu5, sadScu6, sadScu7,
			//sadScu8, sadScu9, sadScu10, sadScu11, sadScu12, sadScu13, sadScu14, sadScu15, 
			yScu, (yScu << 3) + baseH, yScu << 3, bit_depth);
	}
#else

		calcLineSadMore_test1(
			swSubLv0_org, org_org,
			sadScu0_org, sadScu1_org, sadScu2_org, sadScu3_org, sadScu4_org, sadScu5_org, sadScu6_org, sadScu7_org,
			sadScu8_org, sadScu9_org, sadScu10_org, sadScu11_org, sadScu12_org, sadScu13_org, sadScu14_org, sadScu15_org,

			0, (0 << 3) + baseH, 0 << 3, bit_depth);

		calcLineSadMore_test1(
			swSubLv0_org, org_org,
			sadScu0_org, sadScu1_org, sadScu2_org, sadScu3_org, sadScu4_org, sadScu5_org, sadScu6_org, sadScu7_org,
			sadScu8_org, sadScu9_org, sadScu10_org, sadScu11_org, sadScu12_org, sadScu13_org, sadScu14_org, sadScu15_org,

			1, (1 << 3) + baseH, 1 << 3, bit_depth);

		calcLineSadMore_test1(
			swSubLv0_org, org_org,
			sadScu0_org, sadScu1_org, sadScu2_org, sadScu3_org, sadScu4_org, sadScu5_org, sadScu6_org, sadScu7_org,
			sadScu8_org, sadScu9_org, sadScu10_org, sadScu11_org, sadScu12_org, sadScu13_org, sadScu14_org, sadScu15_org,

			2, (2 << 3) + baseH, 2 << 3, bit_depth);

		calcLineSadMore_test1(
			swSubLv0_org, org_org,
			sadScu0_org, sadScu1_org, sadScu2_org, sadScu3_org, sadScu4_org, sadScu5_org, sadScu6_org, sadScu7_org,
			sadScu8_org, sadScu9_org, sadScu10_org, sadScu11_org, sadScu12_org, sadScu13_org, sadScu14_org, sadScu15_org,

			3, (3 << 3) + baseH, 3 << 3, bit_depth);

		calcLineSadMore_test1(
			swSubLv0_org, org_org,
			sadScu0_org, sadScu1_org, sadScu2_org, sadScu3_org, sadScu4_org, sadScu5_org, sadScu6_org, sadScu7_org,
			sadScu8_org, sadScu9_org, sadScu10_org, sadScu11_org, sadScu12_org, sadScu13_org, sadScu14_org, sadScu15_org,

			4, (4 << 3) + baseH, 4 << 3, bit_depth);

		calcLineSadMore_test1(
			swSubLv0_org, org_org,
			sadScu0_org, sadScu1_org, sadScu2_org, sadScu3_org, sadScu4_org, sadScu5_org, sadScu6_org, sadScu7_org,
			sadScu8_org, sadScu9_org, sadScu10_org, sadScu11_org, sadScu12_org, sadScu13_org, sadScu14_org, sadScu15_org,

			5, (5 << 3) + baseH, 5 << 3, bit_depth);

		calcLineSadMore_test1(
			swSubLv0_org, org_org,
			sadScu0_org, sadScu1_org, sadScu2_org, sadScu3_org, sadScu4_org, sadScu5_org, sadScu6_org, sadScu7_org,
			sadScu8_org, sadScu9_org, sadScu10_org, sadScu11_org, sadScu12_org, sadScu13_org, sadScu14_org, sadScu15_org,

			6, (6 << 3) + baseH, 6 << 3, bit_depth);

		calcLineSadMore_test1(
			swSubLv0_org, org_org,
			sadScu0_org, sadScu1_org, sadScu2_org, sadScu3_org, sadScu4_org, sadScu5_org, sadScu6_org, sadScu7_org,
			sadScu8_org, sadScu9_org, sadScu10_org, sadScu11_org, sadScu12_org, sadScu13_org, sadScu14_org, sadScu15_org,

			7, (7 << 3) + baseH, 7 << 3, bit_depth);



#endif

#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore	
}

void constructSadTreeAndCompare(
	U7 x, 
	U7 y, 
#if BW_DEBUG
	U10 sadScu_org[8][8],
#else
	pel sadScu_org[8][8], 
#endif
	S14 posLTLv0[2], 
	U32 lambdaMv, 
	U2 numRefp, 
	S2 refi, 
	U32 sadTree64x64Best[1][1],
	U32 sadTree32x32Best[2][2], U32 sadTree64x32Best[1][2], U32 sadTree32x64Best[2][1],
	U32 sadTree16x16Best[4][4], U32 sadTree32x16Best[2][4], U32 sadTree16x32Best[4][2], U32 sadTree64x16Best[1][4], U32 sadTree16x64Best[4][1],
	U16 sadTree8x8Best[8][8], U16 sadTree16x8Best[4][8], U16 sadTree8x16Best[8][4], U16 sadTree32x8Best[2][8], U16 sadTree8x32Best[8][2], U32 sadTree64x8Best[1][8], U32 sadTree8x64Best[8][1],
	S14 sadTree64x64Mv[1][1][2],
	S14 sadTree32x32Mv[2][2][2], S14 sadTree64x32Mv[1][2][2], S14 sadTree32x64Mv[2][1][2],
	S14 sadTree16x16Mv[4][4][2], S14 sadTree32x16Mv[2][4][2], S14 sadTree16x32Mv[4][2][2], S14 sadTree64x16Mv[1][4][2], S14 sadTree16x64Mv[4][1][2],
	S14 sadTree8x8Mv[8][8][2], S14 sadTree16x8Mv[4][8][2], S14 sadTree8x16Mv[8][4][2], S14 sadTree32x8Mv[2][8][2], S14 sadTree8x32Mv[8][2][2], S14 sadTree64x8Mv[1][8][2], S14 sadTree8x64Mv[8][1][2],
	S14 sadTree64x64PMv[1][1][2],
	S14 sadTree32x32PMv[2][2][2], S14 sadTree64x32PMv[1][2][2], S14 sadTree32x64PMv[2][1][2],
	S14 sadTree16x16PMv[4][4][2], S14 sadTree32x16PMv[2][4][2], S14 sadTree16x32PMv[4][2][2], S14 sadTree64x16PMv[1][4][2], S14 sadTree16x64PMv[4][1][2],
	S14 sadTree8x8PMv[8][8][2], S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2])
{
#if IME_PRAGMA_ON
#pragma HLS pipeline

#if !IME_PRAGMA_ON_OP
#pragma HLS ARRAY_PARTITION variable=sadScu_org complete dim=0

//#pragma HLS ARRAY_PARTITION variable=sadScu complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x64Best complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32Best complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32Best complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64Best complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16Best complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16Best complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32Best complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16Best complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64Best complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree8x8Best complete dim=0		//
#pragma HLS ARRAY_PARTITION variable=sadTree16x8Best complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16Best complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8Best complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32Best complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8Best complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64Best complete dim=0
#endif	// #if !IME_PRAGMA_ON_OP

#endif

	U32 sadTree64x64_org[1][1];
	U32 sadTree32x32_org[2][2]; U32 sadTree64x32_org[1][2]; U32 sadTree32x64_org[2][1];
	U32 sadTree16x16_org[4][4]; U32 sadTree32x16_org[2][4]; U32 sadTree16x32_org[4][2]; U32 sadTree64x16_org[1][4]; U32 sadTree16x64_org[4][1];
	U16 sadTree16x8_org[4][8];	U16 sadTree8x16_org[8][4];	U16 sadTree32x8_org[2][8];	U16 sadTree8x32_org[8][2];	U32 sadTree64x8_org[1][8]; U32 sadTree8x64_org[8][1];

	//U32 sadTree64x64[1][1];
	//U32 sadTree32x32[2][2]; U32 sadTree64x32[1][2]; U32 sadTree32x64[2][1];
	//U32 sadTree16x16[4][4]; U32 sadTree32x16[2][4]; U32 sadTree16x32[4][2]; U32 sadTree64x16[1][4]; U32 sadTree16x64[4][1];
	//U16 sadTree16x8[4][8]; U16 sadTree8x16[8][4]; U16 sadTree32x8[2][8]; U16 sadTree8x32[8][2]; U32 sadTree64x8[1][8]; U32 sadTree8x64[8][1];
#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadTree64x64_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64_org complete dim=0
#endif	// #if !IME_PRAGMA_ON_OP

//#pragma HLS ARRAY_PARTITION variable=sadTree64x64 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x32 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x32 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x64 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x16 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x16 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x32 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x16 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x64 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x8 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x16 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x8 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x32 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x8 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x64 complete dim=0

#endif

	constructSadTreeDepth3(sadScu_org, sadTree16x16_org, sadTree16x8_org, sadTree8x16_org, sadTree32x8_org, sadTree8x32_org, sadTree64x8_org, sadTree8x64_org
		//,
		//sadScu, sadTree16x16, sadTree16x8, sadTree8x16, sadTree32x8, sadTree8x32, sadTree64x8, sadTree8x64
	);

	constructSadTreeDepth2(sadTree16x16_org, sadTree32x32_org, sadTree32x16_org, sadTree16x32_org, sadTree64x16_org, sadTree16x64_org
		//, 
		//sadTree16x16, sadTree32x32, sadTree32x16, sadTree16x32, sadTree64x16, sadTree16x64
	);

	constructSadTreeDepth1(sadTree32x32_org, sadTree64x64_org, sadTree64x32_org, sadTree32x64_org
		//,
		//sadTree32x32, sadTree64x64, sadTree64x32, sadTree32x64
	);

	compareBestInfo(posLTLv0[0] + (x << 2), posLTLv0[1] + (y << 2), lambdaMv, numRefp, refi,
		sadTree64x64Best,
		sadTree32x32Best, sadTree64x32Best, sadTree32x64Best,
		sadTree16x16Best, sadTree32x16Best, sadTree16x32Best, sadTree64x16Best, sadTree16x64Best,
		sadTree8x8Best, sadTree16x8Best, sadTree8x16Best, sadTree32x8Best, sadTree8x32Best, sadTree64x8Best, sadTree8x64Best,

		sadTree64x64_org,
		sadTree32x32_org, sadTree64x32_org, sadTree32x64_org,
		sadTree16x16_org, sadTree32x16_org, sadTree16x32_org, sadTree64x16_org, sadTree16x64_org,
		sadScu_org, sadTree16x8_org, sadTree8x16_org, sadTree32x8_org, sadTree8x32_org, sadTree64x8_org, sadTree8x64_org,
		////==========================================================================
		//sadTree64x64,
		//sadTree32x32, sadTree64x32, sadTree32x64,
		//sadTree16x16, sadTree32x16, sadTree16x32, sadTree64x16, sadTree16x64,
		//sadScu, sadTree16x8, sadTree8x16, sadTree32x8, sadTree8x32, sadTree64x8, sadTree8x64,
		sadTree64x64Mv,
		sadTree32x32Mv, sadTree64x32Mv, sadTree32x64Mv,
		sadTree16x16Mv, sadTree32x16Mv, sadTree16x32Mv, sadTree64x16Mv, sadTree16x64Mv,
		sadTree8x8Mv, sadTree16x8Mv, sadTree8x16Mv, sadTree32x8Mv, sadTree8x32Mv, sadTree64x8Mv, sadTree8x64Mv,
		sadTree64x64PMv,
		sadTree32x32PMv, sadTree64x32PMv, sadTree32x64PMv,
		sadTree16x16PMv, sadTree32x16PMv, sadTree16x32PMv, sadTree64x16PMv, sadTree16x64PMv,
		sadTree8x8PMv, sadTree16x8PMv, sadTree8x16PMv, sadTree32x8PMv, sadTree8x32PMv, sadTree64x8PMv, sadTree8x64PMv);

}

#define CONSTRUCT_COMPARE(idx,sadScu_org) constructSadTreeAndCompare(idx, y, sadScu_org, posLTLv0, lambdaMv, numRefp, refi, \
	sadTree64x64Best0, sadTree32x32Best0, sadTree64x32Best0, sadTree32x64Best0, sadTree16x16Best0, sadTree32x16Best0, sadTree16x32Best0, sadTree64x16Best0, sadTree16x64Best0, \
	sadTree8x8Best0, sadTree16x8Best0, sadTree8x16Best0, sadTree32x8Best0, sadTree8x32Best0, sadTree64x8Best0, sadTree8x64Best0, \
	sadTree64x64Mv0, \
	sadTree32x32Mv0, sadTree64x32Mv0, sadTree32x64Mv0, \
	sadTree16x16Mv0, sadTree32x16Mv0, sadTree16x32Mv0, sadTree64x16Mv0, sadTree16x64Mv0, \
	sadTree8x8Mv0, sadTree16x8Mv0, sadTree8x16Mv0, sadTree32x8Mv0, sadTree8x32Mv0, sadTree64x8Mv0, sadTree8x64Mv0, \
	sadTree64x64PMv, \
	sadTree32x32PMv, sadTree64x32PMv, sadTree32x64PMv, \
	sadTree16x16PMv, sadTree32x16PMv, sadTree16x32PMv, sadTree64x16PMv, sadTree16x64PMv, \
	sadTree8x8PMv, sadTree16x8PMv, sadTree8x16PMv, sadTree32x8PMv, sadTree8x32PMv, sadTree64x8PMv, sadTree8x64PMv)

void searchFullLv0TestCase(
#if IME_DEBUG_calcSadScuLv0TestCaseMore
	pel swSubLv0Cp0_org[80][80],
	pel swSubLv0Cp1_org[80][80],
	pel swSubLv0Cp2_org[80][80],
	pel swSubLv0Cp3_org[80][80],
	pel swSubLv0Cp4_org[80][80],
	pel swSubLv0Cp5_org[80][80],
	pel swSubLv0Cp6_org[80][80],
	pel swSubLv0Cp7_org[80][80],
#else
#if BW_DEBUG
	U10 swSubLv0_org[80][80],
#else
	pel swSubLv0_org[80][80],
#endif
#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
	//===============================================
#if IME_DEBUG_calcSadScuLv0TestCaseMore
	pel swSubLv0Cp0[80][80],
	pel swSubLv0Cp1[80][80],
	pel swSubLv0Cp2[80][80],
	pel swSubLv0Cp3[80][80],
	pel swSubLv0Cp4[80][80],
	pel swSubLv0Cp5[80][80],
	pel swSubLv0Cp6[80][80],
	pel swSubLv0Cp7[80][80],
#else
	//pel swSubLv0[80][80],
#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
	S14 posLTLv0[2], 
	U32 lambdaMv, 
	U2 numRefp, 
	S2 refi,
	S14 rangeLv0[2][2], 

#if IME_DEBUG_calcSadScuLv0TestCaseMore
	pel orgCp0_org[64][64],
	pel orgCp1_org[64][64],
	pel orgCp2_org[64][64],
	pel orgCp3_org[64][64],
	pel orgCp4_org[64][64],
	pel orgCp5_org[64][64],
	pel orgCp6_org[64][64],
	pel orgCp7_org[64][64],
#else
#if BW_DEBUG
	U10 org_org[64][64],
#else
	pel org_org[64][64],
#endif
#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore

#if IME_DEBUG_calcSadScuLv0TestCaseMore
	pel orgCp0[64][64],
	pel orgCp1[64][64],
	pel orgCp2[64][64],
	pel orgCp3[64][64],
	pel orgCp4[64][64],
	pel orgCp5[64][64],
	pel orgCp6[64][64],
	pel orgCp7[64][64],
#else
	//pel org[64][64],
#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore

	S14 sadTree64x64Mv0[1][1][2],
	S14 sadTree32x32Mv0[2][2][2], S14 sadTree64x32Mv0[1][2][2], S14 sadTree32x64Mv0[2][1][2],
	S14 sadTree16x16Mv0[4][4][2], S14 sadTree32x16Mv0[2][4][2], S14 sadTree16x32Mv0[4][2][2], S14 sadTree64x16Mv0[1][4][2], S14 sadTree16x64Mv0[4][1][2],
	S14 sadTree8x8Mv0[8][8][2], S14 sadTree16x8Mv0[4][8][2], S14 sadTree8x16Mv0[8][4][2], S14 sadTree32x8Mv0[2][8][2], S14 sadTree8x32Mv0[8][2][2], S14 sadTree64x8Mv0[1][8][2], S14 sadTree8x64Mv0[8][1][2],
	S14 sadTree64x64PMv[1][1][2],
	S14 sadTree32x32PMv[2][2][2], S14 sadTree64x32PMv[1][2][2], S14 sadTree32x64PMv[2][1][2],
	S14 sadTree16x16PMv[4][4][2], S14 sadTree32x16PMv[2][4][2], S14 sadTree16x32PMv[4][2][2], S14 sadTree64x16PMv[1][4][2], S14 sadTree16x64PMv[4][1][2],
	S14 sadTree8x8PMv[8][8][2], S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2],
	U32 sadTree64x64Best0[1][1],
	U32 sadTree32x32Best0[2][2], U32 sadTree64x32Best0[1][2], U32 sadTree32x64Best0[2][1],
	U32 sadTree16x16Best0[4][4], U32 sadTree32x16Best0[2][4], U32 sadTree16x32Best0[4][2], U32 sadTree64x16Best0[1][4], U32 sadTree16x64Best0[4][1],
	U16 sadTree8x8Best0[8][8], U16  sadTree16x8Best0[4][8], U16  sadTree8x16Best0[8][4], U16 sadTree32x8Best0[2][8], U16 sadTree8x32Best0[8][2], U32 sadTree64x8Best0[1][8], U32 sadTree8x64Best0[8][1], U4 bit_depth)
{

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON

#if IME_DEBUG_calcSadScuLv0TestCaseMore
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp0_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp1_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp2_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp3_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp4_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp5_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp6_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp7_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp0_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp1_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp2_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp3_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp4_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp5_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp6_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp7_org complete dim=2
#else
#pragma HLS ARRAY_PARTITION variable=swSubLv0_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=org_org complete dim=2
#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
	//=====================================================
#if IME_DEBUG_calcSadScuLv0TestCaseMore
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp0 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp1 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp2 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp3 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp4 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp5 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp6 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp7 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp4 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp5 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp6 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp7 complete dim=1
#else
//#pragma HLS ARRAY_PARTITION variable=swSubLv0 complete dim=1
//#pragma HLS ARRAY_PARTITION variable=org complete dim=1
#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore

#pragma HLS ARRAY_PARTITION variable=sadTree64x64Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64PMv complete dim=0

#endif
#endif	// #if !IME_PRAGMA_ON_OP

#if BW_DEBUG
	static U10 sadScuUp0_org[8][8]; static U10 sadScuUp1_org[8][8]; static U10 sadScuUp2_org[8][8]; static U10 sadScuUp3_org[8][8];
	static U10 sadScuUp4_org[8][8]; static U10 sadScuUp5_org[8][8]; static U10 sadScuUp6_org[8][8]; static U10 sadScuUp7_org[8][8];
	static U10 sadScuUp8_org[8][8]; static U10 sadScuUp9_org[8][8]; static U10 sadScuUp10_org[8][8]; static U10 sadScuUp11_org[8][8];
	static U10 sadScuUp12_org[8][8]; static U10 sadScuUp13_org[8][8]; static U10 sadScuUp14_org[8][8]; static U10 sadScuUp15_org[8][8];
#else
	static pel sadScuUp0_org[8][8]; static pel sadScuUp1_org[8][8]; static pel sadScuUp2_org[8][8]; static pel sadScuUp3_org[8][8];
	static pel sadScuUp4_org[8][8]; static pel sadScuUp5_org[8][8]; static pel sadScuUp6_org[8][8]; static pel sadScuUp7_org[8][8];
	static pel sadScuUp8_org[8][8]; static pel sadScuUp9_org[8][8]; static pel sadScuUp10_org[8][8]; static pel sadScuUp11_org[8][8];
	static pel sadScuUp12_org[8][8]; static pel sadScuUp13_org[8][8]; static pel sadScuUp14_org[8][8]; static pel sadScuUp15_org[8][8];
#endif

	//static pel sadScuUp0[8][8]; static pel sadScuUp1[8][8]; static pel sadScuUp2[8][8]; static pel sadScuUp3[8][8];
	//static pel sadScuUp4[8][8]; static pel sadScuUp5[8][8]; static pel sadScuUp6[8][8]; static pel sadScuUp7[8][8];
	//static pel sadScuUp8[8][8]; static pel sadScuUp9[8][8]; static pel sadScuUp10[8][8]; static pel sadScuUp11[8][8];
	//static pel sadScuUp12[8][8]; static pel sadScuUp13[8][8]; static pel sadScuUp14[8][8]; static pel sadScuUp15[8][8];

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadScuUp0_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp1_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp2_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp3_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp4_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp5_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp6_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp7_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp8_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp9_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp10_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp11_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp12_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp13_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp14_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp15_org complete dim=0

//#pragma HLS ARRAY_PARTITION variable=sadScuUp0 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScuUp1 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScuUp2 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScuUp3 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScuUp4 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScuUp5 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScuUp6 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScuUp7 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScuUp8 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScuUp9 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScuUp10 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScuUp11 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScuUp12 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScuUp13 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScuUp14 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadScuUp15 complete dim=0
#endif
#endif	// #if !IME_PRAGMA_ON_OP

	U7 y;

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadTree64x64Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64Best0 complete dim=0

#endif
#endif	// #if !IME_PRAGMA_ON_OP

	initBestInfo(sadTree64x64Best0,
		sadTree32x32Best0, sadTree64x32Best0, sadTree32x64Best0,
		sadTree16x16Best0, sadTree32x16Best0, sadTree16x32Best0, sadTree64x16Best0, sadTree16x64Best0,
		sadTree8x8Best0, sadTree16x8Best0, sadTree8x16Best0, sadTree32x8Best0, sadTree8x32Best0, sadTree64x8Best0, sadTree8x64Best0);


	for (y = 0; y < 16; y++)
	{

		calcSadScuLv0(
			sadScuUp0_org, sadScuUp1_org, sadScuUp2_org, sadScuUp3_org, sadScuUp4_org, sadScuUp5_org, sadScuUp6_org, sadScuUp7_org,
			sadScuUp8_org, sadScuUp9_org, sadScuUp10_org, sadScuUp11_org, sadScuUp12_org, sadScuUp13_org, sadScuUp14_org, sadScuUp15_org,

			//sadScuUp0, sadScuUp1, sadScuUp2, sadScuUp3, sadScuUp4, sadScuUp5, sadScuUp6, sadScuUp7,
			//sadScuUp8, sadScuUp9, sadScuUp10, sadScuUp11, sadScuUp12, sadScuUp13, sadScuUp14, sadScuUp15, 
#if IME_DEBUG_calcSadScuLv0TestCaseMore
			swSubLv0Cp0,
			swSubLv0Cp1,
			swSubLv0Cp2,
			swSubLv0Cp3,
			swSubLv0Cp4,
			swSubLv0Cp5,
			swSubLv0Cp6,
			swSubLv0Cp7,

			orgCp0,
			orgCp1,
			orgCp2,
			orgCp3,
			orgCp4,
			orgCp5,
			orgCp6,
			orgCp7,
#else
			swSubLv0_org,
			org_org,

			//swSubLv0,
			//org,
#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
			y,
			bit_depth
		);


		CONSTRUCT_COMPARE(0, sadScuUp0_org
			//, sadScuUp0
		);
		CONSTRUCT_COMPARE(1, sadScuUp1_org
			//, sadScuUp1
		);
		CONSTRUCT_COMPARE(2, sadScuUp2_org
			//, sadScuUp2
		);
		CONSTRUCT_COMPARE(3, sadScuUp3_org
			//, sadScuUp3
		);
		CONSTRUCT_COMPARE(4, sadScuUp4_org
			//, sadScuUp4
		);
		CONSTRUCT_COMPARE(5, sadScuUp5_org
			//, sadScuUp5
		);
		CONSTRUCT_COMPARE(6, sadScuUp6_org
			//, sadScuUp6
		);
		CONSTRUCT_COMPARE(7, sadScuUp7_org
			//, sadScuUp7
		);
		CONSTRUCT_COMPARE(8, sadScuUp8_org
			//, sadScuUp8
		);
		CONSTRUCT_COMPARE(9, sadScuUp9_org
			//, sadScuUp9
		);
		CONSTRUCT_COMPARE(10, sadScuUp10_org
			//, sadScuUp10
		);
		CONSTRUCT_COMPARE(11, sadScuUp11_org
			//, sadScuUp11
		);
		CONSTRUCT_COMPARE(12, sadScuUp12_org
			//, sadScuUp12
		);
		CONSTRUCT_COMPARE(13, sadScuUp13_org
			//, sadScuUp13
		);
		CONSTRUCT_COMPARE(14, sadScuUp14_org
			//, sadScuUp14
		);
		CONSTRUCT_COMPARE(15, sadScuUp15_org
			//, sadScuUp15
		);
	}

}
void searchFullLv0_test1(
#if BW_DEBUG
	U10 swSubLv0_org[80][80],
#else
	pel swSubLv0_org[80][80],
#endif
	S14 posLTLv0[2],
	U32 lambdaMv,
	U2 numRefp,
	S2 refi,
#if BW_DEBUG
	U10 org_org[64][64],
#else
	pel org_org[64][64],
#endif
	S14 sadTree64x64Mv0[1][1][2],
	S14 sadTree32x32Mv0[2][2][2], S14 sadTree64x32Mv0[1][2][2], S14 sadTree32x64Mv0[2][1][2],
	S14 sadTree16x16Mv0[4][4][2], S14 sadTree32x16Mv0[2][4][2], S14 sadTree16x32Mv0[4][2][2], S14 sadTree64x16Mv0[1][4][2], S14 sadTree16x64Mv0[4][1][2],
	S14 sadTree8x8Mv0[8][8][2], S14 sadTree16x8Mv0[4][8][2], S14 sadTree8x16Mv0[8][4][2], S14 sadTree32x8Mv0[2][8][2], S14 sadTree8x32Mv0[8][2][2], S14 sadTree64x8Mv0[1][8][2], S14 sadTree8x64Mv0[8][1][2],
	S14 sadTree64x64PMv[1][1][2],
	S14 sadTree32x32PMv[2][2][2], S14 sadTree64x32PMv[1][2][2], S14 sadTree32x64PMv[2][1][2],
	S14 sadTree16x16PMv[4][4][2], S14 sadTree32x16PMv[2][4][2], S14 sadTree16x32PMv[4][2][2], S14 sadTree64x16PMv[1][4][2], S14 sadTree16x64PMv[4][1][2],
	S14 sadTree8x8PMv[8][8][2], S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2],
	U32 sadTree64x64Best0[1][1],
	U32 sadTree32x32Best0[2][2], U32 sadTree64x32Best0[1][2], U32 sadTree32x64Best0[2][1],
	U32 sadTree16x16Best0[4][4], U32 sadTree32x16Best0[2][4], U32 sadTree16x32Best0[4][2], U32 sadTree64x16Best0[1][4], U32 sadTree16x64Best0[4][1],
	U16 sadTree8x8Best0[8][8], U16  sadTree16x8Best0[4][8], U16  sadTree8x16Best0[8][4], U16 sadTree32x8Best0[2][8], U16 sadTree8x32Best0[8][2], U32 sadTree64x8Best0[1][8], U32 sadTree8x64Best0[8][1], U4 bit_depth)
{
#pragma HLS inline off
#if BW_DEBUG
#if VIVADO_HLS_IME
	U10 sadScuUp0_org[8][8]; U10 sadScuUp1_org[8][8]; U10 sadScuUp2_org[8][8]; U10 sadScuUp3_org[8][8];
	U10 sadScuUp4_org[8][8]; U10 sadScuUp5_org[8][8]; U10 sadScuUp6_org[8][8]; U10 sadScuUp7_org[8][8];
	U10 sadScuUp8_org[8][8]; U10 sadScuUp9_org[8][8]; U10 sadScuUp10_org[8][8]; U10 sadScuUp11_org[8][8];
	U10 sadScuUp12_org[8][8]; U10 sadScuUp13_org[8][8]; U10 sadScuUp14_org[8][8]; U10 sadScuUp15_org[8][8];
#else
	static U10 sadScuUp0_org[8][8]; static U10 sadScuUp1_org[8][8]; static U10 sadScuUp2_org[8][8]; static U10 sadScuUp3_org[8][8];
	static U10 sadScuUp4_org[8][8]; static U10 sadScuUp5_org[8][8]; static U10 sadScuUp6_org[8][8]; static U10 sadScuUp7_org[8][8];
	static U10 sadScuUp8_org[8][8]; static U10 sadScuUp9_org[8][8]; static U10 sadScuUp10_org[8][8]; static U10 sadScuUp11_org[8][8];
	static U10 sadScuUp12_org[8][8]; static U10 sadScuUp13_org[8][8]; static U10 sadScuUp14_org[8][8]; static U10 sadScuUp15_org[8][8];
#endif
#else
#if VIVADO_HLS_IME
	pel sadScuUp0_org[8][8]; pel sadScuUp1_org[8][8]; pel sadScuUp2_org[8][8]; pel sadScuUp3_org[8][8];
	pel sadScuUp4_org[8][8]; pel sadScuUp5_org[8][8]; pel sadScuUp6_org[8][8]; pel sadScuUp7_org[8][8];
	pel sadScuUp8_org[8][8]; pel sadScuUp9_org[8][8]; pel sadScuUp10_org[8][8]; pel sadScuUp11_org[8][8];
	pel sadScuUp12_org[8][8]; pel sadScuUp13_org[8][8]; pel sadScuUp14_org[8][8]; pel sadScuUp15_org[8][8];
#else
	static pel sadScuUp0_org[8][8]; static pel sadScuUp1_org[8][8]; static pel sadScuUp2_org[8][8]; static pel sadScuUp3_org[8][8];
	static pel sadScuUp4_org[8][8]; static pel sadScuUp5_org[8][8]; static pel sadScuUp6_org[8][8]; static pel sadScuUp7_org[8][8];
	static pel sadScuUp8_org[8][8]; static pel sadScuUp9_org[8][8]; static pel sadScuUp10_org[8][8]; static pel sadScuUp11_org[8][8];
	static pel sadScuUp12_org[8][8]; static pel sadScuUp13_org[8][8]; static pel sadScuUp14_org[8][8]; static pel sadScuUp15_org[8][8];
#endif
#endif


	U7 y;

	initBestInfo(sadTree64x64Best0,
		sadTree32x32Best0, sadTree64x32Best0, sadTree32x64Best0,
		sadTree16x16Best0, sadTree32x16Best0, sadTree16x32Best0, sadTree64x16Best0, sadTree16x64Best0,
		sadTree8x8Best0, sadTree16x8Best0, sadTree8x16Best0, sadTree32x8Best0, sadTree8x32Best0, sadTree64x8Best0, sadTree8x64Best0);


	for (y = 0; y < 16; y++)
	{

//#if IME_PRAGMA_ON
//#pragma HLS pipeline
//#endif

		calcSadScuLv0(
			sadScuUp0_org, sadScuUp1_org, sadScuUp2_org, sadScuUp3_org, sadScuUp4_org, sadScuUp5_org, sadScuUp6_org, sadScuUp7_org,
			sadScuUp8_org, sadScuUp9_org, sadScuUp10_org, sadScuUp11_org, sadScuUp12_org, sadScuUp13_org, sadScuUp14_org, sadScuUp15_org,
			swSubLv0_org,
			org_org,
			y,
			bit_depth
		);


		CONSTRUCT_COMPARE(0, sadScuUp0_org
		);
		CONSTRUCT_COMPARE(1, sadScuUp1_org
		);
		CONSTRUCT_COMPARE(2, sadScuUp2_org
		);
		CONSTRUCT_COMPARE(3, sadScuUp3_org
		);
		CONSTRUCT_COMPARE(4, sadScuUp4_org
		);
		CONSTRUCT_COMPARE(5, sadScuUp5_org
		);
		CONSTRUCT_COMPARE(6, sadScuUp6_org
		);
		CONSTRUCT_COMPARE(7, sadScuUp7_org
		);
		CONSTRUCT_COMPARE(8, sadScuUp8_org
		);
		CONSTRUCT_COMPARE(9, sadScuUp9_org
		);
		CONSTRUCT_COMPARE(10, sadScuUp10_org
		);
		CONSTRUCT_COMPARE(11, sadScuUp11_org
		);
		CONSTRUCT_COMPARE(12, sadScuUp12_org
		);
		CONSTRUCT_COMPARE(13, sadScuUp13_org
		);
		CONSTRUCT_COMPARE(14, sadScuUp14_org
		);
		CONSTRUCT_COMPARE(15, sadScuUp15_org
		);
	}

}

//============================================================================================================================================================================================================================
//============================================================================================================================================================================================================================

/* searchFullLv0TestCase : myAlgorithm_stage1 */
void initBestInfo__myAlgorithm_stage1_and_2(U32 sadTree64x64[1][1],
	U32 sadTree32x32[2][2], U32 sadTree64x32[1][2], U32 sadTree32x64[2][1],
	U32 sadTree16x16[4][4], U32 sadTree32x16[2][4], U32 sadTree16x32[4][2], U32 sadTree64x16[1][4], U32 sadTree16x64[4][1],
	U16  sadTree8x8[8][8], U16 sadTree16x8[4][8], U16 sadTree8x16[8][4], U16 sadTree32x8[2][8], U16  sadTree8x32[8][2], U32 sadTree64x8[1][8], U32 sadTree8x64[8][1])
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadTree64x64 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64 complete dim=0
#endif

	U4 x_8;
	U3 x_16;
	U2 x_32;

	sadTree64x64[0][0] = 0xFFFFFFFF;

	for (x_8 = 0; x_8 < 8; x_8++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		sadTree8x8[x_8][0] = 0xFFFF;
		sadTree8x8[x_8][1] = 0xFFFF;
		sadTree8x8[x_8][2] = 0xFFFF;
		sadTree8x8[x_8][3] = 0xFFFF;
		sadTree8x8[x_8][4] = 0xFFFF;
		sadTree8x8[x_8][5] = 0xFFFF;
		sadTree8x8[x_8][6] = 0xFFFF;
		sadTree8x8[x_8][7] = 0xFFFF;
	}

	for (x_8 = 0; x_8 < 8; x_8++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif	
		sadTree64x8[0][x_8] = 0xFFFFFFFF;

		sadTree8x64[x_8][0] = 0xFFFFFFFF;

		sadTree32x8[0][x_8] = 0xFFFF;
		sadTree32x8[1][x_8] = 0xFFFF;

		sadTree8x32[x_8][0] = 0xFFFF;
		sadTree8x32[x_8][1] = 0xFFFF;

		sadTree16x8[0][x_8] = 0xFFFF;
		sadTree16x8[1][x_8] = 0xFFFF;
		sadTree16x8[2][x_8] = 0xFFFF;
		sadTree16x8[3][x_8] = 0xFFFF;

		sadTree8x16[x_8][0] = 0xFFFF;
		sadTree8x16[x_8][1] = 0xFFFF;
		sadTree8x16[x_8][2] = 0xFFFF;
		sadTree8x16[x_8][3] = 0xFFFF;
	}

	for (x_16 = 0; x_16 < 4; x_16++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		sadTree16x16[x_16][0] = 0xFFFFFFFF;
		sadTree16x16[x_16][1] = 0xFFFFFFFF;
		sadTree16x16[x_16][2] = 0xFFFFFFFF;
		sadTree16x16[x_16][3] = 0xFFFFFFFF;
	}

	for (x_16 = 0; x_16 < 4; x_16++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif	
		sadTree32x16[0][x_16] = 0xFFFFFFFF;
		sadTree32x16[1][x_16] = 0xFFFFFFFF;

		sadTree16x32[x_16][0] = 0xFFFFFFFF;
		sadTree16x32[x_16][1] = 0xFFFFFFFF;

		sadTree64x16[0][x_16] = 0xFFFFFFFF;

		sadTree16x64[x_16][0] = 0xFFFFFFFF;
	}

	for (x_32 = 0; x_32 < 2; x_32++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		sadTree32x32[x_32][0] = 0xFFFFFFFF;
		sadTree32x32[x_32][1] = 0xFFFFFFFF;
	}

	for (x_32 = 0; x_32 < 2; x_32++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif	
		sadTree64x32[0][x_32] = 0xFFFFFFFF;

		sadTree32x64[x_32][0] = 0xFFFFFFFF;
	}

}

void calcLineSadMore_myAlgorithm_stage1(
	pel lineBufferRef_org[80][80], pel lineBufferOrg_org[64][64],
	pel sadScu0_org[8][8], pel sadScu1_org[8][8], pel sadScu2_org[8][8], pel sadScu3_org[8][8], pel sadScu4_org[8][8], pel sadScu5_org[8][8], pel sadScu6_org[8][8], pel sadScu7_org[8][8],
	pel sadScu8_org[8][8], pel sadScu9_org[8][8], pel sadScu10_org[8][8], pel sadScu11_org[8][8], pel sadScu12_org[8][8], pel sadScu13_org[8][8], pel sadScu14_org[8][8], pel sadScu15_org[8][8],

	U8 yScu, U8 baseSwH, U8 baseOrgH, U4 bit_depth
)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=lineBufferRef_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=lineBufferOrg_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=sadScu0_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_org complete dim=0


#endif


	U8 reltY;

	sadScu0_org[yScu][0] = SAD_OCT_INIT_ORG(0, 0);  		sadScu0_org[yScu][1] = SAD_OCT_INIT_ORG(8, 8);  		sadScu0_org[yScu][2] = SAD_OCT_INIT_ORG(16, 16);  		sadScu0_org[yScu][3] = SAD_OCT_INIT_ORG(24, 24);  		sadScu0_org[yScu][4] = SAD_OCT_INIT_ORG(32, 32);  		sadScu0_org[yScu][5] = SAD_OCT_INIT_ORG(40, 40);  		sadScu0_org[yScu][6] = SAD_OCT_INIT_ORG(48, 48);  		sadScu0_org[yScu][7] = SAD_OCT_INIT_ORG(56, 56);
	sadScu1_org[yScu][0] = SAD_OCT_INIT_ORG(0, 1);  		sadScu1_org[yScu][1] = SAD_OCT_INIT_ORG(8, 9);  		sadScu1_org[yScu][2] = SAD_OCT_INIT_ORG(16, 17);  		sadScu1_org[yScu][3] = SAD_OCT_INIT_ORG(24, 25);  		sadScu1_org[yScu][4] = SAD_OCT_INIT_ORG(32, 33);  		sadScu1_org[yScu][5] = SAD_OCT_INIT_ORG(40, 41);  		sadScu1_org[yScu][6] = SAD_OCT_INIT_ORG(48, 49);  		sadScu1_org[yScu][7] = SAD_OCT_INIT_ORG(56, 57);
	sadScu2_org[yScu][0] = SAD_OCT_INIT_ORG(0, 2);  		sadScu2_org[yScu][1] = SAD_OCT_INIT_ORG(8, 10);  		sadScu2_org[yScu][2] = SAD_OCT_INIT_ORG(16, 18);  		sadScu2_org[yScu][3] = SAD_OCT_INIT_ORG(24, 26);  		sadScu2_org[yScu][4] = SAD_OCT_INIT_ORG(32, 34);  		sadScu2_org[yScu][5] = SAD_OCT_INIT_ORG(40, 42);  		sadScu2_org[yScu][6] = SAD_OCT_INIT_ORG(48, 50);  		sadScu2_org[yScu][7] = SAD_OCT_INIT_ORG(56, 58);
	sadScu3_org[yScu][0] = SAD_OCT_INIT_ORG(0, 3);  		sadScu3_org[yScu][1] = SAD_OCT_INIT_ORG(8, 11);  		sadScu3_org[yScu][2] = SAD_OCT_INIT_ORG(16, 19);  		sadScu3_org[yScu][3] = SAD_OCT_INIT_ORG(24, 27);  		sadScu3_org[yScu][4] = SAD_OCT_INIT_ORG(32, 35);  		sadScu3_org[yScu][5] = SAD_OCT_INIT_ORG(40, 43);  		sadScu3_org[yScu][6] = SAD_OCT_INIT_ORG(48, 51);  		sadScu3_org[yScu][7] = SAD_OCT_INIT_ORG(56, 59);
	sadScu4_org[yScu][0] = SAD_OCT_INIT_ORG(0, 4);  		sadScu4_org[yScu][1] = SAD_OCT_INIT_ORG(8, 12);  		sadScu4_org[yScu][2] = SAD_OCT_INIT_ORG(16, 20);  		sadScu4_org[yScu][3] = SAD_OCT_INIT_ORG(24, 28);  		sadScu4_org[yScu][4] = SAD_OCT_INIT_ORG(32, 36);  		sadScu4_org[yScu][5] = SAD_OCT_INIT_ORG(40, 44);  		sadScu4_org[yScu][6] = SAD_OCT_INIT_ORG(48, 52);  		sadScu4_org[yScu][7] = SAD_OCT_INIT_ORG(56, 60);
	sadScu5_org[yScu][0] = SAD_OCT_INIT_ORG(0, 5);  		sadScu5_org[yScu][1] = SAD_OCT_INIT_ORG(8, 13);  		sadScu5_org[yScu][2] = SAD_OCT_INIT_ORG(16, 21);  		sadScu5_org[yScu][3] = SAD_OCT_INIT_ORG(24, 29);  		sadScu5_org[yScu][4] = SAD_OCT_INIT_ORG(32, 37);  		sadScu5_org[yScu][5] = SAD_OCT_INIT_ORG(40, 45);  		sadScu5_org[yScu][6] = SAD_OCT_INIT_ORG(48, 53);  		sadScu5_org[yScu][7] = SAD_OCT_INIT_ORG(56, 61);
	sadScu6_org[yScu][0] = SAD_OCT_INIT_ORG(0, 6);  		sadScu6_org[yScu][1] = SAD_OCT_INIT_ORG(8, 14);  		sadScu6_org[yScu][2] = SAD_OCT_INIT_ORG(16, 22);  		sadScu6_org[yScu][3] = SAD_OCT_INIT_ORG(24, 30);  		sadScu6_org[yScu][4] = SAD_OCT_INIT_ORG(32, 38);  		sadScu6_org[yScu][5] = SAD_OCT_INIT_ORG(40, 46);  		sadScu6_org[yScu][6] = SAD_OCT_INIT_ORG(48, 54);  		sadScu6_org[yScu][7] = SAD_OCT_INIT_ORG(56, 62);
	sadScu7_org[yScu][0] = SAD_OCT_INIT_ORG(0, 7);  		sadScu7_org[yScu][1] = SAD_OCT_INIT_ORG(8, 15);  		sadScu7_org[yScu][2] = SAD_OCT_INIT_ORG(16, 23);  		sadScu7_org[yScu][3] = SAD_OCT_INIT_ORG(24, 31);  		sadScu7_org[yScu][4] = SAD_OCT_INIT_ORG(32, 39);  		sadScu7_org[yScu][5] = SAD_OCT_INIT_ORG(40, 47);  		sadScu7_org[yScu][6] = SAD_OCT_INIT_ORG(48, 55);  		sadScu7_org[yScu][7] = SAD_OCT_INIT_ORG(56, 63);
	sadScu8_org[yScu][0] = SAD_OCT_INIT_ORG(0, 8);  		sadScu8_org[yScu][1] = SAD_OCT_INIT_ORG(8, 16);  		sadScu8_org[yScu][2] = SAD_OCT_INIT_ORG(16, 24);  		sadScu8_org[yScu][3] = SAD_OCT_INIT_ORG(24, 32);  		sadScu8_org[yScu][4] = SAD_OCT_INIT_ORG(32, 40);  		sadScu8_org[yScu][5] = SAD_OCT_INIT_ORG(40, 48);  		sadScu8_org[yScu][6] = SAD_OCT_INIT_ORG(48, 56);  		sadScu8_org[yScu][7] = SAD_OCT_INIT_ORG(56, 64);
	sadScu9_org[yScu][0] = SAD_OCT_INIT_ORG(0, 9);  		sadScu9_org[yScu][1] = SAD_OCT_INIT_ORG(8, 17);  		sadScu9_org[yScu][2] = SAD_OCT_INIT_ORG(16, 25);  		sadScu9_org[yScu][3] = SAD_OCT_INIT_ORG(24, 33);  		sadScu9_org[yScu][4] = SAD_OCT_INIT_ORG(32, 41);  		sadScu9_org[yScu][5] = SAD_OCT_INIT_ORG(40, 49);  		sadScu9_org[yScu][6] = SAD_OCT_INIT_ORG(48, 57);  		sadScu9_org[yScu][7] = SAD_OCT_INIT_ORG(56, 65);
	sadScu10_org[yScu][0] = SAD_OCT_INIT_ORG(0, 10);  		sadScu10_org[yScu][1] = SAD_OCT_INIT_ORG(8, 18);  		sadScu10_org[yScu][2] = SAD_OCT_INIT_ORG(16, 26);  		sadScu10_org[yScu][3] = SAD_OCT_INIT_ORG(24, 34);  		sadScu10_org[yScu][4] = SAD_OCT_INIT_ORG(32, 42);  		sadScu10_org[yScu][5] = SAD_OCT_INIT_ORG(40, 50);  		sadScu10_org[yScu][6] = SAD_OCT_INIT_ORG(48, 58);  		sadScu10_org[yScu][7] = SAD_OCT_INIT_ORG(56, 66);
	sadScu11_org[yScu][0] = SAD_OCT_INIT_ORG(0, 11);  		sadScu11_org[yScu][1] = SAD_OCT_INIT_ORG(8, 19);  		sadScu11_org[yScu][2] = SAD_OCT_INIT_ORG(16, 27);  		sadScu11_org[yScu][3] = SAD_OCT_INIT_ORG(24, 35);  		sadScu11_org[yScu][4] = SAD_OCT_INIT_ORG(32, 43);  		sadScu11_org[yScu][5] = SAD_OCT_INIT_ORG(40, 51);  		sadScu11_org[yScu][6] = SAD_OCT_INIT_ORG(48, 59);  		sadScu11_org[yScu][7] = SAD_OCT_INIT_ORG(56, 67);
	sadScu12_org[yScu][0] = SAD_OCT_INIT_ORG(0, 12);  		sadScu12_org[yScu][1] = SAD_OCT_INIT_ORG(8, 20);  		sadScu12_org[yScu][2] = SAD_OCT_INIT_ORG(16, 28);  		sadScu12_org[yScu][3] = SAD_OCT_INIT_ORG(24, 36);  		sadScu12_org[yScu][4] = SAD_OCT_INIT_ORG(32, 44);  		sadScu12_org[yScu][5] = SAD_OCT_INIT_ORG(40, 52);  		sadScu12_org[yScu][6] = SAD_OCT_INIT_ORG(48, 60);  		sadScu12_org[yScu][7] = SAD_OCT_INIT_ORG(56, 68);
	sadScu13_org[yScu][0] = SAD_OCT_INIT_ORG(0, 13);  		sadScu13_org[yScu][1] = SAD_OCT_INIT_ORG(8, 21);  		sadScu13_org[yScu][2] = SAD_OCT_INIT_ORG(16, 29);  		sadScu13_org[yScu][3] = SAD_OCT_INIT_ORG(24, 37);  		sadScu13_org[yScu][4] = SAD_OCT_INIT_ORG(32, 45);  		sadScu13_org[yScu][5] = SAD_OCT_INIT_ORG(40, 53);  		sadScu13_org[yScu][6] = SAD_OCT_INIT_ORG(48, 61);  		sadScu13_org[yScu][7] = SAD_OCT_INIT_ORG(56, 69);
	sadScu14_org[yScu][0] = SAD_OCT_INIT_ORG(0, 14);  		sadScu14_org[yScu][1] = SAD_OCT_INIT_ORG(8, 22);  		sadScu14_org[yScu][2] = SAD_OCT_INIT_ORG(16, 30);  		sadScu14_org[yScu][3] = SAD_OCT_INIT_ORG(24, 38);  		sadScu14_org[yScu][4] = SAD_OCT_INIT_ORG(32, 46);  		sadScu14_org[yScu][5] = SAD_OCT_INIT_ORG(40, 54);  		sadScu14_org[yScu][6] = SAD_OCT_INIT_ORG(48, 62);  		sadScu14_org[yScu][7] = SAD_OCT_INIT_ORG(56, 70);
	sadScu15_org[yScu][0] = SAD_OCT_INIT_ORG(0, 15);  		sadScu15_org[yScu][1] = SAD_OCT_INIT_ORG(8, 23);  		sadScu15_org[yScu][2] = SAD_OCT_INIT_ORG(16, 31);  		sadScu15_org[yScu][3] = SAD_OCT_INIT_ORG(24, 39);  		sadScu15_org[yScu][4] = SAD_OCT_INIT_ORG(32, 47);  		sadScu15_org[yScu][5] = SAD_OCT_INIT_ORG(40, 55);  		sadScu15_org[yScu][6] = SAD_OCT_INIT_ORG(48, 63);  		sadScu15_org[yScu][7] = SAD_OCT_INIT_ORG(56, 71);


	for (reltY = 1; reltY < 8; reltY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif

		sadScu0_org[yScu][0] += SAD_OCT_ACC_ORG(0, 0);  		sadScu0_org[yScu][1] += SAD_OCT_ACC_ORG(8, 8);  		sadScu0_org[yScu][2] += SAD_OCT_ACC_ORG(16, 16);  		sadScu0_org[yScu][3] += SAD_OCT_ACC_ORG(24, 24);  		sadScu0_org[yScu][4] += SAD_OCT_ACC_ORG(32, 32);  		sadScu0_org[yScu][5] += SAD_OCT_ACC_ORG(40, 40);  		sadScu0_org[yScu][6] += SAD_OCT_ACC_ORG(48, 48);  		sadScu0_org[yScu][7] += SAD_OCT_ACC_ORG(56, 56);
		sadScu1_org[yScu][0] += SAD_OCT_ACC_ORG(0, 1);  		sadScu1_org[yScu][1] += SAD_OCT_ACC_ORG(8, 9);  		sadScu1_org[yScu][2] += SAD_OCT_ACC_ORG(16, 17);  		sadScu1_org[yScu][3] += SAD_OCT_ACC_ORG(24, 25);  		sadScu1_org[yScu][4] += SAD_OCT_ACC_ORG(32, 33);  		sadScu1_org[yScu][5] += SAD_OCT_ACC_ORG(40, 41);  		sadScu1_org[yScu][6] += SAD_OCT_ACC_ORG(48, 49);  		sadScu1_org[yScu][7] += SAD_OCT_ACC_ORG(56, 57);
		sadScu2_org[yScu][0] += SAD_OCT_ACC_ORG(0, 2);  		sadScu2_org[yScu][1] += SAD_OCT_ACC_ORG(8, 10);  		sadScu2_org[yScu][2] += SAD_OCT_ACC_ORG(16, 18);  		sadScu2_org[yScu][3] += SAD_OCT_ACC_ORG(24, 26);  		sadScu2_org[yScu][4] += SAD_OCT_ACC_ORG(32, 34);  		sadScu2_org[yScu][5] += SAD_OCT_ACC_ORG(40, 42);  		sadScu2_org[yScu][6] += SAD_OCT_ACC_ORG(48, 50);  		sadScu2_org[yScu][7] += SAD_OCT_ACC_ORG(56, 58);
		sadScu3_org[yScu][0] += SAD_OCT_ACC_ORG(0, 3);  		sadScu3_org[yScu][1] += SAD_OCT_ACC_ORG(8, 11);  		sadScu3_org[yScu][2] += SAD_OCT_ACC_ORG(16, 19);  		sadScu3_org[yScu][3] += SAD_OCT_ACC_ORG(24, 27);  		sadScu3_org[yScu][4] += SAD_OCT_ACC_ORG(32, 35);  		sadScu3_org[yScu][5] += SAD_OCT_ACC_ORG(40, 43);  		sadScu3_org[yScu][6] += SAD_OCT_ACC_ORG(48, 51);  		sadScu3_org[yScu][7] += SAD_OCT_ACC_ORG(56, 59);
		sadScu4_org[yScu][0] += SAD_OCT_ACC_ORG(0, 4);  		sadScu4_org[yScu][1] += SAD_OCT_ACC_ORG(8, 12);  		sadScu4_org[yScu][2] += SAD_OCT_ACC_ORG(16, 20);  		sadScu4_org[yScu][3] += SAD_OCT_ACC_ORG(24, 28);  		sadScu4_org[yScu][4] += SAD_OCT_ACC_ORG(32, 36);  		sadScu4_org[yScu][5] += SAD_OCT_ACC_ORG(40, 44);  		sadScu4_org[yScu][6] += SAD_OCT_ACC_ORG(48, 52);  		sadScu4_org[yScu][7] += SAD_OCT_ACC_ORG(56, 60);
		sadScu5_org[yScu][0] += SAD_OCT_ACC_ORG(0, 5);  		sadScu5_org[yScu][1] += SAD_OCT_ACC_ORG(8, 13);  		sadScu5_org[yScu][2] += SAD_OCT_ACC_ORG(16, 21);  		sadScu5_org[yScu][3] += SAD_OCT_ACC_ORG(24, 29);  		sadScu5_org[yScu][4] += SAD_OCT_ACC_ORG(32, 37);  		sadScu5_org[yScu][5] += SAD_OCT_ACC_ORG(40, 45);  		sadScu5_org[yScu][6] += SAD_OCT_ACC_ORG(48, 53);  		sadScu5_org[yScu][7] += SAD_OCT_ACC_ORG(56, 61);
		sadScu6_org[yScu][0] += SAD_OCT_ACC_ORG(0, 6);  		sadScu6_org[yScu][1] += SAD_OCT_ACC_ORG(8, 14);  		sadScu6_org[yScu][2] += SAD_OCT_ACC_ORG(16, 22);  		sadScu6_org[yScu][3] += SAD_OCT_ACC_ORG(24, 30);  		sadScu6_org[yScu][4] += SAD_OCT_ACC_ORG(32, 38);  		sadScu6_org[yScu][5] += SAD_OCT_ACC_ORG(40, 46);  		sadScu6_org[yScu][6] += SAD_OCT_ACC_ORG(48, 54);  		sadScu6_org[yScu][7] += SAD_OCT_ACC_ORG(56, 62);
		sadScu7_org[yScu][0] += SAD_OCT_ACC_ORG(0, 7);  		sadScu7_org[yScu][1] += SAD_OCT_ACC_ORG(8, 15);  		sadScu7_org[yScu][2] += SAD_OCT_ACC_ORG(16, 23);  		sadScu7_org[yScu][3] += SAD_OCT_ACC_ORG(24, 31);  		sadScu7_org[yScu][4] += SAD_OCT_ACC_ORG(32, 39);  		sadScu7_org[yScu][5] += SAD_OCT_ACC_ORG(40, 47);  		sadScu7_org[yScu][6] += SAD_OCT_ACC_ORG(48, 55);  		sadScu7_org[yScu][7] += SAD_OCT_ACC_ORG(56, 63);
		sadScu8_org[yScu][0] += SAD_OCT_ACC_ORG(0, 8);  		sadScu8_org[yScu][1] += SAD_OCT_ACC_ORG(8, 16);  		sadScu8_org[yScu][2] += SAD_OCT_ACC_ORG(16, 24);  		sadScu8_org[yScu][3] += SAD_OCT_ACC_ORG(24, 32);  		sadScu8_org[yScu][4] += SAD_OCT_ACC_ORG(32, 40);  		sadScu8_org[yScu][5] += SAD_OCT_ACC_ORG(40, 48);  		sadScu8_org[yScu][6] += SAD_OCT_ACC_ORG(48, 56);  		sadScu8_org[yScu][7] += SAD_OCT_ACC_ORG(56, 64);
		sadScu9_org[yScu][0] += SAD_OCT_ACC_ORG(0, 9);  		sadScu9_org[yScu][1] += SAD_OCT_ACC_ORG(8, 17);  		sadScu9_org[yScu][2] += SAD_OCT_ACC_ORG(16, 25);  		sadScu9_org[yScu][3] += SAD_OCT_ACC_ORG(24, 33);  		sadScu9_org[yScu][4] += SAD_OCT_ACC_ORG(32, 41);  		sadScu9_org[yScu][5] += SAD_OCT_ACC_ORG(40, 49);  		sadScu9_org[yScu][6] += SAD_OCT_ACC_ORG(48, 57);  		sadScu9_org[yScu][7] += SAD_OCT_ACC_ORG(56, 65);
		sadScu10_org[yScu][0] += SAD_OCT_ACC_ORG(0, 10);  		sadScu10_org[yScu][1] += SAD_OCT_ACC_ORG(8, 18);  		sadScu10_org[yScu][2] += SAD_OCT_ACC_ORG(16, 26);  	sadScu10_org[yScu][3] += SAD_OCT_ACC_ORG(24, 34);  	sadScu10_org[yScu][4] += SAD_OCT_ACC_ORG(32, 42);  	sadScu10_org[yScu][5] += SAD_OCT_ACC_ORG(40, 50);  	sadScu10_org[yScu][6] += SAD_OCT_ACC_ORG(48, 58);  		sadScu10_org[yScu][7] += SAD_OCT_ACC_ORG(56, 66);
		sadScu11_org[yScu][0] += SAD_OCT_ACC_ORG(0, 11);  		sadScu11_org[yScu][1] += SAD_OCT_ACC_ORG(8, 19);  		sadScu11_org[yScu][2] += SAD_OCT_ACC_ORG(16, 27);  	sadScu11_org[yScu][3] += SAD_OCT_ACC_ORG(24, 35);  	sadScu11_org[yScu][4] += SAD_OCT_ACC_ORG(32, 43);  	sadScu11_org[yScu][5] += SAD_OCT_ACC_ORG(40, 51);  	sadScu11_org[yScu][6] += SAD_OCT_ACC_ORG(48, 59);  		sadScu11_org[yScu][7] += SAD_OCT_ACC_ORG(56, 67);
		sadScu12_org[yScu][0] += SAD_OCT_ACC_ORG(0, 12);  		sadScu12_org[yScu][1] += SAD_OCT_ACC_ORG(8, 20);  		sadScu12_org[yScu][2] += SAD_OCT_ACC_ORG(16, 28);  	sadScu12_org[yScu][3] += SAD_OCT_ACC_ORG(24, 36);  	sadScu12_org[yScu][4] += SAD_OCT_ACC_ORG(32, 44);  	sadScu12_org[yScu][5] += SAD_OCT_ACC_ORG(40, 52);  	sadScu12_org[yScu][6] += SAD_OCT_ACC_ORG(48, 60);  		sadScu12_org[yScu][7] += SAD_OCT_ACC_ORG(56, 68);
		sadScu13_org[yScu][0] += SAD_OCT_ACC_ORG(0, 13);  		sadScu13_org[yScu][1] += SAD_OCT_ACC_ORG(8, 21);  		sadScu13_org[yScu][2] += SAD_OCT_ACC_ORG(16, 29);  	sadScu13_org[yScu][3] += SAD_OCT_ACC_ORG(24, 37);  	sadScu13_org[yScu][4] += SAD_OCT_ACC_ORG(32, 45);  	sadScu13_org[yScu][5] += SAD_OCT_ACC_ORG(40, 53);  	sadScu13_org[yScu][6] += SAD_OCT_ACC_ORG(48, 61);  		sadScu13_org[yScu][7] += SAD_OCT_ACC_ORG(56, 69);
		sadScu14_org[yScu][0] += SAD_OCT_ACC_ORG(0, 14);  		sadScu14_org[yScu][1] += SAD_OCT_ACC_ORG(8, 22);  		sadScu14_org[yScu][2] += SAD_OCT_ACC_ORG(16, 30);  	sadScu14_org[yScu][3] += SAD_OCT_ACC_ORG(24, 38);  	sadScu14_org[yScu][4] += SAD_OCT_ACC_ORG(32, 46);  	sadScu14_org[yScu][5] += SAD_OCT_ACC_ORG(40, 54);  	sadScu14_org[yScu][6] += SAD_OCT_ACC_ORG(48, 62);  		sadScu14_org[yScu][7] += SAD_OCT_ACC_ORG(56, 70);
		sadScu15_org[yScu][0] += SAD_OCT_ACC_ORG(0, 15);  		sadScu15_org[yScu][1] += SAD_OCT_ACC_ORG(8, 23);  		sadScu15_org[yScu][2] += SAD_OCT_ACC_ORG(16, 31);  	sadScu15_org[yScu][3] += SAD_OCT_ACC_ORG(24, 39);  	sadScu15_org[yScu][4] += SAD_OCT_ACC_ORG(32, 47);  	sadScu15_org[yScu][5] += SAD_OCT_ACC_ORG(40, 55);  	sadScu15_org[yScu][6] += SAD_OCT_ACC_ORG(48, 63);  		sadScu15_org[yScu][7] += SAD_OCT_ACC_ORG(56, 71);


	}


}


void calcSadScuLv0TestCaseMore_myAlgorithm_stage1(
	pel sadScu0_org[8][8],
	pel sadScu1_org[8][8],
	pel sadScu2_org[8][8],
	pel sadScu3_org[8][8],
	pel sadScu4_org[8][8],
	pel sadScu5_org[8][8],
	pel sadScu6_org[8][8],
	pel sadScu7_org[8][8],
	pel sadScu8_org[8][8],
	pel sadScu9_org[8][8],
	pel sadScu10_org[8][8],
	pel sadScu11_org[8][8],
	pel sadScu12_org[8][8],
	pel sadScu13_org[8][8],
	pel sadScu14_org[8][8],
	pel sadScu15_org[8][8],

	pel swSubLv0_org[MAX_CU_H + TWO_STAGE_1_SR_H][MAX_CU_H + TWO_STAGE_1_SR_W],
	pel org_org[64][64],

	U7 baseH,
	U4 bit_depth
)
{

#pragma HLS inline off

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON

#if IME_DEBUG_calcSadScuLv0TestCaseMore
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp0 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp1 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp2 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp3 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp4 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp5 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp6 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp7 complete dim=1
#else
#pragma HLS ARRAY_PARTITION variable=swSubLv0_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=org_org complete dim=2

	//#pragma HLS ARRAY_PARTITION variable=swSubLv0 complete dim=1
	//#pragma HLS ARRAY_PARTITION variable=org complete dim=1
#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore

#pragma HLS ARRAY_PARTITION variable=sadScu0_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_org complete dim=0


#endif
#endif	// #if !IME_PRAGMA_ON_OP

	U8 yScu;

	for (yScu = 0; yScu < 8; yScu++)
	{
		calcLineSadMore_myAlgorithm_stage1(
			swSubLv0_org, org_org,
			sadScu0_org, sadScu1_org, sadScu2_org, sadScu3_org, sadScu4_org, sadScu5_org, sadScu6_org, sadScu7_org,
			sadScu8_org, sadScu9_org, sadScu10_org, sadScu11_org, sadScu12_org, sadScu13_org, sadScu14_org, sadScu15_org,
 
			yScu, (yScu << 3) + baseH, yScu << 3, bit_depth);
	}
}

void compareBestInfo8x8(
	S14 mvx, S14 mvy, U32 lambda_mv, U2 num_refp, S2 refi,
	U16 sadTree8x8[8][8], 
	//U16 sadTree16x8[4][8], U16 sadTree8x16[8][4], U16 sadTree32x8[2][8], U16 sadTree8x32[8][2], U32 sadTree64x8[1][8], U32 sadTree8x64[8][1],

	pel sadTree8x8Cur_org[8][8], 
	//U16 sadTree16x8Cur_org[4][8], U16 sadTree8x16Cur_org[8][4], U16 sadTree32x8Cur_org[2][8], U16 sadTree8x32Cur_org[8][2], U32 sadTree64x8Cur_org[1][8], U32 sadTree8x64Cur_org[8][1],

	//pel sadTree8x8Cur[8][8], U16 sadTree16x8Cur[4][8], U16 sadTree8x16Cur[8][4], U16 sadTree32x8Cur[2][8], U16 sadTree8x32Cur[8][2], U32 sadTree64x8Cur[1][8], U32 sadTree8x64Cur[8][1],
	S14 sadTree8x8Mv[8][8][2], 
	//S14 sadTree16x8Mv[4][8][2], S14 sadTree8x16Mv[8][4][2], S14 sadTree32x8Mv[2][8][2], S14 sadTree8x32Mv[8][2][2], S14 sadTree64x8Mv[1][8][2], S14 sadTree8x64Mv[8][1][2],

	S14 sadTree8x8PMv[8][8][2]
	//, 
	//S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2]
)
{
#if IME_PRAGMA_ON

#pragma HLS ARRAY_PARTITION variable=sadTree8x8Cur_org complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x8Cur_org complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x16Cur_org complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x8Cur_org complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x32Cur_org complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x8Cur_org complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x64Cur_org complete dim=0
	//================================================================================

#pragma HLS ARRAY_PARTITION variable=sadTree8x8 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x8 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x16 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x8 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x32 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x8 complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x64 complete dim=0


#pragma HLS ARRAY_PARTITION variable=sadTree8x8Mv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x8Mv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x16Mv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x8Mv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x32Mv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x8Mv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x64Mv complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree8x8PMv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x8PMv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x16PMv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x8PMv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x32PMv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x8PMv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x64PMv complete dim=0
#endif

	U4 x_8;

	for (x_8 = 0; x_8 < 8; x_8++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif



		/*8x8*/
		sadTree8x8Cur_org[0][x_8] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][0][0] - mvx, sadTree8x8PMv[x_8][0][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[0][x_8] < sadTree8x8[x_8][0])
		{
			sadTree8x8[x_8][0] = sadTree8x8Cur_org[0][x_8];
			sadTree8x8Mv[x_8][0][0] = mvx;
			sadTree8x8Mv[x_8][0][1] = mvy;
		}
		sadTree8x8Cur_org[1][x_8] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][1][0] - mvx, sadTree8x8PMv[x_8][1][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[1][x_8] < sadTree8x8[x_8][1])
		{
			sadTree8x8[x_8][1] = sadTree8x8Cur_org[1][x_8];
			sadTree8x8Mv[x_8][1][0] = mvx;
			sadTree8x8Mv[x_8][1][1] = mvy;
		}
		sadTree8x8Cur_org[2][x_8] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][2][0] - mvx, sadTree8x8PMv[x_8][2][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[2][x_8] < sadTree8x8[x_8][2])
		{
			sadTree8x8[x_8][2] = sadTree8x8Cur_org[2][x_8];
			sadTree8x8Mv[x_8][2][0] = mvx;
			sadTree8x8Mv[x_8][2][1] = mvy;
		}
		sadTree8x8Cur_org[3][x_8] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][3][0] - mvx, sadTree8x8PMv[x_8][3][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[3][x_8] < sadTree8x8[x_8][3])
		{
			sadTree8x8[x_8][3] = sadTree8x8Cur_org[3][x_8];
			sadTree8x8Mv[x_8][3][0] = mvx;
			sadTree8x8Mv[x_8][3][1] = mvy;
		}
		sadTree8x8Cur_org[4][x_8] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][4][0] - mvx, sadTree8x8PMv[x_8][4][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[4][x_8] < sadTree8x8[x_8][4])
		{
			sadTree8x8[x_8][4] = sadTree8x8Cur_org[4][x_8];
			sadTree8x8Mv[x_8][4][0] = mvx;
			sadTree8x8Mv[x_8][4][1] = mvy;
		}
		sadTree8x8Cur_org[5][x_8] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][5][0] - mvx, sadTree8x8PMv[x_8][5][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[5][x_8] < sadTree8x8[x_8][5])
		{
			sadTree8x8[x_8][5] = sadTree8x8Cur_org[5][x_8];
			sadTree8x8Mv[x_8][5][0] = mvx;
			sadTree8x8Mv[x_8][5][1] = mvy;
		}
		sadTree8x8Cur_org[6][x_8] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][6][0] - mvx, sadTree8x8PMv[x_8][6][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[6][x_8] < sadTree8x8[x_8][6])
		{
			sadTree8x8[x_8][6] = sadTree8x8Cur_org[6][x_8];
			sadTree8x8Mv[x_8][6][0] = mvx;
			sadTree8x8Mv[x_8][6][1] = mvy;
		}
		sadTree8x8Cur_org[7][x_8] += getMvRcost(lambda_mv, sadTree8x8PMv[x_8][7][0] - mvx, sadTree8x8PMv[x_8][7][1] - mvy, num_refp, refi);
		if (sadTree8x8Cur_org[7][x_8] < sadTree8x8[x_8][7])
		{
			sadTree8x8[x_8][7] = sadTree8x8Cur_org[7][x_8];
			sadTree8x8Mv[x_8][7][0] = mvx;
			sadTree8x8Mv[x_8][7][1] = mvy;
		}
		///*16x8*/
		//sadTree8x16Cur_org[x_8][0] += getMvRcost(lambda_mv, sadTree16x8PMv[0][x_8][0] - mvx, sadTree16x8PMv[0][x_8][1] - mvy, num_refp, refi);
		//if (sadTree8x16Cur_org[x_8][0] < sadTree16x8[0][x_8])
		//{
		//	sadTree16x8[0][x_8] = sadTree8x16Cur_org[x_8][0];
		//	sadTree16x8Mv[0][x_8][0] = mvx;
		//	sadTree16x8Mv[0][x_8][1] = mvy;
		//}
		//sadTree8x16Cur_org[x_8][1] += getMvRcost(lambda_mv, sadTree16x8PMv[1][x_8][0] - mvx, sadTree16x8PMv[1][x_8][1] - mvy, num_refp, refi);
		//if (sadTree8x16Cur_org[x_8][1] < sadTree16x8[1][x_8])
		//{
		//	sadTree16x8[1][x_8] = sadTree8x16Cur_org[x_8][1];
		//	sadTree16x8Mv[1][x_8][0] = mvx;
		//	sadTree16x8Mv[1][x_8][1] = mvy;
		//}
		//sadTree8x16Cur_org[x_8][2] += getMvRcost(lambda_mv, sadTree16x8PMv[2][x_8][0] - mvx, sadTree16x8PMv[2][x_8][1] - mvy, num_refp, refi);
		//if (sadTree8x16Cur_org[x_8][2] < sadTree16x8[2][x_8])
		//{
		//	sadTree16x8[2][x_8] = sadTree8x16Cur_org[x_8][2];
		//	sadTree16x8Mv[2][x_8][0] = mvx;
		//	sadTree16x8Mv[2][x_8][1] = mvy;
		//}
		//sadTree8x16Cur_org[x_8][3] += getMvRcost(lambda_mv, sadTree16x8PMv[3][x_8][0] - mvx, sadTree16x8PMv[3][x_8][1] - mvy, num_refp, refi);
		//if (sadTree8x16Cur_org[x_8][3] < sadTree16x8[3][x_8])
		//{
		//	sadTree16x8[3][x_8] = sadTree8x16Cur_org[x_8][3];
		//	sadTree16x8Mv[3][x_8][0] = mvx;
		//	sadTree16x8Mv[3][x_8][1] = mvy;
		//}

		///*8x16*/
		//sadTree16x8Cur_org[0][x_8] += getMvRcost(lambda_mv, sadTree8x16PMv[x_8][0][0] - mvx, sadTree8x16PMv[x_8][0][1] - mvy, num_refp, refi);
		//if (sadTree16x8Cur_org[0][x_8] < sadTree8x16[x_8][0])
		//{
		//	sadTree8x16[x_8][0] = sadTree16x8Cur_org[0][x_8];
		//	sadTree8x16Mv[x_8][0][0] = mvx;
		//	sadTree8x16Mv[x_8][0][1] = mvy;
		//}
		//sadTree16x8Cur_org[1][x_8] += getMvRcost(lambda_mv, sadTree8x16PMv[x_8][1][0] - mvx, sadTree8x16PMv[x_8][1][1] - mvy, num_refp, refi);
		//if (sadTree16x8Cur_org[1][x_8] < sadTree8x16[x_8][1])
		//{
		//	sadTree8x16[x_8][1] = sadTree16x8Cur_org[1][x_8];
		//	sadTree8x16Mv[x_8][1][0] = mvx;
		//	sadTree8x16Mv[x_8][1][1] = mvy;
		//}
		//sadTree16x8Cur_org[2][x_8] += getMvRcost(lambda_mv, sadTree8x16PMv[x_8][2][0] - mvx, sadTree8x16PMv[x_8][2][1] - mvy, num_refp, refi);
		//if (sadTree16x8Cur_org[2][x_8] < sadTree8x16[x_8][2])
		//{
		//	sadTree8x16[x_8][2] = sadTree16x8Cur_org[2][x_8];
		//	sadTree8x16Mv[x_8][2][0] = mvx;
		//	sadTree8x16Mv[x_8][2][1] = mvy;
		//}
		//sadTree16x8Cur_org[3][x_8] += getMvRcost(lambda_mv, sadTree8x16PMv[x_8][3][0] - mvx, sadTree8x16PMv[x_8][3][1] - mvy, num_refp, refi);
		//if (sadTree16x8Cur_org[3][x_8] < sadTree8x16[x_8][3])
		//{
		//	sadTree8x16[x_8][3] = sadTree16x8Cur_org[3][x_8];
		//	sadTree8x16Mv[x_8][3][0] = mvx;
		//	sadTree8x16Mv[x_8][3][1] = mvy;
		//}

		///*32x8*/
		//sadTree8x32Cur_org[x_8][0] += getMvRcost(lambda_mv, sadTree32x8PMv[0][x_8][0] - mvx, sadTree32x8PMv[0][x_8][1] - mvy, num_refp, refi);
		//if (sadTree8x32Cur_org[x_8][0] < sadTree32x8[0][x_8])
		//{
		//	sadTree32x8[0][x_8] = sadTree8x32Cur_org[x_8][0];
		//	sadTree32x8Mv[0][x_8][0] = mvx;
		//	sadTree32x8Mv[0][x_8][1] = mvy;
		//}
		//sadTree8x32Cur_org[x_8][1] += getMvRcost(lambda_mv, sadTree32x8PMv[1][x_8][0] - mvx, sadTree32x8PMv[1][x_8][1] - mvy, num_refp, refi);
		//if (sadTree8x32Cur_org[x_8][1] < sadTree32x8[1][x_8])
		//{
		//	sadTree32x8[1][x_8] = sadTree8x32Cur_org[x_8][1];
		//	sadTree32x8Mv[1][x_8][0] = mvx;
		//	sadTree32x8Mv[1][x_8][1] = mvy;
		//}

		///*8x32*/
		//sadTree32x8Cur_org[0][x_8] += getMvRcost(lambda_mv, sadTree8x32PMv[x_8][0][0] - mvx, sadTree8x32PMv[x_8][0][1] - mvy, num_refp, refi);
		//if (sadTree32x8Cur_org[0][x_8] < sadTree8x32[x_8][0])
		//{
		//	sadTree8x32[x_8][0] = sadTree32x8Cur_org[0][x_8];
		//	sadTree8x32Mv[x_8][0][0] = mvx;
		//	sadTree8x32Mv[x_8][0][1] = mvy;
		//}
		//sadTree32x8Cur_org[1][x_8] += getMvRcost(lambda_mv, sadTree8x32PMv[x_8][1][0] - mvx, sadTree8x32PMv[x_8][1][1] - mvy, num_refp, refi);
		//if (sadTree32x8Cur_org[1][x_8] < sadTree8x32[x_8][1])
		//{
		//	sadTree8x32[x_8][1] = sadTree32x8Cur_org[1][x_8];
		//	sadTree8x32Mv[x_8][1][0] = mvx;
		//	sadTree8x32Mv[x_8][1][1] = mvy;
		//}

		///*8x64*/
		//sadTree64x8Cur_org[0][x_8] += getMvRcost(lambda_mv, sadTree8x64PMv[x_8][0][0] - mvx, sadTree8x64PMv[x_8][0][1] - mvy, num_refp, refi);
		//if (sadTree64x8Cur_org[0][x_8] < sadTree8x64[x_8][0])
		//{
		//	sadTree8x64[x_8][0] = sadTree64x8Cur_org[0][x_8];
		//	sadTree8x64Mv[x_8][0][0] = mvx;
		//	sadTree8x64Mv[x_8][0][1] = mvy;
		//}

		///*64x8*/
		//sadTree8x64Cur_org[x_8][0] += getMvRcost(lambda_mv, sadTree64x8PMv[0][x_8][0] - mvx, sadTree64x8PMv[0][x_8][1] - mvy, num_refp, refi);
		//if (sadTree8x64Cur_org[x_8][0] < sadTree64x8[0][x_8])
		//{
		//	sadTree64x8[0][x_8] = sadTree8x64Cur_org[x_8][0];
		//	sadTree64x8Mv[0][x_8][0] = mvx;
		//	sadTree64x8Mv[0][x_8][1] = mvy;
		//}



	}
}

void derive_PMV_stage2(
	S14 sadTree8x8Mv[8][8][2],

	S14 sadTree64x64PMv[1][1][2],
	S14 sadTree32x32PMv[2][2][2], S14 sadTree64x32PMv[1][2][2], S14 sadTree32x64PMv[2][1][2],
	S14 sadTree16x16PMv[4][4][2], S14 sadTree32x16PMv[2][4][2], S14 sadTree16x32PMv[4][2][2], S14 sadTree64x16PMv[1][4][2], S14 sadTree16x64PMv[4][1][2],
	S14 sadTree8x8PMv[8][8][2]
	, S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2]
)
{
#if IME_PRAGMA_ON

#pragma HLS ARRAY_PARTITION variable=sadTree8x8Mv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x8Mv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x16Mv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x8Mv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x32Mv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x8Mv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x64Mv complete dim=0

#pragma HLS ARRAY_PARTITION variable=sadTree8x8PMv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree16x8PMv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x16PMv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree32x8PMv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x32PMv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree64x8PMv complete dim=0
//#pragma HLS ARRAY_PARTITION variable=sadTree8x64PMv complete dim=0
#endif

#if 0
	/* 8x8 */
	for (U4 i = 0; i < 8; i++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (int j = 0; j < 8; j++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				sadTree8x8PMv[i][j][0] = sadTree8x8Mv[i][j][0];
				sadTree8x8PMv[i][j][1] = sadTree8x8Mv[i][j][1];
			
		}
	}
#endif

	/* 64x64 */
	sadTree64x64PMv[0][0][0] = sadTree8x8Mv[0][0][0];
	sadTree64x64PMv[0][0][1] = sadTree8x8Mv[0][0][1];

	/* 32x32 */
	sadTree32x32PMv[0][0][0] = sadTree8x8Mv[0][0][0];
	sadTree32x32PMv[0][0][1] = sadTree8x8Mv[0][0][1];
	sadTree32x32PMv[1][0][0] = sadTree8x8Mv[4][0][0];
	sadTree32x32PMv[1][0][1] = sadTree8x8Mv[4][0][1];
	sadTree32x32PMv[0][1][0] = sadTree8x8Mv[0][4][0];
	sadTree32x32PMv[0][1][1] = sadTree8x8Mv[0][4][1];
	sadTree32x32PMv[1][1][0] = sadTree8x8Mv[4][4][0];
	sadTree32x32PMv[1][1][1] = sadTree8x8Mv[4][4][1];

	/* 64x32 */
	sadTree64x32PMv[0][0][0] = sadTree8x8Mv[0][0][0];
	sadTree64x32PMv[0][0][1] = sadTree8x8Mv[0][0][1];
	sadTree64x32PMv[0][1][0] = sadTree8x8Mv[0][4][0];
	sadTree64x32PMv[0][1][1] = sadTree8x8Mv[0][4][1];

	/* 32x64 */
	sadTree32x64PMv[0][0][0] = sadTree8x8Mv[0][0][0];
	sadTree32x64PMv[0][0][1] = sadTree8x8Mv[0][0][1];
	sadTree32x64PMv[1][0][0] = sadTree8x8Mv[4][0][0];
	sadTree32x64PMv[1][0][1] = sadTree8x8Mv[4][0][1];

	/* 16x16 */
	sadTree16x16PMv[0][0][0] = sadTree8x8Mv[0][0][0];
	sadTree16x16PMv[0][0][1] = sadTree8x8Mv[0][0][1];
	sadTree16x16PMv[1][0][0] = sadTree8x8Mv[2][0][0];
	sadTree16x16PMv[1][0][1] = sadTree8x8Mv[2][0][1];
	sadTree16x16PMv[2][0][0] = sadTree8x8Mv[4][0][0];
	sadTree16x16PMv[2][0][1] = sadTree8x8Mv[4][0][1];
	sadTree16x16PMv[3][0][0] = sadTree8x8Mv[6][0][0];
	sadTree16x16PMv[3][0][1] = sadTree8x8Mv[6][0][1];

	sadTree16x16PMv[0][1][0] = sadTree8x8Mv[0][2][0];
	sadTree16x16PMv[0][1][1] = sadTree8x8Mv[0][2][1];
	sadTree16x16PMv[1][1][0] = sadTree8x8Mv[2][2][0];
	sadTree16x16PMv[1][1][1] = sadTree8x8Mv[2][2][1];
	sadTree16x16PMv[2][1][0] = sadTree8x8Mv[4][2][0];
	sadTree16x16PMv[2][1][1] = sadTree8x8Mv[4][2][1];
	sadTree16x16PMv[3][1][0] = sadTree8x8Mv[6][2][0];
	sadTree16x16PMv[3][1][1] = sadTree8x8Mv[6][2][1];

	sadTree16x16PMv[0][2][0] = sadTree8x8Mv[0][4][0];
	sadTree16x16PMv[0][2][1] = sadTree8x8Mv[0][4][1];
	sadTree16x16PMv[1][2][0] = sadTree8x8Mv[2][4][0];
	sadTree16x16PMv[1][2][1] = sadTree8x8Mv[2][4][1];
	sadTree16x16PMv[2][2][0] = sadTree8x8Mv[4][4][0];
	sadTree16x16PMv[2][2][1] = sadTree8x8Mv[4][4][1];
	sadTree16x16PMv[3][2][0] = sadTree8x8Mv[6][4][0];
	sadTree16x16PMv[3][2][1] = sadTree8x8Mv[6][4][1];

	sadTree16x16PMv[0][3][0] = sadTree8x8Mv[0][6][0];
	sadTree16x16PMv[0][3][1] = sadTree8x8Mv[0][6][1];
	sadTree16x16PMv[1][3][0] = sadTree8x8Mv[2][6][0];
	sadTree16x16PMv[1][3][1] = sadTree8x8Mv[2][6][1];
	sadTree16x16PMv[2][3][0] = sadTree8x8Mv[4][6][0];
	sadTree16x16PMv[2][3][1] = sadTree8x8Mv[4][6][1];
	sadTree16x16PMv[3][3][0] = sadTree8x8Mv[6][6][0];
	sadTree16x16PMv[3][3][1] = sadTree8x8Mv[6][6][1];

	/* 32x16 */
	sadTree32x16PMv[0][0][0] = sadTree8x8Mv[0][0][0];
	sadTree32x16PMv[0][0][1] = sadTree8x8Mv[0][0][1];
	sadTree32x16PMv[1][0][0] = sadTree8x8Mv[4][0][0];
	sadTree32x16PMv[1][0][1] = sadTree8x8Mv[4][0][1];

	sadTree32x16PMv[0][1][0] = sadTree8x8Mv[0][2][0];
	sadTree32x16PMv[0][1][1] = sadTree8x8Mv[0][2][1];
	sadTree32x16PMv[1][1][0] = sadTree8x8Mv[4][2][0];
	sadTree32x16PMv[1][1][1] = sadTree8x8Mv[4][2][1];

	sadTree32x16PMv[0][2][0] = sadTree8x8Mv[0][4][0];
	sadTree32x16PMv[0][2][1] = sadTree8x8Mv[0][4][1];
	sadTree32x16PMv[1][2][0] = sadTree8x8Mv[4][4][0];
	sadTree32x16PMv[1][2][1] = sadTree8x8Mv[4][4][1];

	sadTree32x16PMv[0][3][0] = sadTree8x8Mv[0][6][0];
	sadTree32x16PMv[0][3][1] = sadTree8x8Mv[0][6][1];
	sadTree32x16PMv[1][3][0] = sadTree8x8Mv[4][6][0];
	sadTree32x16PMv[1][3][1] = sadTree8x8Mv[4][6][1];

	/* 16x32 */
	sadTree16x32PMv[0][0][0] = sadTree8x8Mv[0][0][0];
	sadTree16x32PMv[0][0][1] = sadTree8x8Mv[0][0][1];

	sadTree16x32PMv[1][0][0] = sadTree8x8Mv[2][0][0];
	sadTree16x32PMv[1][0][1] = sadTree8x8Mv[2][0][1];

	sadTree16x32PMv[2][0][0] = sadTree8x8Mv[4][0][0];
	sadTree16x32PMv[2][0][1] = sadTree8x8Mv[4][0][1];

	sadTree16x32PMv[3][0][0] = sadTree8x8Mv[6][0][0];
	sadTree16x32PMv[3][0][1] = sadTree8x8Mv[6][0][1];

	sadTree16x32PMv[0][1][0] = sadTree8x8Mv[0][2][0];
	sadTree16x32PMv[0][1][1] = sadTree8x8Mv[0][2][1];

	sadTree16x32PMv[1][1][0] = sadTree8x8Mv[2][4][0];
	sadTree16x32PMv[1][1][1] = sadTree8x8Mv[2][4][1];

	sadTree16x32PMv[2][1][0] = sadTree8x8Mv[4][4][0];
	sadTree16x32PMv[2][1][1] = sadTree8x8Mv[4][4][1];

	sadTree16x32PMv[3][1][0] = sadTree8x8Mv[6][4][0];
	sadTree16x32PMv[3][1][1] = sadTree8x8Mv[6][4][1];

	/* 64x16 */
	sadTree64x16PMv[0][0][0] = sadTree8x8Mv[0][0][0];
	sadTree64x16PMv[0][0][1] = sadTree8x8Mv[0][0][1];

	sadTree64x16PMv[0][1][0] = sadTree8x8Mv[0][2][0];
	sadTree64x16PMv[0][1][1] = sadTree8x8Mv[0][2][1];

	sadTree64x16PMv[0][2][0] = sadTree8x8Mv[0][4][0];
	sadTree64x16PMv[0][2][1] = sadTree8x8Mv[0][4][1];

	sadTree64x16PMv[0][3][0] = sadTree8x8Mv[0][6][0];
	sadTree64x16PMv[0][3][1] = sadTree8x8Mv[0][6][1];

	/* 16x64 */
	sadTree16x64PMv[0][0][0] = sadTree8x8Mv[0][0][0];
	sadTree16x64PMv[0][0][1] = sadTree8x8Mv[0][0][1];

	sadTree16x64PMv[1][0][0] = sadTree8x8Mv[2][0][0];
	sadTree16x64PMv[1][0][1] = sadTree8x8Mv[2][0][1];

	sadTree16x64PMv[2][0][0] = sadTree8x8Mv[4][0][0];
	sadTree16x64PMv[2][0][1] = sadTree8x8Mv[4][0][1];

	sadTree16x64PMv[3][0][0] = sadTree8x8Mv[6][0][0];
	sadTree16x64PMv[3][0][1] = sadTree8x8Mv[6][0][1];


	/* 16x8 */
	sadTree16x8PMv[0][0][0] = sadTree8x8Mv[0][0][0];
	sadTree16x8PMv[0][0][1] = sadTree8x8Mv[0][0][1];
	sadTree16x8PMv[1][0][0] = sadTree8x8Mv[2][0][0];
	sadTree16x8PMv[1][0][1] = sadTree8x8Mv[2][0][1];
	sadTree16x8PMv[2][0][0] = sadTree8x8Mv[4][0][0];
	sadTree16x8PMv[2][0][1] = sadTree8x8Mv[4][0][1];
	sadTree16x8PMv[3][0][0] = sadTree8x8Mv[6][0][0];
	sadTree16x8PMv[3][0][1] = sadTree8x8Mv[6][0][1];

	sadTree16x8PMv[0][1][0] = sadTree8x8Mv[0][1][0];
	sadTree16x8PMv[0][1][1] = sadTree8x8Mv[0][1][1];
	sadTree16x8PMv[1][1][0] = sadTree8x8Mv[2][1][0];
	sadTree16x8PMv[1][1][1] = sadTree8x8Mv[2][1][1];
	sadTree16x8PMv[2][1][0] = sadTree8x8Mv[4][1][0];
	sadTree16x8PMv[2][1][1] = sadTree8x8Mv[4][1][1];
	sadTree16x8PMv[3][1][0] = sadTree8x8Mv[6][1][0];
	sadTree16x8PMv[3][1][1] = sadTree8x8Mv[6][1][1];

	sadTree16x8PMv[0][2][0] = sadTree8x8Mv[0][2][0];
	sadTree16x8PMv[0][2][1] = sadTree8x8Mv[0][2][1];
	sadTree16x8PMv[1][2][0] = sadTree8x8Mv[2][2][0];
	sadTree16x8PMv[1][2][1] = sadTree8x8Mv[2][2][1];
	sadTree16x8PMv[2][2][0] = sadTree8x8Mv[4][2][0];
	sadTree16x8PMv[2][2][1] = sadTree8x8Mv[4][2][1];
	sadTree16x8PMv[3][2][0] = sadTree8x8Mv[6][2][0];
	sadTree16x8PMv[3][2][1] = sadTree8x8Mv[6][2][1];

	sadTree16x8PMv[0][3][0] = sadTree8x8Mv[0][3][0];
	sadTree16x8PMv[0][3][1] = sadTree8x8Mv[0][3][1];
	sadTree16x8PMv[1][3][0] = sadTree8x8Mv[2][3][0];
	sadTree16x8PMv[1][3][1] = sadTree8x8Mv[2][3][1];
	sadTree16x8PMv[2][3][0] = sadTree8x8Mv[4][3][0];
	sadTree16x8PMv[2][3][1] = sadTree8x8Mv[4][3][1];
	sadTree16x8PMv[3][3][0] = sadTree8x8Mv[6][3][0];
	sadTree16x8PMv[3][3][1] = sadTree8x8Mv[6][3][1];

	sadTree16x8PMv[0][4][0] = sadTree8x8Mv[0][4][0];
	sadTree16x8PMv[0][4][1] = sadTree8x8Mv[0][4][1];
	sadTree16x8PMv[1][4][0] = sadTree8x8Mv[2][4][0];
	sadTree16x8PMv[1][4][1] = sadTree8x8Mv[2][4][1];
	sadTree16x8PMv[2][4][0] = sadTree8x8Mv[4][4][0];
	sadTree16x8PMv[2][4][1] = sadTree8x8Mv[4][4][1];
	sadTree16x8PMv[3][4][0] = sadTree8x8Mv[6][4][0];
	sadTree16x8PMv[3][4][1] = sadTree8x8Mv[6][4][1];

	sadTree16x8PMv[0][5][0] = sadTree8x8Mv[0][5][0];
	sadTree16x8PMv[0][5][1] = sadTree8x8Mv[0][5][1];
	sadTree16x8PMv[1][5][0] = sadTree8x8Mv[2][5][0];
	sadTree16x8PMv[1][5][1] = sadTree8x8Mv[2][5][1];
	sadTree16x8PMv[2][5][0] = sadTree8x8Mv[4][5][0];
	sadTree16x8PMv[2][5][1] = sadTree8x8Mv[4][5][1];
	sadTree16x8PMv[3][5][0] = sadTree8x8Mv[6][5][0];
	sadTree16x8PMv[3][5][1] = sadTree8x8Mv[6][5][1];

	sadTree16x8PMv[0][6][0] = sadTree8x8Mv[0][6][0];
	sadTree16x8PMv[0][6][1] = sadTree8x8Mv[0][6][1];
	sadTree16x8PMv[1][6][0] = sadTree8x8Mv[2][6][0];
	sadTree16x8PMv[1][6][1] = sadTree8x8Mv[2][6][1];
	sadTree16x8PMv[2][6][0] = sadTree8x8Mv[4][6][0];
	sadTree16x8PMv[2][6][1] = sadTree8x8Mv[4][6][1];
	sadTree16x8PMv[3][6][0] = sadTree8x8Mv[6][6][0];
	sadTree16x8PMv[3][6][1] = sadTree8x8Mv[6][6][1];

	sadTree16x8PMv[0][7][0] = sadTree8x8Mv[0][7][0];
	sadTree16x8PMv[0][7][1] = sadTree8x8Mv[0][7][1];
	sadTree16x8PMv[1][7][0] = sadTree8x8Mv[2][7][0];
	sadTree16x8PMv[1][7][1] = sadTree8x8Mv[2][7][1];
	sadTree16x8PMv[2][7][0] = sadTree8x8Mv[4][7][0];
	sadTree16x8PMv[2][7][1] = sadTree8x8Mv[4][7][1];
	sadTree16x8PMv[3][7][0] = sadTree8x8Mv[6][7][0];
	sadTree16x8PMv[3][7][1] = sadTree8x8Mv[6][7][1];

	/* 8x16 */
	sadTree8x16PMv[0][0][0] = sadTree8x8Mv[0][0][0];
	sadTree8x16PMv[0][0][1] = sadTree8x8Mv[0][0][1];
	sadTree8x16PMv[1][0][0] = sadTree8x8Mv[1][0][0];
	sadTree8x16PMv[1][0][1] = sadTree8x8Mv[1][0][1];
	sadTree8x16PMv[2][0][0] = sadTree8x8Mv[2][0][0];
	sadTree8x16PMv[2][0][1] = sadTree8x8Mv[2][0][1];
	sadTree8x16PMv[3][0][0] = sadTree8x8Mv[3][0][0];
	sadTree8x16PMv[3][0][1] = sadTree8x8Mv[3][0][1];
	sadTree8x16PMv[4][0][0] = sadTree8x8Mv[4][0][0];
	sadTree8x16PMv[4][0][1] = sadTree8x8Mv[4][0][1];
	sadTree8x16PMv[5][0][0] = sadTree8x8Mv[5][0][0];
	sadTree8x16PMv[5][0][1] = sadTree8x8Mv[5][0][1];
	sadTree8x16PMv[6][0][0] = sadTree8x8Mv[6][0][0];
	sadTree8x16PMv[6][0][1] = sadTree8x8Mv[6][0][1];
	sadTree8x16PMv[7][0][0] = sadTree8x8Mv[7][0][0];
	sadTree8x16PMv[7][0][1] = sadTree8x8Mv[7][0][1];

	sadTree8x16PMv[0][1][0] = sadTree8x8Mv[0][2][0];
	sadTree8x16PMv[0][1][1] = sadTree8x8Mv[0][2][1];
	sadTree8x16PMv[1][1][0] = sadTree8x8Mv[1][2][0];
	sadTree8x16PMv[1][1][1] = sadTree8x8Mv[1][2][1];
	sadTree8x16PMv[2][1][0] = sadTree8x8Mv[2][2][0];
	sadTree8x16PMv[2][1][1] = sadTree8x8Mv[2][2][1];
	sadTree8x16PMv[3][1][0] = sadTree8x8Mv[3][2][0];
	sadTree8x16PMv[3][1][1] = sadTree8x8Mv[3][2][1];
	sadTree8x16PMv[4][1][0] = sadTree8x8Mv[4][2][0];
	sadTree8x16PMv[4][1][1] = sadTree8x8Mv[4][2][1];
	sadTree8x16PMv[5][1][0] = sadTree8x8Mv[5][2][0];
	sadTree8x16PMv[5][1][1] = sadTree8x8Mv[5][2][1];
	sadTree8x16PMv[6][1][0] = sadTree8x8Mv[6][2][0];
	sadTree8x16PMv[6][1][1] = sadTree8x8Mv[6][2][1];
	sadTree8x16PMv[7][1][0] = sadTree8x8Mv[7][2][0];
	sadTree8x16PMv[7][1][1] = sadTree8x8Mv[7][2][1];

	sadTree8x16PMv[0][2][0] = sadTree8x8Mv[0][4][0];
	sadTree8x16PMv[0][2][1] = sadTree8x8Mv[0][4][1];
	sadTree8x16PMv[1][2][0] = sadTree8x8Mv[1][4][0];
	sadTree8x16PMv[1][2][1] = sadTree8x8Mv[1][4][1];
	sadTree8x16PMv[2][2][0] = sadTree8x8Mv[2][4][0];
	sadTree8x16PMv[2][2][1] = sadTree8x8Mv[2][4][1];
	sadTree8x16PMv[3][2][0] = sadTree8x8Mv[3][4][0];
	sadTree8x16PMv[3][2][1] = sadTree8x8Mv[3][4][1];
	sadTree8x16PMv[4][2][0] = sadTree8x8Mv[4][4][0];
	sadTree8x16PMv[4][2][1] = sadTree8x8Mv[4][4][1];
	sadTree8x16PMv[5][2][0] = sadTree8x8Mv[5][4][0];
	sadTree8x16PMv[5][2][1] = sadTree8x8Mv[5][4][1];
	sadTree8x16PMv[6][2][0] = sadTree8x8Mv[6][4][0];
	sadTree8x16PMv[6][2][1] = sadTree8x8Mv[6][4][1];
	sadTree8x16PMv[7][2][0] = sadTree8x8Mv[7][4][0];
	sadTree8x16PMv[7][2][1] = sadTree8x8Mv[7][4][1];

	sadTree8x16PMv[0][3][0] = sadTree8x8Mv[0][6][0];
	sadTree8x16PMv[0][3][1] = sadTree8x8Mv[0][6][1];
	sadTree8x16PMv[1][3][0] = sadTree8x8Mv[1][6][0];
	sadTree8x16PMv[1][3][1] = sadTree8x8Mv[1][6][1];
	sadTree8x16PMv[2][3][0] = sadTree8x8Mv[2][6][0];
	sadTree8x16PMv[2][3][1] = sadTree8x8Mv[2][6][1];
	sadTree8x16PMv[3][3][0] = sadTree8x8Mv[3][6][0];
	sadTree8x16PMv[3][3][1] = sadTree8x8Mv[3][6][1];
	sadTree8x16PMv[4][3][0] = sadTree8x8Mv[4][6][0];
	sadTree8x16PMv[4][3][1] = sadTree8x8Mv[4][6][1];
	sadTree8x16PMv[5][3][0] = sadTree8x8Mv[5][6][0];
	sadTree8x16PMv[5][3][1] = sadTree8x8Mv[5][6][1];
	sadTree8x16PMv[6][3][0] = sadTree8x8Mv[6][6][0];
	sadTree8x16PMv[6][3][1] = sadTree8x8Mv[6][6][1];
	sadTree8x16PMv[7][3][0] = sadTree8x8Mv[7][6][0];
	sadTree8x16PMv[7][3][1] = sadTree8x8Mv[7][6][1];

	/* 32x8 */
	sadTree32x8PMv[0][0][0] = sadTree8x8Mv[0][0][0];
	sadTree32x8PMv[0][0][1] = sadTree8x8Mv[0][0][1];
	sadTree32x8PMv[1][0][0] = sadTree8x8Mv[4][0][0];
	sadTree32x8PMv[1][0][1] = sadTree8x8Mv[4][0][1];
	sadTree32x8PMv[0][1][0] = sadTree8x8Mv[0][1][0];
	sadTree32x8PMv[0][1][1] = sadTree8x8Mv[0][1][1];
	sadTree32x8PMv[1][1][0] = sadTree8x8Mv[4][1][0];
	sadTree32x8PMv[1][1][1] = sadTree8x8Mv[4][1][1];
	sadTree32x8PMv[0][2][0] = sadTree8x8Mv[0][2][0];
	sadTree32x8PMv[0][2][1] = sadTree8x8Mv[0][2][1];
	sadTree32x8PMv[1][2][0] = sadTree8x8Mv[4][2][0];
	sadTree32x8PMv[1][2][1] = sadTree8x8Mv[4][2][1];
	sadTree32x8PMv[0][3][0] = sadTree8x8Mv[0][3][0];
	sadTree32x8PMv[0][3][1] = sadTree8x8Mv[0][3][1];
	sadTree32x8PMv[1][3][0] = sadTree8x8Mv[4][3][0];
	sadTree32x8PMv[1][3][1] = sadTree8x8Mv[4][3][1];
	sadTree32x8PMv[0][4][0] = sadTree8x8Mv[0][4][0];
	sadTree32x8PMv[0][4][1] = sadTree8x8Mv[0][4][1];
	sadTree32x8PMv[1][4][0] = sadTree8x8Mv[4][4][0];
	sadTree32x8PMv[1][4][1] = sadTree8x8Mv[4][4][1];
	sadTree32x8PMv[0][5][0] = sadTree8x8Mv[0][5][0];
	sadTree32x8PMv[0][5][1] = sadTree8x8Mv[0][5][1];
	sadTree32x8PMv[1][5][0] = sadTree8x8Mv[4][5][0];
	sadTree32x8PMv[1][5][1] = sadTree8x8Mv[4][5][1];
	sadTree32x8PMv[0][6][0] = sadTree8x8Mv[0][6][0];
	sadTree32x8PMv[0][6][1] = sadTree8x8Mv[0][6][1];
	sadTree32x8PMv[1][6][0] = sadTree8x8Mv[4][6][0];
	sadTree32x8PMv[1][6][1] = sadTree8x8Mv[4][6][1];
	sadTree32x8PMv[0][7][0] = sadTree8x8Mv[0][7][0];
	sadTree32x8PMv[0][7][1] = sadTree8x8Mv[0][7][1];
	sadTree32x8PMv[1][7][0] = sadTree8x8Mv[4][7][0];
	sadTree32x8PMv[1][7][1] = sadTree8x8Mv[4][7][1];


	/* 8x32 */
	sadTree8x32PMv[0][0][0] = sadTree8x8Mv[0][0][0];
	sadTree8x32PMv[0][0][1] = sadTree8x8Mv[0][0][1];
	sadTree8x32PMv[1][0][0] = sadTree8x8Mv[1][0][0];
	sadTree8x32PMv[1][0][1] = sadTree8x8Mv[1][0][1];
	sadTree8x32PMv[2][0][0] = sadTree8x8Mv[2][0][0];
	sadTree8x32PMv[2][0][1] = sadTree8x8Mv[2][0][1];
	sadTree8x32PMv[3][0][0] = sadTree8x8Mv[3][0][0];
	sadTree8x32PMv[3][0][1] = sadTree8x8Mv[3][0][1];
	sadTree8x32PMv[4][0][0] = sadTree8x8Mv[4][0][0];
	sadTree8x32PMv[4][0][1] = sadTree8x8Mv[4][0][1];
	sadTree8x32PMv[5][0][0] = sadTree8x8Mv[5][0][0];
	sadTree8x32PMv[5][0][1] = sadTree8x8Mv[5][0][1];
	sadTree8x32PMv[6][0][0] = sadTree8x8Mv[6][0][0];
	sadTree8x32PMv[6][0][1] = sadTree8x8Mv[6][0][1];
	sadTree8x32PMv[7][0][0] = sadTree8x8Mv[7][0][0];
	sadTree8x32PMv[7][0][1] = sadTree8x8Mv[7][0][1];

	sadTree8x32PMv[0][1][0] = sadTree8x8Mv[0][4][0];
	sadTree8x32PMv[0][1][1] = sadTree8x8Mv[0][4][1];
	sadTree8x32PMv[1][1][0] = sadTree8x8Mv[1][4][0];
	sadTree8x32PMv[1][1][1] = sadTree8x8Mv[1][4][1];
	sadTree8x32PMv[2][1][0] = sadTree8x8Mv[2][4][0];
	sadTree8x32PMv[2][1][1] = sadTree8x8Mv[2][4][1];
	sadTree8x32PMv[3][1][0] = sadTree8x8Mv[3][4][0];
	sadTree8x32PMv[3][1][1] = sadTree8x8Mv[3][4][1];
	sadTree8x32PMv[4][1][0] = sadTree8x8Mv[4][4][0];
	sadTree8x32PMv[4][1][1] = sadTree8x8Mv[4][4][1];
	sadTree8x32PMv[5][1][0] = sadTree8x8Mv[5][4][0];
	sadTree8x32PMv[5][1][1] = sadTree8x8Mv[5][4][1];
	sadTree8x32PMv[6][1][0] = sadTree8x8Mv[6][4][0];
	sadTree8x32PMv[6][1][1] = sadTree8x8Mv[6][4][1];
	sadTree8x32PMv[7][1][0] = sadTree8x8Mv[7][4][0];
	sadTree8x32PMv[7][1][1] = sadTree8x8Mv[7][4][1];

	/* 64x8 */
	sadTree64x8PMv[0][0][0] = sadTree8x8Mv[0][0][0];
	sadTree64x8PMv[0][0][1] = sadTree8x8Mv[0][0][1];

	sadTree64x8PMv[0][1][0] = sadTree8x8Mv[0][1][0];
	sadTree64x8PMv[0][1][1] = sadTree8x8Mv[0][1][1];

	sadTree64x8PMv[0][2][0] = sadTree8x8Mv[0][2][0];
	sadTree64x8PMv[0][2][1] = sadTree8x8Mv[0][2][1];

	sadTree64x8PMv[0][3][0] = sadTree8x8Mv[0][3][0];
	sadTree64x8PMv[0][3][1] = sadTree8x8Mv[0][3][1];

	sadTree64x8PMv[0][4][0] = sadTree8x8Mv[0][4][0];
	sadTree64x8PMv[0][4][1] = sadTree8x8Mv[0][4][1];

	sadTree64x8PMv[0][5][0] = sadTree8x8Mv[0][5][0];
	sadTree64x8PMv[0][5][1] = sadTree8x8Mv[0][5][1];

	sadTree64x8PMv[0][6][0] = sadTree8x8Mv[0][6][0];
	sadTree64x8PMv[0][6][1] = sadTree8x8Mv[0][6][1];

	sadTree64x8PMv[0][7][0] = sadTree8x8Mv[0][7][0];
	sadTree64x8PMv[0][7][1] = sadTree8x8Mv[0][7][1];



	/* 8x64 */
	sadTree8x64PMv[0][0][0] = sadTree8x8Mv[0][0][0];
	sadTree8x64PMv[0][0][1] = sadTree8x8Mv[0][0][1];
	sadTree8x64PMv[1][0][0] = sadTree8x8Mv[1][0][0];
	sadTree8x64PMv[1][0][1] = sadTree8x8Mv[1][0][1];
	sadTree8x64PMv[2][0][0] = sadTree8x8Mv[2][0][0];
	sadTree8x64PMv[2][0][1] = sadTree8x8Mv[2][0][1];
	sadTree8x64PMv[3][0][0] = sadTree8x8Mv[3][0][0];
	sadTree8x64PMv[3][0][1] = sadTree8x8Mv[3][0][1];
	sadTree8x64PMv[4][0][0] = sadTree8x8Mv[4][0][0];
	sadTree8x64PMv[4][0][1] = sadTree8x8Mv[4][0][1];
	sadTree8x64PMv[5][0][0] = sadTree8x8Mv[5][0][0];
	sadTree8x64PMv[5][0][1] = sadTree8x8Mv[5][0][1];
	sadTree8x64PMv[6][0][0] = sadTree8x8Mv[6][0][0];
	sadTree8x64PMv[6][0][1] = sadTree8x8Mv[6][0][1];
	sadTree8x64PMv[7][0][0] = sadTree8x8Mv[7][0][0];
	sadTree8x64PMv[7][0][1] = sadTree8x8Mv[7][0][1];



}


void compareBestInfo_8x8(
	S14 mvx, S14 mvy, U32 lambda_mv, U2 num_refp, S2 refi,
	//U32 sadTree64x64[1][1],
	//U32 sadTree32x32[2][2], U32 sadTree64x32[1][2], U32 sadTree32x64[2][1],
	//U32 sadTree16x16[4][4], U32 sadTree32x16[2][4], U32 sadTree16x32[4][2], U32 sadTree64x16[1][4], U32 sadTree16x64[4][1],
	U16 sadTree8x8[8][8], 
	//U16 sadTree16x8[4][8], U16 sadTree8x16[8][4], U16 sadTree32x8[2][8], U16 sadTree8x32[8][2], U32 sadTree64x8[1][8], U32 sadTree8x64[8][1],

	//U32 sadTree64x64Cur_org[1][1],
	//U32 sadTree32x32Cur_org[2][2], U32 sadTree64x32Cur_org[1][2], U32 sadTree32x64Cur_org[2][1],
	//U32 sadTree16x16Cur_org[4][4], U32 sadTree32x16Cur_org[2][4], U32 sadTree16x32Cur_org[4][2], U32 sadTree64x16Cur_org[1][4], U32 sadTree16x64Cur_org[4][1],
	pel sadTree8x8Cur_org[8][8], 
	//U16 sadTree16x8Cur_org[4][8], U16 sadTree8x16Cur_org[8][4], U16 sadTree32x8Cur_org[2][8], U16 sadTree8x32Cur_org[8][2], U32 sadTree64x8Cur_org[1][8], U32 sadTree8x64Cur_org[8][1],

	//S14 sadTree64x64Mv[1][1][2],
	//S14 sadTree32x32Mv[2][2][2], S14 sadTree64x32Mv[1][2][2], S14 sadTree32x64Mv[2][1][2],
	//S14 sadTree16x16Mv[4][4][2], S14 sadTree32x16Mv[2][4][2], S14 sadTree16x32Mv[4][2][2], S14 sadTree64x16Mv[1][4][2], S14 sadTree16x64Mv[4][1][2],
	S14 sadTree8x8Mv[8][8][2], 

	//S14 sadTree16x8Mv[4][8][2], S14 sadTree8x16Mv[8][4][2], S14 sadTree32x8Mv[2][8][2], S14 sadTree8x32Mv[8][2][2], S14 sadTree64x8Mv[1][8][2], S14 sadTree8x64Mv[8][1][2],
	
	S14 sadTree64x64PMv[1][1][2],
	S14 sadTree32x32PMv[2][2][2], S14 sadTree64x32PMv[1][2][2], S14 sadTree32x64PMv[2][1][2],
	S14 sadTree16x16PMv[4][4][2], S14 sadTree32x16PMv[2][4][2], S14 sadTree16x32PMv[4][2][2], S14 sadTree64x16PMv[1][4][2], S14 sadTree16x64PMv[4][1][2],
	S14 sadTree8x8PMv[8][8][2]

	, S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2]
)
{

	//sadTree64x64Cur_org[0][0] += getMvRcost(lambda_mv, sadTree64x64PMv[0][0][0] - mvx, sadTree64x64PMv[0][0][1] - mvy, num_refp, refi);
	//if (sadTree64x64Cur_org[0][0] < sadTree64x64[0][0])
	//{
	//	sadTree64x64[0][0] = sadTree64x64Cur_org[0][0];
	//	sadTree64x64Mv[0][0][0] = mvx;
	//	sadTree64x64Mv[0][0][1] = mvy;
	//}

	compareBestInfo8x8(mvx, mvy, lambda_mv, num_refp, refi,
		sadTree8x8, 
		//sadTree16x8, sadTree8x16, sadTree32x8, sadTree8x32, sadTree64x8, sadTree8x64,

		sadTree8x8Cur_org, 
		//sadTree16x8Cur_org, sadTree8x16Cur_org, sadTree32x8Cur_org, sadTree8x32Cur_org, sadTree64x8Cur_org, sadTree8x64Cur_org,
		//================================================================================================================================================

		sadTree8x8Mv, 
		//sadTree16x8Mv, sadTree8x16Mv, sadTree32x8Mv, sadTree8x32Mv, sadTree64x8Mv, sadTree8x64Mv,
		sadTree8x8PMv
		//, sadTree16x8PMv, sadTree8x16PMv, sadTree32x8PMv, sadTree8x32PMv, sadTree64x8PMv, sadTree8x64PMv
	);

	derive_PMV_stage2(sadTree8x8Mv,
		sadTree64x64PMv,
		sadTree32x32PMv, sadTree64x32PMv, sadTree32x64PMv,
		sadTree16x16PMv, sadTree32x16PMv, sadTree16x32PMv, sadTree64x16PMv, sadTree16x64PMv,
		sadTree8x8PMv
		, sadTree16x8PMv, sadTree8x16PMv, sadTree32x8PMv, sadTree8x32PMv, sadTree64x8PMv, sadTree8x64PMv
	);


	//compareBestInfo16(mvx, mvy, lambda_mv, num_refp, refi,
	//	sadTree16x16, sadTree32x16, sadTree16x32, sadTree64x16, sadTree16x64,

	//	sadTree16x16Cur_org, sadTree32x16Cur_org, sadTree16x32Cur_org, sadTree64x16Cur_org, sadTree16x64Cur_org,
	//	//================================================================================================================================================
	//	//sadTree16x16Cur, sadTree32x16Cur, sadTree16x32Cur, sadTree64x16Cur, sadTree16x64Cur,
	//	sadTree16x16Mv, sadTree32x16Mv, sadTree16x32Mv, sadTree64x16Mv, sadTree16x64Mv,
	//	sadTree16x16PMv, sadTree32x16PMv, sadTree16x32PMv, sadTree64x16PMv, sadTree16x64PMv);


	//compareBestInfo32(mvx, mvy, lambda_mv, num_refp, refi,
	//	sadTree32x32, sadTree64x32, sadTree32x64,
	//	sadTree32x32Cur_org, sadTree64x32Cur_org, sadTree32x64Cur_org,
	//	//================================================================================================================================================
	//	//sadTree32x32Cur, sadTree64x32Cur, sadTree32x64Cur,

	//	sadTree32x32Mv, sadTree64x32Mv, sadTree32x64Mv,
	//	sadTree32x32PMv, sadTree64x32PMv, sadTree32x64PMv);


}

void constructSadTreeAndCompare_8x8(
	U7 x, U7 y,
	pel sadScu_org[8][8],
	S14 posLTLv0[2],
	U32 lambdaMv,
	U2 numRefp,
	S2 refi,
	S14 rangeLv0[2][2],
	U32 sadTree64x64Best[1][1],
	U32 sadTree32x32Best[2][2], U32 sadTree64x32Best[1][2], U32 sadTree32x64Best[2][1],
	U32 sadTree16x16Best[4][4], U32 sadTree32x16Best[2][4], U32 sadTree16x32Best[4][2], U32 sadTree64x16Best[1][4], U32 sadTree16x64Best[4][1],
	U16 sadTree8x8Best[8][8], U16 sadTree16x8Best[4][8], U16 sadTree8x16Best[8][4], U16 sadTree32x8Best[2][8], U16 sadTree8x32Best[8][2], U32 sadTree64x8Best[1][8], U32 sadTree8x64Best[8][1],
	S14 sadTree64x64Mv[1][1][2],
	S14 sadTree32x32Mv[2][2][2], S14 sadTree64x32Mv[1][2][2], S14 sadTree32x64Mv[2][1][2],
	S14 sadTree16x16Mv[4][4][2], S14 sadTree32x16Mv[2][4][2], S14 sadTree16x32Mv[4][2][2], S14 sadTree64x16Mv[1][4][2], S14 sadTree16x64Mv[4][1][2],
	S14 sadTree8x8Mv[8][8][2], S14 sadTree16x8Mv[4][8][2], S14 sadTree8x16Mv[8][4][2], S14 sadTree32x8Mv[2][8][2], S14 sadTree8x32Mv[8][2][2], S14 sadTree64x8Mv[1][8][2], S14 sadTree8x64Mv[8][1][2],
	S14 sadTree64x64PMv[1][1][2],
	S14 sadTree32x32PMv[2][2][2], S14 sadTree64x32PMv[1][2][2], S14 sadTree32x64PMv[2][1][2],
	S14 sadTree16x16PMv[4][4][2], S14 sadTree32x16PMv[2][4][2], S14 sadTree16x32PMv[4][2][2], S14 sadTree64x16PMv[1][4][2], S14 sadTree16x64PMv[4][1][2],
	S14 sadTree8x8PMv[8][8][2], S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2])
{
#if IME_PRAGMA_ON
#pragma HLS pipeline

#endif

	//U32 sadTree64x64_org[1][1];
	//U32 sadTree32x32_org[2][2]; U32 sadTree64x32_org[1][2]; U32 sadTree32x64_org[2][1];
	//U32 sadTree16x16_org[4][4]; U32 sadTree32x16_org[2][4]; U32 sadTree16x32_org[4][2]; U32 sadTree64x16_org[1][4]; U32 sadTree16x64_org[4][1];
	//U16 sadTree16x8_org[4][8];	U16 sadTree8x16_org[8][4];	U16 sadTree32x8_org[2][8];	U16 sadTree8x32_org[8][2];	U32 sadTree64x8_org[1][8]; U32 sadTree8x64_org[8][1];

	//U32 sadTree64x64[1][1];
	//U32 sadTree32x32[2][2]; U32 sadTree64x32[1][2]; U32 sadTree32x64[2][1];
	//U32 sadTree16x16[4][4]; U32 sadTree32x16[2][4]; U32 sadTree16x32[4][2]; U32 sadTree64x16[1][4]; U32 sadTree16x64[4][1];
	//U16 sadTree16x8[4][8]; U16 sadTree8x16[8][4]; U16 sadTree32x8[2][8]; U16 sadTree8x32[8][2]; U32 sadTree64x8[1][8]; U32 sadTree8x64[8][1];


	//constructSadTreeDepth3(sadScu_org, sadTree16x16_org, sadTree16x8_org, sadTree8x16_org, sadTree32x8_org, sadTree8x32_org, sadTree64x8_org, sadTree8x64_org
	//	//,
	//	//sadScu, sadTree16x16, sadTree16x8, sadTree8x16, sadTree32x8, sadTree8x32, sadTree64x8, sadTree8x64
	//);

	//constructSadTreeDepth2(sadTree16x16_org, sadTree32x32_org, sadTree32x16_org, sadTree16x32_org, sadTree64x16_org, sadTree16x64_org
	//	//, 
	//	//sadTree16x16, sadTree32x32, sadTree32x16, sadTree16x32, sadTree64x16, sadTree16x64
	//);

	//constructSadTreeDepth1(sadTree32x32_org, sadTree64x64_org, sadTree64x32_org, sadTree32x64_org
	//	//,
	//	//sadTree32x32, sadTree64x64, sadTree64x32, sadTree32x64
	//);

	compareBestInfo_8x8(
		posLTLv0[0] + (x << 2), posLTLv0[1] + (y << 2), lambdaMv, numRefp, refi,
		//sadTree64x64Best,
		//sadTree32x32Best, sadTree64x32Best, sadTree32x64Best,
		//sadTree16x16Best, sadTree32x16Best, sadTree16x32Best, sadTree64x16Best, sadTree16x64Best,
		sadTree8x8Best,
		//sadTree16x8Best, sadTree8x16Best, sadTree32x8Best, sadTree8x32Best, sadTree64x8Best, sadTree8x64Best,

		//sadTree64x64_org,
		//sadTree32x32_org, sadTree64x32_org, sadTree32x64_org,
		//sadTree16x16_org, sadTree32x16_org, sadTree16x32_org, sadTree64x16_org, sadTree16x64_org,

		sadScu_org, 

		//sadTree16x8_org, sadTree8x16_org, sadTree32x8_org, sadTree8x32_org, sadTree64x8_org, sadTree8x64_org,

		//sadTree64x64Mv,
		//sadTree32x32Mv, sadTree64x32Mv, sadTree32x64Mv,
		//sadTree16x16Mv, sadTree32x16Mv, sadTree16x32Mv, sadTree64x16Mv, sadTree16x64Mv,
		sadTree8x8Mv, 
		//sadTree16x8Mv, sadTree8x16Mv, sadTree32x8Mv, sadTree8x32Mv, sadTree64x8Mv, sadTree8x64Mv,

		sadTree64x64PMv,
		sadTree32x32PMv, sadTree64x32PMv, sadTree32x64PMv,
		sadTree16x16PMv, sadTree32x16PMv, sadTree16x32PMv, sadTree64x16PMv, sadTree16x64PMv,
		sadTree8x8PMv
		, sadTree16x8PMv, sadTree8x16PMv, sadTree32x8PMv, sadTree8x32PMv, sadTree64x8PMv, sadTree8x64PMv
	);

}

#define CONSTRUCT_AND_COMPARE_8X8(idx,sadScu_org) constructSadTreeAndCompare_8x8(idx, y, sadScu_org, posLTLv0, lambdaMv, numRefp, refi, rangeLv0, \
	sadTree64x64Best0, sadTree32x32Best0, sadTree64x32Best0, sadTree32x64Best0, sadTree16x16Best0, sadTree32x16Best0, sadTree16x32Best0, sadTree64x16Best0, sadTree16x64Best0, \
	sadTree8x8Best0, sadTree16x8Best0, sadTree8x16Best0, sadTree32x8Best0, sadTree8x32Best0, sadTree64x8Best0, sadTree8x64Best0, \
	sadTree64x64Mv0, \
	sadTree32x32Mv0, sadTree64x32Mv0, sadTree32x64Mv0, \
	sadTree16x16Mv0, sadTree32x16Mv0, sadTree16x32Mv0, sadTree64x16Mv0, sadTree16x64Mv0, \
	sadTree8x8Mv0, sadTree16x8Mv0, sadTree8x16Mv0, sadTree32x8Mv0, sadTree8x32Mv0, sadTree64x8Mv0, sadTree8x64Mv0, \
	sadTree64x64PMv, \
	sadTree32x32PMv, sadTree64x32PMv, sadTree32x64PMv, \
	sadTree16x16PMv, sadTree32x16PMv, sadTree16x32PMv, sadTree64x16PMv, sadTree16x64PMv, \
	sadTree8x8PMv, sadTree16x8PMv, sadTree8x16PMv, sadTree32x8PMv, sadTree8x32PMv, sadTree64x8PMv, sadTree8x64PMv)


void searchFullLv0TestCase_myAlgorithm_stage1(
	pel swSubLv0_org[MAX_CU_H + TWO_STAGE_1_SR_H][MAX_CU_H + TWO_STAGE_1_SR_W],

	S14 posLTLv0[2], 
	U32 lambdaMv, 
	U2 numRefp, 
	S2 refi,
	S14 rangeLv0[2][2], 

	pel org_org[64][64],


	S14 sadTree64x64Mv0[1][1][2],
	S14 sadTree32x32Mv0[2][2][2], S14 sadTree64x32Mv0[1][2][2], S14 sadTree32x64Mv0[2][1][2],
	S14 sadTree16x16Mv0[4][4][2], S14 sadTree32x16Mv0[2][4][2], S14 sadTree16x32Mv0[4][2][2], S14 sadTree64x16Mv0[1][4][2], S14 sadTree16x64Mv0[4][1][2],
	S14 sadTree8x8Mv0[8][8][2], S14 sadTree16x8Mv0[4][8][2], S14 sadTree8x16Mv0[8][4][2], S14 sadTree32x8Mv0[2][8][2], S14 sadTree8x32Mv0[8][2][2], S14 sadTree64x8Mv0[1][8][2], S14 sadTree8x64Mv0[8][1][2],
	S14 sadTree64x64PMv[1][1][2],
	S14 sadTree32x32PMv[2][2][2], S14 sadTree64x32PMv[1][2][2], S14 sadTree32x64PMv[2][1][2],
	S14 sadTree16x16PMv[4][4][2], S14 sadTree32x16PMv[2][4][2], S14 sadTree16x32PMv[4][2][2], S14 sadTree64x16PMv[1][4][2], S14 sadTree16x64PMv[4][1][2],
	S14 sadTree8x8PMv[8][8][2], S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2],
	U32 sadTree64x64Best0[1][1],
	U32 sadTree32x32Best0[2][2], U32 sadTree64x32Best0[1][2], U32 sadTree32x64Best0[2][1],
	U32 sadTree16x16Best0[4][4], U32 sadTree32x16Best0[2][4], U32 sadTree16x32Best0[4][2], U32 sadTree64x16Best0[1][4], U32 sadTree16x64Best0[4][1],
	U16 sadTree8x8Best0[8][8], U16  sadTree16x8Best0[4][8], U16  sadTree8x16Best0[8][4], U16 sadTree32x8Best0[2][8], U16 sadTree8x32Best0[8][2], U32 sadTree64x8Best0[1][8], U32 sadTree8x64Best0[8][1], U4 bit_depth)
{

	static pel sadScuUp0_org[8][8]; static pel sadScuUp1_org[8][8]; static pel sadScuUp2_org[8][8]; static pel sadScuUp3_org[8][8];
	static pel sadScuUp4_org[8][8]; static pel sadScuUp5_org[8][8]; static pel sadScuUp6_org[8][8]; static pel sadScuUp7_org[8][8];
	static pel sadScuUp8_org[8][8]; static pel sadScuUp9_org[8][8]; static pel sadScuUp10_org[8][8]; static pel sadScuUp11_org[8][8];
	static pel sadScuUp12_org[8][8]; static pel sadScuUp13_org[8][8]; static pel sadScuUp14_org[8][8]; static pel sadScuUp15_org[8][8];


	U7 y;


	initBestInfo__myAlgorithm_stage1_and_2(sadTree64x64Best0,
		sadTree32x32Best0, sadTree64x32Best0, sadTree32x64Best0,
		sadTree16x16Best0, sadTree32x16Best0, sadTree16x32Best0, sadTree64x16Best0, sadTree16x64Best0,
		sadTree8x8Best0, sadTree16x8Best0, sadTree8x16Best0, sadTree32x8Best0, sadTree8x32Best0, sadTree64x8Best0, sadTree8x64Best0);


	for (y = 0; y < TWO_STAGE_1_SR_H; y++)
	{

		calcSadScuLv0TestCaseMore_myAlgorithm_stage1(
			sadScuUp0_org, sadScuUp1_org, sadScuUp2_org, sadScuUp3_org, sadScuUp4_org, sadScuUp5_org, sadScuUp6_org, sadScuUp7_org,
			sadScuUp8_org, sadScuUp9_org, sadScuUp10_org, sadScuUp11_org, sadScuUp12_org, sadScuUp13_org, sadScuUp14_org, sadScuUp15_org, 

			swSubLv0_org,
			org_org,
			y,
			bit_depth
		);


		CONSTRUCT_AND_COMPARE_8X8(0, sadScuUp0_org
		);
		CONSTRUCT_AND_COMPARE_8X8(1, sadScuUp1_org
		);
		CONSTRUCT_AND_COMPARE_8X8(2, sadScuUp2_org
		);
		CONSTRUCT_AND_COMPARE_8X8(3, sadScuUp3_org
		);
		CONSTRUCT_AND_COMPARE_8X8(4, sadScuUp4_org
		);
		CONSTRUCT_AND_COMPARE_8X8(5, sadScuUp5_org
		);
		CONSTRUCT_AND_COMPARE_8X8(6, sadScuUp6_org
		);
		CONSTRUCT_AND_COMPARE_8X8(7, sadScuUp7_org
		);
		CONSTRUCT_AND_COMPARE_8X8(8, sadScuUp8_org
		);
		CONSTRUCT_AND_COMPARE_8X8(9, sadScuUp9_org
		);
		CONSTRUCT_AND_COMPARE_8X8(10, sadScuUp10_org
		);
		CONSTRUCT_AND_COMPARE_8X8(11, sadScuUp11_org
		);
		CONSTRUCT_AND_COMPARE_8X8(12, sadScuUp12_org
		);
		CONSTRUCT_AND_COMPARE_8X8(13, sadScuUp13_org
		);
		CONSTRUCT_AND_COMPARE_8X8(14, sadScuUp14_org
		);
		CONSTRUCT_AND_COMPARE_8X8(15, sadScuUp15_org
		);
	}

}

//============================================================================================================================================================================================================================
//============================================================================================================================================================================================================================

/* searchFullLv0TestCase : myAlgorithm_stage2 */

void calcLineSadMore_myAlgorithm_stage2(
#if BW_DEBUG
	U10 lineBufferRef_org[MAX_CU_H + TWO_STAGE_2_SR_H][MAX_CU_H + TWO_STAGE_2_SR_W],
	U10 lineBufferOrg_org[64][64],
	U10 sadScu0_org[8][8], 
	U10 sadScu1_org[8][8], 
	U10 sadScu2_org[8][8], 
	U10 sadScu3_org[8][8], 
	U10 sadScu4_org[8][8], 
	U10 sadScu5_org[8][8],
	U10 sadScu6_org[8][8], 
	U10 sadScu7_org[8][8],
	U10 sadScu8_org[8][8], 
	U10 sadScu9_org[8][8], 
	U10 sadScu10_org[8][8], 
	U10 sadScu11_org[8][8], 
	U10 sadScu12_org[8][8], 
	U10 sadScu13_org[8][8], 
	U10 sadScu14_org[8][8], 
	U10 sadScu15_org[8][8],
#else
	pel lineBufferRef_org[MAX_CU_H + TWO_STAGE_2_SR_H][MAX_CU_H + TWO_STAGE_2_SR_W], 
	pel lineBufferOrg_org[64][64],
	pel sadScu0_org[8][8], 
	pel sadScu1_org[8][8], 
	pel sadScu2_org[8][8], 
	pel sadScu3_org[8][8], 
	pel sadScu4_org[8][8], 
	pel sadScu5_org[8][8], 
	pel sadScu6_org[8][8], 
	pel sadScu7_org[8][8],
	pel sadScu8_org[8][8], 
	pel sadScu9_org[8][8], 
	pel sadScu10_org[8][8], 
	pel sadScu11_org[8][8], 
	pel sadScu12_org[8][8], 
	pel sadScu13_org[8][8], 
	pel sadScu14_org[8][8], 
	pel sadScu15_org[8][8],

#endif
	U8 yScu, U8 baseSwH, U8 baseOrgH, U4 bit_depth
)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=lineBufferRef_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=lineBufferOrg_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=sadScu0_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_org complete dim=0


#endif


	U8 reltY;

	sadScu0_org[yScu][0] = SAD_OCT_INIT_ORG(0, 0);  		sadScu0_org[yScu][1] = SAD_OCT_INIT_ORG(8, 8);  		sadScu0_org[yScu][2] = SAD_OCT_INIT_ORG(16, 16);  		sadScu0_org[yScu][3] = SAD_OCT_INIT_ORG(24, 24);  		sadScu0_org[yScu][4] = SAD_OCT_INIT_ORG(32, 32);  		sadScu0_org[yScu][5] = SAD_OCT_INIT_ORG(40, 40);  		sadScu0_org[yScu][6] = SAD_OCT_INIT_ORG(48, 48);  		sadScu0_org[yScu][7] = SAD_OCT_INIT_ORG(56, 56);
	sadScu1_org[yScu][0] = SAD_OCT_INIT_ORG(0, 1);  		sadScu1_org[yScu][1] = SAD_OCT_INIT_ORG(8, 9);  		sadScu1_org[yScu][2] = SAD_OCT_INIT_ORG(16, 17);  		sadScu1_org[yScu][3] = SAD_OCT_INIT_ORG(24, 25);  		sadScu1_org[yScu][4] = SAD_OCT_INIT_ORG(32, 33);  		sadScu1_org[yScu][5] = SAD_OCT_INIT_ORG(40, 41);  		sadScu1_org[yScu][6] = SAD_OCT_INIT_ORG(48, 49);  		sadScu1_org[yScu][7] = SAD_OCT_INIT_ORG(56, 57);
	sadScu2_org[yScu][0] = SAD_OCT_INIT_ORG(0, 2);  		sadScu2_org[yScu][1] = SAD_OCT_INIT_ORG(8, 10);  		sadScu2_org[yScu][2] = SAD_OCT_INIT_ORG(16, 18);  		sadScu2_org[yScu][3] = SAD_OCT_INIT_ORG(24, 26);  		sadScu2_org[yScu][4] = SAD_OCT_INIT_ORG(32, 34);  		sadScu2_org[yScu][5] = SAD_OCT_INIT_ORG(40, 42);  		sadScu2_org[yScu][6] = SAD_OCT_INIT_ORG(48, 50);  		sadScu2_org[yScu][7] = SAD_OCT_INIT_ORG(56, 58);
	sadScu3_org[yScu][0] = SAD_OCT_INIT_ORG(0, 3);  		sadScu3_org[yScu][1] = SAD_OCT_INIT_ORG(8, 11);  		sadScu3_org[yScu][2] = SAD_OCT_INIT_ORG(16, 19);  		sadScu3_org[yScu][3] = SAD_OCT_INIT_ORG(24, 27);  		sadScu3_org[yScu][4] = SAD_OCT_INIT_ORG(32, 35);  		sadScu3_org[yScu][5] = SAD_OCT_INIT_ORG(40, 43);  		sadScu3_org[yScu][6] = SAD_OCT_INIT_ORG(48, 51);  		sadScu3_org[yScu][7] = SAD_OCT_INIT_ORG(56, 59);
	sadScu4_org[yScu][0] = SAD_OCT_INIT_ORG(0, 4);  		sadScu4_org[yScu][1] = SAD_OCT_INIT_ORG(8, 12);  		sadScu4_org[yScu][2] = SAD_OCT_INIT_ORG(16, 20);  		sadScu4_org[yScu][3] = SAD_OCT_INIT_ORG(24, 28);  		sadScu4_org[yScu][4] = SAD_OCT_INIT_ORG(32, 36);  		sadScu4_org[yScu][5] = SAD_OCT_INIT_ORG(40, 44);  		sadScu4_org[yScu][6] = SAD_OCT_INIT_ORG(48, 52);  		sadScu4_org[yScu][7] = SAD_OCT_INIT_ORG(56, 60);
	sadScu5_org[yScu][0] = SAD_OCT_INIT_ORG(0, 5);  		sadScu5_org[yScu][1] = SAD_OCT_INIT_ORG(8, 13);  		sadScu5_org[yScu][2] = SAD_OCT_INIT_ORG(16, 21);  		sadScu5_org[yScu][3] = SAD_OCT_INIT_ORG(24, 29);  		sadScu5_org[yScu][4] = SAD_OCT_INIT_ORG(32, 37);  		sadScu5_org[yScu][5] = SAD_OCT_INIT_ORG(40, 45);  		sadScu5_org[yScu][6] = SAD_OCT_INIT_ORG(48, 53);  		sadScu5_org[yScu][7] = SAD_OCT_INIT_ORG(56, 61);
	sadScu6_org[yScu][0] = SAD_OCT_INIT_ORG(0, 6);  		sadScu6_org[yScu][1] = SAD_OCT_INIT_ORG(8, 14);  		sadScu6_org[yScu][2] = SAD_OCT_INIT_ORG(16, 22);  		sadScu6_org[yScu][3] = SAD_OCT_INIT_ORG(24, 30);  		sadScu6_org[yScu][4] = SAD_OCT_INIT_ORG(32, 38);  		sadScu6_org[yScu][5] = SAD_OCT_INIT_ORG(40, 46);  		sadScu6_org[yScu][6] = SAD_OCT_INIT_ORG(48, 54);  		sadScu6_org[yScu][7] = SAD_OCT_INIT_ORG(56, 62);
	sadScu7_org[yScu][0] = SAD_OCT_INIT_ORG(0, 7);  		sadScu7_org[yScu][1] = SAD_OCT_INIT_ORG(8, 15);  		sadScu7_org[yScu][2] = SAD_OCT_INIT_ORG(16, 23);  		sadScu7_org[yScu][3] = SAD_OCT_INIT_ORG(24, 31);  		sadScu7_org[yScu][4] = SAD_OCT_INIT_ORG(32, 39);  		sadScu7_org[yScu][5] = SAD_OCT_INIT_ORG(40, 47);  		sadScu7_org[yScu][6] = SAD_OCT_INIT_ORG(48, 55);  		sadScu7_org[yScu][7] = SAD_OCT_INIT_ORG(56, 63);
	sadScu8_org[yScu][0] = SAD_OCT_INIT_ORG(0, 8);  		sadScu8_org[yScu][1] = SAD_OCT_INIT_ORG(8, 16);  		sadScu8_org[yScu][2] = SAD_OCT_INIT_ORG(16, 24);  		sadScu8_org[yScu][3] = SAD_OCT_INIT_ORG(24, 32);  		sadScu8_org[yScu][4] = SAD_OCT_INIT_ORG(32, 40);  		sadScu8_org[yScu][5] = SAD_OCT_INIT_ORG(40, 48);  		sadScu8_org[yScu][6] = SAD_OCT_INIT_ORG(48, 56);  		sadScu8_org[yScu][7] = SAD_OCT_INIT_ORG(56, 64);
	sadScu9_org[yScu][0] = SAD_OCT_INIT_ORG(0, 9);  		sadScu9_org[yScu][1] = SAD_OCT_INIT_ORG(8, 17);  		sadScu9_org[yScu][2] = SAD_OCT_INIT_ORG(16, 25);  		sadScu9_org[yScu][3] = SAD_OCT_INIT_ORG(24, 33);  		sadScu9_org[yScu][4] = SAD_OCT_INIT_ORG(32, 41);  		sadScu9_org[yScu][5] = SAD_OCT_INIT_ORG(40, 49);  		sadScu9_org[yScu][6] = SAD_OCT_INIT_ORG(48, 57);  		sadScu9_org[yScu][7] = SAD_OCT_INIT_ORG(56, 65);
	sadScu10_org[yScu][0] = SAD_OCT_INIT_ORG(0, 10);  		sadScu10_org[yScu][1] = SAD_OCT_INIT_ORG(8, 18);  		sadScu10_org[yScu][2] = SAD_OCT_INIT_ORG(16, 26);  		sadScu10_org[yScu][3] = SAD_OCT_INIT_ORG(24, 34);  		sadScu10_org[yScu][4] = SAD_OCT_INIT_ORG(32, 42);  		sadScu10_org[yScu][5] = SAD_OCT_INIT_ORG(40, 50);  		sadScu10_org[yScu][6] = SAD_OCT_INIT_ORG(48, 58);  		sadScu10_org[yScu][7] = SAD_OCT_INIT_ORG(56, 66);
	sadScu11_org[yScu][0] = SAD_OCT_INIT_ORG(0, 11);  		sadScu11_org[yScu][1] = SAD_OCT_INIT_ORG(8, 19);  		sadScu11_org[yScu][2] = SAD_OCT_INIT_ORG(16, 27);  		sadScu11_org[yScu][3] = SAD_OCT_INIT_ORG(24, 35);  		sadScu11_org[yScu][4] = SAD_OCT_INIT_ORG(32, 43);  		sadScu11_org[yScu][5] = SAD_OCT_INIT_ORG(40, 51);  		sadScu11_org[yScu][6] = SAD_OCT_INIT_ORG(48, 59);  		sadScu11_org[yScu][7] = SAD_OCT_INIT_ORG(56, 67);
	sadScu12_org[yScu][0] = SAD_OCT_INIT_ORG(0, 12);  		sadScu12_org[yScu][1] = SAD_OCT_INIT_ORG(8, 20);  		sadScu12_org[yScu][2] = SAD_OCT_INIT_ORG(16, 28);  		sadScu12_org[yScu][3] = SAD_OCT_INIT_ORG(24, 36);  		sadScu12_org[yScu][4] = SAD_OCT_INIT_ORG(32, 44);  		sadScu12_org[yScu][5] = SAD_OCT_INIT_ORG(40, 52);  		sadScu12_org[yScu][6] = SAD_OCT_INIT_ORG(48, 60);  		sadScu12_org[yScu][7] = SAD_OCT_INIT_ORG(56, 68);
	sadScu13_org[yScu][0] = SAD_OCT_INIT_ORG(0, 13);  		sadScu13_org[yScu][1] = SAD_OCT_INIT_ORG(8, 21);  		sadScu13_org[yScu][2] = SAD_OCT_INIT_ORG(16, 29);  		sadScu13_org[yScu][3] = SAD_OCT_INIT_ORG(24, 37);  		sadScu13_org[yScu][4] = SAD_OCT_INIT_ORG(32, 45);  		sadScu13_org[yScu][5] = SAD_OCT_INIT_ORG(40, 53);  		sadScu13_org[yScu][6] = SAD_OCT_INIT_ORG(48, 61);  		sadScu13_org[yScu][7] = SAD_OCT_INIT_ORG(56, 69);
	sadScu14_org[yScu][0] = SAD_OCT_INIT_ORG(0, 14);  		sadScu14_org[yScu][1] = SAD_OCT_INIT_ORG(8, 22);  		sadScu14_org[yScu][2] = SAD_OCT_INIT_ORG(16, 30);  		sadScu14_org[yScu][3] = SAD_OCT_INIT_ORG(24, 38);  		sadScu14_org[yScu][4] = SAD_OCT_INIT_ORG(32, 46);  		sadScu14_org[yScu][5] = SAD_OCT_INIT_ORG(40, 54);  		sadScu14_org[yScu][6] = SAD_OCT_INIT_ORG(48, 62);  		sadScu14_org[yScu][7] = SAD_OCT_INIT_ORG(56, 70);
	sadScu15_org[yScu][0] = SAD_OCT_INIT_ORG(0, 15);  		sadScu15_org[yScu][1] = SAD_OCT_INIT_ORG(8, 23);  		sadScu15_org[yScu][2] = SAD_OCT_INIT_ORG(16, 31);  		sadScu15_org[yScu][3] = SAD_OCT_INIT_ORG(24, 39);  		sadScu15_org[yScu][4] = SAD_OCT_INIT_ORG(32, 47);  		sadScu15_org[yScu][5] = SAD_OCT_INIT_ORG(40, 55);  		sadScu15_org[yScu][6] = SAD_OCT_INIT_ORG(48, 63);  		sadScu15_org[yScu][7] = SAD_OCT_INIT_ORG(56, 71);


	for (reltY = 1; reltY < 8; reltY++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif

		sadScu0_org[yScu][0] += SAD_OCT_ACC_ORG(0, 0);  		sadScu0_org[yScu][1] += SAD_OCT_ACC_ORG(8, 8);  		sadScu0_org[yScu][2] += SAD_OCT_ACC_ORG(16, 16);  		sadScu0_org[yScu][3] += SAD_OCT_ACC_ORG(24, 24);  		sadScu0_org[yScu][4] += SAD_OCT_ACC_ORG(32, 32);  		sadScu0_org[yScu][5] += SAD_OCT_ACC_ORG(40, 40);  		sadScu0_org[yScu][6] += SAD_OCT_ACC_ORG(48, 48);  		sadScu0_org[yScu][7] += SAD_OCT_ACC_ORG(56, 56);
		sadScu1_org[yScu][0] += SAD_OCT_ACC_ORG(0, 1);  		sadScu1_org[yScu][1] += SAD_OCT_ACC_ORG(8, 9);  		sadScu1_org[yScu][2] += SAD_OCT_ACC_ORG(16, 17);  		sadScu1_org[yScu][3] += SAD_OCT_ACC_ORG(24, 25);  		sadScu1_org[yScu][4] += SAD_OCT_ACC_ORG(32, 33);  		sadScu1_org[yScu][5] += SAD_OCT_ACC_ORG(40, 41);  		sadScu1_org[yScu][6] += SAD_OCT_ACC_ORG(48, 49);  		sadScu1_org[yScu][7] += SAD_OCT_ACC_ORG(56, 57);
		sadScu2_org[yScu][0] += SAD_OCT_ACC_ORG(0, 2);  		sadScu2_org[yScu][1] += SAD_OCT_ACC_ORG(8, 10);  		sadScu2_org[yScu][2] += SAD_OCT_ACC_ORG(16, 18);  		sadScu2_org[yScu][3] += SAD_OCT_ACC_ORG(24, 26);  		sadScu2_org[yScu][4] += SAD_OCT_ACC_ORG(32, 34);  		sadScu2_org[yScu][5] += SAD_OCT_ACC_ORG(40, 42);  		sadScu2_org[yScu][6] += SAD_OCT_ACC_ORG(48, 50);  		sadScu2_org[yScu][7] += SAD_OCT_ACC_ORG(56, 58);
		sadScu3_org[yScu][0] += SAD_OCT_ACC_ORG(0, 3);  		sadScu3_org[yScu][1] += SAD_OCT_ACC_ORG(8, 11);  		sadScu3_org[yScu][2] += SAD_OCT_ACC_ORG(16, 19);  		sadScu3_org[yScu][3] += SAD_OCT_ACC_ORG(24, 27);  		sadScu3_org[yScu][4] += SAD_OCT_ACC_ORG(32, 35);  		sadScu3_org[yScu][5] += SAD_OCT_ACC_ORG(40, 43);  		sadScu3_org[yScu][6] += SAD_OCT_ACC_ORG(48, 51);  		sadScu3_org[yScu][7] += SAD_OCT_ACC_ORG(56, 59);
		sadScu4_org[yScu][0] += SAD_OCT_ACC_ORG(0, 4);  		sadScu4_org[yScu][1] += SAD_OCT_ACC_ORG(8, 12);  		sadScu4_org[yScu][2] += SAD_OCT_ACC_ORG(16, 20);  		sadScu4_org[yScu][3] += SAD_OCT_ACC_ORG(24, 28);  		sadScu4_org[yScu][4] += SAD_OCT_ACC_ORG(32, 36);  		sadScu4_org[yScu][5] += SAD_OCT_ACC_ORG(40, 44);  		sadScu4_org[yScu][6] += SAD_OCT_ACC_ORG(48, 52);  		sadScu4_org[yScu][7] += SAD_OCT_ACC_ORG(56, 60);
		sadScu5_org[yScu][0] += SAD_OCT_ACC_ORG(0, 5);  		sadScu5_org[yScu][1] += SAD_OCT_ACC_ORG(8, 13);  		sadScu5_org[yScu][2] += SAD_OCT_ACC_ORG(16, 21);  		sadScu5_org[yScu][3] += SAD_OCT_ACC_ORG(24, 29);  		sadScu5_org[yScu][4] += SAD_OCT_ACC_ORG(32, 37);  		sadScu5_org[yScu][5] += SAD_OCT_ACC_ORG(40, 45);  		sadScu5_org[yScu][6] += SAD_OCT_ACC_ORG(48, 53);  		sadScu5_org[yScu][7] += SAD_OCT_ACC_ORG(56, 61);
		sadScu6_org[yScu][0] += SAD_OCT_ACC_ORG(0, 6);  		sadScu6_org[yScu][1] += SAD_OCT_ACC_ORG(8, 14);  		sadScu6_org[yScu][2] += SAD_OCT_ACC_ORG(16, 22);  		sadScu6_org[yScu][3] += SAD_OCT_ACC_ORG(24, 30);  		sadScu6_org[yScu][4] += SAD_OCT_ACC_ORG(32, 38);  		sadScu6_org[yScu][5] += SAD_OCT_ACC_ORG(40, 46);  		sadScu6_org[yScu][6] += SAD_OCT_ACC_ORG(48, 54);  		sadScu6_org[yScu][7] += SAD_OCT_ACC_ORG(56, 62);
		sadScu7_org[yScu][0] += SAD_OCT_ACC_ORG(0, 7);  		sadScu7_org[yScu][1] += SAD_OCT_ACC_ORG(8, 15);  		sadScu7_org[yScu][2] += SAD_OCT_ACC_ORG(16, 23);  		sadScu7_org[yScu][3] += SAD_OCT_ACC_ORG(24, 31);  		sadScu7_org[yScu][4] += SAD_OCT_ACC_ORG(32, 39);  		sadScu7_org[yScu][5] += SAD_OCT_ACC_ORG(40, 47);  		sadScu7_org[yScu][6] += SAD_OCT_ACC_ORG(48, 55);  		sadScu7_org[yScu][7] += SAD_OCT_ACC_ORG(56, 63);
		sadScu8_org[yScu][0] += SAD_OCT_ACC_ORG(0, 8);  		sadScu8_org[yScu][1] += SAD_OCT_ACC_ORG(8, 16);  		sadScu8_org[yScu][2] += SAD_OCT_ACC_ORG(16, 24);  		sadScu8_org[yScu][3] += SAD_OCT_ACC_ORG(24, 32);  		sadScu8_org[yScu][4] += SAD_OCT_ACC_ORG(32, 40);  		sadScu8_org[yScu][5] += SAD_OCT_ACC_ORG(40, 48);  		sadScu8_org[yScu][6] += SAD_OCT_ACC_ORG(48, 56);  		sadScu8_org[yScu][7] += SAD_OCT_ACC_ORG(56, 64);
		sadScu9_org[yScu][0] += SAD_OCT_ACC_ORG(0, 9);  		sadScu9_org[yScu][1] += SAD_OCT_ACC_ORG(8, 17);  		sadScu9_org[yScu][2] += SAD_OCT_ACC_ORG(16, 25);  		sadScu9_org[yScu][3] += SAD_OCT_ACC_ORG(24, 33);  		sadScu9_org[yScu][4] += SAD_OCT_ACC_ORG(32, 41);  		sadScu9_org[yScu][5] += SAD_OCT_ACC_ORG(40, 49);  		sadScu9_org[yScu][6] += SAD_OCT_ACC_ORG(48, 57);  		sadScu9_org[yScu][7] += SAD_OCT_ACC_ORG(56, 65);
		sadScu10_org[yScu][0] += SAD_OCT_ACC_ORG(0, 10);  		sadScu10_org[yScu][1] += SAD_OCT_ACC_ORG(8, 18);  		sadScu10_org[yScu][2] += SAD_OCT_ACC_ORG(16, 26);  	sadScu10_org[yScu][3] += SAD_OCT_ACC_ORG(24, 34);  	sadScu10_org[yScu][4] += SAD_OCT_ACC_ORG(32, 42);  	sadScu10_org[yScu][5] += SAD_OCT_ACC_ORG(40, 50);  	sadScu10_org[yScu][6] += SAD_OCT_ACC_ORG(48, 58);  		sadScu10_org[yScu][7] += SAD_OCT_ACC_ORG(56, 66);
		sadScu11_org[yScu][0] += SAD_OCT_ACC_ORG(0, 11);  		sadScu11_org[yScu][1] += SAD_OCT_ACC_ORG(8, 19);  		sadScu11_org[yScu][2] += SAD_OCT_ACC_ORG(16, 27);  	sadScu11_org[yScu][3] += SAD_OCT_ACC_ORG(24, 35);  	sadScu11_org[yScu][4] += SAD_OCT_ACC_ORG(32, 43);  	sadScu11_org[yScu][5] += SAD_OCT_ACC_ORG(40, 51);  	sadScu11_org[yScu][6] += SAD_OCT_ACC_ORG(48, 59);  		sadScu11_org[yScu][7] += SAD_OCT_ACC_ORG(56, 67);
		sadScu12_org[yScu][0] += SAD_OCT_ACC_ORG(0, 12);  		sadScu12_org[yScu][1] += SAD_OCT_ACC_ORG(8, 20);  		sadScu12_org[yScu][2] += SAD_OCT_ACC_ORG(16, 28);  	sadScu12_org[yScu][3] += SAD_OCT_ACC_ORG(24, 36);  	sadScu12_org[yScu][4] += SAD_OCT_ACC_ORG(32, 44);  	sadScu12_org[yScu][5] += SAD_OCT_ACC_ORG(40, 52);  	sadScu12_org[yScu][6] += SAD_OCT_ACC_ORG(48, 60);  		sadScu12_org[yScu][7] += SAD_OCT_ACC_ORG(56, 68);
		sadScu13_org[yScu][0] += SAD_OCT_ACC_ORG(0, 13);  		sadScu13_org[yScu][1] += SAD_OCT_ACC_ORG(8, 21);  		sadScu13_org[yScu][2] += SAD_OCT_ACC_ORG(16, 29);  	sadScu13_org[yScu][3] += SAD_OCT_ACC_ORG(24, 37);  	sadScu13_org[yScu][4] += SAD_OCT_ACC_ORG(32, 45);  	sadScu13_org[yScu][5] += SAD_OCT_ACC_ORG(40, 53);  	sadScu13_org[yScu][6] += SAD_OCT_ACC_ORG(48, 61);  		sadScu13_org[yScu][7] += SAD_OCT_ACC_ORG(56, 69);
		sadScu14_org[yScu][0] += SAD_OCT_ACC_ORG(0, 14);  		sadScu14_org[yScu][1] += SAD_OCT_ACC_ORG(8, 22);  		sadScu14_org[yScu][2] += SAD_OCT_ACC_ORG(16, 30);  	sadScu14_org[yScu][3] += SAD_OCT_ACC_ORG(24, 38);  	sadScu14_org[yScu][4] += SAD_OCT_ACC_ORG(32, 46);  	sadScu14_org[yScu][5] += SAD_OCT_ACC_ORG(40, 54);  	sadScu14_org[yScu][6] += SAD_OCT_ACC_ORG(48, 62);  		sadScu14_org[yScu][7] += SAD_OCT_ACC_ORG(56, 70);
		sadScu15_org[yScu][0] += SAD_OCT_ACC_ORG(0, 15);  		sadScu15_org[yScu][1] += SAD_OCT_ACC_ORG(8, 23);  		sadScu15_org[yScu][2] += SAD_OCT_ACC_ORG(16, 31);  	sadScu15_org[yScu][3] += SAD_OCT_ACC_ORG(24, 39);  	sadScu15_org[yScu][4] += SAD_OCT_ACC_ORG(32, 47);  	sadScu15_org[yScu][5] += SAD_OCT_ACC_ORG(40, 55);  	sadScu15_org[yScu][6] += SAD_OCT_ACC_ORG(48, 63);  		sadScu15_org[yScu][7] += SAD_OCT_ACC_ORG(56, 71);


	}


}

void calcSadScuLv0TestCaseMore_myAlgorithm_stage2(
#if BW_DEBUG
	U10 sadScu0_org[8][8],
	U10 sadScu1_org[8][8],
	U10 sadScu2_org[8][8],
	U10 sadScu3_org[8][8],
	U10 sadScu4_org[8][8],
	U10 sadScu5_org[8][8],
	U10 sadScu6_org[8][8],
	U10 sadScu7_org[8][8],
	U10 sadScu8_org[8][8],
	U10 sadScu9_org[8][8],
	U10 sadScu10_org[8][8],
	U10 sadScu11_org[8][8],
	U10 sadScu12_org[8][8],
	U10 sadScu13_org[8][8],
	U10 sadScu14_org[8][8],
	U10 sadScu15_org[8][8],
	U10 swSubLv0_org[MAX_CU_H + TWO_STAGE_2_SR_H][MAX_CU_H + TWO_STAGE_2_SR_W],
	U10 org_org[64][64],
#else
	pel sadScu0_org[8][8],
	pel sadScu1_org[8][8],
	pel sadScu2_org[8][8],
	pel sadScu3_org[8][8],
	pel sadScu4_org[8][8],
	pel sadScu5_org[8][8],
	pel sadScu6_org[8][8],
	pel sadScu7_org[8][8],
	pel sadScu8_org[8][8],
	pel sadScu9_org[8][8],
	pel sadScu10_org[8][8],
	pel sadScu11_org[8][8],
	pel sadScu12_org[8][8],
	pel sadScu13_org[8][8],
	pel sadScu14_org[8][8],
	pel sadScu15_org[8][8],

	pel swSubLv0_org[MAX_CU_H + TWO_STAGE_2_SR_H][MAX_CU_H + TWO_STAGE_2_SR_W],
	pel org_org[64][64],
#endif

	U7 baseH,
	U4 bit_depth
)
{

#pragma HLS inline off

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON

#if IME_DEBUG_calcSadScuLv0TestCaseMore
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp0 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp1 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp2 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp3 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp4 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp5 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp6 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp7 complete dim=1
#else
#pragma HLS ARRAY_PARTITION variable=swSubLv0_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=org_org complete dim=2

	//#pragma HLS ARRAY_PARTITION variable=swSubLv0 complete dim=1
	//#pragma HLS ARRAY_PARTITION variable=org complete dim=1
#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore

#pragma HLS ARRAY_PARTITION variable=sadScu0_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu1_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu2_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu3_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu4_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu5_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu6_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu7_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu8_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu9_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu10_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu11_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu12_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu13_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu14_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScu15_org complete dim=0


#endif
#endif	// #if !IME_PRAGMA_ON_OP

	U8 yScu;

	for (yScu = 0; yScu < 8; yScu++)
	{
		calcLineSadMore_myAlgorithm_stage2(
			swSubLv0_org, org_org,
			sadScu0_org, sadScu1_org, sadScu2_org, sadScu3_org, sadScu4_org, sadScu5_org, sadScu6_org, sadScu7_org,
			sadScu8_org, sadScu9_org, sadScu10_org, sadScu11_org, sadScu12_org, sadScu13_org, sadScu14_org, sadScu15_org,

			yScu, (yScu << 3) + baseH, yScu << 3, bit_depth);
	}
}

void compareBestInfo_stage2(
	S14 mvx, S14 mvy, U32 lambda_mv, U2 num_refp, S2 refi,
	U32 sadTree64x64[1][1],
	U32 sadTree32x32[2][2], U32 sadTree64x32[1][2], U32 sadTree32x64[2][1],
	U32 sadTree16x16[4][4], U32 sadTree32x16[2][4], U32 sadTree16x32[4][2], U32 sadTree64x16[1][4], U32 sadTree16x64[4][1],
	U16 sadTree8x8[8][8],
	U16 sadTree16x8[4][8], U16 sadTree8x16[8][4], U16 sadTree32x8[2][8], U16 sadTree8x32[8][2], U32 sadTree64x8[1][8], U32 sadTree8x64[8][1],

	U32 sadTree64x64Cur_org[1][1],
	U32 sadTree32x32Cur_org[2][2], U32 sadTree64x32Cur_org[1][2], U32 sadTree32x64Cur_org[2][1],
	U32 sadTree16x16Cur_org[4][4], U32 sadTree32x16Cur_org[2][4], U32 sadTree16x32Cur_org[4][2], U32 sadTree64x16Cur_org[1][4], U32 sadTree16x64Cur_org[4][1],
#if BW_DEBUG
	U10 sadTree8x8Cur_org[8][8],
#else
	pel sadTree8x8Cur_org[8][8],
#endif
	U16 sadTree16x8Cur_org[4][8], U16 sadTree8x16Cur_org[8][4], U16 sadTree32x8Cur_org[2][8], U16 sadTree8x32Cur_org[8][2], U32 sadTree64x8Cur_org[1][8], U32 sadTree8x64Cur_org[8][1],

	S14 sadTree64x64Mv[1][1][2],
	S14 sadTree32x32Mv[2][2][2], S14 sadTree64x32Mv[1][2][2], S14 sadTree32x64Mv[2][1][2],
	S14 sadTree16x16Mv[4][4][2], S14 sadTree32x16Mv[2][4][2], S14 sadTree16x32Mv[4][2][2], S14 sadTree64x16Mv[1][4][2], S14 sadTree16x64Mv[4][1][2],
	S14 sadTree8x8Mv[8][8][2],

	S14 sadTree16x8Mv[4][8][2], S14 sadTree8x16Mv[8][4][2], S14 sadTree32x8Mv[2][8][2], S14 sadTree8x32Mv[8][2][2], S14 sadTree64x8Mv[1][8][2], S14 sadTree8x64Mv[8][1][2],
	S14 sadTree64x64PMv[1][1][2],
	S14 sadTree32x32PMv[2][2][2], S14 sadTree64x32PMv[1][2][2], S14 sadTree32x64PMv[2][1][2],
	S14 sadTree16x16PMv[4][4][2], S14 sadTree32x16PMv[2][4][2], S14 sadTree16x32PMv[4][2][2], S14 sadTree64x16PMv[1][4][2], S14 sadTree16x64PMv[4][1][2],
	S14 sadTree8x8PMv[8][8][2]
	, S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2]
)
{

	sadTree64x64Cur_org[0][0] += getMvRcost(lambda_mv, sadTree64x64PMv[0][0][0] - mvx, sadTree64x64PMv[0][0][1] - mvy, num_refp, refi);
	if (sadTree64x64Cur_org[0][0] < sadTree64x64[0][0])
	{
		sadTree64x64[0][0] = sadTree64x64Cur_org[0][0];
		sadTree64x64Mv[0][0][0] = mvx;
		sadTree64x64Mv[0][0][1] = mvy;
	}

	compareBestInfo8(mvx, mvy, lambda_mv, num_refp, refi,
		sadTree8x8,
		sadTree16x8, sadTree8x16, sadTree32x8, sadTree8x32, sadTree64x8, sadTree8x64,

		sadTree8x8Cur_org,
		sadTree16x8Cur_org, sadTree8x16Cur_org, sadTree32x8Cur_org, sadTree8x32Cur_org, sadTree64x8Cur_org, sadTree8x64Cur_org,
		sadTree8x8Mv,
		sadTree16x8Mv, sadTree8x16Mv, sadTree32x8Mv, sadTree8x32Mv, sadTree64x8Mv, sadTree8x64Mv,
		sadTree8x8PMv
		, sadTree16x8PMv, sadTree8x16PMv, sadTree32x8PMv, sadTree8x32PMv, sadTree64x8PMv, sadTree8x64PMv
	);


	compareBestInfo16(mvx, mvy, lambda_mv, num_refp, refi,
		sadTree16x16, sadTree32x16, sadTree16x32, sadTree64x16, sadTree16x64,

		sadTree16x16Cur_org, sadTree32x16Cur_org, sadTree16x32Cur_org, sadTree64x16Cur_org, sadTree16x64Cur_org,
		sadTree16x16Mv, sadTree32x16Mv, sadTree16x32Mv, sadTree64x16Mv, sadTree16x64Mv,
		sadTree16x16PMv, sadTree32x16PMv, sadTree16x32PMv, sadTree64x16PMv, sadTree16x64PMv);


	compareBestInfo32(mvx, mvy, lambda_mv, num_refp, refi,
		sadTree32x32, sadTree64x32, sadTree32x64,
		sadTree32x32Cur_org, sadTree64x32Cur_org, sadTree32x64Cur_org,

		sadTree32x32Mv, sadTree64x32Mv, sadTree32x64Mv,
		sadTree32x32PMv, sadTree64x32PMv, sadTree32x64PMv);


}

void constructSadTreeAndCompare_stage2(
	U7 x, U7 y,
#if BW_DEBUG
	U10 sadScu_org[8][8],
#else
	pel sadScu_org[8][8],
#endif
	S14 posLTLv0[2],
	U32 lambdaMv,
	U2 numRefp,
	S2 refi,
	S14 rangeLv0[2][2],
	U32 sadTree64x64Best[1][1],
	U32 sadTree32x32Best[2][2], U32 sadTree64x32Best[1][2], U32 sadTree32x64Best[2][1],
	U32 sadTree16x16Best[4][4], U32 sadTree32x16Best[2][4], U32 sadTree16x32Best[4][2], U32 sadTree64x16Best[1][4], U32 sadTree16x64Best[4][1],
	U16 sadTree8x8Best[8][8], U16 sadTree16x8Best[4][8], U16 sadTree8x16Best[8][4], U16 sadTree32x8Best[2][8], U16 sadTree8x32Best[8][2], U32 sadTree64x8Best[1][8], U32 sadTree8x64Best[8][1],
	S14 sadTree64x64Mv[1][1][2],
	S14 sadTree32x32Mv[2][2][2], S14 sadTree64x32Mv[1][2][2], S14 sadTree32x64Mv[2][1][2],
	S14 sadTree16x16Mv[4][4][2], S14 sadTree32x16Mv[2][4][2], S14 sadTree16x32Mv[4][2][2], S14 sadTree64x16Mv[1][4][2], S14 sadTree16x64Mv[4][1][2],
	S14 sadTree8x8Mv[8][8][2], S14 sadTree16x8Mv[4][8][2], S14 sadTree8x16Mv[8][4][2], S14 sadTree32x8Mv[2][8][2], S14 sadTree8x32Mv[8][2][2], S14 sadTree64x8Mv[1][8][2], S14 sadTree8x64Mv[8][1][2],
	S14 sadTree64x64PMv[1][1][2],
	S14 sadTree32x32PMv[2][2][2], S14 sadTree64x32PMv[1][2][2], S14 sadTree32x64PMv[2][1][2],
	S14 sadTree16x16PMv[4][4][2], S14 sadTree32x16PMv[2][4][2], S14 sadTree16x32PMv[4][2][2], S14 sadTree64x16PMv[1][4][2], S14 sadTree16x64PMv[4][1][2],
	S14 sadTree8x8PMv[8][8][2], S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2])
{
#if IME_PRAGMA_ON
#pragma HLS pipeline

#endif

	U32 sadTree64x64_org[1][1];
	U32 sadTree32x32_org[2][2]; U32 sadTree64x32_org[1][2]; U32 sadTree32x64_org[2][1];
	U32 sadTree16x16_org[4][4]; U32 sadTree32x16_org[2][4]; U32 sadTree16x32_org[4][2]; U32 sadTree64x16_org[1][4]; U32 sadTree16x64_org[4][1];
	U16 sadTree16x8_org[4][8];	U16 sadTree8x16_org[8][4];	U16 sadTree32x8_org[2][8];	U16 sadTree8x32_org[8][2];	U32 sadTree64x8_org[1][8]; U32 sadTree8x64_org[8][1];


	constructSadTreeDepth3(sadScu_org, sadTree16x16_org, sadTree16x8_org, sadTree8x16_org, sadTree32x8_org, sadTree8x32_org, sadTree64x8_org, sadTree8x64_org
	);

	constructSadTreeDepth2(sadTree16x16_org, sadTree32x32_org, sadTree32x16_org, sadTree16x32_org, sadTree64x16_org, sadTree16x64_org
	);

	constructSadTreeDepth1(sadTree32x32_org, sadTree64x64_org, sadTree64x32_org, sadTree32x64_org
	);

	compareBestInfo_stage2(
		posLTLv0[0] + (x << 2), posLTLv0[1] + (y << 2), lambdaMv, numRefp, refi,

		sadTree64x64Best,
		sadTree32x32Best, sadTree64x32Best, sadTree32x64Best,
		sadTree16x16Best, sadTree32x16Best, sadTree16x32Best, sadTree64x16Best, sadTree16x64Best,
		sadTree8x8Best,
		sadTree16x8Best, sadTree8x16Best, sadTree32x8Best, sadTree8x32Best, sadTree64x8Best, sadTree8x64Best,

		sadTree64x64_org,
		sadTree32x32_org, sadTree64x32_org, sadTree32x64_org,
		sadTree16x16_org, sadTree32x16_org, sadTree16x32_org, sadTree64x16_org, sadTree16x64_org,
		sadScu_org,
		sadTree16x8_org, sadTree8x16_org, sadTree32x8_org, sadTree8x32_org, sadTree64x8_org, sadTree8x64_org,

		sadTree64x64Mv,
		sadTree32x32Mv, sadTree64x32Mv, sadTree32x64Mv,
		sadTree16x16Mv, sadTree32x16Mv, sadTree16x32Mv, sadTree64x16Mv, sadTree16x64Mv,
		sadTree8x8Mv,
		sadTree16x8Mv, sadTree8x16Mv, sadTree32x8Mv, sadTree8x32Mv, sadTree64x8Mv, sadTree8x64Mv,

		sadTree64x64PMv,
		sadTree32x32PMv, sadTree64x32PMv, sadTree32x64PMv,
		sadTree16x16PMv, sadTree32x16PMv, sadTree16x32PMv, sadTree64x16PMv, sadTree16x64PMv,
		sadTree8x8PMv
		, sadTree16x8PMv, sadTree8x16PMv, sadTree32x8PMv, sadTree8x32PMv, sadTree64x8PMv, sadTree8x64PMv
	);

}

#define CONSTRUCT_AND_COMPARE_STAGE2(idx,sadScu_org) constructSadTreeAndCompare_stage2(idx, y, sadScu_org, posLTLv0, lambdaMv, numRefp, refi, rangeLv0, \
	sadTree64x64Best0, sadTree32x32Best0, sadTree64x32Best0, sadTree32x64Best0, sadTree16x16Best0, sadTree32x16Best0, sadTree16x32Best0, sadTree64x16Best0, sadTree16x64Best0, \
	sadTree8x8Best0, sadTree16x8Best0, sadTree8x16Best0, sadTree32x8Best0, sadTree8x32Best0, sadTree64x8Best0, sadTree8x64Best0, \
	sadTree64x64Mv0, \
	sadTree32x32Mv0, sadTree64x32Mv0, sadTree32x64Mv0, \
	sadTree16x16Mv0, sadTree32x16Mv0, sadTree16x32Mv0, sadTree64x16Mv0, sadTree16x64Mv0, \
	sadTree8x8Mv0, sadTree16x8Mv0, sadTree8x16Mv0, sadTree32x8Mv0, sadTree8x32Mv0, sadTree64x8Mv0, sadTree8x64Mv0, \
	sadTree64x64PMv, \
	sadTree32x32PMv, sadTree64x32PMv, sadTree32x64PMv, \
	sadTree16x16PMv, sadTree32x16PMv, sadTree16x32PMv, sadTree64x16PMv, sadTree16x64PMv, \
	sadTree8x8PMv, sadTree16x8PMv, sadTree8x16PMv, sadTree32x8PMv, sadTree8x32PMv, sadTree64x8PMv, sadTree8x64PMv)

void searchFullLv0TestCase_myAlgorithm_stage2(
#if BW_DEBUG
	U10 swSubLv0_org[MAX_CU_H + TWO_STAGE_2_SR_H][MAX_CU_H + TWO_STAGE_2_SR_W],
#else
	pel swSubLv0_org[MAX_CU_H + TWO_STAGE_2_SR_H][MAX_CU_H + TWO_STAGE_2_SR_W],
#endif
	S14 posLTLv0[2],
	U32 lambdaMv,
	U2 numRefp,
	S2 refi,
	S14 rangeLv0[2][2],

#if BW_DEBUG
	U10 org_org[64][64],
#else
	pel org_org[64][64],
#endif

	S14 sadTree64x64Mv0[1][1][2],
	S14 sadTree32x32Mv0[2][2][2], S14 sadTree64x32Mv0[1][2][2], S14 sadTree32x64Mv0[2][1][2],
	S14 sadTree16x16Mv0[4][4][2], S14 sadTree32x16Mv0[2][4][2], S14 sadTree16x32Mv0[4][2][2], S14 sadTree64x16Mv0[1][4][2], S14 sadTree16x64Mv0[4][1][2],
	S14 sadTree8x8Mv0[8][8][2], S14 sadTree16x8Mv0[4][8][2], S14 sadTree8x16Mv0[8][4][2], S14 sadTree32x8Mv0[2][8][2], S14 sadTree8x32Mv0[8][2][2], S14 sadTree64x8Mv0[1][8][2], S14 sadTree8x64Mv0[8][1][2],
	S14 sadTree64x64PMv[1][1][2],
	S14 sadTree32x32PMv[2][2][2], S14 sadTree64x32PMv[1][2][2], S14 sadTree32x64PMv[2][1][2],
	S14 sadTree16x16PMv[4][4][2], S14 sadTree32x16PMv[2][4][2], S14 sadTree16x32PMv[4][2][2], S14 sadTree64x16PMv[1][4][2], S14 sadTree16x64PMv[4][1][2],
	S14 sadTree8x8PMv[8][8][2], S14 sadTree16x8PMv[4][8][2], S14 sadTree8x16PMv[8][4][2], S14 sadTree32x8PMv[2][8][2], S14 sadTree8x32PMv[8][2][2], S14 sadTree64x8PMv[1][8][2], S14 sadTree8x64PMv[8][1][2],
	U32 sadTree64x64Best0[1][1],
	U32 sadTree32x32Best0[2][2], U32 sadTree64x32Best0[1][2], U32 sadTree32x64Best0[2][1],
	U32 sadTree16x16Best0[4][4], U32 sadTree32x16Best0[2][4], U32 sadTree16x32Best0[4][2], U32 sadTree64x16Best0[1][4], U32 sadTree16x64Best0[4][1],
	U16 sadTree8x8Best0[8][8], U16  sadTree16x8Best0[4][8], U16  sadTree8x16Best0[8][4], U16 sadTree32x8Best0[2][8], U16 sadTree8x32Best0[8][2], U32 sadTree64x8Best0[1][8], U32 sadTree8x64Best0[8][1], U4 bit_depth)
{

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON

#if IME_DEBUG_calcSadScuLv0TestCaseMore
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp0_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp1_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp2_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp3_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp4_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp5_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp6_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp7_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp0_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp1_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp2_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp3_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp4_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp5_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp6_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp7_org complete dim=2
#else
#pragma HLS ARRAY_PARTITION variable=swSubLv0_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=org_org complete dim=2
#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
	//=====================================================
#if IME_DEBUG_calcSadScuLv0TestCaseMore
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp0 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp1 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp2 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp3 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp4 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp5 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp6 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp7 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp0 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp1 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp2 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp3 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp4 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp5 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp6 complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp7 complete dim=1
#else
//#pragma HLS ARRAY_PARTITION variable=swSubLv0 complete dim=1
//#pragma HLS ARRAY_PARTITION variable=org complete dim=1
#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore

#pragma HLS ARRAY_PARTITION variable=sadTree64x64Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64Mv0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8PMv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64PMv complete dim=0

#endif
#endif	// #if !IME_PRAGMA_ON_OP

#if BW_DEBUG
	static U10 sadScuUp0_org[8][8]; static U10 sadScuUp1_org[8][8]; static U10 sadScuUp2_org[8][8]; static U10 sadScuUp3_org[8][8];
	static U10 sadScuUp4_org[8][8]; static U10 sadScuUp5_org[8][8]; static U10 sadScuUp6_org[8][8]; static U10 sadScuUp7_org[8][8];
	static U10 sadScuUp8_org[8][8]; static U10 sadScuUp9_org[8][8]; static U10 sadScuUp10_org[8][8]; static U10 sadScuUp11_org[8][8];
	static U10 sadScuUp12_org[8][8]; static U10 sadScuUp13_org[8][8]; static U10 sadScuUp14_org[8][8]; static U10 sadScuUp15_org[8][8];
#else
	static pel sadScuUp0_org[8][8]; static pel sadScuUp1_org[8][8]; static pel sadScuUp2_org[8][8]; static pel sadScuUp3_org[8][8];
	static pel sadScuUp4_org[8][8]; static pel sadScuUp5_org[8][8]; static pel sadScuUp6_org[8][8]; static pel sadScuUp7_org[8][8];
	static pel sadScuUp8_org[8][8]; static pel sadScuUp9_org[8][8]; static pel sadScuUp10_org[8][8]; static pel sadScuUp11_org[8][8];
	static pel sadScuUp12_org[8][8]; static pel sadScuUp13_org[8][8]; static pel sadScuUp14_org[8][8]; static pel sadScuUp15_org[8][8];
#endif


#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadScuUp0_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp1_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp2_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp3_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp4_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp5_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp6_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp7_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp8_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp9_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp10_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp11_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp12_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp13_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp14_org complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadScuUp15_org complete dim=0
#endif
#endif	// #if !IME_PRAGMA_ON_OP

	U7 y;

#if !IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadTree64x64Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8Best0 complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64Best0 complete dim=0

#endif
#endif	// #if !IME_PRAGMA_ON_OP

	initBestInfo__myAlgorithm_stage1_and_2(sadTree64x64Best0,
		sadTree32x32Best0, sadTree64x32Best0, sadTree32x64Best0,
		sadTree16x16Best0, sadTree32x16Best0, sadTree16x32Best0, sadTree64x16Best0, sadTree16x64Best0,
		sadTree8x8Best0, sadTree16x8Best0, sadTree8x16Best0, sadTree32x8Best0, sadTree8x32Best0, sadTree64x8Best0, sadTree8x64Best0);


	for (y = 0; y < TWO_STAGE_2_SR_H; y++)
	{

		calcSadScuLv0TestCaseMore_myAlgorithm_stage2(
			sadScuUp0_org, sadScuUp1_org, sadScuUp2_org, sadScuUp3_org, sadScuUp4_org, sadScuUp5_org, sadScuUp6_org, sadScuUp7_org,
			sadScuUp8_org, sadScuUp9_org, sadScuUp10_org, sadScuUp11_org, sadScuUp12_org, sadScuUp13_org, sadScuUp14_org, sadScuUp15_org,

			swSubLv0_org,
			org_org,
			y,
			bit_depth
		);


		CONSTRUCT_AND_COMPARE_STAGE2(0, sadScuUp0_org
		);
		CONSTRUCT_AND_COMPARE_STAGE2(1, sadScuUp1_org
		);
		CONSTRUCT_AND_COMPARE_STAGE2(2, sadScuUp2_org
		);
		CONSTRUCT_AND_COMPARE_STAGE2(3, sadScuUp3_org
		);
		CONSTRUCT_AND_COMPARE_STAGE2(4, sadScuUp4_org
		);
		CONSTRUCT_AND_COMPARE_STAGE2(5, sadScuUp5_org
		);
		CONSTRUCT_AND_COMPARE_STAGE2(6, sadScuUp6_org
		);
		CONSTRUCT_AND_COMPARE_STAGE2(7, sadScuUp7_org
		);
		CONSTRUCT_AND_COMPARE_STAGE2(8, sadScuUp8_org
		);
		CONSTRUCT_AND_COMPARE_STAGE2(9, sadScuUp9_org
		);
		CONSTRUCT_AND_COMPARE_STAGE2(10, sadScuUp10_org
		);
		CONSTRUCT_AND_COMPARE_STAGE2(11, sadScuUp11_org
		);
		CONSTRUCT_AND_COMPARE_STAGE2(12, sadScuUp12_org
		);
		CONSTRUCT_AND_COMPARE_STAGE2(13, sadScuUp13_org
		);
		CONSTRUCT_AND_COMPARE_STAGE2(14, sadScuUp14_org
		);
		CONSTRUCT_AND_COMPARE_STAGE2(15, sadScuUp15_org
		);
	}

}


//============================================================================================================================================================================================================================
//============================================================================================================================================================================================================================



void copyMvToMemory(S14 sadTree64x64MvDst[1][1][2],
	S14 sadTree32x32MvDst[2][2][2], S14 sadTree64x32MvDst[1][2][2],
	S14 sadTree32x64MvDst[2][1][2], S14 sadTree16x16MvDst[4][4][2],
	S14 sadTree32x16MvDst[2][4][2], S14 sadTree16x32MvDst[4][2][2],
	S14 sadTree64x16MvDst[1][4][2], S14 sadTree16x64MvDst[4][1][2],
	S14 sadTree8x8MvDst[8][8][2], S14 sadTree16x8MvDst[4][8][2],
	S14 sadTree8x16MvDst[8][4][2], S14 sadTree32x8MvDst[2][8][2],
	S14 sadTree8x32MvDst[8][2][2], S14 sadTree64x8MvDst[1][8][2],
	S14 sadTree8x64MvDst[8][1][2], S14 sadTree64x64PMvDst[1][1][2],
	S14 sadTree32x32PMvDst[2][2][2], S14 sadTree64x32PMvDst[1][2][2],
	S14 sadTree32x64PMvDst[2][1][2], S14 sadTree16x16PMvDst[4][4][2],
	S14 sadTree32x16PMvDst[2][4][2], S14 sadTree16x32PMvDst[4][2][2],
	S14 sadTree64x16PMvDst[1][4][2], S14 sadTree16x64PMvDst[4][1][2],
	S14 sadTree8x8PMvDst[8][8][2], S14 sadTree16x8PMvDst[4][8][2],
	S14 sadTree8x16PMvDst[8][4][2], S14 sadTree32x8PMvDst[2][8][2],
	S14 sadTree8x32PMvDst[8][2][2], S14 sadTree64x8PMvDst[1][8][2],
	S14 sadTree8x64PMvDst[8][1][2], S14 sadTree64x64MvSrc[1][1][2],
	S14 sadTree32x32MvSrc[2][2][2], S14 sadTree64x32MvSrc[1][2][2],
	S14 sadTree32x64MvSrc[2][1][2], S14 sadTree16x16MvSrc[4][4][2],
	S14 sadTree32x16MvSrc[2][4][2], S14 sadTree16x32MvSrc[4][2][2],
	S14 sadTree64x16MvSrc[1][4][2], S14 sadTree16x64MvSrc[4][1][2],
	S14 sadTree8x8MvSrc[8][8][2], S14 sadTree16x8MvSrc[4][8][2],
	S14 sadTree8x16MvSrc[8][4][2], S14 sadTree32x8MvSrc[2][8][2],
	S14 sadTree8x32MvSrc[8][2][2], S14 sadTree64x8MvSrc[1][8][2],
	S14 sadTree8x64MvSrc[8][1][2], S14 sadTree64x64PMvSrc[1][1][2],
	S14 sadTree32x32PMvSrc[2][2][2], S14 sadTree64x32PMvSrc[1][2][2],
	S14 sadTree32x64PMvSrc[2][1][2], S14 sadTree16x16PMvSrc[4][4][2],
	S14 sadTree32x16PMvSrc[2][4][2], S14 sadTree16x32PMvSrc[4][2][2],
	S14 sadTree64x16PMvSrc[1][4][2], S14 sadTree16x64PMvSrc[4][1][2],
	S14 sadTree8x8PMvSrc[8][8][2], S14 sadTree16x8PMvSrc[4][8][2],
	S14 sadTree8x16PMvSrc[8][4][2], S14 sadTree32x8PMvSrc[2][8][2],
	S14 sadTree8x32PMvSrc[8][2][2], S14 sadTree64x8PMvSrc[1][8][2],
	S14 sadTree8x64PMvSrc[8][1][2]) {

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadTree64x64MvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32MvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32MvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64MvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16MvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16MvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32MvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16MvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64MvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8MvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8MvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16MvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8MvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32MvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8MvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64MvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x64PMvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x32PMvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x32PMvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x64PMvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x16PMvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x16PMvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x32PMvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x16PMvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x64PMvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x8PMvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8PMvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16PMvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8PMvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32PMvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree64x8PMvSrc complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x64PMvSrc complete dim=0
#endif
	sadTree64x64MvDst[0][0][0] = sadTree64x64MvSrc[0][0][0];
	sadTree64x64MvDst[0][0][1] = sadTree64x64MvSrc[0][0][1];
	sadTree64x64PMvDst[0][0][0] = sadTree64x64PMvSrc[0][0][0];
	sadTree64x64PMvDst[0][0][1] = sadTree64x64PMvSrc[0][0][1];
	sadTree64x32MvDst[0][0][0] = sadTree64x32MvSrc[0][0][0];
	sadTree64x32MvDst[0][0][1] = sadTree64x32MvSrc[0][0][1];
	sadTree64x32PMvDst[0][0][0] = sadTree64x32PMvSrc[0][0][0];
	sadTree64x32PMvDst[0][0][1] = sadTree64x32PMvSrc[0][0][1];
	sadTree64x32MvDst[0][1][0] = sadTree64x32MvSrc[0][1][0];
	sadTree64x32MvDst[0][1][1] = sadTree64x32MvSrc[0][1][1];
	sadTree64x32PMvDst[0][1][0] = sadTree64x32PMvSrc[0][1][0];
	sadTree64x32PMvDst[0][1][1] = sadTree64x32PMvSrc[0][1][1];
	sadTree64x16MvDst[0][0][0] = sadTree64x16MvSrc[0][0][0];
	sadTree64x16MvDst[0][0][1] = sadTree64x16MvSrc[0][0][1];
	sadTree64x16PMvDst[0][0][0] = sadTree64x16PMvSrc[0][0][0];
	sadTree64x16PMvDst[0][0][1] = sadTree64x16PMvSrc[0][0][1];
	sadTree64x16MvDst[0][1][0] = sadTree64x16MvSrc[0][1][0];
	sadTree64x16MvDst[0][1][1] = sadTree64x16MvSrc[0][1][1];
	sadTree64x16PMvDst[0][1][0] = sadTree64x16PMvSrc[0][1][0];
	sadTree64x16PMvDst[0][1][1] = sadTree64x16PMvSrc[0][1][1];
	sadTree64x16MvDst[0][2][0] = sadTree64x16MvSrc[0][2][0];
	sadTree64x16MvDst[0][2][1] = sadTree64x16MvSrc[0][2][1];
	sadTree64x16PMvDst[0][2][0] = sadTree64x16PMvSrc[0][2][0];
	sadTree64x16PMvDst[0][2][1] = sadTree64x16PMvSrc[0][2][1];
	sadTree64x16MvDst[0][3][0] = sadTree64x16MvSrc[0][3][0];
	sadTree64x16MvDst[0][3][1] = sadTree64x16MvSrc[0][3][1];
	sadTree64x16PMvDst[0][3][0] = sadTree64x16PMvSrc[0][3][0];
	sadTree64x16PMvDst[0][3][1] = sadTree64x16PMvSrc[0][3][1];
	sadTree64x8MvDst[0][0][0] = sadTree64x8MvSrc[0][0][0];
	sadTree64x8MvDst[0][0][1] = sadTree64x8MvSrc[0][0][1];
	sadTree64x8PMvDst[0][0][0] = sadTree64x8PMvSrc[0][0][0];
	sadTree64x8PMvDst[0][0][1] = sadTree64x8PMvSrc[0][0][1];
	sadTree64x8MvDst[0][1][0] = sadTree64x8MvSrc[0][1][0];
	sadTree64x8MvDst[0][1][1] = sadTree64x8MvSrc[0][1][1];
	sadTree64x8PMvDst[0][1][0] = sadTree64x8PMvSrc[0][1][0];
	sadTree64x8PMvDst[0][1][1] = sadTree64x8PMvSrc[0][1][1];
	sadTree64x8MvDst[0][2][0] = sadTree64x8MvSrc[0][2][0];
	sadTree64x8MvDst[0][2][1] = sadTree64x8MvSrc[0][2][1];
	sadTree64x8PMvDst[0][2][0] = sadTree64x8PMvSrc[0][2][0];
	sadTree64x8PMvDst[0][2][1] = sadTree64x8PMvSrc[0][2][1];
	sadTree64x8MvDst[0][3][0] = sadTree64x8MvSrc[0][3][0];
	sadTree64x8MvDst[0][3][1] = sadTree64x8MvSrc[0][3][1];
	sadTree64x8PMvDst[0][3][0] = sadTree64x8PMvSrc[0][3][0];
	sadTree64x8PMvDst[0][3][1] = sadTree64x8PMvSrc[0][3][1];
	sadTree64x8MvDst[0][4][0] = sadTree64x8MvSrc[0][4][0];
	sadTree64x8MvDst[0][4][1] = sadTree64x8MvSrc[0][4][1];
	sadTree64x8PMvDst[0][4][0] = sadTree64x8PMvSrc[0][4][0];
	sadTree64x8PMvDst[0][4][1] = sadTree64x8PMvSrc[0][4][1];
	sadTree64x8MvDst[0][5][0] = sadTree64x8MvSrc[0][5][0];
	sadTree64x8MvDst[0][5][1] = sadTree64x8MvSrc[0][5][1];
	sadTree64x8PMvDst[0][5][0] = sadTree64x8PMvSrc[0][5][0];
	sadTree64x8PMvDst[0][5][1] = sadTree64x8PMvSrc[0][5][1];
	sadTree64x8MvDst[0][6][0] = sadTree64x8MvSrc[0][6][0];
	sadTree64x8MvDst[0][6][1] = sadTree64x8MvSrc[0][6][1];
	sadTree64x8PMvDst[0][6][0] = sadTree64x8PMvSrc[0][6][0];
	sadTree64x8PMvDst[0][6][1] = sadTree64x8PMvSrc[0][6][1];
	sadTree64x8MvDst[0][7][0] = sadTree64x8MvSrc[0][7][0];
	sadTree64x8MvDst[0][7][1] = sadTree64x8MvSrc[0][7][1];
	sadTree64x8PMvDst[0][7][0] = sadTree64x8PMvSrc[0][7][0];
	sadTree64x8PMvDst[0][7][1] = sadTree64x8PMvSrc[0][7][1];
	sadTree32x64MvDst[0][0][0] = sadTree32x64MvSrc[0][0][0];
	sadTree32x64MvDst[0][0][1] = sadTree32x64MvSrc[0][0][1];
	sadTree32x64PMvDst[0][0][0] = sadTree32x64PMvSrc[0][0][0];
	sadTree32x64PMvDst[0][0][1] = sadTree32x64PMvSrc[0][0][1];
	sadTree32x64MvDst[1][0][0] = sadTree32x64MvSrc[1][0][0];
	sadTree32x64MvDst[1][0][1] = sadTree32x64MvSrc[1][0][1];
	sadTree32x64PMvDst[1][0][0] = sadTree32x64PMvSrc[1][0][0];
	sadTree32x64PMvDst[1][0][1] = sadTree32x64PMvSrc[1][0][1];
	sadTree32x32MvDst[0][0][0] = sadTree32x32MvSrc[0][0][0];
	sadTree32x32MvDst[0][0][1] = sadTree32x32MvSrc[0][0][1];
	sadTree32x32PMvDst[0][0][0] = sadTree32x32PMvSrc[0][0][0];
	sadTree32x32PMvDst[0][0][1] = sadTree32x32PMvSrc[0][0][1];
	sadTree32x32MvDst[0][1][0] = sadTree32x32MvSrc[0][1][0];
	sadTree32x32MvDst[0][1][1] = sadTree32x32MvSrc[0][1][1];
	sadTree32x32PMvDst[0][1][0] = sadTree32x32PMvSrc[0][1][0];
	sadTree32x32PMvDst[0][1][1] = sadTree32x32PMvSrc[0][1][1];
	sadTree32x32MvDst[1][0][0] = sadTree32x32MvSrc[1][0][0];
	sadTree32x32MvDst[1][0][1] = sadTree32x32MvSrc[1][0][1];
	sadTree32x32PMvDst[1][0][0] = sadTree32x32PMvSrc[1][0][0];
	sadTree32x32PMvDst[1][0][1] = sadTree32x32PMvSrc[1][0][1];
	sadTree32x32MvDst[1][1][0] = sadTree32x32MvSrc[1][1][0];
	sadTree32x32MvDst[1][1][1] = sadTree32x32MvSrc[1][1][1];
	sadTree32x32PMvDst[1][1][0] = sadTree32x32PMvSrc[1][1][0];
	sadTree32x32PMvDst[1][1][1] = sadTree32x32PMvSrc[1][1][1];
	sadTree32x16MvDst[0][0][0] = sadTree32x16MvSrc[0][0][0];
	sadTree32x16MvDst[0][0][1] = sadTree32x16MvSrc[0][0][1];
	sadTree32x16PMvDst[0][0][0] = sadTree32x16PMvSrc[0][0][0];
	sadTree32x16PMvDst[0][0][1] = sadTree32x16PMvSrc[0][0][1];
	sadTree32x16MvDst[0][1][0] = sadTree32x16MvSrc[0][1][0];
	sadTree32x16MvDst[0][1][1] = sadTree32x16MvSrc[0][1][1];
	sadTree32x16PMvDst[0][1][0] = sadTree32x16PMvSrc[0][1][0];
	sadTree32x16PMvDst[0][1][1] = sadTree32x16PMvSrc[0][1][1];
	sadTree32x16MvDst[0][2][0] = sadTree32x16MvSrc[0][2][0];
	sadTree32x16MvDst[0][2][1] = sadTree32x16MvSrc[0][2][1];
	sadTree32x16PMvDst[0][2][0] = sadTree32x16PMvSrc[0][2][0];
	sadTree32x16PMvDst[0][2][1] = sadTree32x16PMvSrc[0][2][1];
	sadTree32x16MvDst[0][3][0] = sadTree32x16MvSrc[0][3][0];
	sadTree32x16MvDst[0][3][1] = sadTree32x16MvSrc[0][3][1];
	sadTree32x16PMvDst[0][3][0] = sadTree32x16PMvSrc[0][3][0];
	sadTree32x16PMvDst[0][3][1] = sadTree32x16PMvSrc[0][3][1];
	sadTree32x16MvDst[1][0][0] = sadTree32x16MvSrc[1][0][0];
	sadTree32x16MvDst[1][0][1] = sadTree32x16MvSrc[1][0][1];
	sadTree32x16PMvDst[1][0][0] = sadTree32x16PMvSrc[1][0][0];
	sadTree32x16PMvDst[1][0][1] = sadTree32x16PMvSrc[1][0][1];
	sadTree32x16MvDst[1][1][0] = sadTree32x16MvSrc[1][1][0];
	sadTree32x16MvDst[1][1][1] = sadTree32x16MvSrc[1][1][1];
	sadTree32x16PMvDst[1][1][0] = sadTree32x16PMvSrc[1][1][0];
	sadTree32x16PMvDst[1][1][1] = sadTree32x16PMvSrc[1][1][1];
	sadTree32x16MvDst[1][2][0] = sadTree32x16MvSrc[1][2][0];
	sadTree32x16MvDst[1][2][1] = sadTree32x16MvSrc[1][2][1];
	sadTree32x16PMvDst[1][2][0] = sadTree32x16PMvSrc[1][2][0];
	sadTree32x16PMvDst[1][2][1] = sadTree32x16PMvSrc[1][2][1];
	sadTree32x16MvDst[1][3][0] = sadTree32x16MvSrc[1][3][0];
	sadTree32x16MvDst[1][3][1] = sadTree32x16MvSrc[1][3][1];
	sadTree32x16PMvDst[1][3][0] = sadTree32x16PMvSrc[1][3][0];
	sadTree32x16PMvDst[1][3][1] = sadTree32x16PMvSrc[1][3][1];
	sadTree32x8MvDst[0][0][0] = sadTree32x8MvSrc[0][0][0];
	sadTree32x8MvDst[0][0][1] = sadTree32x8MvSrc[0][0][1];
	sadTree32x8PMvDst[0][0][0] = sadTree32x8PMvSrc[0][0][0];
	sadTree32x8PMvDst[0][0][1] = sadTree32x8PMvSrc[0][0][1];
	sadTree32x8MvDst[0][1][0] = sadTree32x8MvSrc[0][1][0];
	sadTree32x8MvDst[0][1][1] = sadTree32x8MvSrc[0][1][1];
	sadTree32x8PMvDst[0][1][0] = sadTree32x8PMvSrc[0][1][0];
	sadTree32x8PMvDst[0][1][1] = sadTree32x8PMvSrc[0][1][1];
	sadTree32x8MvDst[0][2][0] = sadTree32x8MvSrc[0][2][0];
	sadTree32x8MvDst[0][2][1] = sadTree32x8MvSrc[0][2][1];
	sadTree32x8PMvDst[0][2][0] = sadTree32x8PMvSrc[0][2][0];
	sadTree32x8PMvDst[0][2][1] = sadTree32x8PMvSrc[0][2][1];
	sadTree32x8MvDst[0][3][0] = sadTree32x8MvSrc[0][3][0];
	sadTree32x8MvDst[0][3][1] = sadTree32x8MvSrc[0][3][1];
	sadTree32x8PMvDst[0][3][0] = sadTree32x8PMvSrc[0][3][0];
	sadTree32x8PMvDst[0][3][1] = sadTree32x8PMvSrc[0][3][1];
	sadTree32x8MvDst[0][4][0] = sadTree32x8MvSrc[0][4][0];
	sadTree32x8MvDst[0][4][1] = sadTree32x8MvSrc[0][4][1];
	sadTree32x8PMvDst[0][4][0] = sadTree32x8PMvSrc[0][4][0];
	sadTree32x8PMvDst[0][4][1] = sadTree32x8PMvSrc[0][4][1];
	sadTree32x8MvDst[0][5][0] = sadTree32x8MvSrc[0][5][0];
	sadTree32x8MvDst[0][5][1] = sadTree32x8MvSrc[0][5][1];
	sadTree32x8PMvDst[0][5][0] = sadTree32x8PMvSrc[0][5][0];
	sadTree32x8PMvDst[0][5][1] = sadTree32x8PMvSrc[0][5][1];
	sadTree32x8MvDst[0][6][0] = sadTree32x8MvSrc[0][6][0];
	sadTree32x8MvDst[0][6][1] = sadTree32x8MvSrc[0][6][1];
	sadTree32x8PMvDst[0][6][0] = sadTree32x8PMvSrc[0][6][0];
	sadTree32x8PMvDst[0][6][1] = sadTree32x8PMvSrc[0][6][1];
	sadTree32x8MvDst[0][7][0] = sadTree32x8MvSrc[0][7][0];
	sadTree32x8MvDst[0][7][1] = sadTree32x8MvSrc[0][7][1];
	sadTree32x8PMvDst[0][7][0] = sadTree32x8PMvSrc[0][7][0];
	sadTree32x8PMvDst[0][7][1] = sadTree32x8PMvSrc[0][7][1];
	sadTree32x8MvDst[1][0][0] = sadTree32x8MvSrc[1][0][0];
	sadTree32x8MvDst[1][0][1] = sadTree32x8MvSrc[1][0][1];
	sadTree32x8PMvDst[1][0][0] = sadTree32x8PMvSrc[1][0][0];
	sadTree32x8PMvDst[1][0][1] = sadTree32x8PMvSrc[1][0][1];
	sadTree32x8MvDst[1][1][0] = sadTree32x8MvSrc[1][1][0];
	sadTree32x8MvDst[1][1][1] = sadTree32x8MvSrc[1][1][1];
	sadTree32x8PMvDst[1][1][0] = sadTree32x8PMvSrc[1][1][0];
	sadTree32x8PMvDst[1][1][1] = sadTree32x8PMvSrc[1][1][1];
	sadTree32x8MvDst[1][2][0] = sadTree32x8MvSrc[1][2][0];
	sadTree32x8MvDst[1][2][1] = sadTree32x8MvSrc[1][2][1];
	sadTree32x8PMvDst[1][2][0] = sadTree32x8PMvSrc[1][2][0];
	sadTree32x8PMvDst[1][2][1] = sadTree32x8PMvSrc[1][2][1];
	sadTree32x8MvDst[1][3][0] = sadTree32x8MvSrc[1][3][0];
	sadTree32x8MvDst[1][3][1] = sadTree32x8MvSrc[1][3][1];
	sadTree32x8PMvDst[1][3][0] = sadTree32x8PMvSrc[1][3][0];
	sadTree32x8PMvDst[1][3][1] = sadTree32x8PMvSrc[1][3][1];
	sadTree32x8MvDst[1][4][0] = sadTree32x8MvSrc[1][4][0];
	sadTree32x8MvDst[1][4][1] = sadTree32x8MvSrc[1][4][1];
	sadTree32x8PMvDst[1][4][0] = sadTree32x8PMvSrc[1][4][0];
	sadTree32x8PMvDst[1][4][1] = sadTree32x8PMvSrc[1][4][1];
	sadTree32x8MvDst[1][5][0] = sadTree32x8MvSrc[1][5][0];
	sadTree32x8MvDst[1][5][1] = sadTree32x8MvSrc[1][5][1];
	sadTree32x8PMvDst[1][5][0] = sadTree32x8PMvSrc[1][5][0];
	sadTree32x8PMvDst[1][5][1] = sadTree32x8PMvSrc[1][5][1];
	sadTree32x8MvDst[1][6][0] = sadTree32x8MvSrc[1][6][0];
	sadTree32x8MvDst[1][6][1] = sadTree32x8MvSrc[1][6][1];
	sadTree32x8PMvDst[1][6][0] = sadTree32x8PMvSrc[1][6][0];
	sadTree32x8PMvDst[1][6][1] = sadTree32x8PMvSrc[1][6][1];
	sadTree32x8MvDst[1][7][0] = sadTree32x8MvSrc[1][7][0];
	sadTree32x8MvDst[1][7][1] = sadTree32x8MvSrc[1][7][1];
	sadTree32x8PMvDst[1][7][0] = sadTree32x8PMvSrc[1][7][0];
	sadTree32x8PMvDst[1][7][1] = sadTree32x8PMvSrc[1][7][1];
	sadTree16x64MvDst[0][0][0] = sadTree16x64MvSrc[0][0][0];
	sadTree16x64MvDst[0][0][1] = sadTree16x64MvSrc[0][0][1];
	sadTree16x64PMvDst[0][0][0] = sadTree16x64PMvSrc[0][0][0];
	sadTree16x64PMvDst[0][0][1] = sadTree16x64PMvSrc[0][0][1];
	sadTree16x64MvDst[1][0][0] = sadTree16x64MvSrc[1][0][0];
	sadTree16x64MvDst[1][0][1] = sadTree16x64MvSrc[1][0][1];
	sadTree16x64PMvDst[1][0][0] = sadTree16x64PMvSrc[1][0][0];
	sadTree16x64PMvDst[1][0][1] = sadTree16x64PMvSrc[1][0][1];
	sadTree16x64MvDst[2][0][0] = sadTree16x64MvSrc[2][0][0];
	sadTree16x64MvDst[2][0][1] = sadTree16x64MvSrc[2][0][1];
	sadTree16x64PMvDst[2][0][0] = sadTree16x64PMvSrc[2][0][0];
	sadTree16x64PMvDst[2][0][1] = sadTree16x64PMvSrc[2][0][1];
	sadTree16x64MvDst[3][0][0] = sadTree16x64MvSrc[3][0][0];
	sadTree16x64MvDst[3][0][1] = sadTree16x64MvSrc[3][0][1];
	sadTree16x64PMvDst[3][0][0] = sadTree16x64PMvSrc[3][0][0];
	sadTree16x64PMvDst[3][0][1] = sadTree16x64PMvSrc[3][0][1];
	sadTree16x32MvDst[0][0][0] = sadTree16x32MvSrc[0][0][0];
	sadTree16x32MvDst[0][0][1] = sadTree16x32MvSrc[0][0][1];
	sadTree16x32PMvDst[0][0][0] = sadTree16x32PMvSrc[0][0][0];
	sadTree16x32PMvDst[0][0][1] = sadTree16x32PMvSrc[0][0][1];
	sadTree16x32MvDst[0][1][0] = sadTree16x32MvSrc[0][1][0];
	sadTree16x32MvDst[0][1][1] = sadTree16x32MvSrc[0][1][1];
	sadTree16x32PMvDst[0][1][0] = sadTree16x32PMvSrc[0][1][0];
	sadTree16x32PMvDst[0][1][1] = sadTree16x32PMvSrc[0][1][1];
	sadTree16x32MvDst[1][0][0] = sadTree16x32MvSrc[1][0][0];
	sadTree16x32MvDst[1][0][1] = sadTree16x32MvSrc[1][0][1];
	sadTree16x32PMvDst[1][0][0] = sadTree16x32PMvSrc[1][0][0];
	sadTree16x32PMvDst[1][0][1] = sadTree16x32PMvSrc[1][0][1];
	sadTree16x32MvDst[1][1][0] = sadTree16x32MvSrc[1][1][0];
	sadTree16x32MvDst[1][1][1] = sadTree16x32MvSrc[1][1][1];
	sadTree16x32PMvDst[1][1][0] = sadTree16x32PMvSrc[1][1][0];
	sadTree16x32PMvDst[1][1][1] = sadTree16x32PMvSrc[1][1][1];
	sadTree16x32MvDst[2][0][0] = sadTree16x32MvSrc[2][0][0];
	sadTree16x32MvDst[2][0][1] = sadTree16x32MvSrc[2][0][1];
	sadTree16x32PMvDst[2][0][0] = sadTree16x32PMvSrc[2][0][0];
	sadTree16x32PMvDst[2][0][1] = sadTree16x32PMvSrc[2][0][1];
	sadTree16x32MvDst[2][1][0] = sadTree16x32MvSrc[2][1][0];
	sadTree16x32MvDst[2][1][1] = sadTree16x32MvSrc[2][1][1];
	sadTree16x32PMvDst[2][1][0] = sadTree16x32PMvSrc[2][1][0];
	sadTree16x32PMvDst[2][1][1] = sadTree16x32PMvSrc[2][1][1];
	sadTree16x32MvDst[3][0][0] = sadTree16x32MvSrc[3][0][0];
	sadTree16x32MvDst[3][0][1] = sadTree16x32MvSrc[3][0][1];
	sadTree16x32PMvDst[3][0][0] = sadTree16x32PMvSrc[3][0][0];
	sadTree16x32PMvDst[3][0][1] = sadTree16x32PMvSrc[3][0][1];
	sadTree16x32MvDst[3][1][0] = sadTree16x32MvSrc[3][1][0];
	sadTree16x32MvDst[3][1][1] = sadTree16x32MvSrc[3][1][1];
	sadTree16x32PMvDst[3][1][0] = sadTree16x32PMvSrc[3][1][0];
	sadTree16x32PMvDst[3][1][1] = sadTree16x32PMvSrc[3][1][1];
	sadTree16x16MvDst[0][0][0] = sadTree16x16MvSrc[0][0][0];
	sadTree16x16MvDst[0][0][1] = sadTree16x16MvSrc[0][0][1];
	sadTree16x16PMvDst[0][0][0] = sadTree16x16PMvSrc[0][0][0];
	sadTree16x16PMvDst[0][0][1] = sadTree16x16PMvSrc[0][0][1];
	sadTree16x16MvDst[0][1][0] = sadTree16x16MvSrc[0][1][0];
	sadTree16x16MvDst[0][1][1] = sadTree16x16MvSrc[0][1][1];
	sadTree16x16PMvDst[0][1][0] = sadTree16x16PMvSrc[0][1][0];
	sadTree16x16PMvDst[0][1][1] = sadTree16x16PMvSrc[0][1][1];
	sadTree16x16MvDst[0][2][0] = sadTree16x16MvSrc[0][2][0];
	sadTree16x16MvDst[0][2][1] = sadTree16x16MvSrc[0][2][1];
	sadTree16x16PMvDst[0][2][0] = sadTree16x16PMvSrc[0][2][0];
	sadTree16x16PMvDst[0][2][1] = sadTree16x16PMvSrc[0][2][1];
	sadTree16x16MvDst[0][3][0] = sadTree16x16MvSrc[0][3][0];
	sadTree16x16MvDst[0][3][1] = sadTree16x16MvSrc[0][3][1];
	sadTree16x16PMvDst[0][3][0] = sadTree16x16PMvSrc[0][3][0];
	sadTree16x16PMvDst[0][3][1] = sadTree16x16PMvSrc[0][3][1];
	sadTree16x16MvDst[1][0][0] = sadTree16x16MvSrc[1][0][0];
	sadTree16x16MvDst[1][0][1] = sadTree16x16MvSrc[1][0][1];
	sadTree16x16PMvDst[1][0][0] = sadTree16x16PMvSrc[1][0][0];
	sadTree16x16PMvDst[1][0][1] = sadTree16x16PMvSrc[1][0][1];
	sadTree16x16MvDst[1][1][0] = sadTree16x16MvSrc[1][1][0];
	sadTree16x16MvDst[1][1][1] = sadTree16x16MvSrc[1][1][1];
	sadTree16x16PMvDst[1][1][0] = sadTree16x16PMvSrc[1][1][0];
	sadTree16x16PMvDst[1][1][1] = sadTree16x16PMvSrc[1][1][1];
	sadTree16x16MvDst[1][2][0] = sadTree16x16MvSrc[1][2][0];
	sadTree16x16MvDst[1][2][1] = sadTree16x16MvSrc[1][2][1];
	sadTree16x16PMvDst[1][2][0] = sadTree16x16PMvSrc[1][2][0];
	sadTree16x16PMvDst[1][2][1] = sadTree16x16PMvSrc[1][2][1];
	sadTree16x16MvDst[1][3][0] = sadTree16x16MvSrc[1][3][0];
	sadTree16x16MvDst[1][3][1] = sadTree16x16MvSrc[1][3][1];
	sadTree16x16PMvDst[1][3][0] = sadTree16x16PMvSrc[1][3][0];
	sadTree16x16PMvDst[1][3][1] = sadTree16x16PMvSrc[1][3][1];
	sadTree16x16MvDst[2][0][0] = sadTree16x16MvSrc[2][0][0];
	sadTree16x16MvDst[2][0][1] = sadTree16x16MvSrc[2][0][1];
	sadTree16x16PMvDst[2][0][0] = sadTree16x16PMvSrc[2][0][0];
	sadTree16x16PMvDst[2][0][1] = sadTree16x16PMvSrc[2][0][1];
	sadTree16x16MvDst[2][1][0] = sadTree16x16MvSrc[2][1][0];
	sadTree16x16MvDst[2][1][1] = sadTree16x16MvSrc[2][1][1];
	sadTree16x16PMvDst[2][1][0] = sadTree16x16PMvSrc[2][1][0];
	sadTree16x16PMvDst[2][1][1] = sadTree16x16PMvSrc[2][1][1];
	sadTree16x16MvDst[2][2][0] = sadTree16x16MvSrc[2][2][0];
	sadTree16x16MvDst[2][2][1] = sadTree16x16MvSrc[2][2][1];
	sadTree16x16PMvDst[2][2][0] = sadTree16x16PMvSrc[2][2][0];
	sadTree16x16PMvDst[2][2][1] = sadTree16x16PMvSrc[2][2][1];
	sadTree16x16MvDst[2][3][0] = sadTree16x16MvSrc[2][3][0];
	sadTree16x16MvDst[2][3][1] = sadTree16x16MvSrc[2][3][1];
	sadTree16x16PMvDst[2][3][0] = sadTree16x16PMvSrc[2][3][0];
	sadTree16x16PMvDst[2][3][1] = sadTree16x16PMvSrc[2][3][1];
	sadTree16x16MvDst[3][0][0] = sadTree16x16MvSrc[3][0][0];
	sadTree16x16MvDst[3][0][1] = sadTree16x16MvSrc[3][0][1];
	sadTree16x16PMvDst[3][0][0] = sadTree16x16PMvSrc[3][0][0];
	sadTree16x16PMvDst[3][0][1] = sadTree16x16PMvSrc[3][0][1];
	sadTree16x16MvDst[3][1][0] = sadTree16x16MvSrc[3][1][0];
	sadTree16x16MvDst[3][1][1] = sadTree16x16MvSrc[3][1][1];
	sadTree16x16PMvDst[3][1][0] = sadTree16x16PMvSrc[3][1][0];
	sadTree16x16PMvDst[3][1][1] = sadTree16x16PMvSrc[3][1][1];
	sadTree16x16MvDst[3][2][0] = sadTree16x16MvSrc[3][2][0];
	sadTree16x16MvDst[3][2][1] = sadTree16x16MvSrc[3][2][1];
	sadTree16x16PMvDst[3][2][0] = sadTree16x16PMvSrc[3][2][0];
	sadTree16x16PMvDst[3][2][1] = sadTree16x16PMvSrc[3][2][1];
	sadTree16x16MvDst[3][3][0] = sadTree16x16MvSrc[3][3][0];
	sadTree16x16MvDst[3][3][1] = sadTree16x16MvSrc[3][3][1];
	sadTree16x16PMvDst[3][3][0] = sadTree16x16PMvSrc[3][3][0];
	sadTree16x16PMvDst[3][3][1] = sadTree16x16PMvSrc[3][3][1];
	sadTree16x8MvDst[0][0][0] = sadTree16x8MvSrc[0][0][0];
	sadTree16x8MvDst[0][0][1] = sadTree16x8MvSrc[0][0][1];
	sadTree16x8PMvDst[0][0][0] = sadTree16x8PMvSrc[0][0][0];
	sadTree16x8PMvDst[0][0][1] = sadTree16x8PMvSrc[0][0][1];
	sadTree16x8MvDst[0][1][0] = sadTree16x8MvSrc[0][1][0];
	sadTree16x8MvDst[0][1][1] = sadTree16x8MvSrc[0][1][1];
	sadTree16x8PMvDst[0][1][0] = sadTree16x8PMvSrc[0][1][0];
	sadTree16x8PMvDst[0][1][1] = sadTree16x8PMvSrc[0][1][1];
	sadTree16x8MvDst[0][2][0] = sadTree16x8MvSrc[0][2][0];
	sadTree16x8MvDst[0][2][1] = sadTree16x8MvSrc[0][2][1];
	sadTree16x8PMvDst[0][2][0] = sadTree16x8PMvSrc[0][2][0];
	sadTree16x8PMvDst[0][2][1] = sadTree16x8PMvSrc[0][2][1];
	sadTree16x8MvDst[0][3][0] = sadTree16x8MvSrc[0][3][0];
	sadTree16x8MvDst[0][3][1] = sadTree16x8MvSrc[0][3][1];
	sadTree16x8PMvDst[0][3][0] = sadTree16x8PMvSrc[0][3][0];
	sadTree16x8PMvDst[0][3][1] = sadTree16x8PMvSrc[0][3][1];
	sadTree16x8MvDst[0][4][0] = sadTree16x8MvSrc[0][4][0];
	sadTree16x8MvDst[0][4][1] = sadTree16x8MvSrc[0][4][1];
	sadTree16x8PMvDst[0][4][0] = sadTree16x8PMvSrc[0][4][0];
	sadTree16x8PMvDst[0][4][1] = sadTree16x8PMvSrc[0][4][1];
	sadTree16x8MvDst[0][5][0] = sadTree16x8MvSrc[0][5][0];
	sadTree16x8MvDst[0][5][1] = sadTree16x8MvSrc[0][5][1];
	sadTree16x8PMvDst[0][5][0] = sadTree16x8PMvSrc[0][5][0];
	sadTree16x8PMvDst[0][5][1] = sadTree16x8PMvSrc[0][5][1];
	sadTree16x8MvDst[0][6][0] = sadTree16x8MvSrc[0][6][0];
	sadTree16x8MvDst[0][6][1] = sadTree16x8MvSrc[0][6][1];
	sadTree16x8PMvDst[0][6][0] = sadTree16x8PMvSrc[0][6][0];
	sadTree16x8PMvDst[0][6][1] = sadTree16x8PMvSrc[0][6][1];
	sadTree16x8MvDst[0][7][0] = sadTree16x8MvSrc[0][7][0];
	sadTree16x8MvDst[0][7][1] = sadTree16x8MvSrc[0][7][1];
	sadTree16x8PMvDst[0][7][0] = sadTree16x8PMvSrc[0][7][0];
	sadTree16x8PMvDst[0][7][1] = sadTree16x8PMvSrc[0][7][1];
	sadTree16x8MvDst[1][0][0] = sadTree16x8MvSrc[1][0][0];
	sadTree16x8MvDst[1][0][1] = sadTree16x8MvSrc[1][0][1];
	sadTree16x8PMvDst[1][0][0] = sadTree16x8PMvSrc[1][0][0];
	sadTree16x8PMvDst[1][0][1] = sadTree16x8PMvSrc[1][0][1];
	sadTree16x8MvDst[1][1][0] = sadTree16x8MvSrc[1][1][0];
	sadTree16x8MvDst[1][1][1] = sadTree16x8MvSrc[1][1][1];
	sadTree16x8PMvDst[1][1][0] = sadTree16x8PMvSrc[1][1][0];
	sadTree16x8PMvDst[1][1][1] = sadTree16x8PMvSrc[1][1][1];
	sadTree16x8MvDst[1][2][0] = sadTree16x8MvSrc[1][2][0];
	sadTree16x8MvDst[1][2][1] = sadTree16x8MvSrc[1][2][1];
	sadTree16x8PMvDst[1][2][0] = sadTree16x8PMvSrc[1][2][0];
	sadTree16x8PMvDst[1][2][1] = sadTree16x8PMvSrc[1][2][1];
	sadTree16x8MvDst[1][3][0] = sadTree16x8MvSrc[1][3][0];
	sadTree16x8MvDst[1][3][1] = sadTree16x8MvSrc[1][3][1];
	sadTree16x8PMvDst[1][3][0] = sadTree16x8PMvSrc[1][3][0];
	sadTree16x8PMvDst[1][3][1] = sadTree16x8PMvSrc[1][3][1];
	sadTree16x8MvDst[1][4][0] = sadTree16x8MvSrc[1][4][0];
	sadTree16x8MvDst[1][4][1] = sadTree16x8MvSrc[1][4][1];
	sadTree16x8PMvDst[1][4][0] = sadTree16x8PMvSrc[1][4][0];
	sadTree16x8PMvDst[1][4][1] = sadTree16x8PMvSrc[1][4][1];
	sadTree16x8MvDst[1][5][0] = sadTree16x8MvSrc[1][5][0];
	sadTree16x8MvDst[1][5][1] = sadTree16x8MvSrc[1][5][1];
	sadTree16x8PMvDst[1][5][0] = sadTree16x8PMvSrc[1][5][0];
	sadTree16x8PMvDst[1][5][1] = sadTree16x8PMvSrc[1][5][1];
	sadTree16x8MvDst[1][6][0] = sadTree16x8MvSrc[1][6][0];
	sadTree16x8MvDst[1][6][1] = sadTree16x8MvSrc[1][6][1];
	sadTree16x8PMvDst[1][6][0] = sadTree16x8PMvSrc[1][6][0];
	sadTree16x8PMvDst[1][6][1] = sadTree16x8PMvSrc[1][6][1];
	sadTree16x8MvDst[1][7][0] = sadTree16x8MvSrc[1][7][0];
	sadTree16x8MvDst[1][7][1] = sadTree16x8MvSrc[1][7][1];
	sadTree16x8PMvDst[1][7][0] = sadTree16x8PMvSrc[1][7][0];
	sadTree16x8PMvDst[1][7][1] = sadTree16x8PMvSrc[1][7][1];
	sadTree16x8MvDst[2][0][0] = sadTree16x8MvSrc[2][0][0];
	sadTree16x8MvDst[2][0][1] = sadTree16x8MvSrc[2][0][1];
	sadTree16x8PMvDst[2][0][0] = sadTree16x8PMvSrc[2][0][0];
	sadTree16x8PMvDst[2][0][1] = sadTree16x8PMvSrc[2][0][1];
	sadTree16x8MvDst[2][1][0] = sadTree16x8MvSrc[2][1][0];
	sadTree16x8MvDst[2][1][1] = sadTree16x8MvSrc[2][1][1];
	sadTree16x8PMvDst[2][1][0] = sadTree16x8PMvSrc[2][1][0];
	sadTree16x8PMvDst[2][1][1] = sadTree16x8PMvSrc[2][1][1];
	sadTree16x8MvDst[2][2][0] = sadTree16x8MvSrc[2][2][0];
	sadTree16x8MvDst[2][2][1] = sadTree16x8MvSrc[2][2][1];
	sadTree16x8PMvDst[2][2][0] = sadTree16x8PMvSrc[2][2][0];
	sadTree16x8PMvDst[2][2][1] = sadTree16x8PMvSrc[2][2][1];
	sadTree16x8MvDst[2][3][0] = sadTree16x8MvSrc[2][3][0];
	sadTree16x8MvDst[2][3][1] = sadTree16x8MvSrc[2][3][1];
	sadTree16x8PMvDst[2][3][0] = sadTree16x8PMvSrc[2][3][0];
	sadTree16x8PMvDst[2][3][1] = sadTree16x8PMvSrc[2][3][1];
	sadTree16x8MvDst[2][4][0] = sadTree16x8MvSrc[2][4][0];
	sadTree16x8MvDst[2][4][1] = sadTree16x8MvSrc[2][4][1];
	sadTree16x8PMvDst[2][4][0] = sadTree16x8PMvSrc[2][4][0];
	sadTree16x8PMvDst[2][4][1] = sadTree16x8PMvSrc[2][4][1];
	sadTree16x8MvDst[2][5][0] = sadTree16x8MvSrc[2][5][0];
	sadTree16x8MvDst[2][5][1] = sadTree16x8MvSrc[2][5][1];
	sadTree16x8PMvDst[2][5][0] = sadTree16x8PMvSrc[2][5][0];
	sadTree16x8PMvDst[2][5][1] = sadTree16x8PMvSrc[2][5][1];
	sadTree16x8MvDst[2][6][0] = sadTree16x8MvSrc[2][6][0];
	sadTree16x8MvDst[2][6][1] = sadTree16x8MvSrc[2][6][1];
	sadTree16x8PMvDst[2][6][0] = sadTree16x8PMvSrc[2][6][0];
	sadTree16x8PMvDst[2][6][1] = sadTree16x8PMvSrc[2][6][1];
	sadTree16x8MvDst[2][7][0] = sadTree16x8MvSrc[2][7][0];
	sadTree16x8MvDst[2][7][1] = sadTree16x8MvSrc[2][7][1];
	sadTree16x8PMvDst[2][7][0] = sadTree16x8PMvSrc[2][7][0];
	sadTree16x8PMvDst[2][7][1] = sadTree16x8PMvSrc[2][7][1];
	sadTree16x8MvDst[3][0][0] = sadTree16x8MvSrc[3][0][0];
	sadTree16x8MvDst[3][0][1] = sadTree16x8MvSrc[3][0][1];
	sadTree16x8PMvDst[3][0][0] = sadTree16x8PMvSrc[3][0][0];
	sadTree16x8PMvDst[3][0][1] = sadTree16x8PMvSrc[3][0][1];
	sadTree16x8MvDst[3][1][0] = sadTree16x8MvSrc[3][1][0];
	sadTree16x8MvDst[3][1][1] = sadTree16x8MvSrc[3][1][1];
	sadTree16x8PMvDst[3][1][0] = sadTree16x8PMvSrc[3][1][0];
	sadTree16x8PMvDst[3][1][1] = sadTree16x8PMvSrc[3][1][1];
	sadTree16x8MvDst[3][2][0] = sadTree16x8MvSrc[3][2][0];
	sadTree16x8MvDst[3][2][1] = sadTree16x8MvSrc[3][2][1];
	sadTree16x8PMvDst[3][2][0] = sadTree16x8PMvSrc[3][2][0];
	sadTree16x8PMvDst[3][2][1] = sadTree16x8PMvSrc[3][2][1];
	sadTree16x8MvDst[3][3][0] = sadTree16x8MvSrc[3][3][0];
	sadTree16x8MvDst[3][3][1] = sadTree16x8MvSrc[3][3][1];
	sadTree16x8PMvDst[3][3][0] = sadTree16x8PMvSrc[3][3][0];
	sadTree16x8PMvDst[3][3][1] = sadTree16x8PMvSrc[3][3][1];
	sadTree16x8MvDst[3][4][0] = sadTree16x8MvSrc[3][4][0];
	sadTree16x8MvDst[3][4][1] = sadTree16x8MvSrc[3][4][1];
	sadTree16x8PMvDst[3][4][0] = sadTree16x8PMvSrc[3][4][0];
	sadTree16x8PMvDst[3][4][1] = sadTree16x8PMvSrc[3][4][1];
	sadTree16x8MvDst[3][5][0] = sadTree16x8MvSrc[3][5][0];
	sadTree16x8MvDst[3][5][1] = sadTree16x8MvSrc[3][5][1];
	sadTree16x8PMvDst[3][5][0] = sadTree16x8PMvSrc[3][5][0];
	sadTree16x8PMvDst[3][5][1] = sadTree16x8PMvSrc[3][5][1];
	sadTree16x8MvDst[3][6][0] = sadTree16x8MvSrc[3][6][0];
	sadTree16x8MvDst[3][6][1] = sadTree16x8MvSrc[3][6][1];
	sadTree16x8PMvDst[3][6][0] = sadTree16x8PMvSrc[3][6][0];
	sadTree16x8PMvDst[3][6][1] = sadTree16x8PMvSrc[3][6][1];
	sadTree16x8MvDst[3][7][0] = sadTree16x8MvSrc[3][7][0];
	sadTree16x8MvDst[3][7][1] = sadTree16x8MvSrc[3][7][1];
	sadTree16x8PMvDst[3][7][0] = sadTree16x8PMvSrc[3][7][0];
	sadTree16x8PMvDst[3][7][1] = sadTree16x8PMvSrc[3][7][1];
	sadTree8x64MvDst[0][0][0] = sadTree8x64MvSrc[0][0][0];
	sadTree8x64MvDst[0][0][1] = sadTree8x64MvSrc[0][0][1];
	sadTree8x64PMvDst[0][0][0] = sadTree8x64PMvSrc[0][0][0];
	sadTree8x64PMvDst[0][0][1] = sadTree8x64PMvSrc[0][0][1];
	sadTree8x64MvDst[1][0][0] = sadTree8x64MvSrc[1][0][0];
	sadTree8x64MvDst[1][0][1] = sadTree8x64MvSrc[1][0][1];
	sadTree8x64PMvDst[1][0][0] = sadTree8x64PMvSrc[1][0][0];
	sadTree8x64PMvDst[1][0][1] = sadTree8x64PMvSrc[1][0][1];
	sadTree8x64MvDst[2][0][0] = sadTree8x64MvSrc[2][0][0];
	sadTree8x64MvDst[2][0][1] = sadTree8x64MvSrc[2][0][1];
	sadTree8x64PMvDst[2][0][0] = sadTree8x64PMvSrc[2][0][0];
	sadTree8x64PMvDst[2][0][1] = sadTree8x64PMvSrc[2][0][1];
	sadTree8x64MvDst[3][0][0] = sadTree8x64MvSrc[3][0][0];
	sadTree8x64MvDst[3][0][1] = sadTree8x64MvSrc[3][0][1];
	sadTree8x64PMvDst[3][0][0] = sadTree8x64PMvSrc[3][0][0];
	sadTree8x64PMvDst[3][0][1] = sadTree8x64PMvSrc[3][0][1];
	sadTree8x64MvDst[4][0][0] = sadTree8x64MvSrc[4][0][0];
	sadTree8x64MvDst[4][0][1] = sadTree8x64MvSrc[4][0][1];
	sadTree8x64PMvDst[4][0][0] = sadTree8x64PMvSrc[4][0][0];
	sadTree8x64PMvDst[4][0][1] = sadTree8x64PMvSrc[4][0][1];
	sadTree8x64MvDst[5][0][0] = sadTree8x64MvSrc[5][0][0];
	sadTree8x64MvDst[5][0][1] = sadTree8x64MvSrc[5][0][1];
	sadTree8x64PMvDst[5][0][0] = sadTree8x64PMvSrc[5][0][0];
	sadTree8x64PMvDst[5][0][1] = sadTree8x64PMvSrc[5][0][1];
	sadTree8x64MvDst[6][0][0] = sadTree8x64MvSrc[6][0][0];
	sadTree8x64MvDst[6][0][1] = sadTree8x64MvSrc[6][0][1];
	sadTree8x64PMvDst[6][0][0] = sadTree8x64PMvSrc[6][0][0];
	sadTree8x64PMvDst[6][0][1] = sadTree8x64PMvSrc[6][0][1];
	sadTree8x64MvDst[7][0][0] = sadTree8x64MvSrc[7][0][0];
	sadTree8x64MvDst[7][0][1] = sadTree8x64MvSrc[7][0][1];
	sadTree8x64PMvDst[7][0][0] = sadTree8x64PMvSrc[7][0][0];
	sadTree8x64PMvDst[7][0][1] = sadTree8x64PMvSrc[7][0][1];
	sadTree8x32MvDst[0][0][0] = sadTree8x32MvSrc[0][0][0];
	sadTree8x32MvDst[0][0][1] = sadTree8x32MvSrc[0][0][1];
	sadTree8x32PMvDst[0][0][0] = sadTree8x32PMvSrc[0][0][0];
	sadTree8x32PMvDst[0][0][1] = sadTree8x32PMvSrc[0][0][1];
	sadTree8x32MvDst[0][1][0] = sadTree8x32MvSrc[0][1][0];
	sadTree8x32MvDst[0][1][1] = sadTree8x32MvSrc[0][1][1];
	sadTree8x32PMvDst[0][1][0] = sadTree8x32PMvSrc[0][1][0];
	sadTree8x32PMvDst[0][1][1] = sadTree8x32PMvSrc[0][1][1];
	sadTree8x32MvDst[1][0][0] = sadTree8x32MvSrc[1][0][0];
	sadTree8x32MvDst[1][0][1] = sadTree8x32MvSrc[1][0][1];
	sadTree8x32PMvDst[1][0][0] = sadTree8x32PMvSrc[1][0][0];
	sadTree8x32PMvDst[1][0][1] = sadTree8x32PMvSrc[1][0][1];
	sadTree8x32MvDst[1][1][0] = sadTree8x32MvSrc[1][1][0];
	sadTree8x32MvDst[1][1][1] = sadTree8x32MvSrc[1][1][1];
	sadTree8x32PMvDst[1][1][0] = sadTree8x32PMvSrc[1][1][0];
	sadTree8x32PMvDst[1][1][1] = sadTree8x32PMvSrc[1][1][1];
	sadTree8x32MvDst[2][0][0] = sadTree8x32MvSrc[2][0][0];
	sadTree8x32MvDst[2][0][1] = sadTree8x32MvSrc[2][0][1];
	sadTree8x32PMvDst[2][0][0] = sadTree8x32PMvSrc[2][0][0];
	sadTree8x32PMvDst[2][0][1] = sadTree8x32PMvSrc[2][0][1];
	sadTree8x32MvDst[2][1][0] = sadTree8x32MvSrc[2][1][0];
	sadTree8x32MvDst[2][1][1] = sadTree8x32MvSrc[2][1][1];
	sadTree8x32PMvDst[2][1][0] = sadTree8x32PMvSrc[2][1][0];
	sadTree8x32PMvDst[2][1][1] = sadTree8x32PMvSrc[2][1][1];
	sadTree8x32MvDst[3][0][0] = sadTree8x32MvSrc[3][0][0];
	sadTree8x32MvDst[3][0][1] = sadTree8x32MvSrc[3][0][1];
	sadTree8x32PMvDst[3][0][0] = sadTree8x32PMvSrc[3][0][0];
	sadTree8x32PMvDst[3][0][1] = sadTree8x32PMvSrc[3][0][1];
	sadTree8x32MvDst[3][1][0] = sadTree8x32MvSrc[3][1][0];
	sadTree8x32MvDst[3][1][1] = sadTree8x32MvSrc[3][1][1];
	sadTree8x32PMvDst[3][1][0] = sadTree8x32PMvSrc[3][1][0];
	sadTree8x32PMvDst[3][1][1] = sadTree8x32PMvSrc[3][1][1];
	sadTree8x32MvDst[4][0][0] = sadTree8x32MvSrc[4][0][0];
	sadTree8x32MvDst[4][0][1] = sadTree8x32MvSrc[4][0][1];
	sadTree8x32PMvDst[4][0][0] = sadTree8x32PMvSrc[4][0][0];
	sadTree8x32PMvDst[4][0][1] = sadTree8x32PMvSrc[4][0][1];
	sadTree8x32MvDst[4][1][0] = sadTree8x32MvSrc[4][1][0];
	sadTree8x32MvDst[4][1][1] = sadTree8x32MvSrc[4][1][1];
	sadTree8x32PMvDst[4][1][0] = sadTree8x32PMvSrc[4][1][0];
	sadTree8x32PMvDst[4][1][1] = sadTree8x32PMvSrc[4][1][1];
	sadTree8x32MvDst[5][0][0] = sadTree8x32MvSrc[5][0][0];
	sadTree8x32MvDst[5][0][1] = sadTree8x32MvSrc[5][0][1];
	sadTree8x32PMvDst[5][0][0] = sadTree8x32PMvSrc[5][0][0];
	sadTree8x32PMvDst[5][0][1] = sadTree8x32PMvSrc[5][0][1];
	sadTree8x32MvDst[5][1][0] = sadTree8x32MvSrc[5][1][0];
	sadTree8x32MvDst[5][1][1] = sadTree8x32MvSrc[5][1][1];
	sadTree8x32PMvDst[5][1][0] = sadTree8x32PMvSrc[5][1][0];
	sadTree8x32PMvDst[5][1][1] = sadTree8x32PMvSrc[5][1][1];
	sadTree8x32MvDst[6][0][0] = sadTree8x32MvSrc[6][0][0];
	sadTree8x32MvDst[6][0][1] = sadTree8x32MvSrc[6][0][1];
	sadTree8x32PMvDst[6][0][0] = sadTree8x32PMvSrc[6][0][0];
	sadTree8x32PMvDst[6][0][1] = sadTree8x32PMvSrc[6][0][1];
	sadTree8x32MvDst[6][1][0] = sadTree8x32MvSrc[6][1][0];
	sadTree8x32MvDst[6][1][1] = sadTree8x32MvSrc[6][1][1];
	sadTree8x32PMvDst[6][1][0] = sadTree8x32PMvSrc[6][1][0];
	sadTree8x32PMvDst[6][1][1] = sadTree8x32PMvSrc[6][1][1];
	sadTree8x32MvDst[7][0][0] = sadTree8x32MvSrc[7][0][0];
	sadTree8x32MvDst[7][0][1] = sadTree8x32MvSrc[7][0][1];
	sadTree8x32PMvDst[7][0][0] = sadTree8x32PMvSrc[7][0][0];
	sadTree8x32PMvDst[7][0][1] = sadTree8x32PMvSrc[7][0][1];
	sadTree8x32MvDst[7][1][0] = sadTree8x32MvSrc[7][1][0];
	sadTree8x32MvDst[7][1][1] = sadTree8x32MvSrc[7][1][1];
	sadTree8x32PMvDst[7][1][0] = sadTree8x32PMvSrc[7][1][0];
	sadTree8x32PMvDst[7][1][1] = sadTree8x32PMvSrc[7][1][1];
	sadTree8x16MvDst[0][0][0] = sadTree8x16MvSrc[0][0][0];
	sadTree8x16MvDst[0][0][1] = sadTree8x16MvSrc[0][0][1];
	sadTree8x16PMvDst[0][0][0] = sadTree8x16PMvSrc[0][0][0];
	sadTree8x16PMvDst[0][0][1] = sadTree8x16PMvSrc[0][0][1];
	sadTree8x16MvDst[0][1][0] = sadTree8x16MvSrc[0][1][0];
	sadTree8x16MvDst[0][1][1] = sadTree8x16MvSrc[0][1][1];
	sadTree8x16PMvDst[0][1][0] = sadTree8x16PMvSrc[0][1][0];
	sadTree8x16PMvDst[0][1][1] = sadTree8x16PMvSrc[0][1][1];
	sadTree8x16MvDst[0][2][0] = sadTree8x16MvSrc[0][2][0];
	sadTree8x16MvDst[0][2][1] = sadTree8x16MvSrc[0][2][1];
	sadTree8x16PMvDst[0][2][0] = sadTree8x16PMvSrc[0][2][0];
	sadTree8x16PMvDst[0][2][1] = sadTree8x16PMvSrc[0][2][1];
	sadTree8x16MvDst[0][3][0] = sadTree8x16MvSrc[0][3][0];
	sadTree8x16MvDst[0][3][1] = sadTree8x16MvSrc[0][3][1];
	sadTree8x16PMvDst[0][3][0] = sadTree8x16PMvSrc[0][3][0];
	sadTree8x16PMvDst[0][3][1] = sadTree8x16PMvSrc[0][3][1];
	sadTree8x16MvDst[1][0][0] = sadTree8x16MvSrc[1][0][0];
	sadTree8x16MvDst[1][0][1] = sadTree8x16MvSrc[1][0][1];
	sadTree8x16PMvDst[1][0][0] = sadTree8x16PMvSrc[1][0][0];
	sadTree8x16PMvDst[1][0][1] = sadTree8x16PMvSrc[1][0][1];
	sadTree8x16MvDst[1][1][0] = sadTree8x16MvSrc[1][1][0];
	sadTree8x16MvDst[1][1][1] = sadTree8x16MvSrc[1][1][1];
	sadTree8x16PMvDst[1][1][0] = sadTree8x16PMvSrc[1][1][0];
	sadTree8x16PMvDst[1][1][1] = sadTree8x16PMvSrc[1][1][1];
	sadTree8x16MvDst[1][2][0] = sadTree8x16MvSrc[1][2][0];
	sadTree8x16MvDst[1][2][1] = sadTree8x16MvSrc[1][2][1];
	sadTree8x16PMvDst[1][2][0] = sadTree8x16PMvSrc[1][2][0];
	sadTree8x16PMvDst[1][2][1] = sadTree8x16PMvSrc[1][2][1];
	sadTree8x16MvDst[1][3][0] = sadTree8x16MvSrc[1][3][0];
	sadTree8x16MvDst[1][3][1] = sadTree8x16MvSrc[1][3][1];
	sadTree8x16PMvDst[1][3][0] = sadTree8x16PMvSrc[1][3][0];
	sadTree8x16PMvDst[1][3][1] = sadTree8x16PMvSrc[1][3][1];
	sadTree8x16MvDst[2][0][0] = sadTree8x16MvSrc[2][0][0];
	sadTree8x16MvDst[2][0][1] = sadTree8x16MvSrc[2][0][1];
	sadTree8x16PMvDst[2][0][0] = sadTree8x16PMvSrc[2][0][0];
	sadTree8x16PMvDst[2][0][1] = sadTree8x16PMvSrc[2][0][1];
	sadTree8x16MvDst[2][1][0] = sadTree8x16MvSrc[2][1][0];
	sadTree8x16MvDst[2][1][1] = sadTree8x16MvSrc[2][1][1];
	sadTree8x16PMvDst[2][1][0] = sadTree8x16PMvSrc[2][1][0];
	sadTree8x16PMvDst[2][1][1] = sadTree8x16PMvSrc[2][1][1];
	sadTree8x16MvDst[2][2][0] = sadTree8x16MvSrc[2][2][0];
	sadTree8x16MvDst[2][2][1] = sadTree8x16MvSrc[2][2][1];
	sadTree8x16PMvDst[2][2][0] = sadTree8x16PMvSrc[2][2][0];
	sadTree8x16PMvDst[2][2][1] = sadTree8x16PMvSrc[2][2][1];
	sadTree8x16MvDst[2][3][0] = sadTree8x16MvSrc[2][3][0];
	sadTree8x16MvDst[2][3][1] = sadTree8x16MvSrc[2][3][1];
	sadTree8x16PMvDst[2][3][0] = sadTree8x16PMvSrc[2][3][0];
	sadTree8x16PMvDst[2][3][1] = sadTree8x16PMvSrc[2][3][1];
	sadTree8x16MvDst[3][0][0] = sadTree8x16MvSrc[3][0][0];
	sadTree8x16MvDst[3][0][1] = sadTree8x16MvSrc[3][0][1];
	sadTree8x16PMvDst[3][0][0] = sadTree8x16PMvSrc[3][0][0];
	sadTree8x16PMvDst[3][0][1] = sadTree8x16PMvSrc[3][0][1];
	sadTree8x16MvDst[3][1][0] = sadTree8x16MvSrc[3][1][0];
	sadTree8x16MvDst[3][1][1] = sadTree8x16MvSrc[3][1][1];
	sadTree8x16PMvDst[3][1][0] = sadTree8x16PMvSrc[3][1][0];
	sadTree8x16PMvDst[3][1][1] = sadTree8x16PMvSrc[3][1][1];
	sadTree8x16MvDst[3][2][0] = sadTree8x16MvSrc[3][2][0];
	sadTree8x16MvDst[3][2][1] = sadTree8x16MvSrc[3][2][1];
	sadTree8x16PMvDst[3][2][0] = sadTree8x16PMvSrc[3][2][0];
	sadTree8x16PMvDst[3][2][1] = sadTree8x16PMvSrc[3][2][1];
	sadTree8x16MvDst[3][3][0] = sadTree8x16MvSrc[3][3][0];
	sadTree8x16MvDst[3][3][1] = sadTree8x16MvSrc[3][3][1];
	sadTree8x16PMvDst[3][3][0] = sadTree8x16PMvSrc[3][3][0];
	sadTree8x16PMvDst[3][3][1] = sadTree8x16PMvSrc[3][3][1];
	sadTree8x16MvDst[4][0][0] = sadTree8x16MvSrc[4][0][0];
	sadTree8x16MvDst[4][0][1] = sadTree8x16MvSrc[4][0][1];
	sadTree8x16PMvDst[4][0][0] = sadTree8x16PMvSrc[4][0][0];
	sadTree8x16PMvDst[4][0][1] = sadTree8x16PMvSrc[4][0][1];
	sadTree8x16MvDst[4][1][0] = sadTree8x16MvSrc[4][1][0];
	sadTree8x16MvDst[4][1][1] = sadTree8x16MvSrc[4][1][1];
	sadTree8x16PMvDst[4][1][0] = sadTree8x16PMvSrc[4][1][0];
	sadTree8x16PMvDst[4][1][1] = sadTree8x16PMvSrc[4][1][1];
	sadTree8x16MvDst[4][2][0] = sadTree8x16MvSrc[4][2][0];
	sadTree8x16MvDst[4][2][1] = sadTree8x16MvSrc[4][2][1];
	sadTree8x16PMvDst[4][2][0] = sadTree8x16PMvSrc[4][2][0];
	sadTree8x16PMvDst[4][2][1] = sadTree8x16PMvSrc[4][2][1];
	sadTree8x16MvDst[4][3][0] = sadTree8x16MvSrc[4][3][0];
	sadTree8x16MvDst[4][3][1] = sadTree8x16MvSrc[4][3][1];
	sadTree8x16PMvDst[4][3][0] = sadTree8x16PMvSrc[4][3][0];
	sadTree8x16PMvDst[4][3][1] = sadTree8x16PMvSrc[4][3][1];
	sadTree8x16MvDst[5][0][0] = sadTree8x16MvSrc[5][0][0];
	sadTree8x16MvDst[5][0][1] = sadTree8x16MvSrc[5][0][1];
	sadTree8x16PMvDst[5][0][0] = sadTree8x16PMvSrc[5][0][0];
	sadTree8x16PMvDst[5][0][1] = sadTree8x16PMvSrc[5][0][1];
	sadTree8x16MvDst[5][1][0] = sadTree8x16MvSrc[5][1][0];
	sadTree8x16MvDst[5][1][1] = sadTree8x16MvSrc[5][1][1];
	sadTree8x16PMvDst[5][1][0] = sadTree8x16PMvSrc[5][1][0];
	sadTree8x16PMvDst[5][1][1] = sadTree8x16PMvSrc[5][1][1];
	sadTree8x16MvDst[5][2][0] = sadTree8x16MvSrc[5][2][0];
	sadTree8x16MvDst[5][2][1] = sadTree8x16MvSrc[5][2][1];
	sadTree8x16PMvDst[5][2][0] = sadTree8x16PMvSrc[5][2][0];
	sadTree8x16PMvDst[5][2][1] = sadTree8x16PMvSrc[5][2][1];
	sadTree8x16MvDst[5][3][0] = sadTree8x16MvSrc[5][3][0];
	sadTree8x16MvDst[5][3][1] = sadTree8x16MvSrc[5][3][1];
	sadTree8x16PMvDst[5][3][0] = sadTree8x16PMvSrc[5][3][0];
	sadTree8x16PMvDst[5][3][1] = sadTree8x16PMvSrc[5][3][1];
	sadTree8x16MvDst[6][0][0] = sadTree8x16MvSrc[6][0][0];
	sadTree8x16MvDst[6][0][1] = sadTree8x16MvSrc[6][0][1];
	sadTree8x16PMvDst[6][0][0] = sadTree8x16PMvSrc[6][0][0];
	sadTree8x16PMvDst[6][0][1] = sadTree8x16PMvSrc[6][0][1];
	sadTree8x16MvDst[6][1][0] = sadTree8x16MvSrc[6][1][0];
	sadTree8x16MvDst[6][1][1] = sadTree8x16MvSrc[6][1][1];
	sadTree8x16PMvDst[6][1][0] = sadTree8x16PMvSrc[6][1][0];
	sadTree8x16PMvDst[6][1][1] = sadTree8x16PMvSrc[6][1][1];
	sadTree8x16MvDst[6][2][0] = sadTree8x16MvSrc[6][2][0];
	sadTree8x16MvDst[6][2][1] = sadTree8x16MvSrc[6][2][1];
	sadTree8x16PMvDst[6][2][0] = sadTree8x16PMvSrc[6][2][0];
	sadTree8x16PMvDst[6][2][1] = sadTree8x16PMvSrc[6][2][1];
	sadTree8x16MvDst[6][3][0] = sadTree8x16MvSrc[6][3][0];
	sadTree8x16MvDst[6][3][1] = sadTree8x16MvSrc[6][3][1];
	sadTree8x16PMvDst[6][3][0] = sadTree8x16PMvSrc[6][3][0];
	sadTree8x16PMvDst[6][3][1] = sadTree8x16PMvSrc[6][3][1];
	sadTree8x16MvDst[7][0][0] = sadTree8x16MvSrc[7][0][0];
	sadTree8x16MvDst[7][0][1] = sadTree8x16MvSrc[7][0][1];
	sadTree8x16PMvDst[7][0][0] = sadTree8x16PMvSrc[7][0][0];
	sadTree8x16PMvDst[7][0][1] = sadTree8x16PMvSrc[7][0][1];
	sadTree8x16MvDst[7][1][0] = sadTree8x16MvSrc[7][1][0];
	sadTree8x16MvDst[7][1][1] = sadTree8x16MvSrc[7][1][1];
	sadTree8x16PMvDst[7][1][0] = sadTree8x16PMvSrc[7][1][0];
	sadTree8x16PMvDst[7][1][1] = sadTree8x16PMvSrc[7][1][1];
	sadTree8x16MvDst[7][2][0] = sadTree8x16MvSrc[7][2][0];
	sadTree8x16MvDst[7][2][1] = sadTree8x16MvSrc[7][2][1];
	sadTree8x16PMvDst[7][2][0] = sadTree8x16PMvSrc[7][2][0];
	sadTree8x16PMvDst[7][2][1] = sadTree8x16PMvSrc[7][2][1];
	sadTree8x16MvDst[7][3][0] = sadTree8x16MvSrc[7][3][0];
	sadTree8x16MvDst[7][3][1] = sadTree8x16MvSrc[7][3][1];
	sadTree8x16PMvDst[7][3][0] = sadTree8x16PMvSrc[7][3][0];
	sadTree8x16PMvDst[7][3][1] = sadTree8x16PMvSrc[7][3][1];
	sadTree8x8MvDst[0][0][0] = sadTree8x8MvSrc[0][0][0];
	sadTree8x8MvDst[0][0][1] = sadTree8x8MvSrc[0][0][1];
	sadTree8x8PMvDst[0][0][0] = sadTree8x8PMvSrc[0][0][0];
	sadTree8x8PMvDst[0][0][1] = sadTree8x8PMvSrc[0][0][1];
	sadTree8x8MvDst[0][1][0] = sadTree8x8MvSrc[0][1][0];
	sadTree8x8MvDst[0][1][1] = sadTree8x8MvSrc[0][1][1];
	sadTree8x8PMvDst[0][1][0] = sadTree8x8PMvSrc[0][1][0];
	sadTree8x8PMvDst[0][1][1] = sadTree8x8PMvSrc[0][1][1];
	sadTree8x8MvDst[0][2][0] = sadTree8x8MvSrc[0][2][0];
	sadTree8x8MvDst[0][2][1] = sadTree8x8MvSrc[0][2][1];
	sadTree8x8PMvDst[0][2][0] = sadTree8x8PMvSrc[0][2][0];
	sadTree8x8PMvDst[0][2][1] = sadTree8x8PMvSrc[0][2][1];
	sadTree8x8MvDst[0][3][0] = sadTree8x8MvSrc[0][3][0];
	sadTree8x8MvDst[0][3][1] = sadTree8x8MvSrc[0][3][1];
	sadTree8x8PMvDst[0][3][0] = sadTree8x8PMvSrc[0][3][0];
	sadTree8x8PMvDst[0][3][1] = sadTree8x8PMvSrc[0][3][1];
	sadTree8x8MvDst[0][4][0] = sadTree8x8MvSrc[0][4][0];
	sadTree8x8MvDst[0][4][1] = sadTree8x8MvSrc[0][4][1];
	sadTree8x8PMvDst[0][4][0] = sadTree8x8PMvSrc[0][4][0];
	sadTree8x8PMvDst[0][4][1] = sadTree8x8PMvSrc[0][4][1];
	sadTree8x8MvDst[0][5][0] = sadTree8x8MvSrc[0][5][0];
	sadTree8x8MvDst[0][5][1] = sadTree8x8MvSrc[0][5][1];
	sadTree8x8PMvDst[0][5][0] = sadTree8x8PMvSrc[0][5][0];
	sadTree8x8PMvDst[0][5][1] = sadTree8x8PMvSrc[0][5][1];
	sadTree8x8MvDst[0][6][0] = sadTree8x8MvSrc[0][6][0];
	sadTree8x8MvDst[0][6][1] = sadTree8x8MvSrc[0][6][1];
	sadTree8x8PMvDst[0][6][0] = sadTree8x8PMvSrc[0][6][0];
	sadTree8x8PMvDst[0][6][1] = sadTree8x8PMvSrc[0][6][1];
	sadTree8x8MvDst[0][7][0] = sadTree8x8MvSrc[0][7][0];
	sadTree8x8MvDst[0][7][1] = sadTree8x8MvSrc[0][7][1];
	sadTree8x8PMvDst[0][7][0] = sadTree8x8PMvSrc[0][7][0];
	sadTree8x8PMvDst[0][7][1] = sadTree8x8PMvSrc[0][7][1];
	sadTree8x8MvDst[1][0][0] = sadTree8x8MvSrc[1][0][0];
	sadTree8x8MvDst[1][0][1] = sadTree8x8MvSrc[1][0][1];
	sadTree8x8PMvDst[1][0][0] = sadTree8x8PMvSrc[1][0][0];
	sadTree8x8PMvDst[1][0][1] = sadTree8x8PMvSrc[1][0][1];
	sadTree8x8MvDst[1][1][0] = sadTree8x8MvSrc[1][1][0];
	sadTree8x8MvDst[1][1][1] = sadTree8x8MvSrc[1][1][1];
	sadTree8x8PMvDst[1][1][0] = sadTree8x8PMvSrc[1][1][0];
	sadTree8x8PMvDst[1][1][1] = sadTree8x8PMvSrc[1][1][1];
	sadTree8x8MvDst[1][2][0] = sadTree8x8MvSrc[1][2][0];
	sadTree8x8MvDst[1][2][1] = sadTree8x8MvSrc[1][2][1];
	sadTree8x8PMvDst[1][2][0] = sadTree8x8PMvSrc[1][2][0];
	sadTree8x8PMvDst[1][2][1] = sadTree8x8PMvSrc[1][2][1];
	sadTree8x8MvDst[1][3][0] = sadTree8x8MvSrc[1][3][0];
	sadTree8x8MvDst[1][3][1] = sadTree8x8MvSrc[1][3][1];
	sadTree8x8PMvDst[1][3][0] = sadTree8x8PMvSrc[1][3][0];
	sadTree8x8PMvDst[1][3][1] = sadTree8x8PMvSrc[1][3][1];
	sadTree8x8MvDst[1][4][0] = sadTree8x8MvSrc[1][4][0];
	sadTree8x8MvDst[1][4][1] = sadTree8x8MvSrc[1][4][1];
	sadTree8x8PMvDst[1][4][0] = sadTree8x8PMvSrc[1][4][0];
	sadTree8x8PMvDst[1][4][1] = sadTree8x8PMvSrc[1][4][1];
	sadTree8x8MvDst[1][5][0] = sadTree8x8MvSrc[1][5][0];
	sadTree8x8MvDst[1][5][1] = sadTree8x8MvSrc[1][5][1];
	sadTree8x8PMvDst[1][5][0] = sadTree8x8PMvSrc[1][5][0];
	sadTree8x8PMvDst[1][5][1] = sadTree8x8PMvSrc[1][5][1];
	sadTree8x8MvDst[1][6][0] = sadTree8x8MvSrc[1][6][0];
	sadTree8x8MvDst[1][6][1] = sadTree8x8MvSrc[1][6][1];
	sadTree8x8PMvDst[1][6][0] = sadTree8x8PMvSrc[1][6][0];
	sadTree8x8PMvDst[1][6][1] = sadTree8x8PMvSrc[1][6][1];
	sadTree8x8MvDst[1][7][0] = sadTree8x8MvSrc[1][7][0];
	sadTree8x8MvDst[1][7][1] = sadTree8x8MvSrc[1][7][1];
	sadTree8x8PMvDst[1][7][0] = sadTree8x8PMvSrc[1][7][0];
	sadTree8x8PMvDst[1][7][1] = sadTree8x8PMvSrc[1][7][1];
	sadTree8x8MvDst[2][0][0] = sadTree8x8MvSrc[2][0][0];
	sadTree8x8MvDst[2][0][1] = sadTree8x8MvSrc[2][0][1];
	sadTree8x8PMvDst[2][0][0] = sadTree8x8PMvSrc[2][0][0];
	sadTree8x8PMvDst[2][0][1] = sadTree8x8PMvSrc[2][0][1];
	sadTree8x8MvDst[2][1][0] = sadTree8x8MvSrc[2][1][0];
	sadTree8x8MvDst[2][1][1] = sadTree8x8MvSrc[2][1][1];
	sadTree8x8PMvDst[2][1][0] = sadTree8x8PMvSrc[2][1][0];
	sadTree8x8PMvDst[2][1][1] = sadTree8x8PMvSrc[2][1][1];
	sadTree8x8MvDst[2][2][0] = sadTree8x8MvSrc[2][2][0];
	sadTree8x8MvDst[2][2][1] = sadTree8x8MvSrc[2][2][1];
	sadTree8x8PMvDst[2][2][0] = sadTree8x8PMvSrc[2][2][0];
	sadTree8x8PMvDst[2][2][1] = sadTree8x8PMvSrc[2][2][1];
	sadTree8x8MvDst[2][3][0] = sadTree8x8MvSrc[2][3][0];
	sadTree8x8MvDst[2][3][1] = sadTree8x8MvSrc[2][3][1];
	sadTree8x8PMvDst[2][3][0] = sadTree8x8PMvSrc[2][3][0];
	sadTree8x8PMvDst[2][3][1] = sadTree8x8PMvSrc[2][3][1];
	sadTree8x8MvDst[2][4][0] = sadTree8x8MvSrc[2][4][0];
	sadTree8x8MvDst[2][4][1] = sadTree8x8MvSrc[2][4][1];
	sadTree8x8PMvDst[2][4][0] = sadTree8x8PMvSrc[2][4][0];
	sadTree8x8PMvDst[2][4][1] = sadTree8x8PMvSrc[2][4][1];
	sadTree8x8MvDst[2][5][0] = sadTree8x8MvSrc[2][5][0];
	sadTree8x8MvDst[2][5][1] = sadTree8x8MvSrc[2][5][1];
	sadTree8x8PMvDst[2][5][0] = sadTree8x8PMvSrc[2][5][0];
	sadTree8x8PMvDst[2][5][1] = sadTree8x8PMvSrc[2][5][1];
	sadTree8x8MvDst[2][6][0] = sadTree8x8MvSrc[2][6][0];
	sadTree8x8MvDst[2][6][1] = sadTree8x8MvSrc[2][6][1];
	sadTree8x8PMvDst[2][6][0] = sadTree8x8PMvSrc[2][6][0];
	sadTree8x8PMvDst[2][6][1] = sadTree8x8PMvSrc[2][6][1];
	sadTree8x8MvDst[2][7][0] = sadTree8x8MvSrc[2][7][0];
	sadTree8x8MvDst[2][7][1] = sadTree8x8MvSrc[2][7][1];
	sadTree8x8PMvDst[2][7][0] = sadTree8x8PMvSrc[2][7][0];
	sadTree8x8PMvDst[2][7][1] = sadTree8x8PMvSrc[2][7][1];
	sadTree8x8MvDst[3][0][0] = sadTree8x8MvSrc[3][0][0];
	sadTree8x8MvDst[3][0][1] = sadTree8x8MvSrc[3][0][1];
	sadTree8x8PMvDst[3][0][0] = sadTree8x8PMvSrc[3][0][0];
	sadTree8x8PMvDst[3][0][1] = sadTree8x8PMvSrc[3][0][1];
	sadTree8x8MvDst[3][1][0] = sadTree8x8MvSrc[3][1][0];
	sadTree8x8MvDst[3][1][1] = sadTree8x8MvSrc[3][1][1];
	sadTree8x8PMvDst[3][1][0] = sadTree8x8PMvSrc[3][1][0];
	sadTree8x8PMvDst[3][1][1] = sadTree8x8PMvSrc[3][1][1];
	sadTree8x8MvDst[3][2][0] = sadTree8x8MvSrc[3][2][0];
	sadTree8x8MvDst[3][2][1] = sadTree8x8MvSrc[3][2][1];
	sadTree8x8PMvDst[3][2][0] = sadTree8x8PMvSrc[3][2][0];
	sadTree8x8PMvDst[3][2][1] = sadTree8x8PMvSrc[3][2][1];
	sadTree8x8MvDst[3][3][0] = sadTree8x8MvSrc[3][3][0];
	sadTree8x8MvDst[3][3][1] = sadTree8x8MvSrc[3][3][1];
	sadTree8x8PMvDst[3][3][0] = sadTree8x8PMvSrc[3][3][0];
	sadTree8x8PMvDst[3][3][1] = sadTree8x8PMvSrc[3][3][1];
	sadTree8x8MvDst[3][4][0] = sadTree8x8MvSrc[3][4][0];
	sadTree8x8MvDst[3][4][1] = sadTree8x8MvSrc[3][4][1];
	sadTree8x8PMvDst[3][4][0] = sadTree8x8PMvSrc[3][4][0];
	sadTree8x8PMvDst[3][4][1] = sadTree8x8PMvSrc[3][4][1];
	sadTree8x8MvDst[3][5][0] = sadTree8x8MvSrc[3][5][0];
	sadTree8x8MvDst[3][5][1] = sadTree8x8MvSrc[3][5][1];
	sadTree8x8PMvDst[3][5][0] = sadTree8x8PMvSrc[3][5][0];
	sadTree8x8PMvDst[3][5][1] = sadTree8x8PMvSrc[3][5][1];
	sadTree8x8MvDst[3][6][0] = sadTree8x8MvSrc[3][6][0];
	sadTree8x8MvDst[3][6][1] = sadTree8x8MvSrc[3][6][1];
	sadTree8x8PMvDst[3][6][0] = sadTree8x8PMvSrc[3][6][0];
	sadTree8x8PMvDst[3][6][1] = sadTree8x8PMvSrc[3][6][1];
	sadTree8x8MvDst[3][7][0] = sadTree8x8MvSrc[3][7][0];
	sadTree8x8MvDst[3][7][1] = sadTree8x8MvSrc[3][7][1];
	sadTree8x8PMvDst[3][7][0] = sadTree8x8PMvSrc[3][7][0];
	sadTree8x8PMvDst[3][7][1] = sadTree8x8PMvSrc[3][7][1];
	sadTree8x8MvDst[4][0][0] = sadTree8x8MvSrc[4][0][0];
	sadTree8x8MvDst[4][0][1] = sadTree8x8MvSrc[4][0][1];
	sadTree8x8PMvDst[4][0][0] = sadTree8x8PMvSrc[4][0][0];
	sadTree8x8PMvDst[4][0][1] = sadTree8x8PMvSrc[4][0][1];
	sadTree8x8MvDst[4][1][0] = sadTree8x8MvSrc[4][1][0];
	sadTree8x8MvDst[4][1][1] = sadTree8x8MvSrc[4][1][1];
	sadTree8x8PMvDst[4][1][0] = sadTree8x8PMvSrc[4][1][0];
	sadTree8x8PMvDst[4][1][1] = sadTree8x8PMvSrc[4][1][1];
	sadTree8x8MvDst[4][2][0] = sadTree8x8MvSrc[4][2][0];
	sadTree8x8MvDst[4][2][1] = sadTree8x8MvSrc[4][2][1];
	sadTree8x8PMvDst[4][2][0] = sadTree8x8PMvSrc[4][2][0];
	sadTree8x8PMvDst[4][2][1] = sadTree8x8PMvSrc[4][2][1];
	sadTree8x8MvDst[4][3][0] = sadTree8x8MvSrc[4][3][0];
	sadTree8x8MvDst[4][3][1] = sadTree8x8MvSrc[4][3][1];
	sadTree8x8PMvDst[4][3][0] = sadTree8x8PMvSrc[4][3][0];
	sadTree8x8PMvDst[4][3][1] = sadTree8x8PMvSrc[4][3][1];
	sadTree8x8MvDst[4][4][0] = sadTree8x8MvSrc[4][4][0];
	sadTree8x8MvDst[4][4][1] = sadTree8x8MvSrc[4][4][1];
	sadTree8x8PMvDst[4][4][0] = sadTree8x8PMvSrc[4][4][0];
	sadTree8x8PMvDst[4][4][1] = sadTree8x8PMvSrc[4][4][1];
	sadTree8x8MvDst[4][5][0] = sadTree8x8MvSrc[4][5][0];
	sadTree8x8MvDst[4][5][1] = sadTree8x8MvSrc[4][5][1];
	sadTree8x8PMvDst[4][5][0] = sadTree8x8PMvSrc[4][5][0];
	sadTree8x8PMvDst[4][5][1] = sadTree8x8PMvSrc[4][5][1];
	sadTree8x8MvDst[4][6][0] = sadTree8x8MvSrc[4][6][0];
	sadTree8x8MvDst[4][6][1] = sadTree8x8MvSrc[4][6][1];
	sadTree8x8PMvDst[4][6][0] = sadTree8x8PMvSrc[4][6][0];
	sadTree8x8PMvDst[4][6][1] = sadTree8x8PMvSrc[4][6][1];
	sadTree8x8MvDst[4][7][0] = sadTree8x8MvSrc[4][7][0];
	sadTree8x8MvDst[4][7][1] = sadTree8x8MvSrc[4][7][1];
	sadTree8x8PMvDst[4][7][0] = sadTree8x8PMvSrc[4][7][0];
	sadTree8x8PMvDst[4][7][1] = sadTree8x8PMvSrc[4][7][1];
	sadTree8x8MvDst[5][0][0] = sadTree8x8MvSrc[5][0][0];
	sadTree8x8MvDst[5][0][1] = sadTree8x8MvSrc[5][0][1];
	sadTree8x8PMvDst[5][0][0] = sadTree8x8PMvSrc[5][0][0];
	sadTree8x8PMvDst[5][0][1] = sadTree8x8PMvSrc[5][0][1];
	sadTree8x8MvDst[5][1][0] = sadTree8x8MvSrc[5][1][0];
	sadTree8x8MvDst[5][1][1] = sadTree8x8MvSrc[5][1][1];
	sadTree8x8PMvDst[5][1][0] = sadTree8x8PMvSrc[5][1][0];
	sadTree8x8PMvDst[5][1][1] = sadTree8x8PMvSrc[5][1][1];
	sadTree8x8MvDst[5][2][0] = sadTree8x8MvSrc[5][2][0];
	sadTree8x8MvDst[5][2][1] = sadTree8x8MvSrc[5][2][1];
	sadTree8x8PMvDst[5][2][0] = sadTree8x8PMvSrc[5][2][0];
	sadTree8x8PMvDst[5][2][1] = sadTree8x8PMvSrc[5][2][1];
	sadTree8x8MvDst[5][3][0] = sadTree8x8MvSrc[5][3][0];
	sadTree8x8MvDst[5][3][1] = sadTree8x8MvSrc[5][3][1];
	sadTree8x8PMvDst[5][3][0] = sadTree8x8PMvSrc[5][3][0];
	sadTree8x8PMvDst[5][3][1] = sadTree8x8PMvSrc[5][3][1];
	sadTree8x8MvDst[5][4][0] = sadTree8x8MvSrc[5][4][0];
	sadTree8x8MvDst[5][4][1] = sadTree8x8MvSrc[5][4][1];
	sadTree8x8PMvDst[5][4][0] = sadTree8x8PMvSrc[5][4][0];
	sadTree8x8PMvDst[5][4][1] = sadTree8x8PMvSrc[5][4][1];
	sadTree8x8MvDst[5][5][0] = sadTree8x8MvSrc[5][5][0];
	sadTree8x8MvDst[5][5][1] = sadTree8x8MvSrc[5][5][1];
	sadTree8x8PMvDst[5][5][0] = sadTree8x8PMvSrc[5][5][0];
	sadTree8x8PMvDst[5][5][1] = sadTree8x8PMvSrc[5][5][1];
	sadTree8x8MvDst[5][6][0] = sadTree8x8MvSrc[5][6][0];
	sadTree8x8MvDst[5][6][1] = sadTree8x8MvSrc[5][6][1];
	sadTree8x8PMvDst[5][6][0] = sadTree8x8PMvSrc[5][6][0];
	sadTree8x8PMvDst[5][6][1] = sadTree8x8PMvSrc[5][6][1];
	sadTree8x8MvDst[5][7][0] = sadTree8x8MvSrc[5][7][0];
	sadTree8x8MvDst[5][7][1] = sadTree8x8MvSrc[5][7][1];
	sadTree8x8PMvDst[5][7][0] = sadTree8x8PMvSrc[5][7][0];
	sadTree8x8PMvDst[5][7][1] = sadTree8x8PMvSrc[5][7][1];
	sadTree8x8MvDst[6][0][0] = sadTree8x8MvSrc[6][0][0];
	sadTree8x8MvDst[6][0][1] = sadTree8x8MvSrc[6][0][1];
	sadTree8x8PMvDst[6][0][0] = sadTree8x8PMvSrc[6][0][0];
	sadTree8x8PMvDst[6][0][1] = sadTree8x8PMvSrc[6][0][1];
	sadTree8x8MvDst[6][1][0] = sadTree8x8MvSrc[6][1][0];
	sadTree8x8MvDst[6][1][1] = sadTree8x8MvSrc[6][1][1];
	sadTree8x8PMvDst[6][1][0] = sadTree8x8PMvSrc[6][1][0];
	sadTree8x8PMvDst[6][1][1] = sadTree8x8PMvSrc[6][1][1];
	sadTree8x8MvDst[6][2][0] = sadTree8x8MvSrc[6][2][0];
	sadTree8x8MvDst[6][2][1] = sadTree8x8MvSrc[6][2][1];
	sadTree8x8PMvDst[6][2][0] = sadTree8x8PMvSrc[6][2][0];
	sadTree8x8PMvDst[6][2][1] = sadTree8x8PMvSrc[6][2][1];
	sadTree8x8MvDst[6][3][0] = sadTree8x8MvSrc[6][3][0];
	sadTree8x8MvDst[6][3][1] = sadTree8x8MvSrc[6][3][1];
	sadTree8x8PMvDst[6][3][0] = sadTree8x8PMvSrc[6][3][0];
	sadTree8x8PMvDst[6][3][1] = sadTree8x8PMvSrc[6][3][1];
	sadTree8x8MvDst[6][4][0] = sadTree8x8MvSrc[6][4][0];
	sadTree8x8MvDst[6][4][1] = sadTree8x8MvSrc[6][4][1];
	sadTree8x8PMvDst[6][4][0] = sadTree8x8PMvSrc[6][4][0];
	sadTree8x8PMvDst[6][4][1] = sadTree8x8PMvSrc[6][4][1];
	sadTree8x8MvDst[6][5][0] = sadTree8x8MvSrc[6][5][0];
	sadTree8x8MvDst[6][5][1] = sadTree8x8MvSrc[6][5][1];
	sadTree8x8PMvDst[6][5][0] = sadTree8x8PMvSrc[6][5][0];
	sadTree8x8PMvDst[6][5][1] = sadTree8x8PMvSrc[6][5][1];
	sadTree8x8MvDst[6][6][0] = sadTree8x8MvSrc[6][6][0];
	sadTree8x8MvDst[6][6][1] = sadTree8x8MvSrc[6][6][1];
	sadTree8x8PMvDst[6][6][0] = sadTree8x8PMvSrc[6][6][0];
	sadTree8x8PMvDst[6][6][1] = sadTree8x8PMvSrc[6][6][1];
	sadTree8x8MvDst[6][7][0] = sadTree8x8MvSrc[6][7][0];
	sadTree8x8MvDst[6][7][1] = sadTree8x8MvSrc[6][7][1];
	sadTree8x8PMvDst[6][7][0] = sadTree8x8PMvSrc[6][7][0];
	sadTree8x8PMvDst[6][7][1] = sadTree8x8PMvSrc[6][7][1];
	sadTree8x8MvDst[7][0][0] = sadTree8x8MvSrc[7][0][0];
	sadTree8x8MvDst[7][0][1] = sadTree8x8MvSrc[7][0][1];
	sadTree8x8PMvDst[7][0][0] = sadTree8x8PMvSrc[7][0][0];
	sadTree8x8PMvDst[7][0][1] = sadTree8x8PMvSrc[7][0][1];
	sadTree8x8MvDst[7][1][0] = sadTree8x8MvSrc[7][1][0];
	sadTree8x8MvDst[7][1][1] = sadTree8x8MvSrc[7][1][1];
	sadTree8x8PMvDst[7][1][0] = sadTree8x8PMvSrc[7][1][0];
	sadTree8x8PMvDst[7][1][1] = sadTree8x8PMvSrc[7][1][1];
	sadTree8x8MvDst[7][2][0] = sadTree8x8MvSrc[7][2][0];
	sadTree8x8MvDst[7][2][1] = sadTree8x8MvSrc[7][2][1];
	sadTree8x8PMvDst[7][2][0] = sadTree8x8PMvSrc[7][2][0];
	sadTree8x8PMvDst[7][2][1] = sadTree8x8PMvSrc[7][2][1];
	sadTree8x8MvDst[7][3][0] = sadTree8x8MvSrc[7][3][0];
	sadTree8x8MvDst[7][3][1] = sadTree8x8MvSrc[7][3][1];
	sadTree8x8PMvDst[7][3][0] = sadTree8x8PMvSrc[7][3][0];
	sadTree8x8PMvDst[7][3][1] = sadTree8x8PMvSrc[7][3][1];
	sadTree8x8MvDst[7][4][0] = sadTree8x8MvSrc[7][4][0];
	sadTree8x8MvDst[7][4][1] = sadTree8x8MvSrc[7][4][1];
	sadTree8x8PMvDst[7][4][0] = sadTree8x8PMvSrc[7][4][0];
	sadTree8x8PMvDst[7][4][1] = sadTree8x8PMvSrc[7][4][1];
	sadTree8x8MvDst[7][5][0] = sadTree8x8MvSrc[7][5][0];
	sadTree8x8MvDst[7][5][1] = sadTree8x8MvSrc[7][5][1];
	sadTree8x8PMvDst[7][5][0] = sadTree8x8PMvSrc[7][5][0];
	sadTree8x8PMvDst[7][5][1] = sadTree8x8PMvSrc[7][5][1];
	sadTree8x8MvDst[7][6][0] = sadTree8x8MvSrc[7][6][0];
	sadTree8x8MvDst[7][6][1] = sadTree8x8MvSrc[7][6][1];
	sadTree8x8PMvDst[7][6][0] = sadTree8x8PMvSrc[7][6][0];
	sadTree8x8PMvDst[7][6][1] = sadTree8x8PMvSrc[7][6][1];
	sadTree8x8MvDst[7][7][0] = sadTree8x8MvSrc[7][7][0];
	sadTree8x8MvDst[7][7][1] = sadTree8x8MvSrc[7][7][1];
	sadTree8x8PMvDst[7][7][0] = sadTree8x8PMvSrc[7][7][0];
	sadTree8x8PMvDst[7][7][1] = sadTree8x8PMvSrc[7][7][1];
}



void setLcuPmv(S14 predMvLcu[2], S14 predMvTemp[2], S14 sadTree64x64PMv[1][1][2], S14 gmvpQ[2])
{

#pragma HLS INLINE off

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=predMvTemp cyclic factor=2 dim=1

#if LV0_MV_PMV_PARTTION_ON
#pragma HLS ARRAY_PARTITION variable=sadTree64x64PMv complete dim=0
#endif

#endif

	predMvLcu[0] = COM_CLIP3_IME(0, (SWW - 1), (predMvTemp[0] >> 2) + MMEA_LEVEL2_SR_V, S14);
	predMvLcu[1] = COM_CLIP3_IME(0, (SWH - 1), (predMvTemp[1] >> 2) + MMEA_LEVEL2_SR_H, S14);

	sadTree64x64PMv[0][0][0] = predMvTemp[0];
	sadTree64x64PMv[0][0][1] = predMvTemp[1];

	gmvpQ[0] = predMvLcu[0] << 2;
	gmvpQ[1] = predMvLcu[1] << 2;
}

void limitSizeTo8(S14 sadTree8x8Mv[8][8][2], S14 sadTree8x4Mv[8][16][2], S14 sadTree4x8Mv[16][8][2],
	S14 sadTree16x8Mv[4][8][2], S14 sadTree8x16Mv[8][4][2], S14 sadTree16x4Mv[4][16][2], S14 sadTree4x16Mv[16][4][2],
	S14 sadTree32x8Mv[2][8][2], S14 sadTree8x32Mv[8][2][2], S14 sadTree32x4Mv[2][16][2], S14 sadTree4x32Mv[16][2][2])
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=sadTree8x8Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree4x8Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x4Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x8Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x16Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree16x4Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree4x16Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x8Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree8x32Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree32x4Mv complete dim=0
#pragma HLS ARRAY_PARTITION variable=sadTree4x32Mv complete dim=0
#endif

	int wi, hi;
	for (wi = 0; wi < 16; wi++)
	{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
		for (hi = 0; hi < 8; hi++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree4x8Mv[wi][hi][0] = sadTree8x8Mv[wi >> 1][hi][0];
			sadTree4x8Mv[wi][hi][1] = sadTree8x8Mv[wi >> 1][hi][1];
			sadTree8x4Mv[hi][wi][0] = sadTree8x8Mv[hi][wi >> 1][0];
			sadTree8x4Mv[hi][wi][1] = sadTree8x8Mv[hi][wi >> 1][1];
		}

		for (hi = 0; hi < 4; hi++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree4x16Mv[wi][hi][0] = sadTree8x16Mv[wi >> 1][hi][0];
			sadTree4x16Mv[wi][hi][1] = sadTree8x16Mv[wi >> 1][hi][1];
			sadTree16x4Mv[hi][wi][0] = sadTree16x8Mv[hi][wi >> 1][0];
			sadTree16x4Mv[hi][wi][1] = sadTree16x8Mv[hi][wi >> 1][1];
		}

		for (hi = 0; hi < 2; hi++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			sadTree4x32Mv[wi][hi][0] = sadTree8x32Mv[wi >> 1][hi][0];
			sadTree4x32Mv[wi][hi][1] = sadTree8x32Mv[wi >> 1][hi][1];
			sadTree32x4Mv[hi][wi][0] = sadTree32x8Mv[hi][wi >> 1][0];
			sadTree32x4Mv[hi][wi][1] = sadTree32x8Mv[hi][wi >> 1][1];
		}


	}
}

void constructSearchWindowLv0_org(U8 swSubLv0[80][80], U8 swSubLv0Cp[80][80], U8 swOutLv0[320][320], S14 ltX, S14 ltY)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=swSubLv0 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp complete dim=1
#pragma HLS ARRAY_PARTITION variable=swOutLv0 complete dim=1
#pragma HLS INLINE off
#endif

	S14 x, y;
	for (y = 0; y < 80; y++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < 80; x++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			swSubLv0[x][y] = swOutLv0[x + ltX][y + ltY];
			swSubLv0Cp[x][y] = swOutLv0[x + ltX][y + ltY];
		}
	}

}

void constructSWLv0_test1(
#if BW_DEBUG
	U10 swSubLv0_org[80][80],
	U10 swOutLv0_org[SWH][SWW],
#else
	pel swSubLv0_org[80][80],
	pel swOutLv0_org[SWH][SWW],
#endif
	S14 ltX,
	S14 ltY
)
{
#pragma HLS INLINE off

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=swSubLv0_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swOutLv0_org complete dim=2
#endif

	U7 x, y;
	//pel RefWindowLCU[49152];

	for (y = 0; y < 80; y++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < 80; x++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			swSubLv0_org[y][x] = swOutLv0_org[y + ltY][x + ltX];
			//swSubLv0_org[y][x] = RefWindowLCU[(y + ltY) * 80 + (x + ltX)];
		}
	}

}

void constructSearchWindowLv0(

	pel swSubLv0_org[80][80],
#if IME_DEBUG_calcSadScuLv0TestCaseMore
	pel swSubLv0Cp0_org[80][80],
	pel swSubLv0Cp1_org[80][80],
	pel swSubLv0Cp2_org[80][80],
	pel swSubLv0Cp3_org[80][80],
	pel swSubLv0Cp4_org[80][80],
	pel swSubLv0Cp5_org[80][80],
	pel swSubLv0Cp6_org[80][80],
	pel swSubLv0Cp7_org[80][80],

#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
	pel swOutLv0_org[SWH][SWW],

	//pel swSubLv0[80][80],
#if IME_DEBUG_calcSadScuLv0TestCaseMore
	pel swSubLv0Cp0[80][80],
	pel swSubLv0Cp1[80][80],
	pel swSubLv0Cp2[80][80],
	pel swSubLv0Cp3[80][80],
	pel swSubLv0Cp4[80][80],
	pel swSubLv0Cp5[80][80],
	pel swSubLv0Cp6[80][80],
	pel swSubLv0Cp7[80][80],

#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
	//pel swOutLv0[SWW][SWH],
	S14 ltX, 
	S14 ltY
)
{
#if IME_PRAGMA_ON

#pragma HLS ARRAY_PARTITION variable=swSubLv0_org complete dim=2
#if IME_DEBUG_calcSadScuLv0TestCaseMore
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp0_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp1_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp2_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp3_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp4_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp5_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp6_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp7_org complete dim=2
#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
#pragma HLS ARRAY_PARTITION variable=swOutLv0_org complete dim=2
//===========================================================
//#pragma HLS ARRAY_PARTITION variable=swSubLv0 complete dim=1
#if IME_DEBUG_calcSadScuLv0TestCaseMore
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp0 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp1 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp2 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp3 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp4 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp5 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp6 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp7 complete dim=1
#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
//#pragma HLS ARRAY_PARTITION variable=swOutLv0 complete dim=1
#pragma HLS INLINE off
#endif

	U7 x, y;
	U9 k;

#if IME_VIVADO_HLS
	pel swOutLv0_Linebuffer_org[SWW];
	//pel swOutLv0_Linebuffer[SWW] = {0};
#else
	static pel swOutLv0_Linebuffer[SWW] = {0};
#endif

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=swOutLv0_Linebuffer_org complete dim=0
//#pragma HLS ARRAY_PARTITION variable=swOutLv0_Linebuffer complete dim=0
#endif

//	for (y = 0; y < 80; y++) 
//	{
//#if IME_PRAGMA_ON
//#pragma HLS pipeline
//#endif
//		for (k = 0;k < SWW; k++)
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//			swOutLv0_Linebuffer[k] = swOutLv0[k][y + ltY];		//	swOutLv0_Linebuffer
//		}
//		for (x = 0; x < 80; x++) 
//		{
//#if IME_PRAGMA_ON
//#pragma HLS unroll
//#endif
//			swSubLv0[x][y] = swOutLv0_Linebuffer[x + ltX];
//#if IME_DEBUG_calcSadScuLv0TestCaseMore
//			swSubLv0Cp0[x][y] = swOutLv0_Linebuffer[x + ltX];
//			swSubLv0Cp1[x][y] = swOutLv0_Linebuffer[x + ltX];
//			swSubLv0Cp2[x][y] = swOutLv0_Linebuffer[x + ltX];
//			swSubLv0Cp3[x][y] = swOutLv0_Linebuffer[x + ltX];
//			swSubLv0Cp4[x][y] = swOutLv0_Linebuffer[x + ltX];
//			swSubLv0Cp5[x][y] = swOutLv0_Linebuffer[x + ltX];
//			swSubLv0Cp6[x][y] = swOutLv0_Linebuffer[x + ltX];
//			swSubLv0Cp7[x][y] = swOutLv0_Linebuffer[x + ltX];
//#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
//		}
//	}

	for (y = 0; y < 80; y++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (k = 0;k < SWW; k++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			swOutLv0_Linebuffer_org[k] = swOutLv0_org[y + ltY][k];		//	swOutLv0_Linebuffer
		}
		for (x = 0; x < 80; x++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			swSubLv0_org[y][x] = swOutLv0_Linebuffer_org[x + ltX];
#if IME_DEBUG_calcSadScuLv0TestCaseMore
			swSubLv0Cp0_org[y][x] = swOutLv0_Linebuffer_org[x + ltX];
			swSubLv0Cp1_org[y][x] = swOutLv0_Linebuffer_org[x + ltX];
			swSubLv0Cp2_org[y][x] = swOutLv0_Linebuffer_org[x + ltX];
			swSubLv0Cp3_org[y][x] = swOutLv0_Linebuffer_org[x + ltX];
			swSubLv0Cp4_org[y][x] = swOutLv0_Linebuffer_org[x + ltX];
			swSubLv0Cp5_org[y][x] = swOutLv0_Linebuffer_org[x + ltX];
			swSubLv0Cp6_org[y][x] = swOutLv0_Linebuffer_org[x + ltX];
			swSubLv0Cp7_org[y][x] = swOutLv0_Linebuffer_org[x + ltX];
#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
		}
	}

	// check swOutLv0_org
	//for (int j = 0; j < SWH; j++)
	//{

	//	for (int i = 0; i < SWW; i++)
	//	{
	//		if (swOutLv0_org[j][i] != swOutLv0[i][j])
	//		{
	//			printf("swOutLv0_org error! ");
	//			printf("swOutLv0_org[%d][%d] = %d\tswOutLv0[%d][%d] = %d \n", j, i, swOutLv0_org[j][i], i, j, swOutLv0[i][j]);
	//		}
	//	}
	//}
	
	//// check swSubLv0_org
	//for (int j = 0; j < 80; j++)
	//{

	//	for (int i = 0; i < 80; i++)
	//	{
	//		if (swSubLv0_org[j][i] != swSubLv0[i][j])
	//		{
	//			printf("swSubLv0_org error! ");
	//			printf("swSubLv0_org[%d][%d] = %d\tswSubLv0[%d][%d] = %d \n", j, i, swSubLv0_org[j][i], i, j, swSubLv0[i][j]);
	//		}
	//	}
	//}

}

void constructSearchWindowLv0_linebuffer(U8 swSubLv0[80][80], U8 swSubLv0Cp[80][80], U8 swOutLv0[320][320], S14 ltX, S14 ltY)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=swSubLv0 complete dim=1
#pragma HLS ARRAY_PARTITION variable=swSubLv0Cp complete dim=1
#pragma HLS ARRAY_PARTITION variable=swOutLv0 complete dim=1
#pragma HLS INLINE off
#endif

	U7 x, y;
	U9 k;

#if IME_VIVADO_HLS
	U8 swOutLv0_Linebuffer[320] = {0};
#else
	static U8 swOutLv0_Linebuffer[320] = {0};
#endif

#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=swOutLv0_Linebuffer complete dim=0
#endif

	for (y = 0; y < 80; y++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (k = 0;k < 320; k++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			swOutLv0_Linebuffer[k] = swOutLv0[k][y + ltY];		//	swOutLv0_Linebuffer
		}
		for (x = 0; x < 80; x++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
//			swSubLv0[x][y] = swOutLv0[x + ltX][y + ltY];
//			swSubLv0Cp[x][y] = swOutLv0[x + ltX][y + ltY];
			swSubLv0[x][y] = swOutLv0_Linebuffer[x + ltX];
			swSubLv0Cp[x][y] = swOutLv0_Linebuffer[x + ltX];
		}
	}

}

void copyOrgLv0(U8 org[64][64], U8 orgCp[64][64])
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=org complete dim=1
#pragma HLS ARRAY_PARTITION variable=orgCp complete dim=1
#pragma HLS INLINE off
#endif
	S14 x, y;
	for (y = 0; y < 64; y++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < 64; x++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			orgCp[x][y] = org[x][y];
		}
	}

}

#if ENABLE_BFRAME
void copyOrgLv0_test1(
#if BW_DEBUG
	U10 org[64][64],
	U10 orgCp[64][64]
#else
	pel org[64][64], 
	pel orgCp[64][64]
#endif
)
{
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=org complete dim=2
#pragma HLS ARRAY_PARTITION variable=orgCp complete dim=2
#pragma HLS INLINE off
#endif
	U7 x, y;
	for (y = 0; y < 64; y++) {
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (x = 0; x < 64; x++) {
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			orgCp[y][x] = org[y][x];
		}
	}

}
#endif

void write_out_para_set(
	FETCH_ORGI_LCU_IME* Fetch_Orig_Lcu_IME,
	FETCH_REF_WINDOW_IME* Fetch_Ref_Window_IME,
	FETCH2MD_FW* fetch2md_fw_ptr,
	CTU_Level_Parameters* fetch_output,
	IME_OUT_PARA_SET* out_para,
	U4 bit_depth,
	U11 fetch2md_fw_ptr_pic_width_in_scu, 
	U11  fetch2md_fw_ptr_pic_height_in_scu, 
	U12 fetch_output_pix_x, 
	U12  fetch_output_pix_y,
	U9 fetch2md_fw_ptr_cur_ptr, 
	U2 fetch2md_fw_ptr_slice_type, 
	U32 fetch_output_lambda_mv, 
	U5 fetch2md_fw_ptr_num_refp,
	S14 CtrPos[RANGE_NUM][DIR_DIM][MAP_DIMS]
#if ENABLE_BFRAME
	, S14 CtrPos_ref1[RANGE_NUM][DIR_DIM][MAP_DIMS]
#endif
)
{

#pragma HLS INLINE off
	U5 iter;

	/////Frame-level paramters
	out_para->pic_width = fetch2md_fw_ptr->pic_width;
	out_para->pic_height = fetch2md_fw_ptr->pic_height;
	out_para->slice_type = fetch2md_fw_ptr_slice_type;
	out_para->affine_enable_flag = fetch2md_fw_ptr->affine_enable_flag;
	out_para->pic_width_in_scu = fetch2md_fw_ptr_pic_width_in_scu;
	out_para->pic_height_in_scu = fetch2md_fw_ptr_pic_height_in_scu;
	out_para->log2_max_cuwh = fetch2md_fw_ptr->log2_max_cuwh;
	out_para->log2_culine = fetch2md_fw_ptr->log2_culine;
	out_para->max_cuwh = fetch2md_fw_ptr->max_cuwh;
#if EIPM
	out_para->eipm_enable_flag = fetch2md_fw_ptr->eipm_enable_flag;
#endif
#if MIPF
	out_para->mipf_enable_flag = fetch2md_fw_ptr->mipf_enable_flag;
#endif
#if INTERPF
	out_para->interpf_enable_flag = fetch2md_fw_ptr->interpf_enable_flag;
#endif
#if CTX_CONTROL_LUKE
	out_para->bit_depth_internal = bit_depth;
	out_para->max_part_ratio = fetch2md_fw_ptr->max_part_ratio;
	out_para->min_cu_size = fetch2md_fw_ptr->min_cu_size;
	out_para->max_split_times = fetch2md_fw_ptr->max_split_times;
	out_para->min_qt_size = fetch2md_fw_ptr->min_qt_size;
	out_para->max_bt_size = fetch2md_fw_ptr->max_bt_size;
	out_para->max_eqt_size = fetch2md_fw_ptr->max_eqt_size;

#endif
#if CUDQP_QP_MAP
	out_para->chroma_quant_param_delta_cb = fetch2md_fw_ptr->chroma_quant_param_delta_cb;
	out_para->chroma_quant_param_delta_cr = fetch2md_fw_ptr->chroma_quant_param_delta_cr;
#endif
	for (iter = 0; iter < 17; iter++)
	{
		out_para->refp_ptr[iter][0] = fetch2md_fw_ptr->refp_ptr[iter][0];
		out_para->refp_ptr[iter][1] = fetch2md_fw_ptr->refp_ptr[iter][1];
	}
#if ENABLE_BFRAME
	out_para->num_refp[0] = fetch2md_fw_ptr->num_refp[0];
	out_para->num_refp[1] = fetch2md_fw_ptr->num_refp[1];

	out_para->CtrPos_ref1[0][0][0] = Fetch_Ref_Window_IME->CtrPos_ref1[0][0][0];						
	out_para->CtrPos_ref1[0][0][1] = Fetch_Ref_Window_IME->CtrPos_ref1[0][0][1];
	out_para->CtrPos_ref1[0][1][0] = Fetch_Ref_Window_IME->CtrPos_ref1[0][1][0];
	out_para->CtrPos_ref1[0][1][1] = Fetch_Ref_Window_IME->CtrPos_ref1[0][1][1];
	out_para->CtrPos_ref1[1][0][0] = Fetch_Ref_Window_IME->CtrPos_ref1[1][0][0];
	out_para->CtrPos_ref1[1][0][1] = Fetch_Ref_Window_IME->CtrPos_ref1[1][0][1];
	out_para->CtrPos_ref1[1][1][0] = Fetch_Ref_Window_IME->CtrPos_ref1[1][1][0];
	out_para->CtrPos_ref1[1][1][1] = Fetch_Ref_Window_IME->CtrPos_ref1[1][1][1];

	CtrPos_ref1[0][0][0] = Fetch_Ref_Window_IME->CtrPos_ref1[0][0][0];						
	CtrPos_ref1[0][0][1] = Fetch_Ref_Window_IME->CtrPos_ref1[0][0][1];
	CtrPos_ref1[0][1][0] = Fetch_Ref_Window_IME->CtrPos_ref1[0][1][0];
	CtrPos_ref1[0][1][1] = Fetch_Ref_Window_IME->CtrPos_ref1[0][1][1];
	CtrPos_ref1[1][0][0] = Fetch_Ref_Window_IME->CtrPos_ref1[1][0][0];
	CtrPos_ref1[1][0][1] = Fetch_Ref_Window_IME->CtrPos_ref1[1][0][1];
	CtrPos_ref1[1][1][0] = Fetch_Ref_Window_IME->CtrPos_ref1[1][1][0];
	CtrPos_ref1[1][1][1] = Fetch_Ref_Window_IME->CtrPos_ref1[1][1][1];
#else
	out_para->num_refp = fetch2md_fw_ptr_num_refp;
#endif
	
	out_para->cur_ptr = fetch2md_fw_ptr_cur_ptr; 


	out_para->pix_x = fetch_output_pix_x;
	out_para->pix_y = fetch_output_pix_y;
#if CTU_CONTROL_LUKE
	//out_para->lcu_cnt = fetch_output->lcu_cnt;
#endif
	//out_para->smb_num_width = fetch_output->smb_num_width;
	//out_para->smb_num_height = fetch_output->smb_num_height;
#if CTU_CONTROL_LUKE

	/* QP for luma of current encoding CU */
	out_para->qp_y = fetch_output->qp_y;
	/* QP for chroma of current encoding CU */
	out_para->qp_u = fetch_output->qp_u;
	out_para->qp_v = fetch_output->qp_v;
	out_para->lambda_mv = fetch_output_lambda_mv;								//// need to give fme
	out_para->lambda[0] = fetch_output->lambda[0];
	out_para->lambda[1] = fetch_output->lambda[1];
	out_para->lambda[2] = fetch_output->lambda[2];
	out_para->dist_chroma_weight[0] = fetch_output->dist_chroma_weight[0];
	out_para->dist_chroma_weight[1] = fetch_output->dist_chroma_weight[1];
	/* current frame numbser */
	//out_para->ptr = fetch_output->ptr;
	out_para->x_last_ctu = fetch_output->x_last_ctu;
	out_para->y_last_ctu = fetch_output->y_last_ctu;
#endif

#if UMVE_ENH
	out_para->umve_set_flag = fetch2md_fw_ptr->umve_set_flag;
#endif

#if USE_INTRA_REFRESH
	out_para->EncRefresh = fetch_output->EncRefresh;
	out_para->RefreshSize = fetch_output->RefreshSize;
	out_para->RefreshMode = fetch_output->RefreshMode;
	out_para->pirStartRow = fetch_output->pirStartRow;
	out_para->pirEndRow = fetch_output->pirEndRow;
	out_para->pirStartCol = fetch_output->pirStartCol;
	out_para->pirEndCol = fetch_output->pirEndCol;
	out_para->numCuInWidth = fetch_output->numCuInWidth;
	out_para->numCuInHeight = fetch_output->numCuInHeight;
#endif
#if USE_SPEED_LEVEL
	out_para->speed_level = fetch_output->speed_level;
#endif
#if USE_ROI_MODE_CONFIG
	out_para->valid_mode[0] = fetch_output->valid_mode[0];
	out_para->valid_mode[1] = fetch_output->valid_mode[1];
	out_para->valid_mode[2] = fetch_output->valid_mode[2];
#endif
#if CUDQP_QP_MAP
	out_para->cu_dqp_enable = fetch_output->cu_dqp_enable;
	out_para->cu_qp_group_area_size = fetch_output->cu_qp_group_area_size;
	out_para->cu_qp_group_pred_qp = fetch_output->cu_qp_group_pred_qp;
	out_para->md_slice_qp = fetch_output->md_slice_qp;
#if CUDQP_QP_MAP
	for (int i = 0; i < 256; i++)
	{
		out_para->CuQPMap[i] = fetch_output->CuQPMap[i];
	}
#endif
#endif

	//// need to give fme
	out_para->CtrPos[0][0][0] = Fetch_Ref_Window_IME->CtrPos[0][0][0];							//// need to give fme
	out_para->CtrPos[0][0][1] = Fetch_Ref_Window_IME->CtrPos[0][0][1];
	out_para->CtrPos[0][1][0] = Fetch_Ref_Window_IME->CtrPos[0][1][0];
	out_para->CtrPos[0][1][1] = Fetch_Ref_Window_IME->CtrPos[0][1][1];
	out_para->CtrPos[1][0][0] = Fetch_Ref_Window_IME->CtrPos[1][0][0];
	out_para->CtrPos[1][0][1] = Fetch_Ref_Window_IME->CtrPos[1][0][1];
	out_para->CtrPos[1][1][0] = Fetch_Ref_Window_IME->CtrPos[1][1][0];
	out_para->CtrPos[1][1][1] = Fetch_Ref_Window_IME->CtrPos[1][1][1];

	CtrPos[0][0][0] = Fetch_Ref_Window_IME->CtrPos[0][0][0];							//// need to give fme
	CtrPos[0][0][1] = Fetch_Ref_Window_IME->CtrPos[0][0][1];
	CtrPos[0][1][0] = Fetch_Ref_Window_IME->CtrPos[0][1][0];
	CtrPos[0][1][1] = Fetch_Ref_Window_IME->CtrPos[0][1][1];
	CtrPos[1][0][0] = Fetch_Ref_Window_IME->CtrPos[1][0][0];
	CtrPos[1][0][1] = Fetch_Ref_Window_IME->CtrPos[1][0][1];
	CtrPos[1][1][0] = Fetch_Ref_Window_IME->CtrPos[1][1][0];
	CtrPos[1][1][1] = Fetch_Ref_Window_IME->CtrPos[1][1][1];
#if IME_PRAGMA_ON
//#pragma HLS ARRAY_PARTITION variable=RefWindowLCU cyclic factor=SWW dim=1
//#pragma HLS ARRAY_PARTITION variable=RefWindowLCU_UP cyclic factor=(SWW>>1) dim=1
//#pragma HLS ARRAY_PARTITION variable=RefWindowLCU_VP cyclic factor=(SWW>>1) dim=1
// 
//#pragma HLS ARRAY_PARTITION variable=out_para->RefWindowLCU cyclic factor=256 dim=1
//#pragma HLS ARRAY_PARTITION variable=out_para->RefWindowLCU_UP cyclic factor=128 dim=1
//#pragma HLS ARRAY_PARTITION variable=out_para->RefWindowLCU_VP cyclic factor=128 dim=1

//#pragma HLS ARRAY_PARTITION variable=Fetch_Orig_Lcu_IME->y_org complete dim=1
//#pragma HLS ARRAY_PARTITION variable=Fetch_Orig_Lcu_IME->u_org complete dim=1
//#pragma HLS ARRAY_PARTITION variable=Fetch_Orig_Lcu_IME->v_org complete dim=1
//
//#pragma HLS ARRAY_PARTITION variable=out_para->y_org complete dim=1
//#pragma HLS ARRAY_PARTITION variable=out_para->u_org complete dim=1
//#pragma HLS ARRAY_PARTITION variable=out_para->v_org complete dim=1
#pragma HLS ARRAY_PARTITION variable=Fetch_Orig_Lcu_IME->y_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=Fetch_Orig_Lcu_IME->u_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=Fetch_Orig_Lcu_IME->v_org complete dim=2

#pragma HLS ARRAY_PARTITION variable=out_para->y_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=out_para->u_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=out_para->v_org complete dim=2

#endif

	//OrgT(
	//	Fetch_Orig_Lcu_IME->y_org,
	//	y_orgT
	//);

	//int i, j;

	for (U7 j = 0; j < 64; j++)
	{
#if IME_PRAGMA_ON
#pragma HLS PIPELINE
#endif
		for (U7 i = 0; i < 64; i++)
		{
#if IME_PRAGMA_ON
#pragma HLS UNROLL
#endif
			out_para->y_org[j][i] = Fetch_Orig_Lcu_IME->y_org[j][i];
		}
	}

	for (U6 j = 0; j < 32; j++)	
	{
#if IME_PRAGMA_ON
#pragma HLS PIPELINE
#endif
		for (U6 i = 0; i < 32; i++)
		{
#if IME_PRAGMA_ON
#pragma HLS UNROLL
#endif
			out_para->u_org[j][i] = Fetch_Orig_Lcu_IME->u_org[j][i];
			out_para->v_org[j][i] = Fetch_Orig_Lcu_IME->v_org[j][i];
		}
	}


}


static void fme_copy_refwin(
	pel RefWindowLCU_org[SWH][SWW],
	pel refwin_org[FME_SWH_SIZE][FME_SWW_SIZE],

	//pel RefWindowLCU[SWW][SWH],
	//pel refwin[FME_SWH_SIZE][FME_SWW_SIZE],
	U8 sw_tl_x,
	U8 sw_tl_y,
	S14 CtrPosIME[RANGE_NUM][DIR_DIM][MAP_DIMS], S14 CtrPosFME[RANGE_NUM][DIR_DIM][MAP_DIMS])
{
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=refwin_org complete dim=2
//#pragma HLS array_partition variable=refwin complete dim=2
#endif
	U7 i;
	U9 j;
	U7 k;
#if IME_VIVADO_HLS
	pel line_buf_org[SWW + 8] = { 0 };
	//pel line_buf[SWW + 8] = { 0 };
#else
	//static pel line_buf[SWW + 8] = { 0 };
	static pel line_buf_org[SWW + 8] = { 0 };
#endif
#if IME_PRAGMA_ON
#pragma HLS array_partition variable=line_buf_org complete dim=0
//#pragma HLS array_partition variable=line_buf complete dim=0
#endif
//	for (i = 0; i < FME_SWH_SIZE; i++) {
//#if IME_PRAGMA_ON	
//#pragma HLS PIPELINE
//#endif
//		if ((sw_tl_y - FENC_PADDING + i) >= 0 && (sw_tl_y - FENC_PADDING + i) <= SWW - 1)
//		{
//			for (j = 0; j < SWW; j++) {
//#if IME_PRAGMA_ON
//#pragma HLS UNROLL
//#endif
//				line_buf[j + FENC_PADDING] = RefWindowLCU[j][sw_tl_y - FENC_PADDING + i];
//			}
//		}
//		else
//		{
//			for (j = 0; j < SWW; j++) {
//#if IME_PRAGMA_ON			
//#pragma HLS UNROLL
//#endif
//				line_buf[j + FENC_PADDING] = 0;
//			}
//		}
//
//		for (k = 0; k < FME_SWW_SIZE; k++) {
//#if IME_PRAGMA_ON
//#pragma HLS UNROLL
//#endif
//			refwin[i][k] = line_buf[sw_tl_x + k];
//		}
//	}

	for (i = 0; i < FME_SWH_SIZE; i++) 
	{
#if IME_PRAGMA_ON	
#pragma HLS PIPELINE
#endif
		if ((sw_tl_y - FENC_PADDING + i) >= 0 && (sw_tl_y - FENC_PADDING + i) <= SWW - 1)
		{
			for (j = 0; j < SWW; j++) 
			{
#if IME_PRAGMA_ON
#pragma HLS UNROLL
#endif
				line_buf_org[j + FENC_PADDING] = RefWindowLCU_org[sw_tl_y - FENC_PADDING + i][j];
			}
		}
		else
		{
			for (j = 0; j < SWW; j++) 
			{
#if IME_PRAGMA_ON			
#pragma HLS UNROLL
#endif
				line_buf_org[j + FENC_PADDING] = 0;
			}
		}

		for (k = 0; k < FME_SWW_SIZE; k++) {
#if IME_PRAGMA_ON
#pragma HLS UNROLL
#endif
			refwin_org[i][k] = line_buf_org[sw_tl_x + k];
		}
	}

	//// check refwin_org
	//for (int j = 0; j < FME_SW_SIZE; j++)
	//{
	//	for (int i = 0; i < FME_SW_SIZE; i++)
	//	{
	//		if (refwin_org[j][i] != refwin[j][i])
	//		{
	//			printf("refwin_org error! ");
	//			printf("refwin_org[%d][%d] = %d\trefwin[%d][%d] = %d \n", j, i, refwin_org[j][i], j, i, refwin[j][i]);
	//		}
	//	}
	//}

	int offset_x = sw_tl_x - 4 - CtrPosIME[RANGE_MIN][MV_X][RW_DIM];
	int offset_y = sw_tl_y - 4 - CtrPosIME[RANGE_MIN][MV_Y][RW_DIM];

	CtrPosFME[RANGE_MIN][MV_X][PIC_DIM] = COM_MAX(CtrPosIME[RANGE_MIN][MV_X][PIC_DIM] + offset_x, CtrPosIME[RANGE_MIN][MV_X][PIC_DIM]);
	CtrPosFME[RANGE_MIN][MV_Y][PIC_DIM] = COM_MAX(CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM] + offset_y, CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM]);
	
	CtrPosFME[RANGE_MAX][MV_X][PIC_DIM] = COM_MIN(CtrPosIME[RANGE_MIN][MV_X][PIC_DIM] + offset_x + FME_SW_SIZE, CtrPosIME[RANGE_MAX][MV_X][PIC_DIM]);
	CtrPosFME[RANGE_MAX][MV_Y][PIC_DIM] = COM_MIN(CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM] + offset_y + FME_SW_SIZE, CtrPosIME[RANGE_MAX][MV_Y][PIC_DIM]);

	CtrPosFME[RANGE_MIN][MV_X][RW_DIM] = COM_MAX(0, 4 - sw_tl_x);
	CtrPosFME[RANGE_MIN][MV_Y][RW_DIM] = COM_MAX(0, 4 - sw_tl_y);

	CtrPosFME[RANGE_MAX][MV_X][RW_DIM] = COM_MIN(FME_SW_SIZE, SWW - sw_tl_x + 4);
	CtrPosFME[RANGE_MAX][MV_Y][RW_DIM] = COM_MIN(FME_SW_SIZE, SWH - sw_tl_y + 4);

}

#if 0//VIVADO_HLS_IME	//\D7ۺϺ\DC\C2\FD

void get_fme_refwin_test(
	pel RefWindowLCU_org[192][256],
	pel md_refwin[132][164],
	U8 sw_tl_x,
	U8 sw_tl_y,
	S14 offset_fme_sww_h_test[MV_D],
	S14 CtrPosIME[RANGE_NUM][DIR_DIM][MAP_DIMS],
	S14 CtrPos2FME[RANGE_NUM][DIR_DIM][MAP_DIMS],
	S14 CtrPos2MD[RANGE_NUM][DIR_DIM][MAP_DIMS],
	U5 fetch2md_fw_ptr_num_refp
)
{

#pragma HLS inline off

#if IME_PRAGMA_ON
#pragma HLS array_partition variable=RefWindowLCU_org complete dim=2
#pragma HLS array_partition variable=md_refwin complete dim=2
#endif

	if (fetch2md_fw_ptr_num_refp < 1)
	{
		return;
	}

	U8 i;
	U9 j;


	S14 Sw_88x88_TopLeft_x = sw_tl_x - 4;
	S14 Sw_88x88_TopLeft_y = sw_tl_y - 4;

	S14 Sw_128x98_TopLeft_test_x = Sw_88x88_TopLeft_x - 38;
	S14 Sw_128x98_TopLeft_test_y = Sw_88x88_TopLeft_y - 22;

	S14 ltPosX, ltPosY;
	S14 rbPosX_test, rbPosY_test;

	ltPosX = Sw_88x88_TopLeft_x - 38;
	ltPosY = Sw_88x88_TopLeft_y - 22;


	rbPosX_test = Sw_128x98_TopLeft_test_x + 164;
	rbPosY_test = Sw_128x98_TopLeft_test_y + 132;



	if (ltPosX < 0)
	{
		Sw_128x98_TopLeft_test_x = 0;
	}
	else if (rbPosX_test > 255)
	{
		Sw_128x98_TopLeft_test_x = 91;
	}

	if (ltPosY < 0)
	{
		Sw_128x98_TopLeft_test_y = 0;
	} 
	else if (rbPosY_test > 191)
	{
		Sw_128x98_TopLeft_test_y = 59;
	}


	offset_fme_sww_h_test[0] = Sw_88x88_TopLeft_x - Sw_128x98_TopLeft_test_x;
	offset_fme_sww_h_test[1] = Sw_88x88_TopLeft_y - Sw_128x98_TopLeft_test_y;



	for (i = 0; i < 132; i++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
		for (j = 0; j < 164; j++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			md_refwin[i][j] = RefWindowLCU_org[Sw_128x98_TopLeft_test_y + i][Sw_128x98_TopLeft_test_x + j];
		}
	}


	// CtrPos2FME
	S14 offset_x = Sw_88x88_TopLeft_x - CtrPosIME[RANGE_MIN][MV_X][RW_DIM];
	S14 offset_y = Sw_88x88_TopLeft_y - CtrPosIME[RANGE_MIN][MV_Y][RW_DIM];

	CtrPos2FME[RANGE_MIN][MV_X][PIC_DIM] = COM_MAX(CtrPosIME[RANGE_MIN][MV_X][PIC_DIM] + offset_x, CtrPosIME[RANGE_MIN][MV_X][PIC_DIM]);
	CtrPos2FME[RANGE_MIN][MV_Y][PIC_DIM] = COM_MAX(CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM] + offset_y, CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM]);

	CtrPos2FME[RANGE_MAX][MV_X][PIC_DIM] = COM_MIN(CtrPosIME[RANGE_MIN][MV_X][PIC_DIM] + offset_x + FME_SW_SIZE, CtrPosIME[RANGE_MAX][MV_X][PIC_DIM]);
	CtrPos2FME[RANGE_MAX][MV_Y][PIC_DIM] = COM_MIN(CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM] + offset_y + FME_SW_SIZE, CtrPosIME[RANGE_MAX][MV_Y][PIC_DIM]);


	CtrPos2FME[RANGE_MIN][MV_X][RW_DIM] = 0;//COM_MAX(0, FENC_PADDING - sw_tl_x);//0
	CtrPos2FME[RANGE_MIN][MV_Y][RW_DIM] = 0;//COM_MAX(0, FENC_PADDING - sw_tl_y);//0

	CtrPos2FME[RANGE_MAX][MV_X][RW_DIM] = 88;//COM_MIN(FME_SW_SIZE, SWW - Sw_88x88_TopLeft_x);//FME_SW_SIZE
	CtrPos2FME[RANGE_MAX][MV_Y][RW_DIM] = 88;//COM_MIN(FME_SW_SIZE, SWH - Sw_88x88_TopLeft_y);//FME_SW_SIZE


	// CtrPos2MD

	S14 offset_x_md = Sw_128x98_TopLeft_test_x - CtrPosIME[RANGE_MIN][MV_X][RW_DIM];
	S14 offset_y_md = Sw_128x98_TopLeft_test_y - CtrPosIME[RANGE_MIN][MV_Y][RW_DIM];

	CtrPos2MD[RANGE_MIN][MV_X][PIC_DIM] = COM_MAX(CtrPosIME[RANGE_MIN][MV_X][PIC_DIM] + offset_x_md, CtrPosIME[RANGE_MIN][MV_X][PIC_DIM]);
	CtrPos2MD[RANGE_MIN][MV_Y][PIC_DIM] = COM_MAX(CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM] + offset_y_md, CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM]);

	CtrPos2MD[RANGE_MAX][MV_X][PIC_DIM] = COM_MIN(CtrPosIME[RANGE_MIN][MV_X][PIC_DIM] + offset_x_md + FME_SWW_SIZE, CtrPosIME[RANGE_MAX][MV_X][PIC_DIM]);
	CtrPos2MD[RANGE_MAX][MV_Y][PIC_DIM] = COM_MIN(CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM] + offset_y_md + FME_SWH_SIZE, CtrPosIME[RANGE_MAX][MV_Y][PIC_DIM]);

	CtrPos2MD[RANGE_MIN][MV_X][RW_DIM] = 0;//COM_MAX(0, OFFSET_FME_SWW - Sw_88x88_TopLeft_x);
	CtrPos2MD[RANGE_MIN][MV_Y][RW_DIM] = 0;//COM_MAX(0, OFFSET_FME_SWH - Sw_88x88_TopLeft_y);

	CtrPos2MD[RANGE_MAX][MV_X][RW_DIM] = FME_SWW_SIZE;//COM_MIN(FME_SWW_SIZE, SWW - Sw_128x98_TopLeft_test_x);
	CtrPos2MD[RANGE_MAX][MV_Y][RW_DIM] = FME_SWH_SIZE;//COM_MIN(FME_SWH_SIZE, SWH - Sw_128x98_TopLeft_test[1]

}

#else

//static int num = 0;
void get_fme_refwin_test(
#if BW_DEBUG
	U10 RefWindowLCU_org[SWH][SWW],
	U10 md_refwin[FME_SWH_SIZE][FME_SWW_SIZE],
#else
	pel RefWindowLCU_org[SWH][SWW],
	//pel RefWindowLCU[SWW][SWH],
	//pel fme_refwin_test[FME_SWH_SIZE][FME_SWW_SIZE],
	pel md_refwin[FME_SWH_SIZE][FME_SWW_SIZE],
#endif
	U8 sw_tl_x,
	U8 sw_tl_y,
	S14 offset_fme_sww_h_test[MV_D],
	S14 CtrPosIME[RANGE_NUM][DIR_DIM][MAP_DIMS],
	S14 CtrPos2FME[RANGE_NUM][DIR_DIM][MAP_DIMS],
	S14 CtrPos2MD[RANGE_NUM][DIR_DIM][MAP_DIMS],
	U5 fetch2md_fw_ptr_num_refp
)
{

#pragma HLS inline off

#if IME_PRAGMA_ON
#pragma HLS array_partition variable=RefWindowLCU_org complete dim=2
//#pragma HLS array_partition variable=md_refwin complete dim=2
#pragma HLS array_partition variable=md_refwin cyclic factor = 16 dim=2
	
#endif

//#if !VIVADO_HLS_IME
	if (fetch2md_fw_ptr_num_refp < 1)
	{
		return;
	}
//#endif

	//num++;


	//U7 k;

	//pel line_buf[SWW + 8] = { 0 };
#if 1//VIVADO_HLS_IME//0//1

	U8 i;
	U9 j;

	//for (i = 0; i < FME_SWH_SIZE; i++)
	//{
	//	for (j = 0; j < FME_SWW_SIZE; j++)
	//	{
	//		//if (((sw_tl_y - FENC_PADDING + i) >= 0 && (sw_tl_y - FENC_PADDING + i) <= SWH - 1)
	//		//	&& ((sw_tl_x - FENC_PADDING + j) >= 0 && (sw_tl_x - FENC_PADDING + j) <= SWW - 1)
	//		//	)
	//		//{
	//		fme_refwin_test[i][j] = RefWindowLCU_org[sw_tl_y - FENC_PADDING + i][sw_tl_x - FENC_PADDING + j];
	//		//}
	//		//else
	//		//{
	//		//	fme_refwin_test[i][j] = 0;
	//		//}			
	//	}
	//}

	S14 Sw_88x88_TopLeft[MV_D];

	Sw_88x88_TopLeft[0] = sw_tl_x - FENC_PADDING;
	Sw_88x88_TopLeft[1] = sw_tl_y - FENC_PADDING;

	//if (Sw_88x88_TopLeft[0] < 0 || Sw_88x88_TopLeft[1] < 0)
	//{
	//	printf("error! 88x88 out bound! num = %d\n", num);
	//}


	//S14 offset_fme_sww_h[MV_D];
	S14 Sw_128x98_TopLeft_test[MV_D];

	Sw_128x98_TopLeft_test[0] = Sw_88x88_TopLeft[0] - OFFSET_FME_SWW;
	Sw_128x98_TopLeft_test[1] = Sw_88x88_TopLeft[1] - OFFSET_FME_SWH;

	S14 ltPosX, ltPosY;
	S14 rbPosX_test, rbPosY_test;

	ltPosX = Sw_88x88_TopLeft[0] - OFFSET_FME_SWW;
	ltPosY = Sw_88x88_TopLeft[1] - OFFSET_FME_SWH;


	rbPosX_test = Sw_128x98_TopLeft_test[0] + FME_SWW_SIZE;
	rbPosY_test = Sw_128x98_TopLeft_test[1] + FME_SWH_SIZE;



	if (ltPosX < 0)
	{
		//Sw_128x98_TopLeft_test[0] -= ltPosX;
		Sw_128x98_TopLeft_test[0] = 0;
	}

	if (ltPosY < 0)
	{
		//Sw_128x98_TopLeft_test[1] -= ltPosY;
		Sw_128x98_TopLeft_test[1] = 0;
	}
	if (rbPosX_test > (SWW - 1))
	{
		//Sw_128x98_TopLeft_test[0] -= (rbPosX_test - (SWW - 1));
		Sw_128x98_TopLeft_test[0] = (SWW - 1) - FME_SWW_SIZE;
	}

	if (rbPosY_test > (SWH - 1))
	{
		//Sw_128x98_TopLeft_test[1] -= (rbPosY_test - (SWH - 1));
		Sw_128x98_TopLeft_test[1] = (SWH - 1) - FME_SWH_SIZE;
	}



	S14 tmp_offset_fme_sww = Sw_88x88_TopLeft[0] - Sw_128x98_TopLeft_test[0];
	S14 tmp_offset_fme_swh = Sw_88x88_TopLeft[1] - Sw_128x98_TopLeft_test[1];

	//if (tmp_offset_fme_sww < 0 || tmp_offset_fme_swh < 0)
	//{
	//	printf("error!\n");
	//	exit(1);
	//}


	offset_fme_sww_h_test[0] = tmp_offset_fme_sww;
	offset_fme_sww_h_test[1] = tmp_offset_fme_swh;



	for (i = 0; i < FME_SWH_SIZE; i++)
	{
#if IME_PRAGMA_ON
#pragma HLS pipeline II=2
#endif
		for (j = 0; j < FME_SWW_SIZE; j++)
		{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
			md_refwin[i][j] = RefWindowLCU_org[Sw_88x88_TopLeft[1] - tmp_offset_fme_swh + i][Sw_88x88_TopLeft[0] - tmp_offset_fme_sww + j];
		}
	}


	////check
	//for (i = 0; i < FME_SW_SIZE; i++)
	//{
	//	for (j = 0; j < FME_SW_SIZE; j++)
	//	{
	//		if (fme_refwin_test[i][j] != md_refwin[i + tmp_offset_fme_swh][j + tmp_offset_fme_sww])
	//		{
	//			printf("error! i = %d, j = %d tmp_offset_fme_sww = %d tmp_offset_fme_swh = %d\n", i, j, tmp_offset_fme_sww, tmp_offset_fme_swh);
	//			exit(1);
	//		}
	//		//md_refwin[i][j] = RefWindowLCU[sw_tl_x - tmp_offset_fme_sww + j][sw_tl_y - tmp_offset_fme_swh + i];
	//	}
	//}

	//for (i = 0; i < FME_SW_SIZE; i++) 
	//{
	//	for (j = 0; j < FME_SW_SIZE; j++) 
	//	{
	//		fme_refwin_test[i][j] = md_refwin[i + tmp_offset_fme_swh][j + tmp_offset_fme_sww];
	//	}
	//}

	//// CtrPosIME
	//int CtrPosIME_RANGE_MIN_MV_X_RW_DIM = CtrPosIME[RANGE_MIN][MV_X][RW_DIM];
	//int CtrPosIME_RANGE_MIN_MV_Y_RW_DIM = CtrPosIME[RANGE_MIN][MV_Y][RW_DIM];
	//int CtrPosIME_RANGE_MAX_MV_X_RW_DIM = CtrPosIME[RANGE_MAX][MV_X][RW_DIM];
	//int CtrPosIME_RANGE_MAX_MV_Y_RW_DIM = CtrPosIME[RANGE_MAX][MV_Y][RW_DIM];

	//int CtrPosIME_RANGE_MIN_MV_X_PIC_DIM = CtrPosIME[RANGE_MIN][MV_X][PIC_DIM];
	//int CtrPosIME_RANGE_MIN_MV_Y_PIC_DIM = CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM];
	//int CtrPosIME_RANGE_MAX_MV_X_PIC_DIM = CtrPosIME[RANGE_MAX][MV_X][PIC_DIM];
	//int CtrPosIME_RANGE_MAX_MV_Y_PIC_DIM = CtrPosIME[RANGE_MAX][MV_Y][PIC_DIM];

	// CtrPos2FME
	S14 offset_x = Sw_88x88_TopLeft[0] - CtrPosIME[RANGE_MIN][MV_X][RW_DIM];
	S14 offset_y = Sw_88x88_TopLeft[1] - CtrPosIME[RANGE_MIN][MV_Y][RW_DIM];

	CtrPos2FME[RANGE_MIN][MV_X][PIC_DIM] = COM_MAX(CtrPosIME[RANGE_MIN][MV_X][PIC_DIM] + offset_x, CtrPosIME[RANGE_MIN][MV_X][PIC_DIM]);
	CtrPos2FME[RANGE_MIN][MV_Y][PIC_DIM] = COM_MAX(CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM] + offset_y, CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM]);

	CtrPos2FME[RANGE_MAX][MV_X][PIC_DIM] = COM_MIN(CtrPosIME[RANGE_MIN][MV_X][PIC_DIM] + offset_x + FME_SW_SIZE, CtrPosIME[RANGE_MAX][MV_X][PIC_DIM]);
	CtrPos2FME[RANGE_MAX][MV_Y][PIC_DIM] = COM_MIN(CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM] + offset_y + FME_SW_SIZE, CtrPosIME[RANGE_MAX][MV_Y][PIC_DIM]);

	//int CtrPos2FME_w = CtrPos2FME[RANGE_MAX][MV_Y][PIC_DIM] - CtrPos2FME[RANGE_MIN][MV_Y][PIC_DIM];
	//printf("CtrPos2FME_w = %d\n", CtrPos2FME[RANGE_MAX][MV_Y][PIC_DIM] - CtrPos2FME[RANGE_MIN][MV_Y][PIC_DIM]);
	//printf("CtrPos2FME max = %d mim = %d\n", CtrPos2FME[RANGE_MAX][MV_Y][PIC_DIM], CtrPos2FME[RANGE_MIN][MV_Y][PIC_DIM]);

	//if (CtrPos2FME[RANGE_MAX][MV_X][PIC_DIM] < -500 || CtrPos2FME[RANGE_MIN][MV_X][PIC_DIM] < -500)
	//{
	//	printf("CtrPos2FME error !%d\n");
	//}
	//if (CtrPos2FME_w != 88)
	//{
	//	printf("error !%d\n");
	//}

	CtrPos2FME[RANGE_MIN][MV_X][RW_DIM] = COM_MAX(0, FENC_PADDING - sw_tl_x);//0
	CtrPos2FME[RANGE_MIN][MV_Y][RW_DIM] = COM_MAX(0, FENC_PADDING - sw_tl_y);//0

	CtrPos2FME[RANGE_MAX][MV_X][RW_DIM] = COM_MIN(FME_SW_SIZE, SWW - Sw_88x88_TopLeft[0]);//FME_SW_SIZE
	CtrPos2FME[RANGE_MAX][MV_Y][RW_DIM] = COM_MIN(FME_SW_SIZE, SWH - Sw_88x88_TopLeft[1]);//FME_SW_SIZE


	//int CtrPos2FME_RANGE_MIN_MV_X_RW_DIM = CtrPos2FME[RANGE_MIN][MV_X][RW_DIM];
	//int CtrPos2FME_RANGE_MIN_MV_Y_RW_DIM = CtrPos2FME[RANGE_MIN][MV_Y][RW_DIM];
	//int CtrPos2FME_RANGE_MAX_MV_X_RW_DIM = CtrPos2FME[RANGE_MAX][MV_X][RW_DIM];
	//int CtrPos2FME_RANGE_MAX_MV_Y_RW_DIM = CtrPos2FME[RANGE_MAX][MV_Y][RW_DIM];

	//int CtrPos2FME_RANGE_MIN_MV_X_PIC_DIM = CtrPos2FME[RANGE_MIN][MV_X][PIC_DIM];
	//int CtrPos2FME_RANGE_MIN_MV_Y_PIC_DIM = CtrPos2FME[RANGE_MIN][MV_Y][PIC_DIM];
	//int CtrPos2FME_RANGE_MAX_MV_X_PIC_DIM = CtrPos2FME[RANGE_MAX][MV_X][PIC_DIM];
	//int CtrPos2FME_RANGE_MAX_MV_Y_PIC_DIM = CtrPos2FME[RANGE_MAX][MV_Y][PIC_DIM];

	// CtrPos2MD

	S14 offset_x_md = Sw_128x98_TopLeft_test[0] - CtrPosIME[RANGE_MIN][MV_X][RW_DIM];
	S14 offset_y_md = Sw_128x98_TopLeft_test[1] - CtrPosIME[RANGE_MIN][MV_Y][RW_DIM];

	CtrPos2MD[RANGE_MIN][MV_X][PIC_DIM] = COM_MAX(CtrPosIME[RANGE_MIN][MV_X][PIC_DIM] + offset_x_md, CtrPosIME[RANGE_MIN][MV_X][PIC_DIM]);
	CtrPos2MD[RANGE_MIN][MV_Y][PIC_DIM] = COM_MAX(CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM] + offset_y_md, CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM]);

	CtrPos2MD[RANGE_MAX][MV_X][PIC_DIM] = COM_MIN(CtrPosIME[RANGE_MIN][MV_X][PIC_DIM] + offset_x_md + FME_SWW_SIZE, CtrPosIME[RANGE_MAX][MV_X][PIC_DIM]);
	CtrPos2MD[RANGE_MAX][MV_Y][PIC_DIM] = COM_MIN(CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM] + offset_y_md + FME_SWH_SIZE, CtrPosIME[RANGE_MAX][MV_Y][PIC_DIM]);

	CtrPos2MD[RANGE_MIN][MV_X][RW_DIM] = 0;//COM_MAX(0, OFFSET_FME_SWW - Sw_88x88_TopLeft[0]);
	CtrPos2MD[RANGE_MIN][MV_Y][RW_DIM] = 0;//COM_MAX(0, OFFSET_FME_SWH - Sw_88x88_TopLeft[1]);

	CtrPos2MD[RANGE_MAX][MV_X][RW_DIM] = FME_SWW_SIZE;//COM_MIN(FME_SWW_SIZE, SWW - Sw_128x98_TopLeft_test[0]);
	CtrPos2MD[RANGE_MAX][MV_Y][RW_DIM] = FME_SWH_SIZE;//COM_MIN(FME_SWH_SIZE, SWH - Sw_128x98_TopLeft_test[1

	//int CtrPos2MD_RANGE_MIN_MV_X_RW_DIM = CtrPos2MD[RANGE_MIN][MV_X][RW_DIM];
	//int CtrPos2MD_RANGE_MIN_MV_Y_RW_DIM = CtrPos2MD[RANGE_MIN][MV_Y][RW_DIM];
	//int CtrPos2MD_RANGE_MAX_MV_X_RW_DIM = CtrPos2MD[RANGE_MAX][MV_X][RW_DIM];
	//int CtrPos2MD_RANGE_MAX_MV_Y_RW_DIM = CtrPos2MD[RANGE_MAX][MV_Y][RW_DIM];

	//int CtrPos2MD_RANGE_MIN_MV_X_PIC_DIM = CtrPos2MD[RANGE_MIN][MV_X][PIC_DIM];
	//int CtrPos2MD_RANGE_MIN_MV_Y_PIC_DIM = CtrPos2MD[RANGE_MIN][MV_Y][PIC_DIM];
	//int CtrPos2MD_RANGE_MAX_MV_X_PIC_DIM = CtrPos2MD[RANGE_MAX][MV_X][PIC_DIM];
	//int CtrPos2MD_RANGE_MAX_MV_Y_PIC_DIM = CtrPos2MD[RANGE_MAX][MV_Y][PIC_DIM];


	//int CtrPos2MD_x = CtrPos2MD[RANGE_MAX][MV_X][PIC_DIM] - CtrPos2MD[RANGE_MIN][MV_X][PIC_DIM];
	//int CtrPos2MD_y = CtrPos2MD[RANGE_MAX][MV_Y][PIC_DIM] - CtrPos2MD[RANGE_MIN][MV_Y][PIC_DIM];
	//int CtrPos2MD_x_rw_dim = CtrPos2MD[RANGE_MAX][MV_X][RW_DIM] - CtrPos2MD[RANGE_MIN][MV_X][RW_DIM];
	//int CtrPos2MD_y_rw_dim = CtrPos2MD[RANGE_MAX][MV_Y][RW_DIM] - CtrPos2MD[RANGE_MIN][MV_Y][RW_DIM];
	//int CtrPosIME_x_rw_dim = CtrPosIME[RANGE_MAX][MV_X][RW_DIM] - CtrPosIME[RANGE_MIN][MV_X][RW_DIM];
	//int CtrPosIME_y_rw_dim = CtrPosIME[RANGE_MAX][MV_Y][RW_DIM] - CtrPosIME[RANGE_MIN][MV_Y][RW_DIM];
#if 0
	if (CtrPos2MD_x != FME_SWW_SIZE || CtrPos2MD_y != FME_SWH_SIZE ||
		CtrPos2MD_x_rw_dim != FME_SWW_SIZE || CtrPos2MD_y_rw_dim != FME_SWH_SIZE
		)
	{

		printf("num = %d\n", num);
		printf("error!\n");
		printf("PIC_DIM:\n");
		printf("CtrPosIME_PIC_DIM min(%d %d) max(%d %d)\n", CtrPosIME[RANGE_MIN][MV_X][PIC_DIM], CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM], CtrPosIME[RANGE_MAX][MV_X][PIC_DIM], CtrPosIME[RANGE_MAX][MV_Y][PIC_DIM]);
		printf("CtrPos2MD_PIC_DIM min(%d %d) max(%d %d)\n", CtrPos2MD[RANGE_MIN][MV_X][PIC_DIM], CtrPos2MD[RANGE_MIN][MV_Y][PIC_DIM], CtrPos2MD[RANGE_MAX][MV_X][PIC_DIM], CtrPos2MD[RANGE_MAX][MV_Y][PIC_DIM]);
		printf("CtrPos2FME_PIC_DIM min(%d %d) max(%d %d)\n", CtrPos2FME[RANGE_MIN][MV_X][PIC_DIM], CtrPos2FME[RANGE_MIN][MV_Y][PIC_DIM], CtrPos2FME[RANGE_MAX][MV_X][PIC_DIM], CtrPos2FME[RANGE_MAX][MV_Y][PIC_DIM]);

		printf("\nRW_DIM:\n");

		printf("CtrPosIME_RW_DIM min(%d %d) max(%d %d)\n", CtrPosIME[RANGE_MIN][MV_X][RW_DIM], CtrPosIME[RANGE_MIN][MV_Y][RW_DIM], CtrPosIME[RANGE_MAX][MV_X][RW_DIM], CtrPosIME[RANGE_MAX][MV_Y][RW_DIM]);
		printf("CtrPos2MD_RW_DIM min(%d %d) max(%d %d)\n", CtrPos2MD[RANGE_MIN][MV_X][RW_DIM], CtrPos2MD[RANGE_MIN][MV_Y][RW_DIM], CtrPos2MD[RANGE_MAX][MV_X][RW_DIM], CtrPos2MD[RANGE_MAX][MV_Y][RW_DIM]);
		printf("CtrPos2FME_RW_DIM min(%d %d) max(%d %d)\n", CtrPos2FME[RANGE_MIN][MV_X][RW_DIM], CtrPos2FME[RANGE_MIN][MV_Y][RW_DIM], CtrPos2FME[RANGE_MAX][MV_X][RW_DIM], CtrPos2FME[RANGE_MAX][MV_Y][RW_DIM]);



		printf("offset_y_md = %d\n", offset_y_md);
		printf("Sw_128x98_TopLeft_test[1] = %d\n", Sw_128x98_TopLeft_test[1]);

		printf("tmp_offset_fme_sww = %d tmp_offset_fme_swh = %d\n", tmp_offset_fme_sww, tmp_offset_fme_swh);

		printf("CtrPos2MD_x_rw_dim = %d CtrPos2MD_y_rw_dim =%d \n", CtrPos2MD_x_rw_dim, CtrPos2MD_y_rw_dim);
		printf("CtrPosIME_x_rw_dim = %d CtrPosIME_y_rw_dim =%d \n", CtrPosIME_x_rw_dim, CtrPosIME_y_rw_dim);
		//system("pause");
		exit(1);
	}
#endif


#else

/* \CF\C2\C3\E6\B5Ĵ\FA\C2\EB Vivado_HLS \C4\D1\D2\D4\D7ۺϳ\F6\C0\B4*/

		S14 Sw_88x88_LT_x = sw_tl_x - 4;
		S14 Sw_88x88_LT_y = sw_tl_y - 4;

		S14 Sw_128x98_LT_x = Sw_88x88_LT_x - 38;
		S14 Sw_128x98_LT_y = Sw_88x88_LT_y - 22;


		if (sw_tl_x < 42)
		{
			Sw_128x98_LT_x = 0;
		}
		else if (sw_tl_x > 129)
		{
			Sw_128x98_LT_x = 91;
		}
		else
		{
			Sw_128x98_LT_x = sw_tl_x - 42;
		}


		if (sw_tl_y < 26)
		{
			Sw_128x98_LT_y = 0;
		}
		else if (sw_tl_y > 81)
		{
			Sw_128x98_LT_y = 59;
		}
		else
		{
			Sw_128x98_LT_y = sw_tl_y - 26;
		}



		//S14 tmp_offset_fme_sww = Sw_88x88_LT_x - Sw_128x98_LT_x;
		//S14 tmp_offset_fme_swh = Sw_88x88_LT_y - Sw_128x98_LT_y;

		offset_fme_sww_h_test[0] = Sw_88x88_LT_x - Sw_128x98_LT_x;
		offset_fme_sww_h_test[1] = Sw_88x88_LT_y - Sw_128x98_LT_y;

		U9 tmp_offset_w = Sw_128x98_LT_x;
		U8 tmp_offset_h = Sw_128x98_LT_y;

		for (U8 j = 0; j < 132; j++)
		{
#if IME_PRAGMA_ON
#pragma HLS pipeline
#endif
			for (U9 i = 0; i < 164; i++)
			{
#if IME_PRAGMA_ON
#pragma HLS unroll
#endif
				md_refwin[j][i] = RefWindowLCU_org[tmp_offset_h + j][tmp_offset_w + i];
			}
		}



		// CtrPos2FME
		S14 offset_x = Sw_88x88_LT_x - CtrPosIME[RANGE_MIN][MV_X][RW_DIM];
		S14 offset_y = Sw_88x88_LT_y - CtrPosIME[RANGE_MIN][MV_Y][RW_DIM];

		CtrPos2FME[RANGE_MIN][MV_X][PIC_DIM] = COM_MAX(CtrPosIME[RANGE_MIN][MV_X][PIC_DIM] + offset_x, CtrPosIME[RANGE_MIN][MV_X][PIC_DIM]);
		CtrPos2FME[RANGE_MIN][MV_Y][PIC_DIM] = COM_MAX(CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM] + offset_y, CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM]);

		CtrPos2FME[RANGE_MAX][MV_X][PIC_DIM] = COM_MIN(CtrPosIME[RANGE_MIN][MV_X][PIC_DIM] + offset_x + FME_SW_SIZE, CtrPosIME[RANGE_MAX][MV_X][PIC_DIM]);
		CtrPos2FME[RANGE_MAX][MV_Y][PIC_DIM] = COM_MIN(CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM] + offset_y + FME_SW_SIZE, CtrPosIME[RANGE_MAX][MV_Y][PIC_DIM]);


		CtrPos2FME[RANGE_MIN][MV_X][RW_DIM] = COM_MAX(0, FENC_PADDING - sw_tl_x);//0
		CtrPos2FME[RANGE_MIN][MV_Y][RW_DIM] = COM_MAX(0, FENC_PADDING - sw_tl_y);//0

		CtrPos2FME[RANGE_MAX][MV_X][RW_DIM] = COM_MIN(FME_SW_SIZE, SWW - Sw_88x88_LT_x);//FME_SW_SIZE
		CtrPos2FME[RANGE_MAX][MV_Y][RW_DIM] = COM_MIN(FME_SW_SIZE, SWH - Sw_88x88_LT_y);//FME_SW_SIZE



		// CtrPos2MD

		S14 offset_x_md = Sw_128x98_LT_x - CtrPosIME[RANGE_MIN][MV_X][RW_DIM];
		S14 offset_y_md = Sw_128x98_LT_y - CtrPosIME[RANGE_MIN][MV_Y][RW_DIM];

		CtrPos2MD[RANGE_MIN][MV_X][PIC_DIM] = COM_MAX(CtrPosIME[RANGE_MIN][MV_X][PIC_DIM] + offset_x_md, CtrPosIME[RANGE_MIN][MV_X][PIC_DIM]);
		CtrPos2MD[RANGE_MIN][MV_Y][PIC_DIM] = COM_MAX(CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM] + offset_y_md, CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM]);

		CtrPos2MD[RANGE_MAX][MV_X][PIC_DIM] = COM_MIN(CtrPosIME[RANGE_MIN][MV_X][PIC_DIM] + offset_x_md + FME_SWW_SIZE, CtrPosIME[RANGE_MAX][MV_X][PIC_DIM]);
		CtrPos2MD[RANGE_MAX][MV_Y][PIC_DIM] = COM_MIN(CtrPosIME[RANGE_MIN][MV_Y][PIC_DIM] + offset_y_md + FME_SWH_SIZE, CtrPosIME[RANGE_MAX][MV_Y][PIC_DIM]);

		CtrPos2MD[RANGE_MIN][MV_X][RW_DIM] = 0;//COM_MAX(0, 38 - Sw_88x88_LT_x);
		CtrPos2MD[RANGE_MIN][MV_Y][RW_DIM] = 0;//COM_MAX(0, 22 - Sw_88x88_LT_y);

		CtrPos2MD[RANGE_MAX][MV_X][RW_DIM] = FME_SWW_SIZE;//COM_MIN(FME_SWW_SIZE, SWW - Sw_128x98_LT_x);
		CtrPos2MD[RANGE_MAX][MV_Y][RW_DIM] = FME_SWH_SIZE;//COM_MIN(FME_SWH_SIZE, SWH - Sw_128x98_LT_y]);




#endif


}

#endif //!VIVADO_HLS_IME


#if ENABLE_BFRAME
void compareMvDir(
	U1 lidx[REFP_NUM], 
	S8 cur_refi[REFP_NUM], 
	ME_MV_INFO_BW *me_mv_info_ref0, 
	ME_MV_INFO_BW *me_mv_info_ref1, 
	ME_PMV_INFO_BW* me_pmv_info_ref0, 
	ME_PMV_INFO_BW* me_pmv_info_ref1, 
	ME_MV_DIR* mv_dir,
	ME_MV_COST_BW *me_mv_cost_Ref0, 
	ME_MV_COST_BW  *me_mv_cost_Ref1
)
{
	U4 x, y;

	/* 64x64 */
	mv_dir->block64x64MvDir[0][0].cur_refi = cur_refi[REFP_0];
	mv_dir->block64x64MvDir[0][0].lidx = lidx[REFP_0];
	if (cur_refi[REFP_1] > 0 && me_mv_cost_Ref1->sadTree64x64Best[0][0] < me_mv_cost_Ref0->sadTree64x64Best[0][0])
	{
		me_mv_info_ref0->sadTree64x64Mv[0][0][0] = me_mv_info_ref1->sadTree64x64Mv[0][0][0];
		me_mv_info_ref0->sadTree64x64Mv[0][0][1] = me_mv_info_ref1->sadTree64x64Mv[0][0][1];
		mv_dir->block64x64MvDir[0][0].cur_refi = cur_refi[REFP_1];
		mv_dir->block64x64MvDir[0][0].lidx = lidx[REFP_1];
	}

	for (y = 0; y < 2; y++)
	{
		/* 64x32 */
		mv_dir->block64x32MvDir[0][y].cur_refi = cur_refi[REFP_0];
		mv_dir->block64x32MvDir[0][y].lidx = lidx[REFP_0];
		if (cur_refi[REFP_1] > 0 && me_mv_cost_Ref1->sadTree64x32Best[0][y] < me_mv_cost_Ref0->sadTree64x32Best[0][y])
		{
			me_mv_info_ref0->sadTree64x32Mv[0][y][0] = me_mv_info_ref1->sadTree64x32Mv[0][y][0];
			me_mv_info_ref0->sadTree64x32Mv[0][y][1] = me_mv_info_ref1->sadTree64x32Mv[0][y][1];
			me_pmv_info_ref0->sadTree64x32PMv[0][y][0] = me_pmv_info_ref1->sadTree64x32PMv[0][y][0];
			me_pmv_info_ref0->sadTree64x32PMv[0][y][1] = me_pmv_info_ref1->sadTree64x32PMv[0][y][1];
			mv_dir->block64x32MvDir[0][y].cur_refi = cur_refi[REFP_1];
			mv_dir->block64x32MvDir[0][y].lidx = lidx[REFP_1];
		}

		/* 32x64 */
		mv_dir->block32x64MvDir[y][0].cur_refi = cur_refi[REFP_0];
		mv_dir->block32x64MvDir[y][0].lidx = lidx[REFP_0];
		if (cur_refi[REFP_1] > 0 && me_mv_cost_Ref1->sadTree32x64Best[y][0] < me_mv_cost_Ref0->sadTree32x64Best[y][0])
		{
			me_mv_info_ref0->sadTree32x64Mv[y][0][0] = me_mv_info_ref1->sadTree32x64Mv[y][0][0];
			me_mv_info_ref0->sadTree32x64Mv[y][0][1] = me_mv_info_ref1->sadTree32x64Mv[y][0][1];
			me_pmv_info_ref0->sadTree32x64PMv[y][0][0] = me_pmv_info_ref1->sadTree32x64PMv[y][0][0];
			me_pmv_info_ref0->sadTree32x64PMv[y][0][1] = me_pmv_info_ref1->sadTree32x64PMv[y][0][1];
			mv_dir->block32x64MvDir[y][0].cur_refi = cur_refi[REFP_1];
			mv_dir->block32x64MvDir[y][0].lidx = lidx[REFP_1];
		}
	}

	for (y = 0; y < 4; y++)
	{
		/* 64x16 */
		mv_dir->block64x16MvDir[0][y].cur_refi = cur_refi[REFP_0];
		mv_dir->block64x16MvDir[0][y].lidx = lidx[REFP_0];
		if (cur_refi[REFP_1] > 0 && me_mv_cost_Ref1->sadTree64x16Best[0][y] < me_mv_cost_Ref0->sadTree64x16Best[0][y])
		{
			me_mv_info_ref0->sadTree64x16Mv[0][y][0] = me_mv_info_ref1->sadTree64x16Mv[0][y][0];
			me_mv_info_ref0->sadTree64x16Mv[0][y][1] = me_mv_info_ref1->sadTree64x16Mv[0][y][1];
			me_pmv_info_ref0->sadTree64x16PMv[0][y][0] = me_pmv_info_ref1->sadTree64x16PMv[0][y][0];
			me_pmv_info_ref0->sadTree64x16PMv[0][y][1] = me_pmv_info_ref1->sadTree64x16PMv[0][y][1];
			mv_dir->block64x16MvDir[0][y].cur_refi = cur_refi[REFP_1];
			mv_dir->block64x16MvDir[0][y].lidx = lidx[REFP_1];
		}

		/* 16x64 */
		mv_dir->block16x64MvDir[y][0].cur_refi = cur_refi[REFP_0];
		mv_dir->block16x64MvDir[y][0].lidx = lidx[REFP_0];
		if (cur_refi[REFP_1] > 0 && me_mv_cost_Ref1->sadTree16x64Best[y][0] < me_mv_cost_Ref0->sadTree16x64Best[y][0])
		{
			me_mv_info_ref0->sadTree16x64Mv[y][0][0] = me_mv_info_ref1->sadTree16x64Mv[y][0][0];
			me_mv_info_ref0->sadTree16x64Mv[y][0][1] = me_mv_info_ref1->sadTree16x64Mv[y][0][1];
			me_pmv_info_ref0->sadTree16x64PMv[y][0][0] = me_pmv_info_ref1->sadTree16x64PMv[y][0][0];
			me_pmv_info_ref0->sadTree16x64PMv[y][0][1] = me_pmv_info_ref1->sadTree16x64PMv[y][0][1];
			mv_dir->block16x64MvDir[y][0].cur_refi = cur_refi[REFP_1];
			mv_dir->block16x64MvDir[y][0].lidx = lidx[REFP_1];
		}
	}

	for (y = 0; y < 8; y++)
	{
		/* 64x8 */
		mv_dir->block64x8MvDir[0][y].cur_refi = cur_refi[REFP_0];
		mv_dir->block64x8MvDir[0][y].lidx = lidx[REFP_0];
		if (cur_refi[REFP_1] > 0 && me_mv_cost_Ref1->sadTree64x8Best[0][y] < me_mv_cost_Ref0->sadTree64x8Best[0][y])
		{
			me_mv_info_ref0->sadTree64x8Mv[0][y][0] = me_mv_info_ref1->sadTree64x8Mv[0][y][0];
			me_mv_info_ref0->sadTree64x8Mv[0][y][1] = me_mv_info_ref1->sadTree64x8Mv[0][y][1];
			me_pmv_info_ref0->sadTree64x8PMv[0][y][0] = me_pmv_info_ref1->sadTree64x8PMv[0][y][0];
			me_pmv_info_ref0->sadTree64x8PMv[0][y][1] = me_pmv_info_ref1->sadTree64x8PMv[0][y][1];
			mv_dir->block64x8MvDir[0][y].cur_refi = cur_refi[REFP_1];
			mv_dir->block64x8MvDir[0][y].lidx = lidx[REFP_1];
		}

		/* 8x64 */
		mv_dir->block8x64MvDir[y][0].cur_refi = cur_refi[REFP_0];
		mv_dir->block8x64MvDir[y][0].lidx = lidx[REFP_0];
		if (cur_refi[REFP_1] > 0 && me_mv_cost_Ref1->sadTree8x64Best[y][0] < me_mv_cost_Ref0->sadTree8x64Best[y][0])
		{
			me_mv_info_ref0->sadTree8x64Mv[y][0][0] = me_mv_info_ref1->sadTree8x64Mv[y][0][0];
			me_mv_info_ref0->sadTree8x64Mv[y][0][1] = me_mv_info_ref1->sadTree8x64Mv[y][0][1];
			me_pmv_info_ref0->sadTree8x64PMv[y][0][0] = me_pmv_info_ref1->sadTree8x64PMv[y][0][0];
			me_pmv_info_ref0->sadTree8x64PMv[y][0][1] = me_pmv_info_ref1->sadTree8x64PMv[y][0][1];
			mv_dir->block8x64MvDir[y][0].cur_refi = cur_refi[REFP_1];
			mv_dir->block8x64MvDir[y][0].lidx = lidx[REFP_1];
		}
	}

	for (x = 0; x < 2; x++)
	{

		for (y = 0; y < 2; y++)
		{

			/* 32x32 */
			mv_dir->block32x32MvDir[x][y].cur_refi = cur_refi[REFP_0];
			mv_dir->block32x32MvDir[x][y].lidx = lidx[REFP_0];
			if (cur_refi[REFP_1] > 0 && me_mv_cost_Ref1->sadTree32x32Best[x][y] < me_mv_cost_Ref0->sadTree32x32Best[x][y])
			{
				me_mv_info_ref0->sadTree32x32Mv[x][y][0] = me_mv_info_ref1->sadTree32x32Mv[x][y][0];
				me_mv_info_ref0->sadTree32x32Mv[x][y][1] = me_mv_info_ref1->sadTree32x32Mv[x][y][1];
				me_pmv_info_ref0->sadTree32x32PMv[x][y][0] = me_pmv_info_ref1->sadTree32x32PMv[x][y][0];
				me_pmv_info_ref0->sadTree32x32PMv[x][y][1] = me_pmv_info_ref1->sadTree32x32PMv[x][y][1];
				mv_dir->block32x32MvDir[x][y].cur_refi = cur_refi[REFP_1];
				mv_dir->block32x32MvDir[x][y].lidx = lidx[REFP_1];
			}
		}

		for (y = 0; y < 4; y++)
		{

			/* 32x16 */
			mv_dir->block32x16MvDir[x][y].cur_refi = cur_refi[REFP_0];
			mv_dir->block32x16MvDir[x][y].lidx = lidx[REFP_0];
			if (cur_refi[REFP_1] > 0 && me_mv_cost_Ref1->sadTree32x16Best[x][y] < me_mv_cost_Ref0->sadTree32x16Best[x][y])
			{
				me_mv_info_ref0->sadTree32x16Mv[x][y][0] = me_mv_info_ref1->sadTree32x16Mv[x][y][0];
				me_mv_info_ref0->sadTree32x16Mv[x][y][1] = me_mv_info_ref1->sadTree32x16Mv[x][y][1];
				me_pmv_info_ref0->sadTree32x16PMv[x][y][0] = me_pmv_info_ref1->sadTree32x16PMv[x][y][0];
				me_pmv_info_ref0->sadTree32x16PMv[x][y][1] = me_pmv_info_ref1->sadTree32x16PMv[x][y][1];
				mv_dir->block32x16MvDir[x][y].cur_refi = cur_refi[REFP_1];
				mv_dir->block32x16MvDir[x][y].lidx = lidx[REFP_1];
			}

			/* 16x32 */
			mv_dir->block16x32MvDir[y][x].cur_refi = cur_refi[REFP_0];
			mv_dir->block16x32MvDir[y][x].lidx = lidx[REFP_0];
			if (cur_refi[REFP_1] > 0 && me_mv_cost_Ref1->sadTree16x32Best[y][x] < me_mv_cost_Ref0->sadTree16x32Best[y][x])
			{
				me_mv_info_ref0->sadTree16x32Mv[y][x][0] = me_mv_info_ref1->sadTree16x32Mv[y][x][0];
				me_mv_info_ref0->sadTree16x32Mv[y][x][1] = me_mv_info_ref1->sadTree16x32Mv[y][x][1];
				me_pmv_info_ref0->sadTree16x32PMv[y][x][0] = me_pmv_info_ref1->sadTree16x32PMv[y][x][0];
				me_pmv_info_ref0->sadTree16x32PMv[y][x][1] = me_pmv_info_ref1->sadTree16x32PMv[y][x][1];
				mv_dir->block16x32MvDir[y][x].cur_refi = cur_refi[REFP_1];
				mv_dir->block16x32MvDir[y][x].lidx = lidx[REFP_1];
			}
		}

		for (y = 0; y < 4; y++)
		{
			/* 32x8 */
			mv_dir->block32x8MvDir[x][y].cur_refi = cur_refi[REFP_0];
			mv_dir->block32x8MvDir[x][y].lidx = lidx[REFP_0];
			if (cur_refi[REFP_1] > 0 && me_mv_cost_Ref1->sadTree32x8Best[x][y] < me_mv_cost_Ref0->sadTree32x8Best[x][y])
			{
				me_mv_info_ref0->sadTree32x8Mv[x][y][0] = me_mv_info_ref1->sadTree32x8Mv[x][y][0];
				me_mv_info_ref0->sadTree32x8Mv[x][y][1] = me_mv_info_ref1->sadTree32x8Mv[x][y][1];
				me_pmv_info_ref0->sadTree32x8PMv[x][y][0] = me_pmv_info_ref1->sadTree32x8PMv[x][y][0];
				me_pmv_info_ref0->sadTree32x8PMv[x][y][1] = me_pmv_info_ref1->sadTree32x8PMv[x][y][1];
				mv_dir->block32x8MvDir[x][y].cur_refi = cur_refi[REFP_1];
				mv_dir->block32x8MvDir[x][y].lidx = lidx[REFP_1];
			}

			/* 8x32 */
			mv_dir->block8x32MvDir[y][x].cur_refi = cur_refi[REFP_0];
			mv_dir->block8x32MvDir[y][x].lidx = lidx[REFP_0];
			if (cur_refi[REFP_1] > 0 && me_mv_cost_Ref1->sadTree8x32Best[y][x] < me_mv_cost_Ref0->sadTree8x32Best[y][x])
			{
				me_mv_info_ref0->sadTree8x32Mv[y][x][0] = me_mv_info_ref1->sadTree8x32Mv[y][x][0];
				me_mv_info_ref0->sadTree8x32Mv[y][x][1] = me_mv_info_ref1->sadTree8x32Mv[y][x][1];
				me_pmv_info_ref0->sadTree8x32PMv[y][x][0] = me_pmv_info_ref1->sadTree8x32PMv[y][x][0];
				me_pmv_info_ref0->sadTree8x32PMv[y][x][1] = me_pmv_info_ref1->sadTree8x32PMv[y][x][1];
				mv_dir->block8x32MvDir[y][x].cur_refi = cur_refi[REFP_1];
				mv_dir->block8x32MvDir[y][x].lidx = lidx[REFP_1];
			}
		}
	}

	for (x = 0; x < 4; x++)
	{

		for (y = 0; y < 4; y++)
		{
			/* 16x16 */
			mv_dir->block16x16MvDir[x][y].cur_refi = cur_refi[REFP_0];
			mv_dir->block16x16MvDir[x][y].lidx = lidx[REFP_0];
			if (cur_refi[REFP_1] > 0 && me_mv_cost_Ref1->sadTree16x16Best[x][y] < me_mv_cost_Ref0->sadTree16x16Best[x][y])
			{
				me_mv_info_ref0->sadTree16x16Mv[x][y][0] = me_mv_info_ref1->sadTree16x16Mv[x][y][0];
				me_mv_info_ref0->sadTree16x16Mv[x][y][1] = me_mv_info_ref1->sadTree16x16Mv[x][y][1];
				me_pmv_info_ref0->sadTree16x16PMv[x][y][0] = me_pmv_info_ref1->sadTree16x16PMv[x][y][0];
				me_pmv_info_ref0->sadTree16x16PMv[x][y][1] = me_pmv_info_ref1->sadTree16x16PMv[x][y][1];
				mv_dir->block16x16MvDir[x][y].cur_refi = cur_refi[REFP_1];
				mv_dir->block16x16MvDir[x][y].lidx = lidx[REFP_1];
			}
		}

		for (y = 0; y < 8; y++)
		{
			/* 16x8 */
			mv_dir->block16x8MvDir[x][y].cur_refi = cur_refi[REFP_0];
			mv_dir->block16x8MvDir[x][y].lidx = lidx[REFP_0];
			if (cur_refi[REFP_1] > 0 && me_mv_cost_Ref1->sadTree16x8Best[x][y] < me_mv_cost_Ref0->sadTree16x8Best[x][y])
			{
				me_mv_info_ref0->sadTree16x8Mv[x][y][0] = me_mv_info_ref1->sadTree16x8Mv[x][y][0];
				me_mv_info_ref0->sadTree16x8Mv[x][y][1] = me_mv_info_ref1->sadTree16x8Mv[x][y][1];
				me_pmv_info_ref0->sadTree16x8PMv[x][y][0] = me_pmv_info_ref1->sadTree16x8PMv[x][y][0];
				me_pmv_info_ref0->sadTree16x8PMv[x][y][1] = me_pmv_info_ref1->sadTree16x8PMv[x][y][1];
				mv_dir->block16x8MvDir[x][y].cur_refi = cur_refi[REFP_1];
				mv_dir->block16x8MvDir[x][y].lidx = lidx[REFP_1];
			}

			/* 8x16 */
			mv_dir->block8x16MvDir[y][x].cur_refi = cur_refi[REFP_0];
			mv_dir->block8x16MvDir[y][x].lidx = lidx[REFP_0];
			if (cur_refi[REFP_1] > 0 && me_mv_cost_Ref1->sadTree8x16Best[y][x] < me_mv_cost_Ref0->sadTree8x16Best[y][x])
			{
				me_mv_info_ref0->sadTree8x16Mv[y][x][0] = me_mv_info_ref1->sadTree8x16Mv[y][x][0];
				me_mv_info_ref0->sadTree8x16Mv[y][x][1] = me_mv_info_ref1->sadTree8x16Mv[y][x][1];
				me_pmv_info_ref0->sadTree8x16PMv[y][x][0] = me_pmv_info_ref1->sadTree8x16PMv[y][x][0];
				me_pmv_info_ref0->sadTree8x16PMv[y][x][1] = me_pmv_info_ref1->sadTree8x16PMv[y][x][1];
				mv_dir->block8x16MvDir[y][x].cur_refi = cur_refi[REFP_1];
				mv_dir->block8x16MvDir[y][x].lidx = lidx[REFP_1];
			}
		}
	}

	for (x = 0; x < 8; x++)
	{

		for (y = 0; y < 8; y++)
		{
			/* 8x8 */
			mv_dir->block8x8MvDir[x][y].cur_refi = cur_refi[REFP_0];
			mv_dir->block8x8MvDir[x][y].lidx = lidx[REFP_0];
			if (cur_refi[REFP_1] > 0 && me_mv_cost_Ref1->sadTree8x8Best[x][y] < me_mv_cost_Ref0->sadTree8x8Best[x][y])
			{
				me_mv_info_ref0->sadTree8x8Mv[x][y][0] = me_mv_info_ref1->sadTree8x8Mv[x][y][0];
				me_mv_info_ref0->sadTree8x8Mv[x][y][1] = me_mv_info_ref1->sadTree8x8Mv[x][y][1];
				me_pmv_info_ref0->sadTree8x8PMv[x][y][0] = me_pmv_info_ref1->sadTree8x8PMv[x][y][0];
				me_pmv_info_ref0->sadTree8x8PMv[x][y][1] = me_pmv_info_ref1->sadTree8x8PMv[x][y][1];
				mv_dir->block8x8MvDir[x][y].cur_refi = cur_refi[REFP_1];
				mv_dir->block8x8MvDir[x][y].lidx = lidx[REFP_1];
			}
		}
	}

}

void memsetMvDir(
	//U1 lidx[REFP_NUM], 
	//S8 cur_refi[REFP_NUM], 
	//ME_MV_INFO_BW* me_mv_info_ref0, 
	//ME_MV_INFO_BW* me_mv_info_ref1, 
	//ME_PMV_INFO_BW* me_pmv_info_ref0, 
	//ME_PMV_INFO_BW* me_pmv_info_ref1, 
	ME_MV_DIR* mv_dir
	//, 
	//ME_MV_COST_BW* me_mv_cost_Ref0, 
	//ME_MV_COST_BW* me_mv_cost_Ref1
)
{
	U4 x, y;

	/* 64x64 */
	mv_dir->block64x64MvDir[0][0].cur_refi = 0;
	mv_dir->block64x64MvDir[0][0].lidx = 0;
	//if (0 > 0 && me_mv_cost_Ref1->sadTree64x64Best[0][0] < me_mv_cost_Ref0->sadTree64x64Best[0][0])
	//{
	//	//me_mv_info_ref0->sadTree64x64Mv[0][0][0] = me_mv_info_ref1->sadTree64x64Mv[0][0][0];
	//	//me_mv_info_ref0->sadTree64x64Mv[0][0][1] = me_mv_info_ref1->sadTree64x64Mv[0][0][1];
	//	mv_dir->block64x64MvDir[0][0].cur_refi = 0;
	//	mv_dir->block64x64MvDir[0][0].lidx = 0;
	//}

	for (y = 0; y < 2; y++)
	{
		/* 64x32 */
		mv_dir->block64x32MvDir[0][y].cur_refi = 0;
		mv_dir->block64x32MvDir[0][y].lidx = 0;
		//if (0 > 0 && me_mv_cost_Ref1->sadTree64x32Best[0][y] < me_mv_cost_Ref0->sadTree64x32Best[0][y])
		//{
		//	//me_mv_info_ref0->sadTree64x32Mv[0][y][0] = me_mv_info_ref1->sadTree64x32Mv[0][y][0];
		//	//me_mv_info_ref0->sadTree64x32Mv[0][y][1] = me_mv_info_ref1->sadTree64x32Mv[0][y][1];
		//	//me_pmv_info_ref0->sadTree64x32PMv[0][y][0] = me_pmv_info_ref1->sadTree64x32PMv[0][y][0];
		//	//me_pmv_info_ref0->sadTree64x32PMv[0][y][1] = me_pmv_info_ref1->sadTree64x32PMv[0][y][1];
		//	mv_dir->block64x32MvDir[0][y].cur_refi = 0;
		//	mv_dir->block64x32MvDir[0][y].lidx = 0;
		//}

		/* 32x64 */
		mv_dir->block32x64MvDir[y][0].cur_refi = 0;
		mv_dir->block32x64MvDir[y][0].lidx = 0;
		//if (0 > 0 && me_mv_cost_Ref1->sadTree32x64Best[y][0] < me_mv_cost_Ref0->sadTree32x64Best[y][0])
		//{
		//	//me_mv_info_ref0->sadTree32x64Mv[y][0][0] = me_mv_info_ref1->sadTree32x64Mv[y][0][0];
		//	//me_mv_info_ref0->sadTree32x64Mv[y][0][1] = me_mv_info_ref1->sadTree32x64Mv[y][0][1];
		//	//me_pmv_info_ref0->sadTree32x64PMv[y][0][0] = me_pmv_info_ref1->sadTree32x64PMv[y][0][0];
		//	//me_pmv_info_ref0->sadTree32x64PMv[y][0][1] = me_pmv_info_ref1->sadTree32x64PMv[y][0][1];
		//	mv_dir->block32x64MvDir[y][0].cur_refi = 0;
		//	mv_dir->block32x64MvDir[y][0].lidx = 0;
		//}
	}

	for (y = 0; y < 4; y++)
	{
		/* 64x16 */
		mv_dir->block64x16MvDir[0][y].cur_refi = 0;
		mv_dir->block64x16MvDir[0][y].lidx = 0;
		//if (0 > 0 && me_mv_cost_Ref1->sadTree64x16Best[0][y] < me_mv_cost_Ref0->sadTree64x16Best[0][y])
		//{
		//	//me_mv_info_ref0->sadTree64x16Mv[0][y][0] = me_mv_info_ref1->sadTree64x16Mv[0][y][0];
		//	//me_mv_info_ref0->sadTree64x16Mv[0][y][1] = me_mv_info_ref1->sadTree64x16Mv[0][y][1];
		//	//me_pmv_info_ref0->sadTree64x16PMv[0][y][0] = me_pmv_info_ref1->sadTree64x16PMv[0][y][0];
		//	//me_pmv_info_ref0->sadTree64x16PMv[0][y][1] = me_pmv_info_ref1->sadTree64x16PMv[0][y][1];
		//	mv_dir->block64x16MvDir[0][y].cur_refi = 0;
		//	mv_dir->block64x16MvDir[0][y].lidx = 0;
		//}

		/* 16x64 */
		mv_dir->block16x64MvDir[y][0].cur_refi = 0;
		mv_dir->block16x64MvDir[y][0].lidx = 0;
		//if (0 > 0 && me_mv_cost_Ref1->sadTree16x64Best[y][0] < me_mv_cost_Ref0->sadTree16x64Best[y][0])
		//{
		//	//me_mv_info_ref0->sadTree16x64Mv[y][0][0] = me_mv_info_ref1->sadTree16x64Mv[y][0][0];
		//	//me_mv_info_ref0->sadTree16x64Mv[y][0][1] = me_mv_info_ref1->sadTree16x64Mv[y][0][1];
		//	//me_pmv_info_ref0->sadTree16x64PMv[y][0][0] = me_pmv_info_ref1->sadTree16x64PMv[y][0][0];
		//	//me_pmv_info_ref0->sadTree16x64PMv[y][0][1] = me_pmv_info_ref1->sadTree16x64PMv[y][0][1];
		//	mv_dir->block16x64MvDir[y][0].cur_refi = 0;
		//	mv_dir->block16x64MvDir[y][0].lidx = 0;
		//}
	}

	for (y = 0; y < 8; y++)
	{
		/* 64x8 */
		mv_dir->block64x8MvDir[0][y].cur_refi = 0;
		mv_dir->block64x8MvDir[0][y].lidx = 0;
		//if (0 > 0 && me_mv_cost_Ref1->sadTree64x8Best[0][y] < me_mv_cost_Ref0->sadTree64x8Best[0][y])
		//{
		//	//me_mv_info_ref0->sadTree64x8Mv[0][y][0] = me_mv_info_ref1->sadTree64x8Mv[0][y][0];
		//	//me_mv_info_ref0->sadTree64x8Mv[0][y][1] = me_mv_info_ref1->sadTree64x8Mv[0][y][1];
		//	//me_pmv_info_ref0->sadTree64x8PMv[0][y][0] = me_pmv_info_ref1->sadTree64x8PMv[0][y][0];
		//	//me_pmv_info_ref0->sadTree64x8PMv[0][y][1] = me_pmv_info_ref1->sadTree64x8PMv[0][y][1];
		//	mv_dir->block64x8MvDir[0][y].cur_refi = 0;
		//	mv_dir->block64x8MvDir[0][y].lidx = 0;
		//}

		/* 8x64 */
		mv_dir->block8x64MvDir[y][0].cur_refi = 0;
		mv_dir->block8x64MvDir[y][0].lidx = 0;
		//if (0 > 0 && me_mv_cost_Ref1->sadTree8x64Best[y][0] < me_mv_cost_Ref0->sadTree8x64Best[y][0])
		//{
		//	//me_mv_info_ref0->sadTree8x64Mv[y][0][0] = me_mv_info_ref1->sadTree8x64Mv[y][0][0];
		//	//me_mv_info_ref0->sadTree8x64Mv[y][0][1] = me_mv_info_ref1->sadTree8x64Mv[y][0][1];
		//	//me_pmv_info_ref0->sadTree8x64PMv[y][0][0] = me_pmv_info_ref1->sadTree8x64PMv[y][0][0];
		//	//me_pmv_info_ref0->sadTree8x64PMv[y][0][1] = me_pmv_info_ref1->sadTree8x64PMv[y][0][1];
		//	mv_dir->block8x64MvDir[y][0].cur_refi = 0;
		//	mv_dir->block8x64MvDir[y][0].lidx = 0;
		//}
	}

	for (x = 0; x < 2; x++)
	{

		for (y = 0; y < 2; y++)
		{

			/* 32x32 */
			mv_dir->block32x32MvDir[x][y].cur_refi = 0;
			mv_dir->block32x32MvDir[x][y].lidx = 0;
			//if (0 > 0 && me_mv_cost_Ref1->sadTree32x32Best[x][y] < me_mv_cost_Ref0->sadTree32x32Best[x][y])
			//{
			//	//me_mv_info_ref0->sadTree32x32Mv[x][y][0] = 0;	
			//	//me_mv_info_ref0->sadTree32x32Mv[x][y][1] = 0;
			//	//me_pmv_info_ref0->sadTree32x32PMv[x][y][0] = 0;
			//	//me_pmv_info_ref0->sadTree32x32PMv[x][y][1] = 0;

			//	//me_mv_info_ref1->sadTree32x32Mv[x][y][0] = 0;
			//	//me_mv_info_ref1->sadTree32x32Mv[x][y][1] = 0;
			//	//me_pmv_info_ref1->sadTree32x32PMv[x][y][0] = 0;
			//	//me_pmv_info_ref1->sadTree32x32PMv[x][y][1] = 0;

			//	mv_dir->block32x32MvDir[x][y].cur_refi = 0;
			//	mv_dir->block32x32MvDir[x][y].lidx = 0;
			//}
		}

		for (y = 0; y < 4; y++)
		{

			/* 32x16 */
			mv_dir->block32x16MvDir[x][y].cur_refi = 0;
			mv_dir->block32x16MvDir[x][y].lidx = 0;
			//if (0 > 0 && me_mv_cost_Ref1->sadTree32x16Best[x][y] < me_mv_cost_Ref0->sadTree32x16Best[x][y])
			//{
			//	//me_mv_info_ref0->sadTree32x16Mv[x][y][0] = me_mv_info_ref1->sadTree32x16Mv[x][y][0];
			//	//me_mv_info_ref0->sadTree32x16Mv[x][y][1] = me_mv_info_ref1->sadTree32x16Mv[x][y][1];
			//	//me_pmv_info_ref0->sadTree32x16PMv[x][y][0] = me_pmv_info_ref1->sadTree32x16PMv[x][y][0];
			//	//me_pmv_info_ref0->sadTree32x16PMv[x][y][1] = me_pmv_info_ref1->sadTree32x16PMv[x][y][1];
			//	mv_dir->block32x16MvDir[x][y].cur_refi = 0;
			//	mv_dir->block32x16MvDir[x][y].lidx = 0;
			//}

			/* 16x32 */
			mv_dir->block16x32MvDir[y][x].cur_refi = 0;
			mv_dir->block16x32MvDir[y][x].lidx = 0;
			//if (0 > 0 && me_mv_cost_Ref1->sadTree16x32Best[y][x] < me_mv_cost_Ref0->sadTree16x32Best[y][x])
			//{
			//	//me_mv_info_ref0->sadTree16x32Mv[y][x][0] = me_mv_info_ref1->sadTree16x32Mv[y][x][0];
			//	//me_mv_info_ref0->sadTree16x32Mv[y][x][1] = me_mv_info_ref1->sadTree16x32Mv[y][x][1];
			//	//me_pmv_info_ref0->sadTree16x32PMv[y][x][0] = me_pmv_info_ref1->sadTree16x32PMv[y][x][0];
			//	//me_pmv_info_ref0->sadTree16x32PMv[y][x][1] = me_pmv_info_ref1->sadTree16x32PMv[y][x][1];
			//	mv_dir->block16x32MvDir[y][x].cur_refi = 0;
			//	mv_dir->block16x32MvDir[y][x].lidx = 0;
			//}
		}

		for (y = 0; y < 4; y++)
		{
			/* 32x8 */
			mv_dir->block32x8MvDir[x][y].cur_refi = 0;
			mv_dir->block32x8MvDir[x][y].lidx = 0;
			//if (0 > 0 && me_mv_cost_Ref1->sadTree32x8Best[x][y] < me_mv_cost_Ref0->sadTree32x8Best[x][y])
			//{
			//	//me_mv_info_ref0->sadTree32x8Mv[x][y][0] = me_mv_info_ref1->sadTree32x8Mv[x][y][0];
			//	//me_mv_info_ref0->sadTree32x8Mv[x][y][1] = me_mv_info_ref1->sadTree32x8Mv[x][y][1];
			//	//me_pmv_info_ref0->sadTree32x8PMv[x][y][0] = me_pmv_info_ref1->sadTree32x8PMv[x][y][0];
			//	//me_pmv_info_ref0->sadTree32x8PMv[x][y][1] = me_pmv_info_ref1->sadTree32x8PMv[x][y][1];
			//	mv_dir->block32x8MvDir[x][y].cur_refi = 0;
			//	mv_dir->block32x8MvDir[x][y].lidx = 0;
			//}

			/* 8x32 */
			mv_dir->block8x32MvDir[y][x].cur_refi = 0;
			mv_dir->block8x32MvDir[y][x].lidx = 0;
			//if (0 > 0 && me_mv_cost_Ref1->sadTree8x32Best[y][x] < me_mv_cost_Ref0->sadTree8x32Best[y][x])
			//{
			//	//me_mv_info_ref0->sadTree8x32Mv[y][x][0] = me_mv_info_ref1->sadTree8x32Mv[y][x][0];
			//	//me_mv_info_ref0->sadTree8x32Mv[y][x][1] = me_mv_info_ref1->sadTree8x32Mv[y][x][1];
			//	//me_pmv_info_ref0->sadTree8x32PMv[y][x][0] = me_pmv_info_ref1->sadTree8x32PMv[y][x][0];
			//	//me_pmv_info_ref0->sadTree8x32PMv[y][x][1] = me_pmv_info_ref1->sadTree8x32PMv[y][x][1];
			//	mv_dir->block8x32MvDir[y][x].cur_refi = 0;
			//	mv_dir->block8x32MvDir[y][x].lidx = 0;
			//}
		}
	}

	for (x = 0; x < 4; x++)
	{

		for (y = 0; y < 4; y++)
		{
			/* 16x16 */
			mv_dir->block16x16MvDir[x][y].cur_refi = 0;
			mv_dir->block16x16MvDir[x][y].lidx = 0;
			//if (0 > 0 && me_mv_cost_Ref1->sadTree16x16Best[x][y] < me_mv_cost_Ref0->sadTree16x16Best[x][y])
			//{
			//	//me_mv_info_ref0->sadTree16x16Mv[x][y][0] = me_mv_info_ref1->sadTree16x16Mv[x][y][0];
			//	//me_mv_info_ref0->sadTree16x16Mv[x][y][1] = me_mv_info_ref1->sadTree16x16Mv[x][y][1];
			//	//me_pmv_info_ref0->sadTree16x16PMv[x][y][0] = me_pmv_info_ref1->sadTree16x16PMv[x][y][0];
			//	//me_pmv_info_ref0->sadTree16x16PMv[x][y][1] = me_pmv_info_ref1->sadTree16x16PMv[x][y][1];
			//	mv_dir->block16x16MvDir[x][y].cur_refi = 0;
			//	mv_dir->block16x16MvDir[x][y].lidx = 0;
			//}
		}

		for (y = 0; y < 8; y++)
		{
			/* 16x8 */
			mv_dir->block16x8MvDir[x][y].cur_refi = 0;
			mv_dir->block16x8MvDir[x][y].lidx = 0;
			//if (0 > 0 && me_mv_cost_Ref1->sadTree16x8Best[x][y] < me_mv_cost_Ref0->sadTree16x8Best[x][y])
			//{
			//	//me_mv_info_ref0->sadTree16x8Mv[x][y][0] = me_mv_info_ref1->sadTree16x8Mv[x][y][0];
			//	//me_mv_info_ref0->sadTree16x8Mv[x][y][1] = me_mv_info_ref1->sadTree16x8Mv[x][y][1];
			//	//me_pmv_info_ref0->sadTree16x8PMv[x][y][0] = me_pmv_info_ref1->sadTree16x8PMv[x][y][0];
			//	//me_pmv_info_ref0->sadTree16x8PMv[x][y][1] = me_pmv_info_ref1->sadTree16x8PMv[x][y][1];
			//	mv_dir->block16x8MvDir[x][y].cur_refi = 0;
			//	mv_dir->block16x8MvDir[x][y].lidx = 0;
			//}

			/* 8x16 */
			mv_dir->block8x16MvDir[y][x].cur_refi = 0;
			mv_dir->block8x16MvDir[y][x].lidx = 0;
			//if (0 > 0 && me_mv_cost_Ref1->sadTree8x16Best[y][x] < me_mv_cost_Ref0->sadTree8x16Best[y][x])
			//{
			//	//me_mv_info_ref0->sadTree8x16Mv[y][x][0] = me_mv_info_ref1->sadTree8x16Mv[y][x][0];
			//	//me_mv_info_ref0->sadTree8x16Mv[y][x][1] = me_mv_info_ref1->sadTree8x16Mv[y][x][1];
			//	//me_pmv_info_ref0->sadTree8x16PMv[y][x][0] = me_pmv_info_ref1->sadTree8x16PMv[y][x][0];
			//	//me_pmv_info_ref0->sadTree8x16PMv[y][x][1] = me_pmv_info_ref1->sadTree8x16PMv[y][x][1];
			//	mv_dir->block8x16MvDir[y][x].cur_refi = 0;
			//	mv_dir->block8x16MvDir[y][x].lidx = 0;
			//}
		}
	}

	for (x = 0; x < 8; x++)
	{

		for (y = 0; y < 8; y++)
		{
			/* 8x8 */
			mv_dir->block8x8MvDir[x][y].cur_refi = 0;
			mv_dir->block8x8MvDir[x][y].lidx = 0;
			//if (0 > 0 && me_mv_cost_Ref1->sadTree8x8Best[x][y] < me_mv_cost_Ref0->sadTree8x8Best[x][y])
			//{
			//	//me_mv_info_ref0->sadTree8x8Mv[x][y][0] = me_mv_info_ref1->sadTree8x8Mv[x][y][0];
			//	//me_mv_info_ref0->sadTree8x8Mv[x][y][1] = me_mv_info_ref1->sadTree8x8Mv[x][y][1];
			//	//me_pmv_info_ref0->sadTree8x8PMv[x][y][0] = me_pmv_info_ref1->sadTree8x8PMv[x][y][0];
			//	//me_pmv_info_ref0->sadTree8x8PMv[x][y][1] = me_pmv_info_ref1->sadTree8x8PMv[x][y][1];
			//	mv_dir->block8x8MvDir[x][y].cur_refi = 0;
			//	mv_dir->block8x8MvDir[x][y].lidx = 0;
			//}
		}
	}

}

#endif

void ime_run_uni(
	ENC_ME_LINE_MAP_IME* me_line_map_ptr_IME, 
	ENC_ME_NEB_INFO new_above_nebs_line_IME[ABOVE_LINE_LEN],
	//pel RefWindowLCU[49152], 
#if BW_DEBUG
	U10 swOutLv0_org[192][256],
	U10 y_org[MAX_CU_SIZE_FETCH][MAX_CU_SIZE_FETCH],
#else
	pel swOutLv0_org[192][256],
	pel y_org[MAX_CU_SIZE_FETCH][MAX_CU_SIZE_FETCH],
#endif
	//FETCH2MD_FW* fetch2md_fw_ptr, 
	S16 refp_ptr[17][2],
	ME_MV_INFO_BW* me_mv_info, 
	ME_PMV_INFO_BW* me_pmv_info,
#if BW_DEBUG
	U10 RefWindowLCU_2d[FME_SWH_SIZE][FME_SWW_SIZE],
#else
	pel RefWindowLCU_2d[FME_SWH_SIZE][FME_SWW_SIZE],
#endif
	S14 CtrPosFME[RANGE_NUM][DIR_DIM][MAP_DIMS], 
	S14 CtrPos[RANGE_NUM][DIR_DIM][MAP_DIMS],
	U5 fetch2md_fw_ptr_num_refp, 
	U11 me_line_map_ptr_min_scu_x_in,
	U11 fetch2md_fw_ptr_pic_width_in_scu, 
	U11 fetch2md_fw_ptr_pic_height_in_scu, 
	U12 fetch_output_pix_x,
	U12 fetch_output_pix_y, 
	U9 fetch2md_fw_ptr_cur_ptr, 
	U9 fetch2md_fw_ptr_cur_ref,
	U4 bit_depth, 
	U32 fetch_output_lambda_mv,
	S8 flag_mv_cfg, 
	S14 mv_cfg[2], 
	S14 swSubLv0TopLeft[MV_D], 
	U1 lidx, 
	U8 cur_refi, 
	ME_MV_COST_BW* me_mv_cost,
	S14 offset_fme_sww_h[MV_D],
	S14 CtrPos2MD[RANGE_NUM][DIR_DIM][MAP_DIMS]
)
{
	S14 bestTriMv[2][MV_D];//S14 bestTriMv[3][MV_D];
	S14 bestPosLv1[2];
	S14 predMvLcu[2];
	S14 predMvTemp[2];
	U32 mapScuAboveLine[SCU_IN_LCU_NUMS_LEN + 2];
	S14 mvScuAboveLine[SCU_IN_LCU_NUMS_LEN + 2][MV_D];
	S2 refiScuAboveLine[SCU_IN_LCU_NUMS_LEN + 2];
	S16 ptrRefAboveLine[SCU_IN_LCU_NUMS_LEN + 2];
	//S16 ptrRefCoLeftLine[SCU_IN_LCU_NUMS_LEN];
	S14 posLTLv0[DIR_DIM];
	

#if VIVADO_HLS_IME

#if BW_DEBUG
	U10 swSubLv0_org[80][80];
#else
	pel swSubLv0_org[80][80];
#endif

	S14 sadTree64x64Mv[1][1][2];
	S14 sadTree32x32Mv[2][2][2];
	S14 sadTree64x32Mv[1][2][2];
	S14 sadTree32x64Mv[2][1][2];
	S14 sadTree16x16Mv[4][4][2];
	S14 sadTree32x16Mv[2][4][2];
	S14 sadTree16x32Mv[4][2][2];
	S14 sadTree64x16Mv[1][4][2];
	S14 sadTree16x64Mv[4][1][2];
	S14 sadTree8x8Mv[8][8][2];
	S14 sadTree16x8Mv[4][8][2];
	S14 sadTree8x16Mv[8][4][2];
	S14 sadTree32x8Mv[2][8][2];
	S14 sadTree8x32Mv[8][2][2];
	S14 sadTree64x8Mv[1][8][2];
	S14 sadTree8x64Mv[8][1][2];

	S14 sadTree64x64PMv[1][1][2];
	S14 sadTree32x32PMv[2][2][2];
	S14 sadTree64x32PMv[1][2][2];
	S14 sadTree32x64PMv[2][1][2];
	S14 sadTree16x16PMv[4][4][2];
	S14 sadTree32x16PMv[2][4][2];
	S14 sadTree16x32PMv[4][2][2];
	S14 sadTree64x16PMv[1][4][2];
	S14 sadTree16x64PMv[4][1][2];
	S14 sadTree8x8PMv[8][8][2];
	S14 sadTree16x8PMv[4][8][2];
	S14 sadTree8x16PMv[8][4][2];
	S14 sadTree32x8PMv[2][8][2];
	S14 sadTree8x32PMv[8][2][2];
	S14 sadTree64x8PMv[1][8][2];
	S14 sadTree8x64PMv[8][1][2];

#else

#if BW_DEBUG
	static U10 swSubLv0_org[80][80];
#else
	static pel swSubLv0_org[80][80];
#endif
	static S14 sadTree64x64Mv[1][1][2];
	static S14 sadTree32x32Mv[2][2][2];
	static S14 sadTree64x32Mv[1][2][2];
	static S14 sadTree32x64Mv[2][1][2];
	static S14 sadTree16x16Mv[4][4][2];
	static S14 sadTree32x16Mv[2][4][2];
	static S14 sadTree16x32Mv[4][2][2];
	static S14 sadTree64x16Mv[1][4][2];
	static S14 sadTree16x64Mv[4][1][2];
	static S14 sadTree8x8Mv[8][8][2];
	static S14 sadTree16x8Mv[4][8][2];
	static S14 sadTree8x16Mv[8][4][2];
	static S14 sadTree32x8Mv[2][8][2];
	static S14 sadTree8x32Mv[8][2][2];
	static S14 sadTree64x8Mv[1][8][2];
	static S14 sadTree8x64Mv[8][1][2];

	static S14 sadTree64x64PMv[1][1][2];
	static S14 sadTree32x32PMv[2][2][2];
	static S14 sadTree64x32PMv[1][2][2];
	static S14 sadTree32x64PMv[2][1][2];
	static S14 sadTree16x16PMv[4][4][2];
	static S14 sadTree32x16PMv[2][4][2];
	static S14 sadTree16x32PMv[4][2][2];
	static S14 sadTree64x16PMv[1][4][2];
	static S14 sadTree16x64PMv[4][1][2];
	static S14 sadTree8x8PMv[8][8][2];
	static S14 sadTree16x8PMv[4][8][2];
	static S14 sadTree8x16PMv[8][4][2];
	static S14 sadTree32x8PMv[2][8][2];
	static S14 sadTree8x32PMv[8][2][2];
	static S14 sadTree64x8PMv[1][8][2];
	static S14 sadTree8x64PMv[8][1][2];

#endif


	S14 gmvpQ[2];
	//S14 rangeLv0[2][2];
	U7 maxWidthScu = (U7)min_ime(fetch2md_fw_ptr_pic_width_in_scu - (fetch_output_pix_x >> 2), 16, U11);
	U7 maxHeightScu = (U7)min_ime(fetch2md_fw_ptr_pic_height_in_scu - (fetch_output_pix_y >> 2), 16, U11);
	//U7 maxWidthLcu = maxWidthScu << 2;
	//U7 maxHeightLcu = maxHeightScu << 2;

	U7 maxWidthSub = maxWidthScu >> 1;
	U7 maxHeighSub = maxHeightScu >> 1;

	S16 ptr_cur_ref = fetch2md_fw_ptr_cur_ref;	
	//S16 ptr_cur_ref = fetch2md_fw_ptr->refp_ptr[cur_refi][lidx];
	S16 ptr_cur = fetch2md_fw_ptr_cur_ptr;
	//S14 swSubLv0TopLeftCp[MV_D];
	S14 swSubLv0TopLeft_cp[MV_D];
	S14 swSubLv0TopLeft_cp_1[MV_D];

#if VIVADO_HLS_IME_OP_1

#if BW_DEBUG
#if VIVADO_HLS_IME
	U10 y_org_lv1_2d_t1[16][16];
	U10 swOutLv1_t1[48][64];
	U10 y_org_lv2_2d_t1[8][8];
	U10 swOutLv2_t1[24][32];
#else
	static U10 y_org_lv1_2d_t1[16][16];
	static U10 swOutLv1_t1[48][64];
	static U10 y_org_lv2_2d_t1[8][8];
	static U10 swOutLv2_t1[24][32];
#endif
#else
#if VIVADO_HLS_IME
	pel y_org_lv1_2d_t1[16][16];
	pel swOutLv1_t1[48][64];
	pel y_org_lv2_2d_t1[8][8];
	pel swOutLv2_t1[24][32];
	//pel swOutLv0_org[192][256];
#else
	static pel y_org_lv1_2d_t1[16][16];
	static pel swOutLv1_t1[48][64];
	static pel y_org_lv2_2d_t1[8][8];
	static pel swOutLv2_t1[24][32];
	//static pel swOutLv0_org[192][256];
#endif
#endif

	//static pel y_org_lv1_2d_org[MAX_CU_H >> 1][MAX_CU_W >> 1];
	//static pel y_org_lv2_2d_org[MAX_CU_H >> 2][MAX_CU_W >> 2];
	//static pel swOutLv1_org[SWH >> 1][SWW >> 1];
	//static pel swOutLv2_org[SWH >> 2][SWW >> 2];
#else

	static pel swOutLv0_org[SWH][SWW];

#endif	// #if VIVADO_HLS_IME_OP_1


	//static pel y_org_lv1_2d[32][32];
	//static pel y_org_lv2_2d[16][16];
	//static pel swOutLv0[SWW][SWH];
	//static pel swOutLv1[SWW >> 1][SWH >> 1];
	//static pel swOutLv2[SWW >> 2][SWH >> 2];

	//pel y_org_1[MAX_CU_SIZE_FETCH][MAX_CU_SIZE_FETCH];

	
		/* 0.pre-treatmen t*/
		//OrgT(
		//	y_org,
		//	y_orgT
		//);

		//OrgT(
		//	y_orgT,
		//	y_org_1
		//);
		//for (U7 i = 0; i < 64; i++)
		//{
		//	for (U7 j = 0; j < 64; j++)
		//	{
		//		if (y_org_1[i][j] != y_org[i][j])
		//		{
		//			printf("error org !");
		//		}
		//	}
		//}


		//Refwin_OneDimtoTwo(
		//	RefWindowLCU,
		//	swOutLv0_org
		//	//,
		//	//swOutLv0
		//);


		//// check swOutLv0_org
		//for (int j = 0; j < SWH; j++)
		//{
		//	for (int i = 0; i < SWW; i++)
		//	{
		//		if (swOutLv0_org[j][i] != swOutLv0[i][j])
		//		{
		//			printf("swOutLv0_org error! ");
		//			printf("swOutLv0_org[%d][%d] = %d\tswOutLv0[%d][%d] = %d \n", j, i, swOutLv0_org[j][i], i, j, swOutLv0[i][j]);
		//		}
		//	}
		//}

#if IME_PRAGMA_ON_INTERFACE
#pragma HLS RESOURCE variable=bestTriMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=y_org_lv1_2d_t1 core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=y_org_lv2_2d_t1 core=RAM_1P_BRAM
#endif	


#if VIVADO_HLS_IME_OP_1
		//mmea_downsample_org_test(
		//	y_org,//y_orgT,
		//	y_org_lv1_2d_org,
		//	y_org_lv2_2d_org
		//	//,
		//	//y_org_lv1_2d,
		//	//y_org_lv2_2d
		//);
		downsample_org_test1(
			y_org,
			y_org_lv1_2d_t1,
			y_org_lv2_2d_t1
		);

		//mmea_downsample_refp
		//(
		//	swOutLv0_org,
		//	swOutLv1_org,
		//	swOutLv2_org
		//	//,
		//	//swOutLv0,
		//	//swOutLv1,
		//	//swOutLv2
		//	);
		downsample_refp_test1
		(
			//RefWindowLCU,
			swOutLv0_org,
			swOutLv1_t1,
			swOutLv2_t1
		);

		//// check swOutLv1_org
		//for (int j = 0; (j < SWH >> 1); j++)
		//{
		//	for (int i = 0; i < (SWW >> 1); i++)
		//	{
		//		if (swOutLv1_org[j][i] != swOutLv1[i][j])
		//		{
		//			printf("swOutLv1_org error! ");
		//			printf("swOutLv1_org[%d][%d] = %d\tswOutLv1[%d][%d] = %d \n", j, i, swOutLv1_org[j][i], i, j, swOutLv1[i][j]);
		//		}
		//	}
		//}

		//// check swOutLv2_org
		//for (int j = 0; (j < SWH >> 2); j++)
		//{
		//	for (int i = 0; i < (SWW >> 2); i++)
		//	{
		//		if (swOutLv2_org[j][i] != swOutLv2[i][j])
		//		{
		//			printf("swOutLv2_org error! ");
		//			printf("swOutLv2_org[%d][%d] = %d\tswOutLv2[%d][%d] = %d \n", j, i, swOutLv2_org[j][i], i, j, swOutLv2[i][j]);
		//		}
		//	}
		//}

#endif	// #if VIVADO_HLS_IME_OP_1


		/* 1.Fetch-Re-organization */
		fetchAboveMvLine(
			me_line_map_ptr_min_scu_x_in, 
			//fetch2md_fw_ptr->refp_ptr, 
			refp_ptr,
			new_above_nebs_line_IME,
			me_line_map_ptr_IME->new_map_scu_above_line, 
			mapScuAboveLine, 
			mvScuAboveLine,
			refiScuAboveLine, 
			ptrRefAboveLine, 
			me_line_map_ptr_IME->co_left_refi, 
			lidx, 
			fetch2md_fw_ptr_pic_width_in_scu
		);

		deriveMvpLCU(
			ptr_cur_ref, 
			ptr_cur, 
			predMvTemp, 
			mvScuAboveLine[1], 
			me_line_map_ptr_IME->co_left_mv[0], 
			mvScuAboveLine[17], 
			mvScuAboveLine[0], 
			refiScuAboveLine[1],
			me_line_map_ptr_IME->co_left_refi[0], 
			refiScuAboveLine[17], 
			refiScuAboveLine[0], 
			ptrRefAboveLine[1], 
			me_line_map_ptr_IME->co_left_ptr_ref[0], 
			ptrRefAboveLine[17], 
			ptrRefAboveLine[0]
		);

		setLcuPmv(
			predMvLcu, 
			predMvTemp, 
			sadTree64x64PMv,
			gmvpQ);

#if VIVADO_HLS_IME_OP_1

		/* 2.0 Coarse ME */
//		coarseSearchUnityDoubleSkip
//		(
//			swOutLv2_org,
//			y_org_lv2_2d_org,
//			//swOutLv1_org,
//			//y_org_lv1_2d_org,
//
//			//swOutLv2,
//			//y_org_lv2_2d,
//			//swOutLv1,
//			//y_org_lv1_2d,
//#if SEARCH_FULLLV1
//			bestTriMv,
//#else
//			bestPosLv1,
//#endif 
//			gmvpQ,
//			fetch_output_lambda_mv,
//			maxWidthLcu,
//			maxHeightLcu
//		);

#if 1//VIVADO_HLS_IME
		//searchFullLv2_test1
		//(
		//	swOutLv2_t1,
		//	y_org_lv2_2d_t1,
		//	bestTriMv,
		//	gmvpQ,
		//	fetch_output_lambda_mv,
		//	maxWidthSub,
		//	maxHeighSub
		//);
		searchLv2_serial
		(
			swOutLv2_t1,
			y_org_lv2_2d_t1,
			bestTriMv,
			gmvpQ[0],
			gmvpQ[1],
			fetch_output_lambda_mv,
			maxWidthSub,
			maxHeighSub
		);

#else

		searchFullLv2_test1
		(
			swOutLv2_t1,
			y_org_lv2_2d_t1,
			bestTriMv,
			gmvpQ,
			fetch_output_lambda_mv,
			maxWidthSub,
			maxHeighSub
		);

#endif
#endif

#if SEARCH_FULLLV1_TURN_ON
#if SEARCH_FULLLV1
		//searchFullLv1
		//(
		//	swOutLv1_org,
		//	y_org_lv1_2d_org,
		//	//swOutLv1,
		//	//y_org_lv1_2d,
		//	bestTriMv,
		//	predMvLcu,
		//	bestPosLv1,
		//	gmvpQ,
		//	fetch_output_lambda_mv,
		//	maxWidthScu,
		//	maxHeightScu
		//);

		//searchFullLv1_test1
		searchLv1_serial
		(
			swOutLv1_t1,
			y_org_lv1_2d_t1,
			bestTriMv,
			predMvLcu,
			bestPosLv1,
			gmvpQ,
			fetch_output_lambda_mv,
			maxWidthScu,
			maxHeightScu
		);
#if PRINT_IME_MV
		printf("Lv1:[%d,%d]\n", bestPosLv1[0] - MMEA_LEVEL2_SR_V, bestPosLv1[1] - MMEA_LEVEL2_SR_H);
#endif

#else
		bestPosLv1[0] = bestTriMv[0][0];
		bestPosLv1[1] = bestTriMv[0][1];
#endif	// #if SEARCH_FULLLV1_TURN_ON

#endif // #if VIVADO_HLS_IME_OP_1

		if (flag_mv_cfg)
		{
			bestPosLv1[0] = mv_cfg[0] + MMEA_LEVEL2_SR_V;
			bestPosLv1[1] = mv_cfg[1] + MMEA_LEVEL2_SR_H;
		}

		/* 2.1 MV Prediction */
#if ZJJ_OP_OFF
		deriveMvpAllCu_OP(
#else
		deriveMvpAllCu_zjj(
#endif
			ptr_cur_ref, ptr_cur, me_line_map_ptr_IME->co_left_mv, me_line_map_ptr_IME->co_left_refi, mvScuAboveLine, refiScuAboveLine, ptrRefAboveLine, me_line_map_ptr_IME->co_left_ptr_ref,
			sadTree32x32PMv, sadTree64x32PMv, sadTree32x64PMv, sadTree16x16PMv,
			sadTree32x16PMv, sadTree16x32PMv, sadTree64x16PMv, sadTree16x64PMv,
			sadTree8x8PMv, sadTree16x8PMv, sadTree8x16PMv, sadTree32x8PMv,
			sadTree8x32PMv, sadTree64x8PMv, sadTree8x64PMv
		);

		/* 3. Refine ME */
		//S14 bestPosLv1_in[2] = { bestPosLv1[0], bestPosLv1[1] };
		//printf("bestPosLv1: [%d, %d]\t", bestPosLv1[0], bestPosLv1[1]);
		//deriveSearchRangeLv0(bestPosLv1, posLTLv0, rangeLv0, swSubLv0TopLeft, swSubLv0TopLeftCp);
		deriveSRLv0_test(
			bestPosLv1, 
			posLTLv0, 
#if VIVADO_HLS_IME
			swSubLv0TopLeft_cp,
			swSubLv0TopLeft_cp_1,
#endif
			swSubLv0TopLeft
		);


		////// check
		//if (bestPosLv1_out[0] < 12 || bestPosLv1_out[0] > (191 - 12) ||
		//	bestPosLv1_out[1] < 12 || bestPosLv1_out[1] > (127 - 12))
		//{
		//	printf("error! overstep the boundary\n");
		//	exit(1);
		//}


		////pel fme_refwin_org[FME_SWH_SIZE][FME_SWW_SIZE];
		//fme_copy_refwin(
		//	swOutLv0_org, 
		//	RefWindowLCU_2d,//fme_refwin_org,//test

		//	//swOutLv0, 
		//	//fme_refwin_org,//RefWindowLCU_2d,

		//	swSubLv0TopLeftCp[MV_X], 
		//	swSubLv0TopLeftCp[MV_Y],
		//	CtrPos, 
		//	CtrPosFME
		//);

#if  0//VIVADO_HLS_IME //0//1
		//fme_copy_refwin(swOutLv0, RefWindowLCU_2d, swSubLv0TopLeftCp[MV_X], swSubLv0TopLeftCp[MV_Y],
		//	CtrPos, CtrPosFME);
		fme_copy_refwin(
			swOutLv0_org,
			RefWindowLCU_2d,//fme_refwin_org,//test

			//swOutLv0, 
			//fme_refwin_org,//RefWindowLCU_2d,

			swSubLv0TopLeftCp[MV_X],
			swSubLv0TopLeftCp[MV_Y],
			CtrPos,
			CtrPosFME
		);
		offset_fme_sww_h[0] = 0;
		offset_fme_sww_h[1] = 0;
#else
		//====================================================================================================================

		//static pel fme_refwin_test[FME_SWH_SIZE][FME_SWW_SIZE];
		//static pel md_refwin[FME_SWH_SIZE][FME_SWW_SIZE];
		//S14 offset_fme_sww_h_test[MV_D];
		//S14 CtrPos2FME_test[RANGE_NUM][DIR_DIM][MAP_DIMS];
		//S14 CtrPos2MD_test[RANGE_NUM][DIR_DIM][MAP_DIMS];

		get_fme_refwin_test(
			swOutLv0_org,
			//fme_refwin_test,//RefWindowLCU_2d,
			RefWindowLCU_2d,//md_refwin, //RefWindowLCU_2d,
#if VIVADO_HLS_IME
			swSubLv0TopLeft_cp[0],
			swSubLv0TopLeft_cp[1],
#else
			swSubLv0TopLeft[MV_X],
			swSubLv0TopLeft[MV_Y],
#endif
			offset_fme_sww_h,//offset_fme_sww_h_test,
			CtrPos,
			CtrPosFME,//CtrPos2FME_test,
			CtrPos2MD,//CtrPos2MD_test
			fetch2md_fw_ptr_num_refp
		);

		//offset_fme_sww_h[0] = offset_fme_sww_h_test[0];
		//offset_fme_sww_h[1] = offset_fme_sww_h_test[1];

		//for (int i = 0; i < FME_SW_SIZE; i++)
		//{
		//	for (int j = 0; j < FME_SW_SIZE; j++)
		//	{
		//		RefWindowLCU_2d[i][j] = md_refwin[i + offset_fme_sww_h_test[1]][j + offset_fme_sww_h_test[0]];
		//	}
		//}

#if 0//0

		//check
		for (int i = 0; i < FME_SW_SIZE; i++)
		{
			for (int j = 0; j < FME_SW_SIZE; j++)
			{
				//printf("%d\t", fme_refwin_test[i + offset_fme_sww_h_test[1]][j + offset_fme_sww_h_test[0]]);
				//printf("%d\t", fme_refwin_test[i][j]);
				//printf("%d\t", RefWindowLCU_2d[i][j]);
				printf("%d\t", RefWindowLCU_2d[i + offset_fme_sww_h[1]][j + offset_fme_sww_h[0]]);
				//if (RefWindowLCU_2d[i][j] != fme_refwin_test[i + offset_fme_sww_h_test[1]][j + offset_fme_sww_h_test[0]])
				//{
				//	printf("error: i = %d j = %d RefWindowLCU_2d = %d fme_refwin_test = %d\n", i, j, RefWindowLCU_2d[i][j], fme_refwin_test[i][j]);
				//}
			}
			printf("\n");
		}
		printf("\n");


#endif
		//====================================================================================================================
#endif

//		constructSearchWindowLv0(
//			swSubLv0_org,
//#if IME_DEBUG_calcSadScuLv0TestCaseMore
//			swSubLv0Cp0_org,
//			swSubLv0Cp1_org,
//			swSubLv0Cp2_org,
//			swSubLv0Cp3_org,
//			swSubLv0Cp4_org,
//			swSubLv0Cp5_org,
//			swSubLv0Cp6_org,
//			swSubLv0Cp7_org,
//
//#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
//			swOutLv0_org,
//
//			//swSubLv0,
//#if IME_DEBUG_calcSadScuLv0TestCaseMore
//			swSubLv0Cp0,
//			swSubLv0Cp1,
//			swSubLv0Cp2,
//			swSubLv0Cp3,
//			swSubLv0Cp4,
//			swSubLv0Cp5,
//			swSubLv0Cp6,
//			swSubLv0Cp7,
//
//#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
//			//swOutLv0,
//			rangeLv0[0][0],
//			rangeLv0[0][1]
//		);
		constructSWLv0_test1(
			swSubLv0_org,
			swOutLv0_org,
#if VIVADO_HLS_IME
			swSubLv0TopLeft_cp_1[0],
			swSubLv0TopLeft_cp_1[1]
#else
			swSubLv0TopLeft[0],
			swSubLv0TopLeft[1]
#endif
		);


#if 0//!VIVADO_HLS_IME_OP_1//1
		//=============================================================================================================================================================================================================================
		//=============================================================================================================================================================================================================================

		static S14 sadTree8x8Mv_my[8][8][2];
		static S14 sadTree8x16Mv_my[8][8][2];

		searchFullLv0TestCase_myAlgorithm_stage1
		(
			swSubLv0_org,
			posLTLv0,
			fetch_output_lambda_mv,
			fetch2md_fw_ptr_num_refp,
			cur_refi,
			rangeLv0,

			y_org,

			sadTree64x64Mv, sadTree32x32Mv, sadTree64x32Mv,
			sadTree32x64Mv, sadTree16x16Mv, sadTree32x16Mv, sadTree16x32Mv,
			sadTree64x16Mv, sadTree16x64Mv, 

			sadTree8x8Mv_my,

			sadTree16x8Mv,
			sadTree8x16Mv, sadTree32x8Mv, sadTree8x32Mv, sadTree64x8Mv,
			sadTree8x64Mv,

			sadTree64x64PMv, sadTree32x32PMv, sadTree64x32PMv, sadTree32x64PMv,
			sadTree16x16PMv, sadTree32x16PMv, sadTree16x32PMv, sadTree64x16PMv,
			sadTree16x64PMv, sadTree8x8PMv, sadTree16x8PMv, sadTree8x16PMv,
			sadTree32x8PMv, sadTree8x32PMv, sadTree64x8PMv, sadTree8x64PMv,

			me_mv_cost->sadTree64x64Best,
			me_mv_cost->sadTree32x32Best, me_mv_cost->sadTree64x32Best, me_mv_cost->sadTree32x64Best,
			me_mv_cost->sadTree16x16Best, me_mv_cost->sadTree32x16Best, me_mv_cost->sadTree16x32Best, me_mv_cost->sadTree64x16Best, me_mv_cost->sadTree16x64Best,
			me_mv_cost->sadTree8x8Best, me_mv_cost->sadTree16x8Best, me_mv_cost->sadTree8x16Best, me_mv_cost->sadTree32x8Best, me_mv_cost->sadTree8x32Best, me_mv_cost->sadTree64x8Best, me_mv_cost->sadTree8x64Best, bit_depth);

		searchFullLv0TestCase_myAlgorithm_stage2
		(
			swSubLv0_org,
			posLTLv0,
			fetch_output_lambda_mv,
			fetch2md_fw_ptr_num_refp,
			cur_refi,
			rangeLv0,

			y_org,

			sadTree64x64Mv, sadTree32x32Mv, sadTree64x32Mv,
			sadTree32x64Mv, sadTree16x16Mv, sadTree32x16Mv, sadTree16x32Mv,
			sadTree64x16Mv, sadTree16x64Mv,

			sadTree8x8Mv,

			sadTree16x8Mv,
			sadTree8x16Mv, sadTree32x8Mv, sadTree8x32Mv, sadTree64x8Mv,
			sadTree8x64Mv,

			sadTree64x64PMv, sadTree32x32PMv, sadTree64x32PMv, sadTree32x64PMv,
			sadTree16x16PMv, sadTree32x16PMv, sadTree16x32PMv, sadTree64x16PMv,
			sadTree16x64PMv, sadTree8x8PMv, sadTree16x8PMv, sadTree8x16PMv,
			sadTree32x8PMv, sadTree8x32PMv, sadTree64x8PMv, sadTree8x64PMv,

			me_mv_cost->sadTree64x64Best,
			me_mv_cost->sadTree32x32Best, me_mv_cost->sadTree64x32Best, me_mv_cost->sadTree32x64Best,
			me_mv_cost->sadTree16x16Best, me_mv_cost->sadTree32x16Best, me_mv_cost->sadTree16x32Best, me_mv_cost->sadTree64x16Best, me_mv_cost->sadTree16x64Best,
			me_mv_cost->sadTree8x8Best, me_mv_cost->sadTree16x8Best, me_mv_cost->sadTree8x16Best, me_mv_cost->sadTree32x8Best, me_mv_cost->sadTree8x32Best, me_mv_cost->sadTree64x8Best, me_mv_cost->sadTree8x64Best, bit_depth);

		//=============================================================================================================================================================================================================================
		//=============================================================================================================================================================================================================================
#else
//		searchFullLv0TestCase(
//
//#if IME_DEBUG_calcSadScuLv0TestCaseMore
//			swSubLv0Cp0_org,
//			swSubLv0Cp1_org,
//			swSubLv0Cp2_org,
//			swSubLv0Cp3_org,
//			swSubLv0Cp4_org,
//			swSubLv0Cp5_org,
//			swSubLv0Cp6_org,
//			swSubLv0Cp7_org,
//#else
//			swSubLv0_org,
//#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
//
//#if IME_DEBUG_calcSadScuLv0TestCaseMore
//			swSubLv0Cp0,
//			swSubLv0Cp1,
//			swSubLv0Cp2,
//			swSubLv0Cp3,
//			swSubLv0Cp4,
//			swSubLv0Cp5,
//			swSubLv0Cp6,
//			swSubLv0Cp7,
//#else
//			//swSubLv0,
//#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
//
//
//			posLTLv0,
//			fetch_output_lambda_mv,
//			fetch2md_fw_ptr_num_refp,
//			cur_refi,
//			rangeLv0,
//
//#if IME_DEBUG_calcSadScuLv0TestCaseMore
//			orgCp0_org,
//			orgCp1_org,
//			orgCp2_org,
//			orgCp3_org,
//			orgCp4_org,
//			orgCp5_org,
//			orgCp6_org,
//			orgCp7_org,
//#else
//			y_org,
//#endif
//
//#if IME_DEBUG_calcSadScuLv0TestCaseMore
//			orgCp0,
//			orgCp1,
//			orgCp2,
//			orgCp3,
//			orgCp4,
//			orgCp5,
//			orgCp6,
//			orgCp7,
//#else
//			//y_orgT,
//
//#endif	// #if IME_DEBUG_calcSadScuLv0TestCaseMore
//
//			sadTree64x64Mv, sadTree32x32Mv, sadTree64x32Mv,
//			sadTree32x64Mv, sadTree16x16Mv, sadTree32x16Mv, sadTree16x32Mv,
//			sadTree64x16Mv, sadTree16x64Mv, sadTree8x8Mv, sadTree16x8Mv,
//			sadTree8x16Mv, sadTree32x8Mv, sadTree8x32Mv, sadTree64x8Mv,
//			sadTree8x64Mv,
//
//			sadTree64x64PMv, sadTree32x32PMv, sadTree64x32PMv, sadTree32x64PMv,
//			sadTree16x16PMv, sadTree32x16PMv, sadTree16x32PMv, sadTree64x16PMv,
//			sadTree16x64PMv, sadTree8x8PMv, sadTree16x8PMv, sadTree8x16PMv,
//			sadTree32x8PMv, sadTree8x32PMv, sadTree64x8PMv, sadTree8x64PMv,
//
//			me_mv_cost->sadTree64x64Best,
//			me_mv_cost->sadTree32x32Best, me_mv_cost->sadTree64x32Best, me_mv_cost->sadTree32x64Best,
//			me_mv_cost->sadTree16x16Best, me_mv_cost->sadTree32x16Best, me_mv_cost->sadTree16x32Best, me_mv_cost->sadTree64x16Best, me_mv_cost->sadTree16x64Best,
//			me_mv_cost->sadTree8x8Best, me_mv_cost->sadTree16x8Best, me_mv_cost->sadTree8x16Best, me_mv_cost->sadTree32x8Best, me_mv_cost->sadTree8x32Best, me_mv_cost->sadTree64x8Best, me_mv_cost->sadTree8x64Best, bit_depth);

	searchFullLv0_test1(
		swSubLv0_org,

		posLTLv0,
		fetch_output_lambda_mv,
		fetch2md_fw_ptr_num_refp,
		cur_refi,

		y_org,

		sadTree64x64Mv, sadTree32x32Mv, sadTree64x32Mv,
		sadTree32x64Mv, sadTree16x16Mv, sadTree32x16Mv, sadTree16x32Mv,
		sadTree64x16Mv, sadTree16x64Mv, sadTree8x8Mv, sadTree16x8Mv,
		sadTree8x16Mv, sadTree32x8Mv, sadTree8x32Mv, sadTree64x8Mv,
		sadTree8x64Mv,

		sadTree64x64PMv, sadTree32x32PMv, sadTree64x32PMv, sadTree32x64PMv,
		sadTree16x16PMv, sadTree32x16PMv, sadTree16x32PMv, sadTree64x16PMv,
		sadTree16x64PMv, sadTree8x8PMv, sadTree16x8PMv, sadTree8x16PMv,
		sadTree32x8PMv, sadTree8x32PMv, sadTree64x8PMv, sadTree8x64PMv,

		me_mv_cost->sadTree64x64Best,
		me_mv_cost->sadTree32x32Best, me_mv_cost->sadTree64x32Best, me_mv_cost->sadTree32x64Best,
		me_mv_cost->sadTree16x16Best, me_mv_cost->sadTree32x16Best, me_mv_cost->sadTree16x32Best, me_mv_cost->sadTree64x16Best, me_mv_cost->sadTree16x64Best,
		me_mv_cost->sadTree8x8Best, me_mv_cost->sadTree16x8Best, me_mv_cost->sadTree8x16Best, me_mv_cost->sadTree32x8Best, me_mv_cost->sadTree8x32Best, me_mv_cost->sadTree64x8Best, me_mv_cost->sadTree8x64Best, bit_depth);

#endif

#if PRINT_IME_MV
		printMv(me_mv_info, me_line_map_ptr_min_scu_x_in/*, me_line_map_ptr_min_scu_y*/);
#endif

#if 0//1
		//check sadTree8x8Mv_my subSw1_org
		for (int j = 0; j < 8; j++)
		{
			for (int i = 0; i < 8; i++)
			//for (int i = 0; i < 4; i++)
			{
				for (int k = 0; k < 2; k++)
				{
					if (sadTree8x8Mv_my[i][j][k] != sadTree8x8Mv[i][j][k])
					//if (sadTree8x16Mv_my[i][j][k] != sadTree8x16Mv[i][j][k])
					{
						printf("sadTree8x8Mv_my error! ");
						printf("sadTree8x8Mv_my[%d][%d][%d] = %d\tsadTree8x8Mv[%d][%d][%d] = %d\n", i, j,k, sadTree8x8Mv_my[i][j][k], i, j,k, sadTree8x8Mv[i][j][k]);
						//printf("sadTree8x8Mv_my[%d][%d][%d] = %d\tsadTree8x8Mv[%d][%d][%d] = %d\n", i, j, k, sadTree8x16Mv_my[i][j][k], i, j, k, sadTree8x16Mv[i][j][k]);
					}
				}

			}
		}
#endif

		copyMvToMemory(me_mv_info->sadTree64x64Mv, me_mv_info->sadTree32x32Mv,
			me_mv_info->sadTree64x32Mv, me_mv_info->sadTree32x64Mv,
			me_mv_info->sadTree16x16Mv, me_mv_info->sadTree32x16Mv,
			me_mv_info->sadTree16x32Mv, me_mv_info->sadTree64x16Mv,
			me_mv_info->sadTree16x64Mv, me_mv_info->sadTree8x8Mv,
			me_mv_info->sadTree16x8Mv, me_mv_info->sadTree8x16Mv,
			me_mv_info->sadTree32x8Mv, me_mv_info->sadTree8x32Mv,
			me_mv_info->sadTree64x8Mv, me_mv_info->sadTree8x64Mv,

			me_pmv_info->sadTree64x64PMv, me_pmv_info->sadTree32x32PMv,
			me_pmv_info->sadTree64x32PMv, me_pmv_info->sadTree32x64PMv,
			me_pmv_info->sadTree16x16PMv, me_pmv_info->sadTree32x16PMv,
			me_pmv_info->sadTree16x32PMv, me_pmv_info->sadTree64x16PMv,
			me_pmv_info->sadTree16x64PMv, me_pmv_info->sadTree8x8PMv,
			me_pmv_info->sadTree16x8PMv, me_pmv_info->sadTree8x16PMv,
			me_pmv_info->sadTree32x8PMv, me_pmv_info->sadTree8x32PMv,
			me_pmv_info->sadTree64x8PMv, me_pmv_info->sadTree8x64PMv,
			sadTree64x64Mv, sadTree32x32Mv, sadTree64x32Mv, sadTree32x64Mv,
			sadTree16x16Mv, sadTree32x16Mv, sadTree16x32Mv, sadTree64x16Mv,
			sadTree16x64Mv, sadTree8x8Mv, sadTree16x8Mv, sadTree8x16Mv,
			sadTree32x8Mv, sadTree8x32Mv, sadTree64x8Mv, sadTree8x64Mv,
			sadTree64x64PMv, sadTree32x32PMv, sadTree64x32PMv, sadTree32x64PMv,
			sadTree16x16PMv, sadTree32x16PMv, sadTree16x32PMv, sadTree64x16PMv,
			sadTree16x64PMv, sadTree8x8PMv, sadTree16x8PMv, sadTree8x16PMv,
			sadTree32x8PMv, sadTree8x32PMv, sadTree64x8PMv, sadTree8x64PMv);
}

void ime_run(
	ENC_ME_LINE_MAP_IME* me_line_map_ptr_IME,
	ENC_ME_NEB_INFO new_above_nebs_line_IME[ABOVE_LINE_LEN],
	FETCH_REF_WINDOW_IME* Fetch_Ref_Window_IME,
	FETCH_ORGI_LCU_IME* Fetch_Orig_Lcu_IME,
	FETCH2MD_FW* fetch2md_fw_ptr,
//#if REFP_PTR_FEBUG
//	S16 refp_ptr[17][2],
//#endif
	CTU_Level_Parameters* fetch_output,
	ME_MV_INFO_BW* me_mv_info,
	ME_PMV_INFO_BW* me_pmv_info,
#if BW_DEBUG
	U10 RefWindowLCU_2d[FME_SWH_SIZE][FME_SWW_SIZE],
#else
	pel RefWindowLCU_2d[FME_SWH_SIZE][FME_SWW_SIZE],
#endif
	IME_OUT_PARA_SET* ime_out_para_set,
	U32 ime_64x64_best_cost[2]
#if ENABLE_BFRAME
	,ENC_ME_LINE_MAP_IME* me_line_map_ptr_IME_1,
	ENC_ME_NEB_INFO new_above_nebs_line_IME_1[ABOVE_LINE_LEN]
#if BW_DEBUG
	, U10 RefWindowLCU_2d_ref1[FME_SWH_SIZE][FME_SWW_SIZE],
#else
	, pel RefWindowLCU_2d_ref1[FME_SWH_SIZE][FME_SWW_SIZE],
#endif
	ME_MV_DIR* me_mv_dir
#endif
)
{
#if IME_PRAGMA_ON_INTERFACE
#if !VIVADO_HLS_IME
	/* Interfaces */
// me_line_map_ptr_IME
#pragma HLS RESOURCE variable=me_line_map_ptr_IME->new_map_scu_above_line core=RAM_1P_BRAM
#pragma HLS INTERFACE axis port=me_line_map_ptr_IME->min_scu_x
#pragma HLS RESOURCE variable=me_line_map_ptr_IME->co_left_mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_line_map_ptr_IME->co_left_refi core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_line_map_ptr_IME->co_left_ptr_ref core=RAM_1P_BRAM

#if ENABLE_BFRAME
#pragma HLS RESOURCE variable=me_line_map_ptr_IME_1->new_map_scu_above_line core=RAM_1P_BRAM
//#pragma HLS INTERFACE axis port=me_line_map_ptr_IME_1->min_scu_x
#pragma HLS RESOURCE variable=me_line_map_ptr_IME_1->co_left_mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_line_map_ptr_IME_1->co_left_refi core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_line_map_ptr_IME_1->co_left_ptr_ref core=RAM_1P_BRAM
#endif

// new_above_nebs_line_IME
#pragma HLS RESOURCE variable=new_above_nebs_line_IME core=RAM_1P_BRAM

#if ENABLE_BFRAME
#pragma HLS RESOURCE variable=new_above_nebs_line_IME_1 core=RAM_1P_BRAM
#endif

//Fetch_Ref_Window_IME
#pragma HLS RESOURCE variable=Fetch_Ref_Window_IME->CtrPos core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=Fetch_Ref_Window_IME->swOutLv0 core=RAM_1P_BRAM

#if ENABLE_BFRAME
#pragma HLS RESOURCE variable=Fetch_Ref_Window_IME->lidx core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=Fetch_Ref_Window_IME->cur_refi core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=Fetch_Ref_Window_IME->CtrPos_ref1 core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=Fetch_Ref_Window_IME->swOutLv0_ref1 core=RAM_1P_BRAM
#endif

// Fetch_Orig_Lcu_IME
#pragma HLS RESOURCE variable=Fetch_Orig_Lcu_IME->y_org core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=Fetch_Orig_Lcu_IME->u_org core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=Fetch_Orig_Lcu_IME->v_org core=RAM_1P_BRAM

// fetch2md_fw_ptr
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->pic_width
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->pic_height
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->slice_type
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->affine_enable_flag		
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->pic_width_in_scu
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->pic_height_in_scu
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->log2_max_cuwh
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->log2_culine
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->max_cuwh

#if CTX_CONTROL_LUKE
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->bit_depth_internal
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->max_part_ratio
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->min_cu_size
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->max_split_times
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->min_qt_size
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->max_bt_size
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->max_eqt_size
#endif

#if EIPM
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->eipm_enable_flag
#endif

#if MIPF
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->mipf_enable_flag
#endif

#if INTERPF
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->interpf_enable_flag
#endif

#pragma HLS RESOURCE variable=fetch2md_fw_ptr->refp_ptr core=RAM_1P_BRAM  

#if ENABLE_BFRAME
#pragma HLS RESOURCE variable=fetch2md_fw_ptr->num_refp core=RAM_1P_BRAM
#else
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->num_refp
#endif

#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->cur_ptr

#if CUDQP_QP_MAP
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->chroma_quant_param_delta_cb
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->chroma_quant_param_delta_cr
#endif

#if UMVE_ENH
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->umve_set_flag
#endif


// fetch_output
#pragma HLS INTERFACE axis port=fetch_output->pix_x
#pragma HLS INTERFACE axis port=fetch_output->pix_y

#if CTU_CONTROL_LUKE
#pragma HLS INTERFACE axis port=fetch_output->qp_y
#pragma HLS INTERFACE axis port=fetch_output->qp_u
#pragma HLS INTERFACE axis port=fetch_output->qp_v
#pragma HLS INTERFACE axis port=fetch_output->lambda_mv
#pragma HLS INTERFACE axis port=fetch_output->x_last_ctu
#pragma HLS INTERFACE axis port=fetch_output->y_last_ctu
#endif
#pragma HLS RESOURCE variable=fetch_output->lambda core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=fetch_output->dist_chroma_weight core=RAM_1P_BRAM

#if USE_INTRA_REFRESH
#pragma HLS INTERFACE axis port=fetch_output->EncRefresh
#pragma HLS INTERFACE axis port=fetch_output->RefreshMode
#pragma HLS INTERFACE axis port=fetch_output->RefreshSize
#pragma HLS INTERFACE axis port=fetch_output->pirStartRow
#pragma HLS INTERFACE axis port=fetch_output->pirEndRow
#pragma HLS INTERFACE axis port=fetch_output->pirStartCol
#pragma HLS INTERFACE axis port=fetch_output->pirEndCol
#pragma HLS INTERFACE axis port=fetch_output->numCuInWidth
#pragma HLS INTERFACE axis port=fetch_output->numCuInHeight
#endif

#if USE_SPEED_LEVEL
#pragma HLS INTERFACE axis port=fetch_output->speed_level
#endif

#if USE_ROI_MODE_CONFIG
#pragma HLS RESOURCE variable=fetch_output->valid_mode core=RAM_1P_BRAM
#endif

#if CUDQP_QP_MAP
#pragma HLS INTERFACE axis port=fetch_output->cu_dqp_enable
#pragma HLS INTERFACE axis port=fetch_output->md_slice_qp
#pragma HLS INTERFACE axis port=fetch_output->cu_qp_group_area_size
#pragma HLS INTERFACE axis port=fetch_output->cu_qp_group_pred_qp
#pragma HLS RESOURCE variable=fetch_output->CuQPMap core=RAM_1P_BRAM
#endif

// me_mv_info
#pragma HLS RESOURCE variable=me_mv_info->sadTree64x64Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree32x32Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree64x32Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree32x64Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree16x16Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree32x16Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree16x32Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree64x16Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree16x64Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree8x8Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree16x8Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree8x16Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree32x8Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree8x32Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree64x8Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree8x64Mv core=RAM_1P_BRAM

// me_pmv_info
#pragma HLS RESOURCE variable=me_pmv_info->sadTree64x64PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree32x32PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree64x32PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree32x64PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree16x16PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree32x16PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree16x32PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree64x16PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree16x64PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree8x8PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree16x8PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree8x16PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree32x8PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree8x32PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree64x8PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree8x64PMv core=RAM_1P_BRAM

// RefWindowLCU_2d
#pragma HLS RESOURCE variable=RefWindowLCU_2d core=RAM_1P_BRAM

// ime_out_para_set
#pragma HLS INTERFACE axis port=ime_out_para_set->pic_width
#pragma HLS INTERFACE axis port=ime_out_para_set->pic_height
#pragma HLS INTERFACE axis port=ime_out_para_set->slice_type
#pragma HLS INTERFACE axis port=ime_out_para_set->affine_enable_flag
#pragma HLS INTERFACE axis port=ime_out_para_set->pic_width_in_scu
#pragma HLS INTERFACE axis port=ime_out_para_set->pic_height_in_scu
#pragma HLS INTERFACE axis port=ime_out_para_set->log2_max_cuwh
#pragma HLS INTERFACE axis port=ime_out_para_set->log2_culine
#pragma HLS INTERFACE axis port=ime_out_para_set->max_cuwh

#if EIPM
#pragma HLS INTERFACE axis port=ime_out_para_set->eipm_enable_flag
#endif

#if MIPF
#pragma HLS INTERFACE axis port=ime_out_para_set->mipf_enable_flag
#endif

#if INTERPF
#pragma HLS INTERFACE axis port=ime_out_para_set->interpf_enable_flag
#endif

#if CTX_CONTROL_LUKE
#pragma HLS INTERFACE axis port=ime_out_para_set->bit_depth_internal
#pragma HLS INTERFACE axis port=ime_out_para_set->max_part_ratio
#pragma HLS INTERFACE axis port=ime_out_para_set->min_cu_size
#pragma HLS INTERFACE axis port=ime_out_para_set->max_split_times
#pragma HLS INTERFACE axis port=ime_out_para_set->min_qt_size
#pragma HLS INTERFACE axis port=ime_out_para_set->max_bt_size
#pragma HLS INTERFACE axis port=ime_out_para_set->max_eqt_size
#endif

#pragma HLS RESOURCE variable=ime_out_para_set->refp_ptr core=RAM_1P_BRAM

#if ENABLE_BFRAME
#pragma HLS RESOURCE variable=ime_out_para_set->num_refp core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=ime_out_para_set->CtrPos_ref1 core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=ime_out_para_set->CtrPosFME_ref1 core=RAM_1P_BRAM
#else
#pragma HLS INTERFACE axis port=ime_out_para_set->num_refp
#endif
#pragma HLS RESOURCE variable=ime_out_para_set->swSubLv0TopLeft core=RAM_1P_BRAM

#pragma HLS INTERFACE axis port=ime_out_para_set->cur_ptr
#pragma HLS INTERFACE axis port=ime_out_para_set->pix_x
#pragma HLS INTERFACE axis port=ime_out_para_set->pix_y
#if CTU_CONTROL_LUKE
#pragma HLS INTERFACE axis port=ime_out_para_set->qp_y
#pragma HLS INTERFACE axis port=ime_out_para_set->qp_u
#pragma HLS INTERFACE axis port=ime_out_para_set->qp_v
#pragma HLS RESOURCE variable=ime_out_para_set->lambda core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=ime_out_para_set->dist_chroma_weight core=RAM_1P_BRAM
#pragma HLS INTERFACE axis port=ime_out_para_set->x_last_ctu
#pragma HLS INTERFACE axis port=ime_out_para_set->y_last_ctu
#endif

#if UMVE_ENH
#pragma HLS INTERFACE axis port=ime_out_para_set->umve_set_flag
#endif

#pragma HLS RESOURCE variable=ime_out_para_set->CtrPos core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=ime_out_para_set->CtrPosFME core=RAM_1P_BRAM

#pragma HLS RESOURCE variable=ime_out_para_set->y_org core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=ime_out_para_set->u_org core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=ime_out_para_set->v_org core=RAM_1P_BRAM

#pragma HLS RESOURCE variable=ime_out_para_set->offset_fme_sww_h core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=ime_out_para_set->CtrPos2MD core=RAM_1P_BRAM


#if ENABLE_BFRAME
#pragma HLS RESOURCE variable=ime_out_para_set->offset_fme_sww_h_ref1 core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=ime_out_para_set->CtrPos2MD_ref1 core=RAM_1P_BRAM
#endif

#if USE_INTRA_REFRESH
#pragma HLS INTERFACE axis port=ime_out_para_set->EncRefresh
#pragma HLS INTERFACE axis port=ime_out_para_set->RefreshMode
#pragma HLS INTERFACE axis port=ime_out_para_set->RefreshSize
#pragma HLS INTERFACE axis port=ime_out_para_set->pirStartRow
#pragma HLS INTERFACE axis port=ime_out_para_set->pirEndRow
#pragma HLS INTERFACE axis port=ime_out_para_set->pirStartCol
#pragma HLS INTERFACE axis port=ime_out_para_set->pirEndCol
#pragma HLS INTERFACE axis port=ime_out_para_set->numCuInWidth
#pragma HLS INTERFACE axis port=ime_out_para_set->numCuInHeight
#endif

#if USE_SPEED_LEVEL
#pragma HLS INTERFACE axis port=ime_out_para_set->speed_level
#endif

#if USE_ROI_MODE_CONFIG
#pragma HLS RESOURCE variable=ime_out_para_set->valid_mode core=RAM_1P_BRAM
#endif

#if CUDQP_QP_MAP
#pragma HLS INTERFACE axis port=ime_out_para_set->cu_dqp_enable
#pragma HLS INTERFACE axis port=ime_out_para_set->cu_qp_group_area_size
#pragma HLS INTERFACE axis port=ime_out_para_set->cu_qp_group_pred_qp
#pragma HLS INTERFACE axis port=ime_out_para_set->chroma_quant_param_delta_cb
#pragma HLS INTERFACE axis port=ime_out_para_set->chroma_quant_param_delta_cr
#pragma HLS INTERFACE axis port=ime_out_para_set->md_slice_qp
#pragma HLS RESOURCE variable=ime_out_para_set->CuQPMap core=RAM_1P_BRAM
#endif

//ime_64x64_best_cost
#pragma HLS RESOURCE variable=ime_64x64_best_cost core=RAM_1P_BRAM

//RefWindowLCU_2d_ref1
#if ENABLE_BFRAME
#pragma HLS RESOURCE variable=RefWindowLCU_2d_ref1 core=RAM_1P_BRAM
#endif

//me_mv_dir
#if ENABLE_BFRAME
#pragma HLS RESOURCE variable=me_mv_dir->block64x64MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block32x32MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block64x32MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block32x64MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block16x16MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block32x16MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block16x32MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block64x16MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block16x64MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block8x8MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block16x8MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block8x16MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block32x8MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block8x32MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block64x8MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block8x64MvDir core=RAM_1P_BRAM
#endif

#if REFP_PTR_FEBUG
#pragma HLS RESOURCE variable=fetch2md_fw_ptr->refp_ptr_1 core=RAM_1P_BRAM
#endif


#else

#pragma HLS INTERFACE axis port=me_line_map_ptr_IME->min_scu_x
#pragma HLS RESOURCE variable=me_line_map_ptr_IME->new_map_scu_above_line core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_line_map_ptr_IME->co_left_mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_line_map_ptr_IME->co_left_refi core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_line_map_ptr_IME->co_left_ptr_ref core=RAM_1P_BRAM

#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->pic_width
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->pic_height
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->slice_type
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->affine_enable_flag		
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->pic_width_in_scu
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->pic_height_in_scu
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->log2_max_cuwh
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->log2_culine
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->max_cuwh
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->bit_depth_internal
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->max_part_ratio
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->min_cu_size
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->max_split_times
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->min_qt_size
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->max_bt_size
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->max_eqt_size

#if EIPM
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->eipm_enable_flag
#endif

#if MIPF
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->mipf_enable_flag
#endif

#if INTERPF
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->interpf_enable_flag
#endif

#pragma HLS RESOURCE variable=fetch2md_fw_ptr->refp_ptr core=RAM_1P_BRAM

#if ENABLE_BFRAME
#pragma HLS RESOURCE variable=fetch2md_fw_ptr->num_refp core=RAM_1P_BRAM
#else
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->num_refp
#endif

#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->cur_ptr

#if CUDQP_QP_MAP
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->chroma_quant_param_delta_cb
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->chroma_quant_param_delta_cr
#endif

#if UMVE_ENH
#pragma HLS INTERFACE axis port=fetch2md_fw_ptr->umve_set_flag
#endif


#pragma HLS INTERFACE axis port=fetch_output->pix_x
#pragma HLS INTERFACE axis port=fetch_output->pix_y
#pragma HLS INTERFACE axis port=fetch_output->qp_y
#pragma HLS INTERFACE axis port=fetch_output->qp_u
#pragma HLS INTERFACE axis port=fetch_output->qp_v
#pragma HLS INTERFACE axis port=fetch_output->lambda_mv
#pragma HLS INTERFACE axis port=fetch_output->x_last_ctu
#pragma HLS INTERFACE axis port=fetch_output->y_last_ctu

#pragma HLS RESOURCE variable=fetch_output->lambda core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=fetch_output->dist_chroma_weight core=RAM_1P_BRAM

#if USE_INTRA_REFRESH
#pragma HLS INTERFACE axis port=fetch_output->EncRefresh
#pragma HLS INTERFACE axis port=fetch_output->RefreshMode
#pragma HLS INTERFACE axis port=fetch_output->RefreshSize
#pragma HLS INTERFACE axis port=fetch_output->pirStartRow
#pragma HLS INTERFACE axis port=fetch_output->pirEndRow
#pragma HLS INTERFACE axis port=fetch_output->pirStartCol
#pragma HLS INTERFACE axis port=fetch_output->pirEndCol
#pragma HLS INTERFACE axis port=fetch_output->numCuInWidth
#pragma HLS INTERFACE axis port=fetch_output->numCuInHeight
#endif

#if USE_SPEED_LEVEL
#pragma HLS INTERFACE axis port=fetch_output->speed_level
#endif

#if USE_ROI_MODE_CONFIG
#pragma HLS RESOURCE variable=fetch_output->valid_mode core=RAM_1P_BRAM
#endif

#if CUDQP_QP_MAP
#pragma HLS INTERFACE axis port=fetch_output->cu_dqp_enable
#pragma HLS INTERFACE axis port=fetch_output->md_slice_qp
#pragma HLS INTERFACE axis port=fetch_output->cu_qp_group_area_size
#pragma HLS INTERFACE axis port=fetch_output->cu_qp_group_pred_qp
#pragma HLS RESOURCE variable=fetch_output->CuQPMap core=RAM_1P_BRAM
#endif


#pragma HLS INTERFACE axis port=ime_out_para_set->pic_width
#pragma HLS INTERFACE axis port=ime_out_para_set->pic_height
#pragma HLS INTERFACE axis port=ime_out_para_set->slice_type
#pragma HLS INTERFACE axis port=ime_out_para_set->affine_enable_flag
#pragma HLS INTERFACE axis port=ime_out_para_set->pic_width_in_scu
#pragma HLS INTERFACE axis port=ime_out_para_set->pic_height_in_scu
#pragma HLS INTERFACE axis port=ime_out_para_set->log2_max_cuwh
#pragma HLS INTERFACE axis port=ime_out_para_set->log2_culine
#pragma HLS INTERFACE axis port=ime_out_para_set->max_cuwh

#if EIPM
#pragma HLS INTERFACE axis port=ime_out_para_set->eipm_enable_flag
#endif

#if MIPF
#pragma HLS INTERFACE axis port=ime_out_para_set->mipf_enable_flag
#endif

#if INTERPF
#pragma HLS INTERFACE axis port=ime_out_para_set->interpf_enable_flag
#endif

#pragma HLS INTERFACE axis port=ime_out_para_set->bit_depth_internal
#pragma HLS INTERFACE axis port=ime_out_para_set->max_part_ratio
#pragma HLS INTERFACE axis port=ime_out_para_set->min_cu_size
#pragma HLS INTERFACE axis port=ime_out_para_set->max_split_times
#pragma HLS INTERFACE axis port=ime_out_para_set->min_qt_size
#pragma HLS INTERFACE axis port=ime_out_para_set->max_bt_size
#pragma HLS INTERFACE axis port=ime_out_para_set->max_eqt_size

#pragma HLS RESOURCE variable=ime_out_para_set->refp_ptr core=RAM_1P_BRAM

#if ENABLE_BFRAME
#pragma HLS RESOURCE variable=ime_out_para_set->num_refp core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=ime_out_para_set->CtrPos_ref1 core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=ime_out_para_set->CtrPosFME_ref1 core=RAM_1P_BRAM
#else
#pragma HLS INTERFACE axis port=ime_out_para_set->num_refp
#endif

#pragma HLS RESOURCE variable=ime_out_para_set->swSubLv0TopLeft core=RAM_1P_BRAM

#pragma HLS INTERFACE axis port=ime_out_para_set->cur_ptr
#pragma HLS INTERFACE axis port=ime_out_para_set->pix_x
#pragma HLS INTERFACE axis port=ime_out_para_set->pix_y
#pragma HLS INTERFACE axis port=ime_out_para_set->qp_y
#pragma HLS INTERFACE axis port=ime_out_para_set->qp_u
#pragma HLS INTERFACE axis port=ime_out_para_set->qp_v
#pragma HLS RESOURCE variable=ime_out_para_set->lambda core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=ime_out_para_set->dist_chroma_weight core=RAM_1P_BRAM
#pragma HLS INTERFACE axis port=ime_out_para_set->x_last_ctu
#pragma HLS INTERFACE axis port=ime_out_para_set->y_last_ctu

#if UMVE_ENH
#pragma HLS INTERFACE axis port=ime_out_para_set->umve_set_flag
#endif

#pragma HLS RESOURCE variable=ime_out_para_set->CtrPos core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=ime_out_para_set->CtrPosFME core=RAM_1P_BRAM

#pragma HLS RESOURCE variable=ime_out_para_set->y_org core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=ime_out_para_set->u_org core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=ime_out_para_set->v_org core=RAM_1P_BRAM

#pragma HLS RESOURCE variable=ime_out_para_set->offset_fme_sww_h core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=ime_out_para_set->CtrPos2MD core=RAM_1P_BRAM

#if ENABLE_BFRAME
#pragma HLS RESOURCE variable=ime_out_para_set->offset_fme_sww_h_ref1 core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=ime_out_para_set->CtrPos2MD_ref1 core=RAM_1P_BRAM
#endif

#if USE_INTRA_REFRESH
#pragma HLS INTERFACE axis port=ime_out_para_set->EncRefresh
#pragma HLS INTERFACE axis port=ime_out_para_set->RefreshMode
#pragma HLS INTERFACE axis port=ime_out_para_set->RefreshSize
#pragma HLS INTERFACE axis port=ime_out_para_set->pirStartRow
#pragma HLS INTERFACE axis port=ime_out_para_set->pirEndRow
#pragma HLS INTERFACE axis port=ime_out_para_set->pirStartCol
#pragma HLS INTERFACE axis port=ime_out_para_set->pirEndCol
#pragma HLS INTERFACE axis port=ime_out_para_set->numCuInWidth
#pragma HLS INTERFACE axis port=ime_out_para_set->numCuInHeight
#endif

#if USE_SPEED_LEVEL
#pragma HLS INTERFACE axis port=ime_out_para_set->speed_level
#endif

#if USE_ROI_MODE_CONFIG
#pragma HLS RESOURCE variable=ime_out_para_set->valid_mode core=RAM_1P_BRAM
#endif

#if CUDQP_QP_MAP
#pragma HLS INTERFACE axis port=ime_out_para_set->cu_dqp_enable
#pragma HLS INTERFACE axis port=ime_out_para_set->cu_qp_group_area_size
#pragma HLS INTERFACE axis port=ime_out_para_set->cu_qp_group_pred_qp
#pragma HLS INTERFACE axis port=ime_out_para_set->chroma_quant_param_delta_cb
#pragma HLS INTERFACE axis port=ime_out_para_set->chroma_quant_param_delta_cr
#pragma HLS INTERFACE axis port=ime_out_para_set->md_slice_qp
#pragma HLS RESOURCE variable=ime_out_para_set->CuQPMap core=RAM_1P_BRAM
#endif

#pragma HLS RESOURCE variable=ime_64x64_best_cost core=RAM_1P_BRAM

#pragma HLS RESOURCE variable=new_above_nebs_line_IME core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=Fetch_Ref_Window_IME->CtrPos core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=Fetch_Ref_Window_IME->swOutLv0 core=RAM_1P_BRAM

#pragma HLS RESOURCE variable=Fetch_Orig_Lcu_IME->y_org core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=Fetch_Orig_Lcu_IME->u_org core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=Fetch_Orig_Lcu_IME->v_org core=RAM_1P_BRAM


#if REFP_PTR_FEBUG
#pragma HLS RESOURCE variable=fetch2md_fw_ptr->refp_ptr_1 core=RAM_1P_BRAM
#endif


#pragma HLS RESOURCE variable=me_mv_info->sadTree64x64Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree32x32Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree64x32Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree32x64Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree16x16Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree32x16Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree16x32Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree64x16Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree16x64Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree8x8Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree16x8Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree8x16Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree32x8Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree8x32Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree64x8Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_info->sadTree8x64Mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree64x64PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree32x32PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree64x32PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree32x64PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree16x16PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree32x16PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree16x32PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree64x16PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree16x64PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree8x8PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree16x8PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree8x16PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree32x8PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree8x32PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree64x8PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_pmv_info->sadTree8x64PMv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=RefWindowLCU_2d core=RAM_1P_BRAM


#if ENABLE_BFRAME
#pragma HLS RESOURCE variable=me_line_map_ptr_IME_1->new_map_scu_above_line core=RAM_1P_BRAM
//#pragma HLS INTERFACE axis port=me_line_map_ptr_IME_1->min_scu_x
#pragma HLS RESOURCE variable=me_line_map_ptr_IME_1->co_left_mv core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_line_map_ptr_IME_1->co_left_refi core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_line_map_ptr_IME_1->co_left_ptr_ref core=RAM_1P_BRAM

#pragma HLS RESOURCE variable=new_above_nebs_line_IME_1 core=RAM_1P_BRAM

#pragma HLS RESOURCE variable=Fetch_Ref_Window_IME->lidx core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=Fetch_Ref_Window_IME->cur_refi core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=Fetch_Ref_Window_IME->CtrPos_ref1 core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=Fetch_Ref_Window_IME->swOutLv0_ref1 core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=RefWindowLCU_2d_ref1 core=RAM_1P_BRAM

#pragma HLS RESOURCE variable=me_mv_dir->block64x64MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block32x32MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block64x32MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block32x64MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block16x16MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block32x16MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block16x32MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block64x16MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block16x64MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block8x8MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block16x8MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block8x16MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block32x8MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block8x32MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block64x8MvDir core=RAM_1P_BRAM
#pragma HLS RESOURCE variable=me_mv_dir->block8x64MvDir core=RAM_1P_BRAM
#endif

#endif	// #if VIVADO_HLS_IME

#endif	//#if IME_PRAGMA_ON_INTERFACE

#if 0//!IME_PRAGMA_ON_OP
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=me_line_map_ptr_IME->new_map_scu_above_line complete dim=1			
#pragma HLS ARRAY_PARTITION variable=me_line_map_ptr_IME->co_left_mv complete dim=1			
#pragma HLS ARRAY_PARTITION variable=me_line_map_ptr_IME->co_left_refi complete dim=1	
#pragma HLS ARRAY_PARTITION variable=new_above_nebs_line_IME complete dim=0	

#pragma HLS ARRAY_PARTITION variable=Fetch_Ref_Window_IME->CtrPos complete dim=0	

	//#pragma HLS ARRAY_PARTITION variable=Fetch_Orig_Lcu_IME->y_org complete dim=1
	//#pragma HLS ARRAY_PARTITION variable=Fetch_Orig_Lcu_IME->u_org complete dim=1
	//#pragma HLS ARRAY_PARTITION variable=Fetch_Orig_Lcu_IME->v_org complete dim=1
#pragma HLS ARRAY_PARTITION variable=Fetch_Orig_Lcu_IME->y_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=Fetch_Orig_Lcu_IME->u_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=Fetch_Orig_Lcu_IME->v_org complete dim=2


#pragma HLS ARRAY_PARTITION variable=fetch2md_fw_ptr->refp_ptr complete dim=0
//#pragma HLS ARRAY_PARTITION variable=RefWindowLCU_2d complete dim=2
#pragma HLS ARRAY_PARTITION variable=RefWindowLCU_2d complete dim=2

//


#pragma HLS ARRAY_PARTITION variable=Fetch_Ref_Window_IME->RefWindowLCU cyclic factor=256 dim=1
#pragma HLS ARRAY_PARTITION variable=Fetch_Ref_Window_IME->RefWindowLCU_UP cyclic factor=128 dim=1
#pragma HLS ARRAY_PARTITION variable=Fetch_Ref_Window_IME->RefWindowLCU_VP cyclic factor=128 dim=1
#pragma HLS ARRAY_PARTITION variable=ime_out_para_set->RefWindowLCU cyclic factor=256 dim=1
#pragma HLS ARRAY_PARTITION variable=ime_out_para_set->RefWindowLCU_UP cyclic factor=128 dim=1
#pragma HLS ARRAY_PARTITION variable=ime_out_para_set->RefWindowLCU_VP cyclic factor=128 dim=1
//#pragma HLS ARRAY_PARTITION variable=ime_out_para_set->y_org complete dim=1
//#pragma HLS ARRAY_PARTITION variable=ime_out_para_set->u_org complete dim=1
//#pragma HLS ARRAY_PARTITION variable=ime_out_para_set->v_org complete dim=1
#pragma HLS ARRAY_PARTITION variable=ime_out_para_set->y_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=ime_out_para_set->u_org complete dim=2
#pragma HLS ARRAY_PARTITION variable=ime_out_para_set->v_org complete dim=2

#endif
#endif	// #if !IME_PRAGMA_ON_OP

#if ENABLE_BFRAME
#if IME_PRAGMA_ON
#pragma HLS ARRAY_PARTITION variable=ime_out_para_set->swSubLv0TopLeft complete dim=1
#pragma HLS ARRAY_PARTITION variable=Fetch_Ref_Window_IME->lidx complete dim=1
#pragma HLS ARRAY_PARTITION variable=Fetch_Ref_Window_IME->cur_refi complete dim=1
//#pragma HLS ARRAY_PARTITION variable=fetch2md_fw_ptr->refp_ptr complete dim=2

#endif
#endif

	U11 me_line_map_ptr_min_scu_x_in = me_line_map_ptr_IME->min_scu_x;
	U11 fetch2md_fw_ptr_pic_width_in_scu = fetch2md_fw_ptr->pic_width_in_scu;
	U11 fetch2md_fw_ptr_pic_height_in_scu = fetch2md_fw_ptr->pic_height_in_scu;
	U12 fetch_output_pix_x = fetch_output->pix_x;
	U12 fetch_output_pix_y = fetch_output->pix_y;
	U9 fetch2md_fw_ptr_cur_ptr = fetch2md_fw_ptr->cur_ptr;
	U2 fetch2md_fw_ptr_slice_type = fetch2md_fw_ptr->slice_type;

#if !ENABLE_BFRAME
	U1 lidx_in = 0;
	U8 cur_refi_in = 0;
	U1 lidx = lidx_in;
	U8 cur_refi = cur_refi_in;
#endif

#if VIVADO_HLS_IME_OP_1
	S8 flag_mv_cfg_in = 0;
#else
	S8 flag_mv_cfg_in = 1;//0;
#endif

	S14 mv_cfg[2] = { 0,0 };
	S8 flag_mv_cfg = flag_mv_cfg_in;
	U4 bit_depth = fetch2md_fw_ptr->bit_depth_internal;
	U32 fetch_output_lambda_mv = fetch_output->lambda_mv;
#if SCALE_LAMBDA_MV_16BIT
	U32 fetch_output_lambda_mv_ime = fetch_output_lambda_mv >> 10;
#endif

#if ENABLE_BFRAME
	U5 fetch2md_fw_ptr_num_refp = fetch2md_fw_ptr->num_refp[0];
	U5 fetch2md_fw_ptr_num_refp_1 = fetch2md_fw_ptr->num_refp[1];
	if (fetch2md_fw_ptr_num_refp > 1 && fetch2md_fw_ptr_slice_type == SLICE_P)
	{
		fetch2md_fw_ptr_num_refp = 1;
		fetch2md_fw_ptr_num_refp_1 = 1;
	}

	U11 me_line_map_ptr_min_scu_x_in_1 = me_line_map_ptr_min_scu_x_in;
	U11 fetch2md_fw_ptr_pic_width_in_scu_1 = fetch2md_fw_ptr_pic_width_in_scu;
	U11 fetch2md_fw_ptr_pic_height_in_scu_1 = fetch2md_fw_ptr_pic_height_in_scu;
	U12 fetch_output_pix_x_1 = fetch_output_pix_x;
	U12 fetch_output_pix_y_1 = fetch_output_pix_y;
	U9 fetch2md_fw_ptr_cur_ptr_1 = fetch2md_fw_ptr_cur_ptr;
	U2 fetch2md_fw_ptr_slice_type_1 = fetch2md_fw_ptr_slice_type;
	U4 bit_depth_1 = bit_depth;

	U32 fetch_output_lambda_mv_ime_1 = fetch_output_lambda_mv_ime;

	S14 mv_cfg_1[2] = { 0,0 };
	S8 flag_mv_cfg_1 = flag_mv_cfg_in;


	U1 lidx = Fetch_Ref_Window_IME->lidx[REFP_0];
	S8 cur_refi = Fetch_Ref_Window_IME->cur_refi[REFP_0];
	S16 fetch2md_fw_ptr_cur_ref = fetch2md_fw_ptr->refp_ptr[cur_refi][lidx];

	U1 lidx_1 = Fetch_Ref_Window_IME->lidx[REFP_1];
	S8 cur_refi_1 = Fetch_Ref_Window_IME->cur_refi[REFP_1];
	S16 fetch2md_fw_ptr_cur_ref_1 = fetch2md_fw_ptr->refp_ptr[cur_refi_1][lidx_1];

#else
	U5 fetch2md_fw_ptr_num_refp = fetch2md_fw_ptr->num_refp;
#endif



	
	S14 CtrPos[RANGE_NUM][DIR_DIM][MAP_DIMS];

#if ENABLE_BFRAME

#if VIVADO_HLS_IME
	S14 CtrPos_ref1[RANGE_NUM][DIR_DIM][MAP_DIMS];
	ME_MV_INFO_BW me_mv_info_ref1;
	ME_PMV_INFO_BW me_pmv_info_ref1;
	ME_MV_COST_BW me_mv_cost_Ref0, me_mv_cost_Ref1;
#if BW_DEBUG
	U10 y_org_1[MAX_CU_SIZE_FETCH][MAX_CU_SIZE_FETCH];
#else
	pel y_org_1[MAX_CU_SIZE_FETCH][MAX_CU_SIZE_FETCH];
#endif
#else
	static S14 CtrPos_ref1[RANGE_NUM][DIR_DIM][MAP_DIMS];
	static ME_MV_INFO_BW me_mv_info_ref1;
	static ME_PMV_INFO_BW me_pmv_info_ref1;
	static ME_MV_COST_BW me_mv_cost_Ref0, me_mv_cost_Ref1;
#if BW_DEBUG
	static U10 y_org_1[MAX_CU_SIZE_FETCH][MAX_CU_SIZE_FETCH];
#else
	static pel y_org_1[MAX_CU_SIZE_FETCH][MAX_CU_SIZE_FETCH];
#endif
#endif

#else

#if VIVADO_HLS_IME
	ME_MV_COST_BW me_mv_cost;
#else
	static ME_MV_COST_BW me_mv_cost;
#endif

#endif

	write_out_para_set(Fetch_Orig_Lcu_IME, Fetch_Ref_Window_IME, fetch2md_fw_ptr, fetch_output,  ime_out_para_set, bit_depth,
		fetch2md_fw_ptr_pic_width_in_scu, fetch2md_fw_ptr_pic_height_in_scu, fetch_output_pix_x, fetch_output_pix_y,
		fetch2md_fw_ptr_cur_ptr, fetch2md_fw_ptr_slice_type, fetch_output_lambda_mv, fetch2md_fw_ptr_num_refp, CtrPos
#if ENABLE_BFRAME
		, CtrPos_ref1
#endif
	);
#if !SIMPLE_MD
	if (fetch2md_fw_ptr_slice_type != SLICE_I)
	{
#if ENABLE_BFRAME
		copyOrgLv0_test1(
			Fetch_Orig_Lcu_IME->y_org,
			y_org_1
		);
#endif
		ime_run_uni(
			me_line_map_ptr_IME, 
			new_above_nebs_line_IME, 
			Fetch_Ref_Window_IME->swOutLv0,
			Fetch_Orig_Lcu_IME->y_org,
			fetch2md_fw_ptr->refp_ptr,
			me_mv_info, 
			me_pmv_info,
			RefWindowLCU_2d, 
			ime_out_para_set->CtrPosFME, 
			CtrPos, 
			fetch2md_fw_ptr_num_refp, 
			me_line_map_ptr_min_scu_x_in,
			fetch2md_fw_ptr_pic_width_in_scu, 
			fetch2md_fw_ptr_pic_height_in_scu, 
			fetch_output_pix_x,
			fetch_output_pix_y, 
			fetch2md_fw_ptr_cur_ptr, 
			fetch2md_fw_ptr_cur_ref,	
			bit_depth, 
#if SCALE_LAMBDA_MV_16BIT
			fetch_output_lambda_mv_ime,
#else
			fetch_output_lambda_mv,
#endif
			flag_mv_cfg, 
			mv_cfg
#if ENABLE_BFRAME
			, ime_out_para_set->swSubLv0TopLeft[REFP_0],
			lidx,
			cur_refi,
			&me_mv_cost_Ref0
#else
			, ime_out_para_set->swSubLv0TopLeft, 
			lidx, 
			cur_refi, 
			&me_mv_cost
#endif
			, ime_out_para_set->offset_fme_sww_h
			, ime_out_para_set->CtrPos2MD
		);

#ifndef __SYNTHESIS__

#if ENABLE_BFRAME

		ime_run_uni(
			me_line_map_ptr_IME_1,
			new_above_nebs_line_IME_1,  
			Fetch_Ref_Window_IME->swOutLv0_ref1,
			y_org_1, 
#if REFP_PTR_FEBUG
			fetch2md_fw_ptr->refp_ptr_1,
#else
			fetch2md_fw_ptr->refp_ptr,
#endif
			&me_mv_info_ref1, 
			&me_pmv_info_ref1,
			RefWindowLCU_2d_ref1, 
			ime_out_para_set->CtrPosFME_ref1, 
			CtrPos_ref1,
			fetch2md_fw_ptr_num_refp_1, 
			me_line_map_ptr_min_scu_x_in_1,
			fetch2md_fw_ptr_pic_width_in_scu_1, 
			fetch2md_fw_ptr_pic_height_in_scu_1, 
			fetch_output_pix_x_1,
			fetch_output_pix_y_1,
			fetch2md_fw_ptr_cur_ptr_1,
			fetch2md_fw_ptr_cur_ref_1,	//
			bit_depth_1,
#if SCALE_LAMBDA_MV_16BIT
			fetch_output_lambda_mv_ime_1,
#else
			fetch_output_lambda_mv,
#endif
			flag_mv_cfg_1, 
			mv_cfg_1
#if ENABLE_BFRAME
			, ime_out_para_set->swSubLv0TopLeft[REFP_1],
			lidx_1, 
			cur_refi_1, 
			&me_mv_cost_Ref1
#else
			, ime_out_para_set->swSubLv0TopLeft, 
			lidx, 
			cur_refi, 
			&me_mv_cost
#endif
			, ime_out_para_set->offset_fme_sww_h_ref1
			, ime_out_para_set->CtrPos2MD_ref1
		);


#if PRINT_MV
		if (Fetch_Ref_Window_IME->cur_refi[1] >= 0)
		{
			printf("Ref 0\n");
			me_mv_info->printMV();
			printf("Ref 1\n");
			me_mv_info_ref1.printMV();
		}
#endif
#if PRINT_PMV
		if (Fetch_Ref_Window_IME->cur_refi[1] >= 0)
		{
			printf("Ref 1\n");
			me_pmv_info_ref1.printMV();
		}
#endif
		if (Fetch_Ref_Window_IME->cur_refi[1] >= 0)
		{
			compareMvDir(
				Fetch_Ref_Window_IME->lidx, 
				Fetch_Ref_Window_IME->cur_refi, 
				me_mv_info, 
				&me_mv_info_ref1, 
				me_pmv_info, 
				&me_pmv_info_ref1, 
				me_mv_dir,
				&me_mv_cost_Ref0, 
				&me_mv_cost_Ref1
			);
		}		
		else
		{
			//memset(me_mv_dir, 0, sizeof(ME_MV_DIR));
			memsetMvDir(me_mv_dir);
		}
			
#if STAT_DIR
		if (Fetch_Ref_Window_IME->cur_refi[1] >= 0)
		{
			me_mv_dir->statDir();
		}	
#endif

#endif

#endif

	}
	ime_64x64_best_cost[0] = me_mv_cost_Ref0.sadTree64x64Best[0][0];
	ime_64x64_best_cost[1] = me_mv_cost_Ref1.sadTree64x64Best[0][0];
#endif
}

#if !VIVADO_HLS_IME

/**
* ===========================================================================
* IME Test bench and ApInt converter
* ---------------------------------------------------------------------------
* 1. Utilizations for methods for Class FileReader
* 2. Converters from Original data type to ApInt
* 3. Converters from ApInt to Original data type
* ===========================================================================
*/

/*==========================*/
/*  Template for converters	*/
/*==========================*/



template<typename D, typename S, unsigned DIM_0_SIZE, unsigned DIM_1_SIZE, unsigned DIM_2_SIZE>
bool convertArray3D(D array3DDst[DIM_0_SIZE][DIM_1_SIZE][DIM_2_SIZE], const S(&array3DSrc)[DIM_0_SIZE][DIM_1_SIZE][DIM_2_SIZE])
{
	unsigned int x, y, z;
	for (x = 0; x < DIM_0_SIZE; x++)
	{
		for (y = 0; y < DIM_1_SIZE; y++)
		{
			for (z = 0; z < DIM_2_SIZE; z++)
			{
				array3DDst[x][y][z] = (D)array3DSrc[x][y][z];
			}

		}
	}
	return true;
}

template<typename D, typename S, unsigned DIM_0_SIZE, unsigned DIM_1_SIZE>
bool convertArray2D(D array2DDst[DIM_0_SIZE][DIM_1_SIZE], const S(&array2DSrc)[DIM_0_SIZE][DIM_1_SIZE])
{
	unsigned int x, y;
	for (x = 0; x < DIM_0_SIZE; x++)
	{
		for (y = 0; y < DIM_1_SIZE; y++)
		{

			array2DDst[x][y] = (D)array2DSrc[x][y];

		}
	}
	return true;
}

template<typename D, typename S, unsigned DIM_0_SIZE>
bool convertArray1D(D array1DDst[DIM_0_SIZE], const S(&array1DSrc)[DIM_0_SIZE])
{
	unsigned int x;
	for (x = 0; x < DIM_0_SIZE; x++)
	{
		array1DDst[x] = (D)array1DSrc[x];
	}
	return true;
}

template<class T, unsigned DIM_0_SIZE, unsigned DIM_1_SIZE, unsigned DIM_2_SIZE>
bool compareArray3D(const T(&array3DA)[DIM_0_SIZE][DIM_1_SIZE][DIM_2_SIZE], const T(&array3DB)[DIM_0_SIZE][DIM_1_SIZE][DIM_2_SIZE])
{
	unsigned int x, y, z;
	for (x = 0; x < DIM_0_SIZE; x++)
	{
		for (y = 0; y < DIM_1_SIZE; y++)
		{
			for (z = 0; z < DIM_2_SIZE; z++)
			{
				if (array3DA[x][y][z] != array3DB[x][y][z])
					return false;
			}

		}
	}
	return true;
}

template<class T, unsigned DIM_0_SIZE, unsigned DIM_1_SIZE>
bool compareArray2D(const T(&array2DA)[DIM_0_SIZE][DIM_1_SIZE], const  T(&array2DB)[DIM_0_SIZE][DIM_1_SIZE])
{
	unsigned int x, y;
	for (x = 0; x < DIM_0_SIZE; x++)
	{
		for (y = 0; y < DIM_1_SIZE; y++)
		{
			if (array2DA[x][y] != array2DB[x][y])
				return false;
		}
	}
	return true;
}

template<class T, unsigned DIM_0_SIZE>
bool compareArray1D(const T(&array1DA)[DIM_0_SIZE], const  T(&array1DB)[DIM_0_SIZE])
{
	unsigned int x;
	for (x = 0; x < DIM_0_SIZE; x++)
	{
		if (array1DA[x] != array1DB[x])
			return false;
	}
	return true;
}

/*======================*/
/*  Class FileReader	*/
/*=====================*/


#define PRINT_ATRIBUTE(fp,name,size,ptr,poc,succ) succ=fp->printAtribute(std::string(#name), sizeof(size), (void*)(ptr), poc); assert(succ)
#define READ_ATRIBUTE(fr,name,size,ptr,succ) succ=fr->readAtribute(std::string(#name), sizeof(size), (void*)(ptr)); assert(succ)

FilePrinter::FilePrinter(std::string baseDirName, int maxElementNum, int maxElementPerFrame)
{
	this->baseDirName = baseDirName;
	this->maxElementNum = maxElementNum;
	this->maxElementPerFrame = maxElementPerFrame;
	elementNum = 0;
	lastFrameNumber = 0;
}

bool FilePrinter::continueWriting(int frameNumber)
{

	if (frameNumber != lastFrameNumber)
	{
		elementNumPerFrame = 0;
		lastFrameNumber = frameNumber;
	}

	if ((elementNum >= maxElementNum && maxElementNum != -1) || (elementNumPerFrame >= maxElementPerFrame && maxElementPerFrame != -1))
		return false;

	return true;
}

bool FilePrinter::printAtribute(std::string atriName, size_t size, void* ptr, int frameNumber)
{
	using namespace std;

	if (size == 0 || ptr == NULL)
		return false;

	if (!continueWriting(frameNumber))
		return true;
#ifdef WIN32
	std:string path = baseDirName + "\\" + atriName + ".dat";
#else
	std:string path = baseDirName + "//" + atriName + ".dat";
#endif
	std::fstream file(path.c_str(), std::ios::app | std::ios::out | std::ios::binary);
	if (!file)
	{
		std::cout << "Error open file" + path;
		return false;
	}

	file.write(reinterpret_cast<char*>(ptr), size);

	file.close();

	return true;
}




void FilePrinter::increaseElement()
{
	elementNum++;
	elementNumPerFrame++;
}

FileReader::FileReader(std::string baseDirName, int maxElementNum) {

	this->baseDirName = baseDirName;
	this->maxElementNum = maxElementNum;
	elementNum = 0;

}

bool FileReader::readAtribute(std::string atriName, size_t size, void* ptr) {

	using namespace std;

	if (size == 0 || ptr == NULL)
		return false;

	if (!continueReading())
		return true;

std:string path = baseDirName + "\\" + atriName + ".dat";

	std::fstream file(path.c_str(), std::ios::in | std::ios::binary);
	if (!file)
	{
		std::cout << "Error open file " + path;
		return false;
	}

	std::map<std::string, size_t>::iterator it = offsetMapper.find(atriName);

	if (it == offsetMapper.end())
	{
		offsetMapper.insert(std::pair<std::string, size_t>(atriName, 0));
		it = offsetMapper.find(atriName);
	}

	size_t streamOffSet = it->second;

	file.seekg(streamOffSet, std::ios::beg);

	file.read(reinterpret_cast<char*>(ptr), size);

	it->second = file.tellg();

	file.close();

	return true;
}

bool FileReader::continueReading() {

	if (elementNum >= maxElementNum && maxElementNum != -1)
		return false;

	return true;
}

void FileReader::increaseElement()
{
	elementNum++;
}

#define COM_MV_3D(W,H,r,t,succ)  succ= succ && compareArray3D<s16, 64/W, 64/H, MV_D>(r->sadTree##W##x##H##Mv, t->sadTree##W##x##H##Mv)
#define COM_PMV_3D(W,H,r,t,succ)  succ= succ && compareArray3D<s16, 64/W, 64/H, MV_D>(r->sadTree##W##x##H##PMv, t->sadTree##W##x##H##PMv)

bool FileReader::comparePMv(ME_PMV_INFO* pmvRead, ME_PMV_INFO* pmvWrite)
{
	bool finalState = true;

	COM_PMV_3D(64, 64, pmvRead, pmvWrite, finalState);
	COM_PMV_3D(64, 32, pmvRead, pmvWrite, finalState);
	COM_PMV_3D(64, 16, pmvRead, pmvWrite, finalState);
	COM_PMV_3D(64, 8, pmvRead, pmvWrite, finalState);
	COM_PMV_3D(32, 64, pmvRead, pmvWrite, finalState);
	COM_PMV_3D(32, 32, pmvRead, pmvWrite, finalState);
	COM_PMV_3D(32, 16, pmvRead, pmvWrite, finalState);
	COM_PMV_3D(32, 8, pmvRead, pmvWrite, finalState);
	//COM_PMV_3D(32, 4, pmvRead, pmvWrite, finalState);
	COM_PMV_3D(16, 64, pmvRead, pmvWrite, finalState);
	COM_PMV_3D(16, 32, pmvRead, pmvWrite, finalState);
	COM_PMV_3D(16, 16, pmvRead, pmvWrite, finalState);
	COM_PMV_3D(16, 8, pmvRead, pmvWrite, finalState);
	//COM_PMV_3D(16, 4, pmvRead, pmvWrite, finalState);
	COM_PMV_3D(8, 64, pmvRead, pmvWrite, finalState);
	COM_PMV_3D(8, 32, pmvRead, pmvWrite, finalState);
	COM_PMV_3D(8, 16, pmvRead, pmvWrite, finalState);
	COM_PMV_3D(8, 8, pmvRead, pmvWrite, finalState);
	//COM_PMV_3D(8, 4, pmvRead, pmvWrite, finalState);
	//COM_PMV_3D(4, 32, pmvRead, pmvWrite, finalState);
	//COM_PMV_3D(4, 16, pmvRead, pmvWrite, finalState);
	//COM_PMV_3D(4, 8, pmvRead, pmvWrite, finalState);

	return finalState;
}

bool FileReader::compareMv(ME_MV_INFO* mvRead, ME_MV_INFO* mvWrite)
{
	bool finalState = true;

	COM_MV_3D(64, 64, mvRead, mvWrite, finalState);
	COM_MV_3D(64, 32, mvRead, mvWrite, finalState);
	COM_MV_3D(64, 16, mvRead, mvWrite, finalState);
	COM_MV_3D(64, 8, mvRead, mvWrite, finalState);
	COM_MV_3D(32, 64, mvRead, mvWrite, finalState);
	COM_MV_3D(32, 32, mvRead, mvWrite, finalState);
	COM_MV_3D(32, 16, mvRead, mvWrite, finalState);
	COM_MV_3D(32, 8, mvRead, mvWrite, finalState);
	//COM_MV_3D(32, 4, mvRead, mvWrite, finalState);
	COM_MV_3D(16, 64, mvRead, mvWrite, finalState);
	COM_MV_3D(16, 32, mvRead, mvWrite, finalState);
	COM_MV_3D(16, 16, mvRead, mvWrite, finalState);
	COM_MV_3D(16, 8, mvRead, mvWrite, finalState);
	//COM_MV_3D(16, 4, mvRead, mvWrite, finalState);
	COM_MV_3D(8, 64, mvRead, mvWrite, finalState);
	COM_MV_3D(8, 32, mvRead, mvWrite, finalState);
	COM_MV_3D(8, 16, mvRead, mvWrite, finalState);
	COM_MV_3D(8, 8, mvRead, mvWrite, finalState);
	//COM_MV_3D(8, 4, mvRead, mvWrite, finalState);
	//COM_MV_3D(4, 32, mvRead, mvWrite, finalState);
	//COM_MV_3D(4, 16, mvRead, mvWrite, finalState);
	//COM_MV_3D(4, 8, mvRead, mvWrite, finalState);

	return finalState;
}

#define COM_MV_3D_BW(W,H,r,t,succ)  succ= succ && compareArray3D<S14, 64/W, 64/H, MV_D>(r->sadTree##W##x##H##Mv, t->sadTree##W##x##H##Mv)
#define COM_PMV_3D_BW(W,H,r,t,succ)  succ= succ && compareArray3D<S14, 64/W, 64/H, MV_D>(r->sadTree##W##x##H##PMv, t->sadTree##W##x##H##PMv)

#define COV_MV_3D_BW(W,H,r,t,succ)  succ= succ && convertArray3D<S14,s16, 64/W, 64/H, MV_D>(r->sadTree##W##x##H##Mv, t->sadTree##W##x##H##Mv)
#define COV_PMV_3D_BW(W,H,r,t,succ)  succ= succ && convertArray3D<S14,s16, 64/W, 64/H, MV_D>(r->sadTree##W##x##H##PMv, t->sadTree##W##x##H##PMv)

#define COV_MV_3D_NORM(W,H,r,t,succ)  succ= succ && convertArray3D<s16,S14, 64/W, 64/H, MV_D>(r->sadTree##W##x##H##Mv, t->sadTree##W##x##H##Mv)
#define COV_PMV_3D_NORM(W,H,r,t,succ)  succ= succ && convertArray3D<s16,S14, 64/W, 64/H, MV_D>(r->sadTree##W##x##H##PMv, t->sadTree##W##x##H##PMv)

bool FileReader::comparePMv(ME_PMV_INFO_BW* pmvRead, ME_PMV_INFO_BW* pmvWrite)
{
	bool finalState = true;

	COM_PMV_3D_BW(64, 64, pmvRead, pmvWrite, finalState);
	COM_PMV_3D_BW(64, 32, pmvRead, pmvWrite, finalState);
	COM_PMV_3D_BW(64, 16, pmvRead, pmvWrite, finalState);
	COM_PMV_3D_BW(64, 8, pmvRead, pmvWrite, finalState);
	COM_PMV_3D_BW(32, 64, pmvRead, pmvWrite, finalState);
	COM_PMV_3D_BW(32, 32, pmvRead, pmvWrite, finalState);
	COM_PMV_3D_BW(32, 16, pmvRead, pmvWrite, finalState);
	COM_PMV_3D_BW(32, 8, pmvRead, pmvWrite, finalState);
	//	COM_PMV_3D_BW(32, 4, pmvRead, pmvWrite, finalState);
	COM_PMV_3D_BW(16, 64, pmvRead, pmvWrite, finalState);
	COM_PMV_3D_BW(16, 32, pmvRead, pmvWrite, finalState);
	COM_PMV_3D_BW(16, 16, pmvRead, pmvWrite, finalState);
	COM_PMV_3D_BW(16, 8, pmvRead, pmvWrite, finalState);
	//	COM_PMV_3D_BW(16, 4, pmvRead, pmvWrite, finalState);
	COM_PMV_3D_BW(8, 64, pmvRead, pmvWrite, finalState);
	COM_PMV_3D_BW(8, 32, pmvRead, pmvWrite, finalState);
	COM_PMV_3D_BW(8, 16, pmvRead, pmvWrite, finalState);
	COM_PMV_3D_BW(8, 8, pmvRead, pmvWrite, finalState);
	//	COM_PMV_3D_BW(8, 4, pmvRead, pmvWrite, finalState);
	//	COM_PMV_3D_BW(4, 32, pmvRead, pmvWrite, finalState);
	//	COM_PMV_3D_BW(4, 16, pmvRead, pmvWrite, finalState);
	//	COM_PMV_3D_BW(4, 8, pmvRead, pmvWrite, finalState);

	return finalState;
}

bool FileReader::compareMv(ME_MV_INFO_BW* mvRead, ME_MV_INFO_BW* mvWrite)
{
	bool finalState = true;

	COM_MV_3D_BW(64, 64, mvRead, mvWrite, finalState);
	COM_MV_3D_BW(64, 32, mvRead, mvWrite, finalState);
	COM_MV_3D_BW(64, 16, mvRead, mvWrite, finalState);
	COM_MV_3D_BW(64, 8, mvRead, mvWrite, finalState);
	COM_MV_3D_BW(32, 64, mvRead, mvWrite, finalState);
	COM_MV_3D_BW(32, 32, mvRead, mvWrite, finalState);
	COM_MV_3D_BW(32, 16, mvRead, mvWrite, finalState);
	COM_MV_3D_BW(32, 8, mvRead, mvWrite, finalState);
	//	COM_MV_3D_BW(32, 4, mvRead, mvWrite, finalState);
	COM_MV_3D_BW(16, 64, mvRead, mvWrite, finalState);
	COM_MV_3D_BW(16, 32, mvRead, mvWrite, finalState);
	COM_MV_3D_BW(16, 16, mvRead, mvWrite, finalState);
	COM_MV_3D_BW(16, 8, mvRead, mvWrite, finalState);
	//	COM_MV_3D_BW(16, 4, mvRead, mvWrite, finalState);
	COM_MV_3D_BW(8, 64, mvRead, mvWrite, finalState);
	COM_MV_3D_BW(8, 32, mvRead, mvWrite, finalState);
	COM_MV_3D_BW(8, 16, mvRead, mvWrite, finalState);
	COM_MV_3D_BW(8, 8, mvRead, mvWrite, finalState);
	//COM_MV_3D_BW(8, 4, mvRead, mvWrite, finalState);
	//COM_MV_3D_BW(4, 32, mvRead, mvWrite, finalState);
	//COM_MV_3D_BW(4, 16, mvRead, mvWrite, finalState);
	//COM_MV_3D_BW(4, 8, mvRead, mvWrite, finalState);

	return finalState;
}

/*=======================*/
/*  Converters To ApInt	*/
/*======================*/

bool convertMeNebToApInt(ENC_ME_NEB_INFO* src, ENC_ME_NEB_INFO_BW* dst)
{
	bool succ = true;
	//dst->is_valid = src->is_valid;
	succ = convertArray2D<S14, S14, 2, 2>(dst->mv, src->mv);
	dst->refi[0] = src->refi[0];
	dst->refi[1] = src->refi[1];
	return succ;
}

bool convertMvToApInt(ME_MV_INFO_BW* mvRead, ME_MV_INFO* mvWrite)
{
	bool finalState = true;

	COV_MV_3D_BW(64, 64, mvRead, mvWrite, finalState);
	COV_MV_3D_BW(64, 32, mvRead, mvWrite, finalState);
	COV_MV_3D_BW(64, 16, mvRead, mvWrite, finalState);
	COV_MV_3D_BW(64, 8, mvRead, mvWrite, finalState);
	COV_MV_3D_BW(32, 64, mvRead, mvWrite, finalState);
	COV_MV_3D_BW(32, 32, mvRead, mvWrite, finalState);
	COV_MV_3D_BW(32, 16, mvRead, mvWrite, finalState);
	COV_MV_3D_BW(32, 8, mvRead, mvWrite, finalState);
	//	COV_MV_3D_BW(32, 4, mvRead, mvWrite, finalState);
	COV_MV_3D_BW(16, 64, mvRead, mvWrite, finalState);
	COV_MV_3D_BW(16, 32, mvRead, mvWrite, finalState);
	COV_MV_3D_BW(16, 16, mvRead, mvWrite, finalState);
	COV_MV_3D_BW(16, 8, mvRead, mvWrite, finalState);
	//	COV_MV_3D_BW(16, 4, mvRead, mvWrite, finalState);
	COV_MV_3D_BW(8, 64, mvRead, mvWrite, finalState);
	COV_MV_3D_BW(8, 32, mvRead, mvWrite, finalState);
	COV_MV_3D_BW(8, 16, mvRead, mvWrite, finalState);
	COV_MV_3D_BW(8, 8, mvRead, mvWrite, finalState);
	//COV_MV_3D_BW(8, 4, mvRead, mvWrite, finalState);
	//COV_MV_3D_BW(4, 32, mvRead, mvWrite, finalState);
	//COV_MV_3D_BW(4, 16, mvRead, mvWrite, finalState);
	//COV_MV_3D_BW(4, 8, mvRead, mvWrite, finalState);

	return finalState;
}

bool convertPMvToApInt(ME_PMV_INFO_BW* pmvRead, ME_PMV_INFO* pmvWrite)
{
	bool finalState = true;

	COV_PMV_3D_BW(64, 64, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_BW(64, 32, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_BW(64, 16, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_BW(64, 8, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_BW(32, 64, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_BW(32, 32, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_BW(32, 16, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_BW(32, 8, pmvRead, pmvWrite, finalState);
	//	COV_PMV_3D_BW(32, 4, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_BW(16, 64, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_BW(16, 32, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_BW(16, 16, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_BW(16, 8, pmvRead, pmvWrite, finalState);
	//	COV_PMV_3D_BW(16, 4, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_BW(8, 64, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_BW(8, 32, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_BW(8, 16, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_BW(8, 8, pmvRead, pmvWrite, finalState);
	//COV_PMV_3D_BW(8, 4, pmvRead, pmvWrite, finalState);
	//COV_PMV_3D_BW(4, 32, pmvRead, pmvWrite, finalState);
	//COV_PMV_3D_BW(4, 16, pmvRead, pmvWrite, finalState);
	//COV_PMV_3D_BW(4, 8, pmvRead, pmvWrite, finalState);

	return finalState;
}

void typeConvertToApInt(
	ENC_ME_CU* me_cu_info_blk, ENC_ME_CU_BW* me_cu_info_blk_bw,
	ENC_ME_LINE_MAP* line_map,
	U32 line_map_map_scu_above_line[MAX_WIDTH >> MIN_CU_LOG2], S14 line_map_co_left_mv[SCU_IN_LCU_NUMS_LEN][MV_D], S2 line_map_co_left_refi[SCU_IN_LCU_NUMS_LEN],
	ENC_ME_NEB_INFO_BW above_nebs_line_bw[MAX_WIDTH >> MIN_CU_LOG2], ENC_ME_NEB_INFO above_nebs_line[MAX_WIDTH >> MIN_CU_LOG2])
{
	//convertRefPic
	//convertArray2D<U8, pel, 320, 320>(Fetch_Ref_window_bw->swOutLv0, Fetch_Ref_Window_IME->swOutLv0);
	//convertArray2D<U8, pel, 160, 160>(Fetch_Ref_window_bw->swOutLv1, Fetch_Ref_Window_IME->swOutLv1);
	//convertArray2D<U8, pel, 80, 80>(Fetch_Ref_window_bw->swOutLv2, Fetch_Ref_Window_IME->swOutLv2);

	//convertOrg
	//convertArray2D<U8, pel, 64, 64>(Fetch_Orig_Lcu_bw->y_orgT, Fetch_Orig_Lcu_IME->y_orgT);
	//convertArray2D<U8, pel, 32, 32>(Fetch_Orig_Lcu_bw->y_org_lv1_2d, Fetch_Orig_Lcu_IME->y_org_lv1_2d);
	//convertArray2D<U8, pel, 16, 16>(Fetch_Orig_Lcu_bw->y_org_lv2_2d, Fetch_Orig_Lcu_IME->y_org_lv2_2d);

	//convertMeCuInfo

	me_cu_info_blk_bw->pic_height_in_scu = me_cu_info_blk->pic_height_in_scu;

	me_cu_info_blk_bw->pic_width_in_scu = me_cu_info_blk->pic_width_in_scu;

	me_cu_info_blk_bw->swSubLv0TopLeft[0] = me_cu_info_blk->swSubLv0TopLeft[0];
	me_cu_info_blk_bw->swSubLv0TopLeft[1] = me_cu_info_blk->swSubLv0TopLeft[1];


	convertArray1D<U32, U32, (ABOVE_LINE_LEN)>(line_map_map_scu_above_line, line_map->new_map_scu_above_line);
	//convertArray1D<S2, s8, SCU_IN_LCU_NUMS_LEN>(line_map_co_left_refi, line_map->co_left_refi);
	convertArray2D<S14, S14, SCU_IN_LCU_NUMS_LEN, MV_D>(line_map_co_left_mv, line_map->co_left_mv);

	for (int upIdx = 0; upIdx < (MAX_WIDTH >> MIN_CU_LOG2); upIdx++)
	{
		convertMeNebToApInt(&above_nebs_line[upIdx], &above_nebs_line_bw[upIdx]);
	}
}

/*==========================*/
/*  Converters From ApInt	*/
/*=========================*/


bool convertMvFromApInt(ME_MV_INFO* mvRead, ME_MV_INFO_BW* mvWrite)
{
	bool finalState = true;

	COV_MV_3D_NORM(64, 64, mvRead, mvWrite, finalState);
	COV_MV_3D_NORM(64, 32, mvRead, mvWrite, finalState);
	COV_MV_3D_NORM(64, 16, mvRead, mvWrite, finalState);
	COV_MV_3D_NORM(64, 8, mvRead, mvWrite, finalState);
	COV_MV_3D_NORM(32, 64, mvRead, mvWrite, finalState);
	COV_MV_3D_NORM(32, 32, mvRead, mvWrite, finalState);
	COV_MV_3D_NORM(32, 16, mvRead, mvWrite, finalState);
	COV_MV_3D_NORM(32, 8, mvRead, mvWrite, finalState);
	//	COV_MV_3D_NORM(32, 4, mvRead, mvWrite, finalState);
	COV_MV_3D_NORM(16, 64, mvRead, mvWrite, finalState);
	COV_MV_3D_NORM(16, 32, mvRead, mvWrite, finalState);
	COV_MV_3D_NORM(16, 16, mvRead, mvWrite, finalState);
	COV_MV_3D_NORM(16, 8, mvRead, mvWrite, finalState);
	//	COV_MV_3D_NORM(16, 4, mvRead, mvWrite, finalState);
	COV_MV_3D_NORM(8, 64, mvRead, mvWrite, finalState);
	COV_MV_3D_NORM(8, 32, mvRead, mvWrite, finalState);
	COV_MV_3D_NORM(8, 16, mvRead, mvWrite, finalState);
	COV_MV_3D_NORM(8, 8, mvRead, mvWrite, finalState);
	//COV_MV_3D_NORM(8, 4, mvRead, mvWrite, finalState);
	//COV_MV_3D_NORM(4, 32, mvRead, mvWrite, finalState);
	//COV_MV_3D_NORM(4, 16, mvRead, mvWrite, finalState);
	//COV_MV_3D_NORM(4, 8, mvRead, mvWrite, finalState);

	return finalState;
}

bool convertPMvFromApInt(ME_PMV_INFO* pmvRead, ME_PMV_INFO_BW* pmvWrite)
{
	bool finalState = true;

	COV_PMV_3D_NORM(64, 64, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_NORM(64, 32, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_NORM(64, 16, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_NORM(64, 8, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_NORM(32, 64, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_NORM(32, 32, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_NORM(32, 16, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_NORM(32, 8, pmvRead, pmvWrite, finalState);
	//	COV_PMV_3D_NORM(32, 4, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_NORM(16, 64, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_NORM(16, 32, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_NORM(16, 16, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_NORM(16, 8, pmvRead, pmvWrite, finalState);
	//	COV_PMV_3D_NORM(16, 4, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_NORM(8, 64, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_NORM(8, 32, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_NORM(8, 16, pmvRead, pmvWrite, finalState);
	COV_PMV_3D_NORM(8, 8, pmvRead, pmvWrite, finalState);
	//COV_PMV_3D_NORM(8, 4, pmvRead, pmvWrite, finalState);
	//COV_PMV_3D_NORM(4, 32, pmvRead, pmvWrite, finalState);
	//COV_PMV_3D_NORM(4, 16, pmvRead, pmvWrite, finalState);
	//COV_PMV_3D_NORM(4, 8, pmvRead, pmvWrite, finalState);

	return finalState;
}

void typeConvertFromApInt(ME_PMV_INFO_BW* pmvRead, ME_PMV_INFO* pmvWrite, ME_MV_INFO_BW* mvRead, ME_MV_INFO* mvWrite, ENC_ME_CU* me_cu_info_blk, ENC_ME_CU_BW* me_cu_info_blk_bw)
{
	me_cu_info_blk->swSubLv0TopLeft[0] = me_cu_info_blk_bw->swSubLv0TopLeft[0];
	me_cu_info_blk->swSubLv0TopLeft[1] = me_cu_info_blk_bw->swSubLv0TopLeft[1];
}


#if PRINT_IME_MV
template<unsigned DIM_0_SIZE, unsigned DIM_1_SIZE, unsigned DIM_2_SIZE>
void printMvArray3D(S14 array3DDst[DIM_0_SIZE][DIM_1_SIZE][DIM_2_SIZE])
{
	unsigned int x, y;
	printf("CU [%d,%d]\n", 64 / DIM_0_SIZE, 64 / DIM_1_SIZE);
	for (x = 0; x < DIM_0_SIZE; x++)
	{
		for (y = 0; y < DIM_1_SIZE; y++)
		{
			printf("(%d,%d)", (s16)array3DDst[x][y][0], (s16)array3DDst[x][y][1]);
			if (y != DIM_1_SIZE - 1)
				printf(",");
			else
				printf("\n");
		}
	}
}
#define PRINT_MV_3D(W,H,r)  printMvArray3D<64/W, 64/H, MV_D>(r->sadTree##W##x##H##Mv)

void printMv(ME_MV_INFO_BW* me_mv_info, int x/*, int y*/)
{
	//printf("Mv info at %d,%d\n", x, y);
	PRINT_MV_3D(64, 64, me_mv_info);
	PRINT_MV_3D(64, 32, me_mv_info);
	PRINT_MV_3D(64, 16, me_mv_info);
	PRINT_MV_3D(64, 8, me_mv_info);
	PRINT_MV_3D(32, 64, me_mv_info);
	PRINT_MV_3D(32, 32, me_mv_info);
	PRINT_MV_3D(32, 16, me_mv_info);
	PRINT_MV_3D(32, 8, me_mv_info);
	PRINT_MV_3D(16, 64, me_mv_info);
	PRINT_MV_3D(16, 32, me_mv_info);
	PRINT_MV_3D(16, 16, me_mv_info);
	PRINT_MV_3D(16, 8, me_mv_info);
	PRINT_MV_3D(8, 64, me_mv_info);
	PRINT_MV_3D(8, 32, me_mv_info);
	PRINT_MV_3D(8, 16, me_mv_info);
	PRINT_MV_3D(8, 8, me_mv_info);
}
#endif

#if PRINT_sadScuUp_1

template<unsigned DIM_0_SIZE, unsigned DIM_1_SIZE>
void print_SAD_Array2D(static U16 array3DDst[DIM_0_SIZE][DIM_1_SIZE])
{
	unsigned int x1, y1;
	//printf("CU [%d,%d]\n", 64 / DIM_0_SIZE, 64 / DIM_1_SIZE);
	for (x1 = 0; x1 < DIM_0_SIZE; x1++)
	{
		for (y1 = 0; y1 < DIM_1_SIZE; y1++)
		{
			printf("%d\n", (U16)array3DDst[x1][y1]);
			//printf("(%d,%d)", array3DDst[x1][y1], array3DDst[x1][y1]);
			//if (y1 != DIM_1_SIZE - 1)
			//	printf(",");
			//else
			//	printf("\n");
		}
	}
}

#define PRINT_sadScuUp_2D(W, H, N, r)  print_SAD_Array2D<64/W, 64/H>(r->sadScuUp##N)

void print_sadScuUp_1(ME_MV_SAD_UP_COST_BW* me_mvsad_up_cost, int y)
{
	printf("y = %d\n", y);
	PRINT_sadScuUp_2D(8, 8, 0, me_mvsad_up_cost);
	PRINT_sadScuUp_2D(8, 8, 1, me_mvsad_up_cost);
	PRINT_sadScuUp_2D(8, 8, 2, me_mvsad_up_cost);
	PRINT_sadScuUp_2D(8, 8, 3, me_mvsad_up_cost);
	PRINT_sadScuUp_2D(8, 8, 4, me_mvsad_up_cost);
	PRINT_sadScuUp_2D(8, 8, 5, me_mvsad_up_cost);
	PRINT_sadScuUp_2D(8, 8, 6, me_mvsad_up_cost);
	PRINT_sadScuUp_2D(8, 8, 7, me_mvsad_up_cost);
	PRINT_sadScuUp_2D(8, 8, 8, me_mvsad_up_cost);
	PRINT_sadScuUp_2D(8, 8, 9, me_mvsad_up_cost);
	PRINT_sadScuUp_2D(8, 8, 10, me_mvsad_up_cost);
	PRINT_sadScuUp_2D(8, 8, 11, me_mvsad_up_cost);
	PRINT_sadScuUp_2D(8, 8, 12, me_mvsad_up_cost);
	PRINT_sadScuUp_2D(8, 8, 13, me_mvsad_up_cost);
	PRINT_sadScuUp_2D(8, 8, 14, me_mvsad_up_cost);
	PRINT_sadScuUp_2D(8, 8, 15, me_mvsad_up_cost);
}

void Copy_SadUpCost(
	ME_MV_SAD_UP_COST_BW* me_mvsad_up_cos,
	U16 sadScuUp0[8][8], U16 sadScuUp1[8][8], U16 sadScuUp2[8][8], U16 sadScuUp3[8][8],
	U16 sadScuUp4[8][8], U16 sadScuUp5[8][8], U16 sadScuUp6[8][8], U16 sadScuUp7[8][8],
	U16 sadScuUp8[8][8], U16 sadScuUp9[8][8], U16 sadScuUp10[8][8], U16 sadScuUp11[8][8],
	U16 sadScuUp12[8][8], U16 sadScuUp13[8][8], U16 sadScuUp14[8][8], U16 sadScuUp15[8][8])
{
	for (int x = 0; x < 8; x++)
	{
		for (int y = 0; y < 8; y++)
		{
			me_mvsad_up_cos->sadScuUp0[x][y] = sadScuUp0[x][y];
			me_mvsad_up_cos->sadScuUp1[x][y] = sadScuUp1[x][y];
			me_mvsad_up_cos->sadScuUp2[x][y] = sadScuUp2[x][y];
			me_mvsad_up_cos->sadScuUp3[x][y] = sadScuUp3[x][y];
			me_mvsad_up_cos->sadScuUp4[x][y] = sadScuUp4[x][y];
			me_mvsad_up_cos->sadScuUp5[x][y] = sadScuUp5[x][y];
			me_mvsad_up_cos->sadScuUp6[x][y] = sadScuUp6[x][y];
			me_mvsad_up_cos->sadScuUp7[x][y] = sadScuUp7[x][y];
			me_mvsad_up_cos->sadScuUp8[x][y] = sadScuUp8[x][y];
			me_mvsad_up_cos->sadScuUp9[x][y] = sadScuUp9[x][y];
			me_mvsad_up_cos->sadScuUp10[x][y] = sadScuUp10[x][y];
			me_mvsad_up_cos->sadScuUp11[x][y] = sadScuUp11[x][y];
			me_mvsad_up_cos->sadScuUp12[x][y] = sadScuUp12[x][y];
			me_mvsad_up_cos->sadScuUp13[x][y] = sadScuUp13[x][y];
			me_mvsad_up_cos->sadScuUp14[x][y] = sadScuUp14[x][y];
			me_mvsad_up_cos->sadScuUp15[x][y] = sadScuUp15[x][y];
		}
	}
}
#endif

#endif // !VIVADO_HLS_IME
