#include "com_def.h"
#include <math.h>
#include <stdlib.h>
#include "md1.h"
//
//extern RDOQ_MODEL rdoq_model;
//extern RDOQ_MODEL model_cnt;




static s32 biari_no_bits(int symbol, SBAC_CTX_MODEL *cm)
{
	s32 est_bits;
	u8 cmps;
	u16 prob_lps;
	s32 entropy_bits[1024] = { 352022, 301303, 277720, 262187, 250584, 241320, 233608, 227002, 221223, 216088, 211468, 207268, 203419, 199866, 196567, 193488, 190601, 187885, 185320, 182889, 180580, 178382, 176283, 174275, 172351, 170504, 168729, 167019, 165370, 163777, 162238, 160749, 159306, 157907, 156549, 155230, 153948, 152700, 151485, 150301, 149147, 148021, 146922, 145848, 144799, 143773, 142769, 141787, 140825, 139883, 138959, 138054, 137166, 136295, 135440, 134601, 133776, 132966, 132170, 131388, 130618, 129862, 129117, 128384, 127663, 126953, 126253, 125564, 124885, 124216, 123556, 122906, 122265, 121633, 121009, 120393, 119786, 119186, 118594, 118010, 117433, 116863, 116300, 115744, 115194, 114651, 114114, 113583, 113059, 112540, 112027, 111520, 111018, 110521, 110030, 109544, 109063, 108587, 108116, 107650, 107188, 106731, 106279, 105830, 105387, 104947, 104511, 104080, 103652, 103229, 102809, 102393, 101981, 101572, 101168, 100766, 100368, 99974, 99582, 99194, 98810, 98428, 98050, 97674, 97302, 96933, 96566, 96203, 95842, 95484, 95129, 94777, 94427, 94080, 93735, 93393, 93054, 92717, 92382, 92050, 91720, 91393, 91068, 90745, 90424, 90106, 89790, 89476, 89164, 88854, 88546, 88240, 87937, 87635, 87335, 87037, 86741, 86447, 86155, 85865, 85576, 85290, 85005, 84721, 84440, 84160, 83882, 83605, 83331, 83058, 82786, 82516, 82248, 81981, 81715, 81452, 81189, 80928, 80669, 80411, 80155, 79900, 79646, 79394, 79143, 78893, 78645, 78398, 78153, 77908, 77665, 77424, 77183, 76944, 76706, 76469, 76234, 75999, 75766, 75534, 75303, 75074, 74845, 74618, 74391, 74166, 73942, 73719, 73497, 73276, 73056, 72838, 72620, 72403, 72187, 71973, 71759, 71546, 71334, 71124, 70914, 70705, 70497, 70290, 70084, 69879, 69674, 69471, 69268, 69067, 68866, 68666, 68467, 68269, 68072, 67875, 67680, 67485, 67291, 67098, 66905, 66714, 66523, 66333, 66144, 65956, 65768, 65581, 65395, 65209, 65025, 64841, 64658, 64475, 64293, 64112, 63932, 63752, 63573, 63395, 63218, 63041, 62864, 62689, 62514, 62340, 62166, 61993, 61821, 61650, 61479, 61308, 61138, 60969, 60801, 60633, 60466, 60299, 60133, 59968, 59803, 59638, 59475, 59311, 59149, 58987, 58826, 58665, 58504, 58345, 58185, 58027, 57869, 57711, 57554, 57398, 57242, 57086, 56931, 56777, 56623, 56470, 56317, 56164, 56012, 55861, 55710, 55560, 55410, 55261, 55112, 54963, 54815, 54668, 54521, 54374, 54228, 54082, 53937, 53793, 53648, 53504, 53361, 53218, 53076, 52934, 52792, 52651, 52510, 52370, 52230, 52090, 51951, 51813, 51674, 51537, 51399, 51262, 51126, 50989, 50854, 50718, 50583, 50449, 50315, 50181, 50047, 49914, 49782, 49649, 49517, 49386, 49255, 49124, 48994, 48863, 48734, 48604, 48476, 48347, 48219, 48091, 47963, 47836, 47709, 47583, 47457, 47331, 47205, 47080, 46955, 46831, 46707, 46583, 46460, 46337, 46214, 46091, 45969, 45847, 45726, 45605, 45484, 45363, 45243, 45123, 45004, 44884, 44765, 44647, 44528, 44410, 44292, 44175, 44058, 43941, 43824, 43708, 43592, 43476, 43361, 43246, 43131, 43016, 42902, 42788, 42674, 42561, 42448, 42335, 42222, 42110, 41998, 41886, 41775, 41663, 41553, 41442, 41331, 41221, 41111, 41002, 40892, 40783, 40674, 40566, 40457, 40349, 40241, 40134, 40026, 39919, 39812, 39706, 39599, 39493, 39387, 39282, 39176, 39071, 38966, 38861, 38757, 38653, 38549, 38445, 38342, 38238, 38135, 38032, 37930, 37827, 37725, 37623, 37522, 37420, 37319, 37218, 37117, 37017, 36916, 36816, 36716, 36616, 36517, 36418, 36319, 36220, 36121, 36023, 35924, 35826, 35729, 35631, 35534, 35436, 35339, 35243, 35146, 35050, 34953, 34858, 34762, 34666, 34571, 34476, 34381, 34286, 34191, 34097, 34003, 33909, 33815, 33721, 33628, 33534, 33441, 33348, 33256, 33163, 33071, 32979, 32887, 32795, 32703, 32612, 32521, 32430, 32339, 32248, 32157, 32067, 31977, 31887, 31797, 31708, 31618, 31529, 31440, 31351, 31262, 31173, 31085, 30997, 30908, 30821, 30733, 30645, 30558, 30470, 30383, 30296, 30210, 30123, 30037, 29950, 29864, 29778, 29692, 29607, 29521, 29436, 29351, 29266, 29181, 29096, 29012, 28927, 28843, 28759, 28675, 28591, 28507, 28424, 28341, 28257, 28174, 28092, 28009, 27926, 27844, 27761, 27679, 27597, 27515, 27434, 27352, 27271, 27190, 27108, 27027, 26947, 26866, 26785, 26705, 26625, 26544, 26464, 26385, 26305, 26225, 26146, 26066, 25987, 25908, 25829, 25750, 25672, 25593, 25515, 25437, 25359, 25281, 25203, 25125, 25047, 24970, 24893, 24815, 24738, 24661, 24585, 24508, 24431, 24355, 24279, 24202, 24126, 24050, 23975, 23899, 23823, 23748, 23673, 23597, 23522, 23447, 23373, 23298, 23223, 23149, 23075, 23000, 22926, 22852, 22778, 22705, 22631, 22557, 22484, 22411, 22338, 22265, 22192, 22119, 22046, 21974, 21901, 21829, 21756, 21684, 21612, 21540, 21469, 21397, 21325, 21254, 21182, 21111, 21040, 20969, 20898, 20827, 20757, 20686, 20616, 20545, 20475, 20405, 20335, 20265, 20195, 20125, 20056, 19986, 19917, 19847, 19778, 19709, 19640, 19571, 19502, 19434, 19365, 19296, 19228, 19160, 19092, 19023, 18955, 18888, 18820, 18752, 18685, 18617, 18550, 18482, 18415, 18348, 18281, 18214, 18147, 18081, 18014, 17947, 17881, 17815, 17748, 17682, 17616, 17550, 17484, 17419, 17353, 17287, 17222, 17157, 17091, 17026, 16961, 16896, 16831, 16766, 16701, 16637, 16572, 16508, 16443, 16379, 16315, 16251, 16187, 16123, 16059, 15995, 15931, 15868, 15804, 15741, 15678, 15614, 15551, 15488, 15425, 15362, 15299, 15237, 15174, 15112, 15049, 14987, 14924, 14862, 14800, 14738, 14676, 14614, 14552, 14491, 14429, 14367, 14306, 14245, 14183, 14122, 14061, 14000, 13939, 13878, 13817, 13756, 13696, 13635, 13575, 13514, 13454, 13394, 13333, 13273, 13213, 13153, 13093, 13034, 12974, 12914, 12855, 12795, 12736, 12676, 12617, 12558, 12499, 12440, 12381, 12322, 12263, 12204, 12146, 12087, 12029, 11970, 11912, 11853, 11795, 11737, 11679, 11621, 11563, 11505, 11448, 11390, 11332, 11275, 11217, 11160, 11102, 11045, 10988, 10931, 10874, 10817, 10760, 10703, 10646, 10589, 10533, 10476, 10420, 10363, 10307, 10251, 10194, 10138, 10082, 10026, 9970, 9914, 9858, 9803, 9747, 9691, 9636, 9580, 9525, 9469, 9414, 9359, 9304, 9249, 9194, 9139, 9084, 9029, 8974, 8920, 8865, 8810, 8756, 8701, 8647, 8593, 8538, 8484, 8430, 8376, 8322, 8268, 8214, 8160, 8107, 8053, 7999, 7946, 7892, 7839, 7786, 7732, 7679, 7626, 7573, 7520, 7467, 7414, 7361, 7308, 7255, 7203, 7150, 7097, 7045, 6992, 6940, 6888, 6835, 6783, 6731, 6679, 6627, 6575, 6523, 6471, 6419, 6367, 6316, 6264, 6212, 6161, 6109, 6058, 6007, 5955, 5904, 5853, 5802, 5751, 5700, 5649, 5598, 5547, 5496, 5446, 5395, 5344, 5294, 5243, 5193, 5142, 5092, 5042, 4991, 4941, 4891, 4841, 4791, 4741, 4691, 4641, 4592, 4542, 4492, 4442, 4393, 4343, 4294, 4244, 4195, 4146, 4096, 4047, 3998, 3949, 3900, 3851, 3802, 3753, 3704, 3655, 3607, 3558, 3509, 3461, 3412, 3364, 3315, 3267, 3218, 3170, 3122, 3074, 3026, 2978, 2929, 2881, 2834, 2786, 2738, 2690, 2642, 2595, 2547, 2499, 2452, 2404, 2357, 2309, 2262, 2215, 2168, 2120, 2073, 2026, 1979, 1932, 1885, 1838, 1791, 1744, 1698, 1651, 1604, 1558, 1511, 1465, 1418, 1372, 1325, 1279, 1233, 1186, 1140, 1094, 1048, 1002, 956, 910, 864, 818, 772, 726, 680, 635, 589, 543, 498, 452, 407, 361, 316, 271, 225, 180, 135, 90, 45 };
	cmps = ((u8)(*cm & ((unsigned int)1)));
	symbol = ((int)((u8)(symbol != 0)));
	prob_lps = ((u16)((*cm & ((unsigned int)((1 << 11) - 1))) >> 1));
	prob_lps = ((u16)((symbol != ((int)cmps) ? ((int)prob_lps) : (1 << 11) - 1 - ((int)prob_lps))));
	/* (s32)(-32000*(log(p)/log(2.0)-MCABAC_PROB_BITS)); */
	est_bits = entropy_bits[((int)prob_lps) >> 1];
	return est_bits;
}

static s32 biari_no_bitsW(int symbol, SBAC_CTX_MODEL *cm1, SBAC_CTX_MODEL *cm2)
{
	s32 est_bits;
	s32 entropy_bits[1024] = { 352022, 301303, 277720, 262187, 250584, 241320, 233608, 227002, 221223, 216088, 211468, 207268, 203419, 199866, 196567, 193488, 190601, 187885, 185320, 182889, 180580, 178382, 176283, 174275, 172351, 170504, 168729, 167019, 165370, 163777, 162238, 160749, 159306, 157907, 156549, 155230, 153948, 152700, 151485, 150301, 149147, 148021, 146922, 145848, 144799, 143773, 142769, 141787, 140825, 139883, 138959, 138054, 137166, 136295, 135440, 134601, 133776, 132966, 132170, 131388, 130618, 129862, 129117, 128384, 127663, 126953, 126253, 125564, 124885, 124216, 123556, 122906, 122265, 121633, 121009, 120393, 119786, 119186, 118594, 118010, 117433, 116863, 116300, 115744, 115194, 114651, 114114, 113583, 113059, 112540, 112027, 111520, 111018, 110521, 110030, 109544, 109063, 108587, 108116, 107650, 107188, 106731, 106279, 105830, 105387, 104947, 104511, 104080, 103652, 103229, 102809, 102393, 101981, 101572, 101168, 100766, 100368, 99974, 99582, 99194, 98810, 98428, 98050, 97674, 97302, 96933, 96566, 96203, 95842, 95484, 95129, 94777, 94427, 94080, 93735, 93393, 93054, 92717, 92382, 92050, 91720, 91393, 91068, 90745, 90424, 90106, 89790, 89476, 89164, 88854, 88546, 88240, 87937, 87635, 87335, 87037, 86741, 86447, 86155, 85865, 85576, 85290, 85005, 84721, 84440, 84160, 83882, 83605, 83331, 83058, 82786, 82516, 82248, 81981, 81715, 81452, 81189, 80928, 80669, 80411, 80155, 79900, 79646, 79394, 79143, 78893, 78645, 78398, 78153, 77908, 77665, 77424, 77183, 76944, 76706, 76469, 76234, 75999, 75766, 75534, 75303, 75074, 74845, 74618, 74391, 74166, 73942, 73719, 73497, 73276, 73056, 72838, 72620, 72403, 72187, 71973, 71759, 71546, 71334, 71124, 70914, 70705, 70497, 70290, 70084, 69879, 69674, 69471, 69268, 69067, 68866, 68666, 68467, 68269, 68072, 67875, 67680, 67485, 67291, 67098, 66905, 66714, 66523, 66333, 66144, 65956, 65768, 65581, 65395, 65209, 65025, 64841, 64658, 64475, 64293, 64112, 63932, 63752, 63573, 63395, 63218, 63041, 62864, 62689, 62514, 62340, 62166, 61993, 61821, 61650, 61479, 61308, 61138, 60969, 60801, 60633, 60466, 60299, 60133, 59968, 59803, 59638, 59475, 59311, 59149, 58987, 58826, 58665, 58504, 58345, 58185, 58027, 57869, 57711, 57554, 57398, 57242, 57086, 56931, 56777, 56623, 56470, 56317, 56164, 56012, 55861, 55710, 55560, 55410, 55261, 55112, 54963, 54815, 54668, 54521, 54374, 54228, 54082, 53937, 53793, 53648, 53504, 53361, 53218, 53076, 52934, 52792, 52651, 52510, 52370, 52230, 52090, 51951, 51813, 51674, 51537, 51399, 51262, 51126, 50989, 50854, 50718, 50583, 50449, 50315, 50181, 50047, 49914, 49782, 49649, 49517, 49386, 49255, 49124, 48994, 48863, 48734, 48604, 48476, 48347, 48219, 48091, 47963, 47836, 47709, 47583, 47457, 47331, 47205, 47080, 46955, 46831, 46707, 46583, 46460, 46337, 46214, 46091, 45969, 45847, 45726, 45605, 45484, 45363, 45243, 45123, 45004, 44884, 44765, 44647, 44528, 44410, 44292, 44175, 44058, 43941, 43824, 43708, 43592, 43476, 43361, 43246, 43131, 43016, 42902, 42788, 42674, 42561, 42448, 42335, 42222, 42110, 41998, 41886, 41775, 41663, 41553, 41442, 41331, 41221, 41111, 41002, 40892, 40783, 40674, 40566, 40457, 40349, 40241, 40134, 40026, 39919, 39812, 39706, 39599, 39493, 39387, 39282, 39176, 39071, 38966, 38861, 38757, 38653, 38549, 38445, 38342, 38238, 38135, 38032, 37930, 37827, 37725, 37623, 37522, 37420, 37319, 37218, 37117, 37017, 36916, 36816, 36716, 36616, 36517, 36418, 36319, 36220, 36121, 36023, 35924, 35826, 35729, 35631, 35534, 35436, 35339, 35243, 35146, 35050, 34953, 34858, 34762, 34666, 34571, 34476, 34381, 34286, 34191, 34097, 34003, 33909, 33815, 33721, 33628, 33534, 33441, 33348, 33256, 33163, 33071, 32979, 32887, 32795, 32703, 32612, 32521, 32430, 32339, 32248, 32157, 32067, 31977, 31887, 31797, 31708, 31618, 31529, 31440, 31351, 31262, 31173, 31085, 30997, 30908, 30821, 30733, 30645, 30558, 30470, 30383, 30296, 30210, 30123, 30037, 29950, 29864, 29778, 29692, 29607, 29521, 29436, 29351, 29266, 29181, 29096, 29012, 28927, 28843, 28759, 28675, 28591, 28507, 28424, 28341, 28257, 28174, 28092, 28009, 27926, 27844, 27761, 27679, 27597, 27515, 27434, 27352, 27271, 27190, 27108, 27027, 26947, 26866, 26785, 26705, 26625, 26544, 26464, 26385, 26305, 26225, 26146, 26066, 25987, 25908, 25829, 25750, 25672, 25593, 25515, 25437, 25359, 25281, 25203, 25125, 25047, 24970, 24893, 24815, 24738, 24661, 24585, 24508, 24431, 24355, 24279, 24202, 24126, 24050, 23975, 23899, 23823, 23748, 23673, 23597, 23522, 23447, 23373, 23298, 23223, 23149, 23075, 23000, 22926, 22852, 22778, 22705, 22631, 22557, 22484, 22411, 22338, 22265, 22192, 22119, 22046, 21974, 21901, 21829, 21756, 21684, 21612, 21540, 21469, 21397, 21325, 21254, 21182, 21111, 21040, 20969, 20898, 20827, 20757, 20686, 20616, 20545, 20475, 20405, 20335, 20265, 20195, 20125, 20056, 19986, 19917, 19847, 19778, 19709, 19640, 19571, 19502, 19434, 19365, 19296, 19228, 19160, 19092, 19023, 18955, 18888, 18820, 18752, 18685, 18617, 18550, 18482, 18415, 18348, 18281, 18214, 18147, 18081, 18014, 17947, 17881, 17815, 17748, 17682, 17616, 17550, 17484, 17419, 17353, 17287, 17222, 17157, 17091, 17026, 16961, 16896, 16831, 16766, 16701, 16637, 16572, 16508, 16443, 16379, 16315, 16251, 16187, 16123, 16059, 15995, 15931, 15868, 15804, 15741, 15678, 15614, 15551, 15488, 15425, 15362, 15299, 15237, 15174, 15112, 15049, 14987, 14924, 14862, 14800, 14738, 14676, 14614, 14552, 14491, 14429, 14367, 14306, 14245, 14183, 14122, 14061, 14000, 13939, 13878, 13817, 13756, 13696, 13635, 13575, 13514, 13454, 13394, 13333, 13273, 13213, 13153, 13093, 13034, 12974, 12914, 12855, 12795, 12736, 12676, 12617, 12558, 12499, 12440, 12381, 12322, 12263, 12204, 12146, 12087, 12029, 11970, 11912, 11853, 11795, 11737, 11679, 11621, 11563, 11505, 11448, 11390, 11332, 11275, 11217, 11160, 11102, 11045, 10988, 10931, 10874, 10817, 10760, 10703, 10646, 10589, 10533, 10476, 10420, 10363, 10307, 10251, 10194, 10138, 10082, 10026, 9970, 9914, 9858, 9803, 9747, 9691, 9636, 9580, 9525, 9469, 9414, 9359, 9304, 9249, 9194, 9139, 9084, 9029, 8974, 8920, 8865, 8810, 8756, 8701, 8647, 8593, 8538, 8484, 8430, 8376, 8322, 8268, 8214, 8160, 8107, 8053, 7999, 7946, 7892, 7839, 7786, 7732, 7679, 7626, 7573, 7520, 7467, 7414, 7361, 7308, 7255, 7203, 7150, 7097, 7045, 6992, 6940, 6888, 6835, 6783, 6731, 6679, 6627, 6575, 6523, 6471, 6419, 6367, 6316, 6264, 6212, 6161, 6109, 6058, 6007, 5955, 5904, 5853, 5802, 5751, 5700, 5649, 5598, 5547, 5496, 5446, 5395, 5344, 5294, 5243, 5193, 5142, 5092, 5042, 4991, 4941, 4891, 4841, 4791, 4741, 4691, 4641, 4592, 4542, 4492, 4442, 4393, 4343, 4294, 4244, 4195, 4146, 4096, 4047, 3998, 3949, 3900, 3851, 3802, 3753, 3704, 3655, 3607, 3558, 3509, 3461, 3412, 3364, 3315, 3267, 3218, 3170, 3122, 3074, 3026, 2978, 2929, 2881, 2834, 2786, 2738, 2690, 2642, 2595, 2547, 2499, 2452, 2404, 2357, 2309, 2262, 2215, 2168, 2120, 2073, 2026, 1979, 1932, 1885, 1838, 1791, 1744, 1698, 1651, 1604, 1558, 1511, 1465, 1418, 1372, 1325, 1279, 1233, 1186, 1140, 1094, 1048, 1002, 956, 910, 864, 818, 772, 726, 680, 635, 589, 543, 498, 452, 407, 361, 316, 271, 225, 180, 135, 90, 45 };

	u16 prob_lps;
	u16 prob_lps1 = (u16)((*cm1 & ((unsigned int)((1 << 11) - 1))) >> 1);
	u16 prob_lps2 = (u16)((*cm2 & ((unsigned int)((1 << 11) - 1))) >> 1);
	u16 cmps;
	u16 cmps1 = (u16)(*cm1 & ((unsigned int)1));
	u16 cmps2 = (u16)(*cm2 & ((unsigned int)1));
	if (((int)cmps1) == ((int)cmps2)) {
		cmps = cmps1;
		prob_lps = ((u16)((((int)prob_lps1) + ((int)prob_lps2)) >> 1));
	}
	else {
		if (((int)prob_lps1) < ((int)prob_lps2)) {
			cmps = cmps1;
			prob_lps = ((u16)((256 << 2) - 1 - ((((int)prob_lps2) - ((int)prob_lps1)) >> 1)));
		}
		else {
			cmps = cmps2;
			prob_lps = ((u16)((256 << 2) - 1 - ((((int)prob_lps1) - ((int)prob_lps2)) >> 1)));
		}
	}
	symbol = ((int)((u8)(symbol != 0)));
	prob_lps = ((u16)((symbol != ((int)cmps) ? ((int)prob_lps) : (1 << 11) - 1 - ((int)prob_lps))));
	/* (s32)(-32000*(log(p)/log(2.0)-MCABAC_PROB_BITS)); */
	est_bits = entropy_bits[((int)prob_lps) >> 1];
	return est_bits;
}

//
//#define W 64
//#define H 64
//#include "rdoq_func.h"
//#define W 64
//#define H 32
//#include "rdoq_func.h"
//#define W 32
//#define H 64
//#include "rdoq_func.h"
//#define W 64
//#define H 16
//#include "rdoq_func.h"
//#define W 16
//#define H 64
//#include "rdoq_func.h"
//#define W 64
//#define H 8
//#include "rdoq_func.h"
//#define W 8
//#define H 64
//#include "rdoq_func.h"
////32
//#define W 32
//#define H 32
//#include "rdoq_func.h"
//#define W 32
//#define H 16
//#include "rdoq_func.h"
//#define W 16
//#define H 32
//#include "rdoq_func.h"
//#define W 32
//#define H 8
//#include "rdoq_func.h"
//#define W 8
//#define H 32
//#include "rdoq_func.h"
//#define W 32
//#define H 4
//#include "rdoq_func.h"
//#define W 4
//#define H 32
//#include "rdoq_func.h"
////16
//#define W 16
//#define H 16
//#include "rdoq_func.h"
//#define W 16
//#define H 8
//#include "rdoq_func.h"
//#define W 8
//#define H 16
//#include "rdoq_func.h"
//#define W 16
//#define H 4
//#include "rdoq_func.h"
//#define W 4
//#define H 16
//#include "rdoq_func.h"
////8
//#define W 8
//#define H 8
//#include "rdoq_func.h"
//#define W 8
//#define H 4
//#include "rdoq_func.h"
//#define W 4
//#define H 8
//#include "rdoq_func.h"
#define W 4
#define H 4
#include "rdoq_func.h"

static s64 get_ic_rate_cost_rl0(U5 run, U5 ctx_run, s64 lambda, s32 rdoq_est_run_local[24][2], s32 rdoq_est_level_local[24][2])
{
#pragma HLS INLINE
	U20 rate;
	if (run == ((unsigned int)0)) {
		rate = rdoq_est_run_local[ctx_run    ][0];
	} else {
		rate = rdoq_est_run_local[ctx_run + 1][0];
	}

	return (s64)(((long long)rate) * lambda);
}

static s64 get_ic_rate_cost_rl(u32 abs_level, U5 run, U5 ctx_run, U5 ctx_level, s64 lambda, U1 last_pos, s32 rdoq_est_run_local[24][2], s32 rdoq_est_level_local[24][2])
{
#pragma HLS INLINE

	U21 rate;
	U5 golomb;
	if (abs_level <= 9) {
		golomb = 1;
	}
	else if (abs_level <= 11) {
		golomb = 3;
	}
	else if (abs_level <= 15) {
		golomb = 5;
	}
	else if (abs_level <= 23) {
		golomb = 7;
	}
	else if (abs_level <= 39) {
		golomb = 9;
	}
	else if (abs_level <= 71) {
		golomb = 11;
	}
	else if (abs_level <= 135) {
		golomb = 13;
	}
	else if (abs_level <= 263) {
		golomb = 15;
	}
	else if (abs_level <= 519) {
		golomb = 17;
	}
	else if (abs_level <= 1031) {
		golomb = 19;
	}
	else if (abs_level <= 2055) {
		golomb = 21;
	}
	else if (abs_level <= 4103) {
		golomb = 23;
	}
	else {
		golomb = 25;
	}
	// sign of coeff
	rate = 32768;
	if (!(last_pos)) {
		if (run == 0) {
			rate += rdoq_est_run_local[ctx_run][1];
		} else {
			rate += rdoq_est_run_local[ctx_run + 1][1];
		}
	}
	if (abs_level == (1)) {
		rate += rdoq_est_level_local[ctx_level][1];
	}
	else if (abs_level >= (9)) {
		rate += rdoq_est_level_local[ctx_level][0];
		rate += rdoq_est_level_local[ctx_level + (1)][0] * 7;
		//get bits of exp-golomb
		rate += 32768 * golomb;
	}
	else {
		rate += rdoq_est_level_local[ctx_level][0];
		rate += rdoq_est_level_local[ctx_level + (1)][0] * ((abs_level - (2)));
		rate += rdoq_est_level_local[ctx_level + (1)][1];
	}
	return ((rate)*lambda);
}

U24 get_coded_level_rl(s64* rd64_uncoded_cost, s64* rd64_coded_cost, U36 level_double, u32 max_abs_level,
	U5 run, U5 ctx_run, U5 ctx_level, s32 q_bits, U30 err_scale, s64 lambda, int last_pos, s32 rdoq_est_run_local[24][2], s32 rdoq_est_level_local[24][2])
{
#pragma HLS INLINE
	u32 best_abs_level = (u32)0;
	s64 err = level_double * err_scale >> 20;
	*rd64_uncoded_cost = err * err;
	*rd64_coded_cost = *rd64_uncoded_cost + get_ic_rate_cost_rl0(run, (s32)ctx_run, lambda, rdoq_est_run_local, rdoq_est_level_local);
	//*rd64_uncoded_cost = *rd64_uncoded_cost >> 24;
	//*rd64_coded_cost = *rd64_coded_cost >> 24;
	s64 i64Delta1 = level_double - (((long long)max_abs_level << (long long)q_bits));
	s64 err1 = i64Delta1 * err_scale >> 20;
	s64 cost1 = err1 * err1 + get_ic_rate_cost_rl(max_abs_level, run, (s32)ctx_run, (u32)ctx_level, lambda, last_pos, rdoq_est_run_local, rdoq_est_level_local);
	//cost1 = cost1 >> 24;
	//cost1 = avs3_min(cost1, 65535);
	if (cost1 < *rd64_coded_cost) {
		*rd64_coded_cost = cost1;
		best_abs_level = max_abs_level;
	} else {
		best_abs_level = ((u32)0);
	}
	return best_abs_level;
}

static void update_rdoq_model(u32 cnt, u32* model)
{
	if (cnt == 0)
	{
		*model = 2046;
	}
	else if (cnt == 1)
	{
		*model = 3703;
	}
	else if (cnt == 2)
	{
		*model = 6142;
	}
	else if (cnt == 3)
	{
		*model = 8003;
	}
	else if (cnt == 4)
	{
		*model = 8095;
	}
	else
	{
		if (cnt & 1)
		{
			*model = 8187;
		}
		else
		{
			*model = 8104;
		}
	}
}

void enc_rdoq_bit_est(RDOQ_MODEL* rdoq_model, RDOQ_MODEL* model_cnt, RDOQ_ARRAY* rdoq_array)
{
	int bin;
	int ctx;
	S12 rdoq_map_tb[36] = {
		2046, 3778, 3508, 3282, 3090, 2928, 2792, 2678, 2582, 2500, 2430, 2374, 2324, 2282, 2248, 2218, 2194, 2172, 2156, 2142, 2130, 2118, 2108, 2102, 2096, 2090, 2086, 2082, 2078, 2076, 2074, 2072, 2070, 2068, 2066, 2064
	};

	u32 cnt_cbf0 = model_cnt->cbf[0], cnt_cbf1 = model_cnt->cbf[1];
	if (cnt_cbf0 > 35)
		rdoq_model->cbf[0] = 2062;
	else
		rdoq_model->cbf[0] = rdoq_map_tb[cnt_cbf0];

	if (cnt_cbf1 > 35)
	{
		rdoq_model->cbf[1] = 2062;
		rdoq_model->cbf[2] = 2062;
	}
	else
	{
		rdoq_model->cbf[1] = rdoq_map_tb[cnt_cbf1];
		rdoq_model->cbf[2] = rdoq_map_tb[cnt_cbf1];
	}
// #pragma HLS ARRAY_PARTITION variable=rdoq_model->last2 complete dim=1
// #pragma HLS ARRAY_PARTITION variable=rdoq_model->last1 complete dim=1
// #pragma HLS ARRAY_PARTITION variable=model_cnt->last1 complete dim=1
// #pragma HLS ARRAY_PARTITION variable=model_cnt->last2 complete dim=1
// #pragma HLS ARRAY_PARTITION variable=model_cnt->level complete dim=1
// #pragma HLS ARRAY_PARTITION variable=model_cnt->run_rdoq complete dim=1

// 	for (ctx = 0; ctx < 6 * 4; ctx++) {
// #pragma HLS pipeline
// 		update_rdoq_model(model_cnt->level[ctx], &rdoq_model->level[ctx]);
// 		update_rdoq_model(model_cnt->run_rdoq[ctx], &rdoq_model->run_rdoq[ctx]);
// 	}
// 	for (ctx = 0; ctx < 12; ctx++) {
// #pragma HLS pipeline
// 		update_rdoq_model(model_cnt->last1[ctx], &rdoq_model->last1[ctx]);
// 	}
// 	for (ctx = 0; ctx < 22; ctx++) {
// #pragma HLS pipeline
// 		update_rdoq_model(model_cnt->last2[ctx], &rdoq_model->last2[ctx]);
// 	}
// 	for (bin = 0; bin < 2; bin++) {
// #pragma HLS pipeline
// 		for (ctx = 0; ctx < 3; ctx++) {
// 			rdoq_array->rdoq_est_cbf[ctx][bin] = biari_no_bits(bin, rdoq_model->cbf + ctx);
// 		}
// 	}
// 	for (ctx = 0; ctx < 6 * 4; ctx++) {
// #pragma HLS pipeline
// 		for (bin = 0; bin < 2; bin++) {
// 			rdoq_array->rdoq_est_run[ctx][bin] = biari_no_bits(bin, rdoq_model->run_rdoq + ctx);
// 		}
// 	}
// 	for (ctx = 0; ctx < 6 * 4; ctx++) {
// #pragma HLS pipeline
// 		for (bin = 0; bin < 2; bin++) {
// 			rdoq_array->rdoq_est_level[ctx][bin] = biari_no_bits(bin, rdoq_model->level + ctx);
// 		}
// 	}
// 	for (ctx = 0; ctx < 6 * 4; ctx++)
// 	{
// #pragma HLS pipeline
// 		update_rdoq_model(model_cnt->level[ctx], &rdoq_model->level[ctx]);
// 		update_rdoq_model(model_cnt->run_rdoq[ctx], &rdoq_model->run_rdoq[ctx]);
// 		for (bin = 0; bin < 2; bin++)
// 		{
// 			rdoq_array->rdoq_est_run[ctx][bin] = biari_no_bits(bin, rdoq_model->run_rdoq + ctx);
// 			rdoq_array->rdoq_est_level[ctx][bin] = biari_no_bits(bin, rdoq_model->level + ctx);
// 		}
// 		if (ctx < 12)
// 		{
// 			update_rdoq_model(model_cnt->last1[ctx], &rdoq_model->last1[ctx]);
// 		}
		
// 		if (ctx < 22)
// 		{
// 			update_rdoq_model(model_cnt->last2[ctx], &rdoq_model->last2[ctx]);
// 		}
// 		if(ctx < 2)
// 		{
// 		int chroma_offset1 = ctx * 6;
// 		int chroma_offset2 = ctx * 12;
// 		for (int i = 0; i < 6; i++) {
// 			for (int j = 0; j < 12; j++) {
// 				for (bin = 0; bin < 2; bin++) {
// 					rdoq_array->rdoq_est_last[ctx][i][j][bin] = biari_no_bitsW(bin, rdoq_model->last1 + i + chroma_offset1,
// 						rdoq_model->last2 + j + chroma_offset2);
// 				}
// 			}
// 		}
// 		}
		
// 	}
// 	for (ctx = 0; ctx < 12; ctx++)
// 	{
// #pragma HLS pipeline
// 		update_rdoq_model(model_cnt->last1[ctx], &rdoq_model->last1[ctx]);
// 	}
// 	for (ctx = 0; ctx < 22; ctx++)
// 	{
// #pragma HLS pipeline
// 		update_rdoq_model(model_cnt->last2[ctx], &rdoq_model->last2[ctx]);
// 	}
	for (ctx = 0; ctx < 6 * 4; ctx++)
	{
#pragma HLS pipeline
#pragma HLS UNROLL factor=12
		update_rdoq_model(model_cnt->level[ctx], &rdoq_model->level[ctx]);
		update_rdoq_model(model_cnt->run_rdoq[ctx], &rdoq_model->run_rdoq[ctx]);
		for (bin = 0; bin < 2; bin++)
		{
			rdoq_array->rdoq_est_run[ctx][bin] = biari_no_bits(bin, rdoq_model->run_rdoq + ctx);
			rdoq_array->rdoq_est_level[ctx][bin] = biari_no_bits(bin, rdoq_model->level + ctx);
		}
		if (ctx < 12)
		{
			update_rdoq_model(model_cnt->last1[ctx], &rdoq_model->last1[ctx]);
		}
		
		if (ctx < 22)
		{
			update_rdoq_model(model_cnt->last2[ctx], &rdoq_model->last2[ctx]);
		}
		if(ctx < 2)
		{
		int chroma_offset1 = ctx * 6;
		int chroma_offset2 = ctx * 12;
		for (int i = 0; i < 6; i++) {
			for (int j = 0; j < 12; j++) {
				for (bin = 0; bin < 2; bin++) {
					rdoq_array->rdoq_est_last[ctx][i][j][bin] = biari_no_bitsW(bin, rdoq_model->last1 + i + chroma_offset1,
						rdoq_model->last2 + j + chroma_offset2);
				}
			}
		}
		}
		if (ctx < 3)
		{
			for (bin = 0; bin < 2; bin++)
			{
				rdoq_array->rdoq_est_cbf[ctx][bin] = biari_no_bits(bin, rdoq_model->cbf + ctx);
			}
		}
	}
// 	//luma / chroma
// 	for (ctx = 0; ctx < 2; ctx++) {
// #pragma HLS pipeline
// 		int i;
// 		int j;
// 		int chroma_offset1 = ctx * 6;
// 		int chroma_offset2 = ctx * 12;
// 		for (i = 0; i < 6; i++) {
// #pragma HLS pipeline
// 			for (j = 0; j < 12; j++) {
// 				for (bin = 0; bin < 2; bin++) {
// 					rdoq_array->rdoq_est_last[ctx][i][j][bin] = biari_no_bitsW(bin, rdoq_model->last1 + i + chroma_offset1,
// 						rdoq_model->last2 + j + chroma_offset2);
// 				}
// 			}
// 		}
// 	}
}


