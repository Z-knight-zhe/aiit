#if (!defined(W)) || (!defined(H)) 
#error W or H not define
#endif
#define _TR_FUNC_NAME(name, w, h) name##_##w##x##h
#define TR_FUNC_NAME(name, w, h) _TR_FUNC_NAME(name, w, h)
#define _DCT_NAME(w) itx_dct2_##w
#define DCT_NAME(w) _DCT_NAME(w)
#define SIZE (W * H)
#define MAX_SIZE COM_MAX(W, H)
#if (W <= 16) && (H <= 16)
#define TMP_SIZE 16
#else
#define TMP_SIZE 64
#endif
/*  DCT core  */
void TR_FUNC_NAME(dct_row, W, H)(s16 src[H][W], s16 dst[TMP_SIZE][TMP_SIZE], U4 shift)
{
	U7 size = MAX_SIZE;
	U8 size_b = size - 1;
#if (W == 4)
#pragma HLS ARRAY_PARTITION variable=src complete dim=0
#pragma HLS ARRAY_PARTITION variable=dst complete dim=0

	int j;
	int E[H][2], O[H][2];

#pragma HLS ARRAY_PARTITION variable=E complete dim=0
#pragma HLS ARRAY_PARTITION variable=O complete dim=0

	//int add = 1 << (shift - 1);
	int add = shift == 0 ? 0 : 1 << (shift - 1);
	for (j = 0; j < H; j++)
	{
#pragma HLS LOOP_TRIPCOUNT max=64 
#pragma HLS UNROLL factor=64
		E[j][0] = src[j][0] + src[j][3];
		O[j][0] = src[j][0] - src[j][3];
		E[j][1] = src[j][1] + src[j][2];
		O[j][1] = src[j][1] - src[j][2];
		dst[0][(j + 0) & size_b] = ((32 * E[j][0] + 32 * E[j][1] + add) >> shift);
		dst[2][(j + 2) & size_b] = ((32 * E[j][0] - 32 * E[j][1] + add) >> shift);
		dst[1][(j + 1) & size_b] = ((42 * O[j][0] + 17 * O[j][1] + add) >> shift);
		dst[3][(j + 3) & size_b] = ((17 * O[j][0] - 42 * O[j][1] + add) >> shift);
	}
#elif (W == 8)

	int j, k;
	int E[H][4], O[H][4];
	int EE[H][2], EO[H][2];

#pragma HLS ARRAY_PARTITION variable=E complete dim=0
#pragma HLS ARRAY_PARTITION variable=O complete dim=0
#pragma HLS ARRAY_PARTITION variable=EE complete dim=0
#pragma HLS ARRAY_PARTITION variable=EO complete dim=0

	int add = 1 << (shift - 1);
	for (j = 0; j < H; j++)
	{
		/* E and O*/
		for (k = 0; k < 4; k++)
		{
#pragma HLS UNROLL
			E[j][k] = src[j][k] + src[j][7 - k];
			O[j][k] = src[j][k] - src[j][7 - k];
		}
		/* EE and EO */
		EE[j][0] = E[j][0] + E[j][3];
		EO[j][0] = E[j][0] - E[j][3];
		EE[j][1] = E[j][1] + E[j][2];
		EO[j][1] = E[j][1] - E[j][2];
		dst[0][(j + 0) & size_b] = ((32 * EE[j][0] + 32 * EE[j][1] + add) >> shift);
		dst[4][(j + 4) & size_b] = ((32 * EE[j][0] - 32 * EE[j][1] + add) >> shift);
		dst[2][(j + 2) & size_b] = ((42 * EO[j][0] + 17 * EO[j][1] + add) >> shift);
		dst[6][(j + 6) & size_b] = ((17 * EO[j][0] - 42 * EO[j][1] + add) >> shift);
		dst[1][(j + 1) & size_b] = ((44 * O[j][0] + 38 * O[j][1] + 25 * O[j][2] + 9 * O[j][3] + add) >> shift);
		dst[3][(j + 3) & size_b] = ((38 * O[j][0] - 9 * O[j][1] - 44 * O[j][2] - 25 * O[j][3] + add) >> shift);
		dst[5][(j + 5) & size_b] = ((25 * O[j][0] - 44 * O[j][1] + 9 * O[j][2] + 38 * O[j][3] + add) >> shift);
		dst[7][(j + 7) & size_b] = ((9 * O[j][0] - 25 * O[j][1] + 38 * O[j][2] - 44 * O[j][3] + add) >> shift);
	}
#elif (W == 16)
#pragma HLS ARRAY_PARTITION variable=src complete dim=0
#pragma HLS ARRAY_PARTITION variable=dst complete dim=0

	int j, k;
	int E[H][8], O[H][8];
	int EE[H][4], EO[H][4];
	int EEE[H][2], EEO[H][2];

#pragma HLS ARRAY_PARTITION variable=E complete dim=0
#pragma HLS ARRAY_PARTITION variable=O complete dim=0
#pragma HLS ARRAY_PARTITION variable=EE complete dim=0
#pragma HLS ARRAY_PARTITION variable=EO complete dim=0
#pragma HLS ARRAY_PARTITION variable=EEE complete dim=0
#pragma HLS ARRAY_PARTITION variable=EEO complete dim=0

	int add = 1 << (shift - 1);
	for (j = 0; j < H; j++)
	{
#pragma HLS UNROLL factor=64
		/* E and O*/
		for (k = 0; k < 8; k++)
		{
#pragma HLS UNROLL
			E[j][k] = src[j][k] + src[j][15 - k];
			O[j][k] = src[j][k] - src[j][15 - k];
		}
		/* EE and EO */
		for (k = 0; k < 4; k++)
		{
#pragma HLS UNROLL
			EE[j][k] = E[j][k] + E[j][7 - k];
			EO[j][k] = E[j][k] - E[j][7 - k];
		}
		/* EEE and EEO */
		EEE[j][0] = EE[j][0] + EE[j][3];
		EEO[j][0] = EE[j][0] - EE[j][3];
		EEE[j][1] = EE[j][1] + EE[j][2];
		EEO[j][1] = EE[j][1] - EE[j][2];
		dst[0][(j + 0) & size_b] = ((32 * EEE[j][0] + 32 * EEE[j][1] + add) >> shift);
		dst[8][(j + 8) & size_b] = ((32 * EEE[j][0] - 32 * EEE[j][1] + add) >> shift);
		dst[4][(j + 4) & size_b] = ((42 * EEO[j][0] + 17 * EEO[j][1] + add) >> shift);
		dst[12][(j + 12) & size_b] = ((17 * EEO[j][0] - 42 * EEO[j][1] + add) >> shift);
		dst[2][(j + 2) & size_b] = ((44 * EO[j][0] + 38 * EO[j][1] + 25 * EO[j][2] + 9 * EO[j][3] + add) >> shift);
		dst[6][(j + 6) & size_b] = ((38 * EO[j][0] - 9 * EO[j][1] - 44 * EO[j][2] - 25 * EO[j][3] + add) >> shift);
		dst[10][(j + 10) & size_b] = ((25 * EO[j][0] - 44 * EO[j][1] + 9 * EO[j][2] + 38 * EO[j][3] + add) >> shift);
		dst[14][(j + 14) & size_b] = ((9 * EO[j][0] - 25 * EO[j][1] + 38 * EO[j][2] - 44 * EO[j][3] + add) >> shift);
		dst[1][(j + 1) & size_b] = (((45) * O[j][0] + (43) * O[j][1] + (40) * O[j][2] + (35) * O[j][3] + (29) * O[j][4] + (21) * O[j][5] + (13) * O[j][6] + (4) * O[j][7] + add) >> shift);
		dst[3][(j + 3) & size_b] = (((43) * O[j][0] + (29) * O[j][1] + (4) * O[j][2] + (-21) * O[j][3] + (-40) * O[j][4] + (-45) * O[j][5] + (-35) * O[j][6] + (-13) * O[j][7] + add) >> shift);
		dst[5][(j + 5) & size_b] = (((40) * O[j][0] + (4) * O[j][1] + (-35) * O[j][2] + (-43) * O[j][3] + (-13) * O[j][4] + (29) * O[j][5] + (45) * O[j][6] + (21) * O[j][7] + add) >> shift);
		dst[7][(j + 7) & size_b] = (((35) * O[j][0] + (-21) * O[j][1] + (-43) * O[j][2] + (4) * O[j][3] + (45) * O[j][4] + (13) * O[j][5] + (-40) * O[j][6] + (-29) * O[j][7] + add) >> shift);
		dst[9][(j + 9) & size_b] = (((29) * O[j][0] + (-40) * O[j][1] + (-13) * O[j][2] + (45) * O[j][3] + (-4) * O[j][4] + (-43) * O[j][5] + (21) * O[j][6] + (35) * O[j][7] + add) >> shift);
		dst[11][(j + 11) & size_b] = (((21) * O[j][0] + (-45) * O[j][1] + (29) * O[j][2] + (13) * O[j][3] + (-43) * O[j][4] + (35) * O[j][5] + (4) * O[j][6] + (-40) * O[j][7] + add) >> shift);
		dst[13][(j + 13) & size_b] = (((13) * O[j][0] + (-35) * O[j][1] + (45) * O[j][2] + (-40) * O[j][3] + (21) * O[j][4] + (4) * O[j][5] + (-29) * O[j][6] + (43) * O[j][7] + add) >> shift);
		dst[15][(j + 15) & size_b] = (((4) * O[j][0] + (-13) * O[j][1] + (21) * O[j][2] + (-29) * O[j][3] + (35) * O[j][4] + (-40) * O[j][5] + (43) * O[j][6] + (-45) * O[j][7] + add) >> shift);
	}
#elif (W == 32)
#pragma HLS ARRAY_PARTITION variable=src cyclic factor=32 dim=2
#pragma HLS ARRAY_PARTITION variable=dst cyclic factor=64 dim=2

int j, k;
int E[H][16], O[H][16];
int EE[H][8], EO[H][8];
int EEE[H][4], EEO[H][4];
int EEEE[H][2], EEEO[H][2];

#pragma HLS ARRAY_PARTITION variable=E    cyclic factor=16 dim=2
#pragma HLS ARRAY_PARTITION variable=O    cyclic factor=16 dim=2
#pragma HLS ARRAY_PARTITION variable=EE   cyclic factor=8 dim=2
#pragma HLS ARRAY_PARTITION variable=EO   cyclic factor=8 dim=2
#pragma HLS ARRAY_PARTITION variable=EEE  cyclic factor=4 dim=2
#pragma HLS ARRAY_PARTITION variable=EEO  cyclic factor=4 dim=2
#pragma HLS ARRAY_PARTITION variable=EEEE cyclic factor=2 dim=2
#pragma HLS ARRAY_PARTITION variable=EEEO cyclic factor=2 dim=2

int add = 1 << (shift - 1);
for (j = 0; j < H; j++)
{
#pragma HLS PIPELINE II=1
	/* E and O*/
	for (k = 0; k < 16; k++)
	{
		E[j][k] = src[j][k] + src[j][31 - k];
		O[j][k] = src[j][k] - src[j][31 - k];
	}
	/* EE and EO */
	for (k = 0; k < 8; k++)
	{
		EE[j][k] = E[j][k] + E[j][15 - k];
		EO[j][k] = E[j][k] - E[j][15 - k];
	}
	/* EEE and EEO */
	for (k = 0; k < 4; k++)
	{
		EEE[j][k] = EE[j][k] + EE[j][7 - k];
		EEO[j][k] = EE[j][k] - EE[j][7 - k];
	}

	/* EEEE and EEEO */
	EEEE[j][0] = EEE[j][0] + EEE[j][3];
	EEEO[j][0] = EEE[j][0] - EEE[j][3];
	EEEE[j][1] = EEE[j][1] + EEE[j][2];
	EEEO[j][1] = EEE[j][1] - EEE[j][2];
	dst[0][(j + 0) & size_b] = ((32 * EEEE[j][0] + 32 * EEEE[j][1] + add) >> shift);
	dst[16][(j + 16) & size_b] = ((32 * EEEE[j][0] - 32 * EEEE[j][1] + add) >> shift);
	dst[8][(j + 8) & size_b] = ((42 * EEEO[j][0] + 17 * EEEO[j][1] + add) >> shift);
	dst[24][(j + 24) & size_b] = ((17 * EEEO[j][0] - 42 * EEEO[j][1] + add) >> shift);
	dst[4][(j + 4) & size_b] = (((44) * EEO[j][0] + (38) * EEO[j][1] + (25) * EEO[j][2] + (9) * EEO[j][3] + add) >> shift);
	dst[12][(j + 12) & size_b] = (((38) * EEO[j][0] + (-9) * EEO[j][1] + (-44) * EEO[j][2] + (-25) * EEO[j][3] + add) >> shift);
	dst[20][(j + 20) & size_b] = (((25) * EEO[j][0] + (-44) * EEO[j][1] + (9) * EEO[j][2] + (38) * EEO[j][3] + add) >> shift);
	dst[28][(j + 28) & size_b] = (((9) * EEO[j][0] + (-25) * EEO[j][1] + (38) * EEO[j][2] + (-44) * EEO[j][3] + add) >> shift);
	dst[2][(j + 2) & size_b] = (((45) * EO[j][0] + (43) * EO[j][1] + (40) * EO[j][2] + (35) * EO[j][3] + (29) * EO[j][4] + (21) * EO[j][5] + (13) * EO[j][6] + (4) * EO[j][7] + add) >> shift);
	dst[6][(j + 6) & size_b] = (((43) * EO[j][0] + (29) * EO[j][1] + (4) * EO[j][2] + (-21) * EO[j][3] + (-40) * EO[j][4] + (-45) * EO[j][5] + (-35) * EO[j][6] + (-13) * EO[j][7] + add) >> shift);
	dst[10][(j + 10) & size_b] = (((40) * EO[j][0] + (4) * EO[j][1] + (-35) * EO[j][2] + (-43) * EO[j][3] + (-13) * EO[j][4] + (29) * EO[j][5] + (45) * EO[j][6] + (21) * EO[j][7] + add) >> shift);
	dst[14][(j + 14) & size_b] = (((35) * EO[j][0] + (-21) * EO[j][1] + (-43) * EO[j][2] + (4) * EO[j][3] + (45) * EO[j][4] + (13) * EO[j][5] + (-40) * EO[j][6] + (-29) * EO[j][7] + add) >> shift);
	dst[18][(j + 18) & size_b] = (((29) * EO[j][0] + (-40) * EO[j][1] + (-13) * EO[j][2] + (45) * EO[j][3] + (-4) * EO[j][4] + (-43) * EO[j][5] + (21) * EO[j][6] + (35) * EO[j][7] + add) >> shift);
	dst[22][(j + 22) & size_b] = (((21) * EO[j][0] + (-45) * EO[j][1] + (29) * EO[j][2] + (13) * EO[j][3] + (-43) * EO[j][4] + (35) * EO[j][5] + (4) * EO[j][6] + (-40) * EO[j][7] + add) >> shift);
	dst[26][(j + 26) & size_b] = (((13) * EO[j][0] + (-35) * EO[j][1] + (45) * EO[j][2] + (-40) * EO[j][3] + (21) * EO[j][4] + (4) * EO[j][5] + (-29) * EO[j][6] + (43) * EO[j][7] + add) >> shift);
	dst[30][(j + 30) & size_b] = (((4) * EO[j][0] + (-13) * EO[j][1] + (21) * EO[j][2] + (-29) * EO[j][3] + (35) * EO[j][4] + (-40) * EO[j][5] + (43) * EO[j][6] + (-45) * EO[j][7] + add) >> shift);
	dst[1][(j + 1) & size_b] = (((45) * O[j][0] + (45) * O[j][1] + (44) * O[j][2] + (43) * O[j][3] + (41) * O[j][4] + (39) * O[j][5] + (36) * O[j][6] + (34) * O[j][7] + (30) * O[j][8] + (27) * O[j][9] + (23) * O[j][10] + (19) * O[j][11] + (15) * O[j][12] + (11) * O[j][13] + (7) * O[j][14] + (2) * O[j][15] + add) >> shift);
	dst[3][(j + 3) & size_b] = (((45) * O[j][0] + (41) * O[j][1] + (34) * O[j][2] + (23) * O[j][3] + (11) * O[j][4] + (-2) * O[j][5] + (-15) * O[j][6] + (-27) * O[j][7] + (-36) * O[j][8] + (-43) * O[j][9] + (-45) * O[j][10] + (-44) * O[j][11] + (-39) * O[j][12] + (-30) * O[j][13] + (-19) * O[j][14] + (-7) * O[j][15] + add) >> shift);
	dst[5][(j + 5) & size_b] = (((44) * O[j][0] + (34) * O[j][1] + (15) * O[j][2] + (-7) * O[j][3] + (-27) * O[j][4] + (-41) * O[j][5] + (-45) * O[j][6] + (-39) * O[j][7] + (-23) * O[j][8] + (-2) * O[j][9] + (19) * O[j][10] + (36) * O[j][11] + (45) * O[j][12] + (43) * O[j][13] + (30) * O[j][14] + (11) * O[j][15] + add) >> shift);
	dst[7][(j + 7) & size_b] = (((43) * O[j][0] + (23) * O[j][1] + (-7) * O[j][2] + (-34) * O[j][3] + (-45) * O[j][4] + (-36) * O[j][5] + (-11) * O[j][6] + (19) * O[j][7] + (41) * O[j][8] + (44) * O[j][9] + (27) * O[j][10] + (-2) * O[j][11] + (-30) * O[j][12] + (-45) * O[j][13] + (-39) * O[j][14] + (-15) * O[j][15] + add) >> shift);
	dst[9][(j + 9) & size_b] = (((41) * O[j][0] + (11) * O[j][1] + (-27) * O[j][2] + (-45) * O[j][3] + (-30) * O[j][4] + (7) * O[j][5] + (39) * O[j][6] + (43) * O[j][7] + (15) * O[j][8] + (-23) * O[j][9] + (-45) * O[j][10] + (-34) * O[j][11] + (2) * O[j][12] + (36) * O[j][13] + (44) * O[j][14] + (19) * O[j][15] + add) >> shift);
	dst[11][(j + 11) & size_b] = (((39) * O[j][0] + (-2) * O[j][1] + (-41) * O[j][2] + (-36) * O[j][3] + (7) * O[j][4] + (43) * O[j][5] + (34) * O[j][6] + (-11) * O[j][7] + (-44) * O[j][8] + (-30) * O[j][9] + (15) * O[j][10] + (45) * O[j][11] + (27) * O[j][12] + (-19) * O[j][13] + (-45) * O[j][14] + (-23) * O[j][15] + add) >> shift);
	dst[13][(j + 13) & size_b] = (((36) * O[j][0] + (-15) * O[j][1] + (-45) * O[j][2] + (-11) * O[j][3] + (39) * O[j][4] + (34) * O[j][5] + (-19) * O[j][6] + (-45) * O[j][7] + (-7) * O[j][8] + (41) * O[j][9] + (30) * O[j][10] + (-23) * O[j][11] + (-44) * O[j][12] + (-2) * O[j][13] + (43) * O[j][14] + (27) * O[j][15] + add) >> shift);
	dst[15][(j + 15) & size_b] = (((34) * O[j][0] + (-27) * O[j][1] + (-39) * O[j][2] + (19) * O[j][3] + (43) * O[j][4] + (-11) * O[j][5] + (-45) * O[j][6] + (2) * O[j][7] + (45) * O[j][8] + (7) * O[j][9] + (-44) * O[j][10] + (-15) * O[j][11] + (41) * O[j][12] + (23) * O[j][13] + (-36) * O[j][14] + (-30) * O[j][15] + add) >> shift);
	dst[17][(j + 17) & size_b] = (((30) * O[j][0] + (-36) * O[j][1] + (-23) * O[j][2] + (41) * O[j][3] + (15) * O[j][4] + (-44) * O[j][5] + (-7) * O[j][6] + (45) * O[j][7] + (-2) * O[j][8] + (-45) * O[j][9] + (11) * O[j][10] + (43) * O[j][11] + (-19) * O[j][12] + (-39) * O[j][13] + (27) * O[j][14] + (34) * O[j][15] + add) >> shift);
	dst[19][(j + 19) & size_b] = (((27) * O[j][0] + (-43) * O[j][1] + (-2) * O[j][2] + (44) * O[j][3] + (-23) * O[j][4] + (-30) * O[j][5] + (41) * O[j][6] + (7) * O[j][7] + (-45) * O[j][8] + (19) * O[j][9] + (34) * O[j][10] + (-39) * O[j][11] + (-11) * O[j][12] + (45) * O[j][13] + (-15) * O[j][14] + (-36) * O[j][15] + add) >> shift);
	dst[21][(j + 21) & size_b] = (((23) * O[j][0] + (-45) * O[j][1] + (19) * O[j][2] + (27) * O[j][3] + (-45) * O[j][4] + (15) * O[j][5] + (30) * O[j][6] + (-44) * O[j][7] + (11) * O[j][8] + (34) * O[j][9] + (-43) * O[j][10] + (7) * O[j][11] + (36) * O[j][12] + (-41) * O[j][13] + (2) * O[j][14] + (39) * O[j][15] + add) >> shift);
	dst[23][(j + 23) & size_b] = (((19) * O[j][0] + (-44) * O[j][1] + (36) * O[j][2] + (-2) * O[j][3] + (-34) * O[j][4] + (45) * O[j][5] + (-23) * O[j][6] + (-15) * O[j][7] + (43) * O[j][8] + (-39) * O[j][9] + (7) * O[j][10] + (30) * O[j][11] + (-45) * O[j][12] + (27) * O[j][13] + (11) * O[j][14] + (-41) * O[j][15] + add) >> shift);
	dst[25][(j + 25) & size_b] = (((15) * O[j][0] + (-39) * O[j][1] + (45) * O[j][2] + (-30) * O[j][3] + (2) * O[j][4] + (27) * O[j][5] + (-44) * O[j][6] + (41) * O[j][7] + (-19) * O[j][8] + (-11) * O[j][9] + (36) * O[j][10] + (-45) * O[j][11] + (34) * O[j][12] + (-7) * O[j][13] + (-23) * O[j][14] + (43) * O[j][15] + add) >> shift);
	dst[27][(j + 27) & size_b] = (((11) * O[j][0] + (-30) * O[j][1] + (43) * O[j][2] + (-45) * O[j][3] + (36) * O[j][4] + (-19) * O[j][5] + (-2) * O[j][6] + (23) * O[j][7] + (-39) * O[j][8] + (45) * O[j][9] + (-41) * O[j][10] + (27) * O[j][11] + (-7) * O[j][12] + (-15) * O[j][13] + (34) * O[j][14] + (-44) * O[j][15] + add) >> shift);
	dst[29][(j + 29) & size_b] = (((7) * O[j][0] + (-19) * O[j][1] + (30) * O[j][2] + (-39) * O[j][3] + (44) * O[j][4] + (-45) * O[j][5] + (43) * O[j][6] + (-36) * O[j][7] + (27) * O[j][8] + (-15) * O[j][9] + (2) * O[j][10] + (11) * O[j][11] + (-23) * O[j][12] + (34) * O[j][13] + (-41) * O[j][14] + (45) * O[j][15] + add) >> shift);
	dst[31][(j + 31) & size_b] = (((2) * O[j][0] + (-7) * O[j][1] + (11) * O[j][2] + (-15) * O[j][3] + (19) * O[j][4] + (-23) * O[j][5] + (27) * O[j][6] + (-30) * O[j][7] + (34) * O[j][8] + (-36) * O[j][9] + (39) * O[j][10] + (-41) * O[j][11] + (43) * O[j][12] + (-44) * O[j][13] + (45) * O[j][14] + (-45) * O[j][15] + add) >> shift);
}
#else
#pragma HLS ARRAY_PARTITION variable=src cyclic factor=64 dim=2
#pragma HLS ARRAY_PARTITION variable=dst cyclic factor=64 dim=2

const int tx_size = 64;
//const s8 *tm = (const s8 *)com_tbl_tm64[DCT2][0];
int j;
int k;
int E[H][32];
int O[H][32];
int EE[H][16];
int EO[H][16];
int EEE[H][8];
int EEO[H][8];
int EEEE[H][4];
int EEEO[H][4];
int EEEEE[H][2];
int EEEEO[H][2];

#pragma HLS ARRAY_PARTITION variable=E     cyclic factor=32 dim=2
#pragma HLS ARRAY_PARTITION variable=O     cyclic factor=32 dim=2
#pragma HLS ARRAY_PARTITION variable=EE    cyclic factor=16 dim=2
#pragma HLS ARRAY_PARTITION variable=EO    cyclic factor=16 dim=2
#pragma HLS ARRAY_PARTITION variable=EEE   cyclic factor=8 dim=2
#pragma HLS ARRAY_PARTITION variable=EEO   cyclic factor=8 dim=2
#pragma HLS ARRAY_PARTITION variable=EEEE  cyclic factor=4 dim=2
#pragma HLS ARRAY_PARTITION variable=EEEO  cyclic factor=4 dim=2
#pragma HLS ARRAY_PARTITION variable=EEEEE cyclic factor=2 dim=2
#pragma HLS ARRAY_PARTITION variable=EEEEO cyclic factor=2 dim=2

int add = 1 << (shift - 1);
for (j = 0; j < H; j++) {
#pragma HLS PIPELINE II=1
	for (k = 0; k < 32; k++) {
		E[j][k] = (src[j][k]) + (src[j][63 - k]);
		O[j][k] = (src[j][k]) - (src[j][63 - k]);
	}
	for (k = 0; k < 16; k++) {
		EE[j][k] = E[j][k] + E[j][31 - k];
		EO[j][k] = E[j][k] - E[j][31 - k];
	}
	for (k = 0; k < 8; k++) {
		EEE[j][k] = EE[j][k] + EE[j][15 - k];
		EEO[j][k] = EE[j][k] - EE[j][15 - k];
	}
	for (k = 0; k < 4; k++) {
		EEEE[j][k] = EEE[j][k] + EEE[j][7 - k];
		EEEO[j][k] = EEE[j][k] - EEE[j][7 - k];
	}
	EEEEE[j][0] = EEEE[j][0] + EEEE[j][3];
	EEEEO[j][0] = EEEE[j][0] - EEEE[j][3];
	EEEEE[j][1] = EEEE[j][1] + EEEE[j][2];
	EEEEO[j][1] = EEEE[j][1] - EEEE[j][2];
	dst[0][(j + 0) & size_b] = (  ((32 * EEEEE[j][0] + 32 * EEEEE[j][1] + add) >> shift));
	dst[16][(j + 16) & size_b] = (((42 * EEEEO[j][0] + 17 * EEEEO[j][1] + add) >> shift));
	dst[32][(j + 32) & size_b] = (((32 * EEEEE[j][0] - 32 * EEEEE[j][1] + add) >> shift));
	dst[48][(j + 48) & size_b] = (((17 * EEEEO[j][0] - 42 * EEEEO[j][1] + add) >> shift));
	dst[8][(j + 8) & size_b] = (  (((44) * EEEO[j][0] + (38) * EEEO[j][1] + (25) * EEEO[j][2] + (9) * EEEO[j][3] + add) >> shift));
	dst[24][(j + 24) & size_b] = ((((38) * EEEO[j][0] + (-9) * EEEO[j][1] + (-44) * EEEO[j][2] + (-25) * EEEO[j][3] + add) >> shift));
	dst[40][(j + 40) & size_b] = ((((25) * EEEO[j][0] + (-44) * EEEO[j][1] + (9) * EEEO[j][2] + (38) * EEEO[j][3] + add) >> shift));
	dst[56][(j + 56) & size_b] = ((((9) * EEEO[j][0] + (-25) * EEEO[j][1] + (38) * EEEO[j][2] + (-44) * EEEO[j][3] + add) >> shift));

	dst[4][(j + 4) & size_b] = (  (((45) * EEO[j][0] + (43) * EEO[j][1] + (40) * EEO[j][2] + (35) * EEO[j][3] + (29) * EEO[j][4] + (21) * EEO[j][5] + (13) * EEO[j][6] + (4) * EEO[j][7] + add) >> shift));
	dst[12][(j + 12) & size_b] = ((((43) * EEO[j][0] + (29) * EEO[j][1] + (4) * EEO[j][2] + (-21) * EEO[j][3] + (-40) * EEO[j][4] + (-45) * EEO[j][5] + (-35) * EEO[j][6] + (-13) * EEO[j][7] + add) >> shift));
	dst[20][(j + 20) & size_b] = ((((40) * EEO[j][0] + (4) * EEO[j][1] + (-35) * EEO[j][2] + (-43) * EEO[j][3] + (-13) * EEO[j][4] + (29) * EEO[j][5] + (45) * EEO[j][6] + (21) * EEO[j][7] + add) >> shift));
	dst[28][(j + 28) & size_b] = ((((35) * EEO[j][0] + (-21) * EEO[j][1] + (-43) * EEO[j][2] + (4) * EEO[j][3] + (45) * EEO[j][4] + (13) * EEO[j][5] + (-40) * EEO[j][6] + (-29) * EEO[j][7] + add) >> shift));
	dst[36][(j + 36) & size_b] = ((((29) * EEO[j][0] + (-40) * EEO[j][1] + (-13) * EEO[j][2] + (45) * EEO[j][3] + (-4) * EEO[j][4] + (-43) * EEO[j][5] + (21) * EEO[j][6] + (35) * EEO[j][7] + add) >> shift));
	dst[44][(j + 44) & size_b] = ((((21) * EEO[j][0] + (-45) * EEO[j][1] + (29) * EEO[j][2] + (13) * EEO[j][3] + (-43) * EEO[j][4] + (35) * EEO[j][5] + (4) * EEO[j][6] + (-40) * EEO[j][7] + add) >> shift));
	dst[52][(j + 52) & size_b] = ((((13) * EEO[j][0] + (-35) * EEO[j][1] + (45) * EEO[j][2] + (-40) * EEO[j][3] + (21) * EEO[j][4] + (4) * EEO[j][5] + (-29) * EEO[j][6] + (43) * EEO[j][7] + add) >> shift));
	dst[60][(j + 60) & size_b] = ((((4) * EEO[j][0] + (-13) * EEO[j][1] + (21) * EEO[j][2] + (-29) * EEO[j][3] + (35) * EEO[j][4] + (-40) * EEO[j][5] + (43) * EEO[j][6] + (-45) * EEO[j][7] + add) >> shift));

	dst[2][(j + 2) & size_b] = (  (((45) * EO[j][0] + (45) * EO[j][1] + (44) * EO[j][2] + (43) * EO[j][3] + (41) * EO[j][4] + (39) * EO[j][5] + (36) * EO[j][6] + (34) * EO[j][7] + (30) * EO[j][8] + (27) * EO[j][9] + (23) * EO[j][10] + (19) * EO[j][11] + (15) * EO[j][12] + (11) * EO[j][13] + (7) * EO[j][14] + (2) * EO[j][15] + add) >> shift));
	dst[6][(j + 6) & size_b] = (  (((45) * EO[j][0] + (41) * EO[j][1] + (34) * EO[j][2] + (23) * EO[j][3] + (11) * EO[j][4] + (-2) * EO[j][5] + (-15) * EO[j][6] + (-27) * EO[j][7] + (-36) * EO[j][8] + (-43) * EO[j][9] + (-45) * EO[j][10] + (-44) * EO[j][11] + (-39) * EO[j][12] + (-30) * EO[j][13] + (-19) * EO[j][14] + (-7) * EO[j][15] + add) >> shift));
	dst[10][(j + 10) & size_b] = ((((44) * EO[j][0] + (34) * EO[j][1] + (15) * EO[j][2] + (-7) * EO[j][3] + (-27) * EO[j][4] + (-41) * EO[j][5] + (-45) * EO[j][6] + (-39) * EO[j][7] + (-23) * EO[j][8] + (-2) * EO[j][9] + (19) * EO[j][10] + (36) * EO[j][11] + (45) * EO[j][12] + (43) * EO[j][13] + (30) * EO[j][14] + (11) * EO[j][15] + add) >> shift));
	dst[14][(j + 14) & size_b] = ((((43) * EO[j][0] + (23) * EO[j][1] + (-7) * EO[j][2] + (-34) * EO[j][3] + (-45) * EO[j][4] + (-36) * EO[j][5] + (-11) * EO[j][6] + (19) * EO[j][7] + (41) * EO[j][8] + (44) * EO[j][9] + (27) * EO[j][10] + (-2) * EO[j][11] + (-30) * EO[j][12] + (-45) * EO[j][13] + (-39) * EO[j][14] + (-15) * EO[j][15] + add) >> shift));
	dst[18][(j + 18) & size_b] = ((((41) * EO[j][0] + (11) * EO[j][1] + (-27) * EO[j][2] + (-45) * EO[j][3] + (-30) * EO[j][4] + (7) * EO[j][5] + (39) * EO[j][6] + (43) * EO[j][7] + (15) * EO[j][8] + (-23) * EO[j][9] + (-45) * EO[j][10] + (-34) * EO[j][11] + (2) * EO[j][12] + (36) * EO[j][13] + (44) * EO[j][14] + (19) * EO[j][15] + add) >> shift));
	dst[22][(j + 22) & size_b] = ((((39) * EO[j][0] + (-2) * EO[j][1] + (-41) * EO[j][2] + (-36) * EO[j][3] + (7) * EO[j][4] + (43) * EO[j][5] + (34) * EO[j][6] + (-11) * EO[j][7] + (-44) * EO[j][8] + (-30) * EO[j][9] + (15) * EO[j][10] + (45) * EO[j][11] + (27) * EO[j][12] + (-19) * EO[j][13] + (-45) * EO[j][14] + (-23) * EO[j][15] + add) >> shift));
	dst[26][(j + 26) & size_b] = ((((36) * EO[j][0] + (-15) * EO[j][1] + (-45) * EO[j][2] + (-11) * EO[j][3] + (39) * EO[j][4] + (34) * EO[j][5] + (-19) * EO[j][6] + (-45) * EO[j][7] + (-7) * EO[j][8] + (41) * EO[j][9] + (30) * EO[j][10] + (-23) * EO[j][11] + (-44) * EO[j][12] + (-2) * EO[j][13] + (43) * EO[j][14] + (27) * EO[j][15] + add) >> shift));
	dst[30][(j + 30) & size_b] = ((((34) * EO[j][0] + (-27) * EO[j][1] + (-39) * EO[j][2] + (19) * EO[j][3] + (43) * EO[j][4] + (-11) * EO[j][5] + (-45) * EO[j][6] + (2) * EO[j][7] + (45) * EO[j][8] + (7) * EO[j][9] + (-44) * EO[j][10] + (-15) * EO[j][11] + (41) * EO[j][12] + (23) * EO[j][13] + (-36) * EO[j][14] + (-30) * EO[j][15] + add) >> shift));
	dst[34][(j + 34) & size_b] = ((((30) * EO[j][0] + (-36) * EO[j][1] + (-23) * EO[j][2] + (41) * EO[j][3] + (15) * EO[j][4] + (-44) * EO[j][5] + (-7) * EO[j][6] + (45) * EO[j][7] + (-2) * EO[j][8] + (-45) * EO[j][9] + (11) * EO[j][10] + (43) * EO[j][11] + (-19) * EO[j][12] + (-39) * EO[j][13] + (27) * EO[j][14] + (34) * EO[j][15] + add) >> shift));
	dst[38][(j + 38) & size_b] = ((((27) * EO[j][0] + (-43) * EO[j][1] + (-2) * EO[j][2] + (44) * EO[j][3] + (-23) * EO[j][4] + (-30) * EO[j][5] + (41) * EO[j][6] + (7) * EO[j][7] + (-45) * EO[j][8] + (19) * EO[j][9] + (34) * EO[j][10] + (-39) * EO[j][11] + (-11) * EO[j][12] + (45) * EO[j][13] + (-15) * EO[j][14] + (-36) * EO[j][15] + add) >> shift));
	dst[42][(j + 42) & size_b] = ((((23) * EO[j][0] + (-45) * EO[j][1] + (19) * EO[j][2] + (27) * EO[j][3] + (-45) * EO[j][4] + (15) * EO[j][5] + (30) * EO[j][6] + (-44) * EO[j][7] + (11) * EO[j][8] + (34) * EO[j][9] + (-43) * EO[j][10] + (7) * EO[j][11] + (36) * EO[j][12] + (-41) * EO[j][13] + (2) * EO[j][14] + (39) * EO[j][15] + add) >> shift));
	dst[46][(j + 46) & size_b] = ((((19) * EO[j][0] + (-44) * EO[j][1] + (36) * EO[j][2] + (-2) * EO[j][3] + (-34) * EO[j][4] + (45) * EO[j][5] + (-23) * EO[j][6] + (-15) * EO[j][7] + (43) * EO[j][8] + (-39) * EO[j][9] + (7) * EO[j][10] + (30) * EO[j][11] + (-45) * EO[j][12] + (27) * EO[j][13] + (11) * EO[j][14] + (-41) * EO[j][15] + add) >> shift));
	dst[50][(j + 50) & size_b] = ((((15) * EO[j][0] + (-39) * EO[j][1] + (45) * EO[j][2] + (-30) * EO[j][3] + (2) * EO[j][4] + (27) * EO[j][5] + (-44) * EO[j][6] + (41) * EO[j][7] + (-19) * EO[j][8] + (-11) * EO[j][9] + (36) * EO[j][10] + (-45) * EO[j][11] + (34) * EO[j][12] + (-7) * EO[j][13] + (-23) * EO[j][14] + (43) * EO[j][15] + add) >> shift));
	dst[54][(j + 54) & size_b] = ((((11) * EO[j][0] + (-30) * EO[j][1] + (43) * EO[j][2] + (-45) * EO[j][3] + (36) * EO[j][4] + (-19) * EO[j][5] + (-2) * EO[j][6] + (23) * EO[j][7] + (-39) * EO[j][8] + (45) * EO[j][9] + (-41) * EO[j][10] + (27) * EO[j][11] + (-7) * EO[j][12] + (-15) * EO[j][13] + (34) * EO[j][14] + (-44) * EO[j][15] + add) >> shift));
	dst[58][(j + 58) & size_b] = ((((7) * EO[j][0] + (-19) * EO[j][1] + (30) * EO[j][2] + (-39) * EO[j][3] + (44) * EO[j][4] + (-45) * EO[j][5] + (43) * EO[j][6] + (-36) * EO[j][7] + (27) * EO[j][8] + (-15) * EO[j][9] + (2) * EO[j][10] + (11) * EO[j][11] + (-23) * EO[j][12] + (34) * EO[j][13] + (-41) * EO[j][14] + (45) * EO[j][15] + add) >> shift));
	dst[62][(j + 62) & size_b] = ((((2) * EO[j][0] + (-7) * EO[j][1] + (11) * EO[j][2] + (-15) * EO[j][3] + (19) * EO[j][4] + (-23) * EO[j][5] + (27) * EO[j][6] + (-30) * EO[j][7] + (34) * EO[j][8] + (-36) * EO[j][9] + (39) * EO[j][10] + (-41) * EO[j][11] + (43) * EO[j][12] + (-44) * EO[j][13] + (45) * EO[j][14] + (-45) * EO[j][15] + add) >> shift));

	dst[1][(j + 1) & size_b] = ((((45) * O[j][0] + (45) * O[j][1] + (45) * O[j][2] + (45) * O[j][3] + (44) * O[j][4] + (44) * O[j][5] + (43) * O[j][6] + (42) * O[j][7] + (41) * O[j][8] + (40) * O[j][9] + (39) * O[j][10] + (38) * O[j][11] + (37) * O[j][12] + (36) * O[j][13] + (34) * O[j][14] + (33) * O[j][15] + (31) * O[j][16] + (30) * O[j][17] + (28) * O[j][18] + (26) * O[j][19] + (24) * O[j][20] + (22) * O[j][21] + (20) * O[j][22] + (18) * O[j][23] + (16) * O[j][24] + (14) * O[j][25] + (12) * O[j][26] + (10) * O[j][27] + (8) * O[j][28] + (6) * O[j][29] + (3) * O[j][30] + (1) * O[j][31] + add) >> shift));
	dst[3][(j + 3) & size_b] = ((((45) * O[j][0] + (44) * O[j][1] + (42) * O[j][2] + (39) * O[j][3] + (36) * O[j][4] + (31) * O[j][5] + (26) * O[j][6] + (20) * O[j][7] + (14) * O[j][8] + (8) * O[j][9] + (1) * O[j][10] + (-6) * O[j][11] + (-12) * O[j][12] + (-18) * O[j][13] + (-24) * O[j][14] + (-30) * O[j][15] + (-34) * O[j][16] + (-38) * O[j][17] + (-41) * O[j][18] + (-44) * O[j][19] + (-45) * O[j][20] + (-45) * O[j][21] + (-45) * O[j][22] + (-43) * O[j][23] + (-40) * O[j][24] + (-37) * O[j][25] + (-33) * O[j][26] + (-28) * O[j][27] + (-22) * O[j][28] + (-16) * O[j][29] + (-10) * O[j][30] + (-3) * O[j][31] + add) >> shift));
	dst[5][(j + 5) & size_b] = ((((45) * O[j][0] + (42) * O[j][1] + (37) * O[j][2] + (30) * O[j][3] + (20) * O[j][4] + (10) * O[j][5] + (-1) * O[j][6] + (-12) * O[j][7] + (-22) * O[j][8] + (-31) * O[j][9] + (-38) * O[j][10] + (-43) * O[j][11] + (-45) * O[j][12] + (-45) * O[j][13] + (-41) * O[j][14] + (-36) * O[j][15] + (-28) * O[j][16] + (-18) * O[j][17] + (-8) * O[j][18] + (3) * O[j][19] + (14) * O[j][20] + (24) * O[j][21] + (33) * O[j][22] + (39) * O[j][23] + (44) * O[j][24] + (45) * O[j][25] + (44) * O[j][26] + (40) * O[j][27] + (34) * O[j][28] + (26) * O[j][29] + (16) * O[j][30] + (6) * O[j][31] + add) >> shift));
	dst[7][(j + 7) & size_b] = ((((45) * O[j][0] + (39) * O[j][1] + (30) * O[j][2] + (16) * O[j][3] + (1) * O[j][4] + (-14) * O[j][5] + (-28) * O[j][6] + (-38) * O[j][7] + (-44) * O[j][8] + (-45) * O[j][9] + (-40) * O[j][10] + (-31) * O[j][11] + (-18) * O[j][12] + (-3) * O[j][13] + (12) * O[j][14] + (26) * O[j][15] + (37) * O[j][16] + (44) * O[j][17] + (45) * O[j][18] + (41) * O[j][19] + (33) * O[j][20] + (20) * O[j][21] + (6) * O[j][22] + (-10) * O[j][23] + (-24) * O[j][24] + (-36) * O[j][25] + (-43) * O[j][26] + (-45) * O[j][27] + (-42) * O[j][28] + (-34) * O[j][29] + (-22) * O[j][30] + (-8) * O[j][31] + add) >> shift));
	dst[9][(j + 9) & size_b] = ((((44) * O[j][0] + (36) * O[j][1] + (20) * O[j][2] + (1) * O[j][3] + (-18) * O[j][4] + (-34) * O[j][5] + (-44) * O[j][6] + (-45) * O[j][7] + (-37) * O[j][8] + (-22) * O[j][9] + (-3) * O[j][10] + (16) * O[j][11] + (33) * O[j][12] + (43) * O[j][13] + (45) * O[j][14] + (38) * O[j][15] + (24) * O[j][16] + (6) * O[j][17] + (-14) * O[j][18] + (-31) * O[j][19] + (-42) * O[j][20] + (-45) * O[j][21] + (-39) * O[j][22] + (-26) * O[j][23] + (-8) * O[j][24] + (12) * O[j][25] + (30) * O[j][26] + (41) * O[j][27] + (45) * O[j][28] + (40) * O[j][29] + (28) * O[j][30] + (10) * O[j][31] + add) >> shift));
	dst[11][(j + 11) & size_b] = ((((44) * O[j][0] + (31) * O[j][1] + (10) * O[j][2] + (-14) * O[j][3] + (-34) * O[j][4] + (-45) * O[j][5] + (-42) * O[j][6] + (-28) * O[j][7] + (-6) * O[j][8] + (18) * O[j][9] + (37) * O[j][10] + (45) * O[j][11] + (40) * O[j][12] + (24) * O[j][13] + (1) * O[j][14] + (-22) * O[j][15] + (-39) * O[j][16] + (-45) * O[j][17] + (-38) * O[j][18] + (-20) * O[j][19] + (3) * O[j][20] + (26) * O[j][21] + (41) * O[j][22] + (45) * O[j][23] + (36) * O[j][24] + (16) * O[j][25] + (-8) * O[j][26] + (-30) * O[j][27] + (-43) * O[j][28] + (-44) * O[j][29] + (-33) * O[j][30] + (-12) * O[j][31] + add) >> shift));
	dst[13][(j + 13) & size_b] = ((((43) * O[j][0] + (26) * O[j][1] + (-1) * O[j][2] + (-28) * O[j][3] + (-44) * O[j][4] + (-42) * O[j][5] + (-24) * O[j][6] + (3) * O[j][7] + (30) * O[j][8] + (44) * O[j][9] + (41) * O[j][10] + (22) * O[j][11] + (-6) * O[j][12] + (-31) * O[j][13] + (-45) * O[j][14] + (-40) * O[j][15] + (-20) * O[j][16] + (8) * O[j][17] + (33) * O[j][18] + (45) * O[j][19] + (39) * O[j][20] + (18) * O[j][21] + (-10) * O[j][22] + (-34) * O[j][23] + (-45) * O[j][24] + (-38) * O[j][25] + (-16) * O[j][26] + (12) * O[j][27] + (36) * O[j][28] + (45) * O[j][29] + (37) * O[j][30] + (14) * O[j][31] + add) >> shift));
	dst[15][(j + 15) & size_b] = ((((42) * O[j][0] + (20) * O[j][1] + (-12) * O[j][2] + (-38) * O[j][3] + (-45) * O[j][4] + (-28) * O[j][5] + (3) * O[j][6] + (33) * O[j][7] + (45) * O[j][8] + (34) * O[j][9] + (6) * O[j][10] + (-26) * O[j][11] + (-44) * O[j][12] + (-39) * O[j][13] + (-14) * O[j][14] + (18) * O[j][15] + (41) * O[j][16] + (43) * O[j][17] + (22) * O[j][18] + (-10) * O[j][19] + (-37) * O[j][20] + (-45) * O[j][21] + (-30) * O[j][22] + (1) * O[j][23] + (31) * O[j][24] + (45) * O[j][25] + (36) * O[j][26] + (8) * O[j][27] + (-24) * O[j][28] + (-44) * O[j][29] + (-40) * O[j][30] + (-16) * O[j][31] + add) >> shift));
	dst[17][(j + 17) & size_b] = ((((41) * O[j][0] + (14) * O[j][1] + (-22) * O[j][2] + (-44) * O[j][3] + (-37) * O[j][4] + (-6) * O[j][5] + (30) * O[j][6] + (45) * O[j][7] + (31) * O[j][8] + (-3) * O[j][9] + (-36) * O[j][10] + (-45) * O[j][11] + (-24) * O[j][12] + (12) * O[j][13] + (40) * O[j][14] + (42) * O[j][15] + (16) * O[j][16] + (-20) * O[j][17] + (-44) * O[j][18] + (-38) * O[j][19] + (-8) * O[j][20] + (28) * O[j][21] + (45) * O[j][22] + (33) * O[j][23] + (-1) * O[j][24] + (-34) * O[j][25] + (-45) * O[j][26] + (-26) * O[j][27] + (10) * O[j][28] + (39) * O[j][29] + (43) * O[j][30] + (18) * O[j][31] + add) >> shift));
	dst[19][(j + 19) & size_b] = ((((40) * O[j][0] + (8) * O[j][1] + (-31) * O[j][2] + (-45) * O[j][3] + (-22) * O[j][4] + (18) * O[j][5] + (44) * O[j][6] + (34) * O[j][7] + (-3) * O[j][8] + (-38) * O[j][9] + (-42) * O[j][10] + (-12) * O[j][11] + (28) * O[j][12] + (45) * O[j][13] + (26) * O[j][14] + (-14) * O[j][15] + (-43) * O[j][16] + (-37) * O[j][17] + (-1) * O[j][18] + (36) * O[j][19] + (44) * O[j][20] + (16) * O[j][21] + (-24) * O[j][22] + (-45) * O[j][23] + (-30) * O[j][24] + (10) * O[j][25] + (41) * O[j][26] + (39) * O[j][27] + (6) * O[j][28] + (-33) * O[j][29] + (-45) * O[j][30] + (-20) * O[j][31] + add) >> shift));
	dst[21][(j + 21) & size_b] = ((((39) * O[j][0] + (1) * O[j][1] + (-38) * O[j][2] + (-40) * O[j][3] + (-3) * O[j][4] + (37) * O[j][5] + (41) * O[j][6] + (6) * O[j][7] + (-36) * O[j][8] + (-42) * O[j][9] + (-8) * O[j][10] + (34) * O[j][11] + (43) * O[j][12] + (10) * O[j][13] + (-33) * O[j][14] + (-44) * O[j][15] + (-12) * O[j][16] + (31) * O[j][17] + (44) * O[j][18] + (14) * O[j][19] + (-30) * O[j][20] + (-45) * O[j][21] + (-16) * O[j][22] + (28) * O[j][23] + (45) * O[j][24] + (18) * O[j][25] + (-26) * O[j][26] + (-45) * O[j][27] + (-20) * O[j][28] + (24) * O[j][29] + (45) * O[j][30] + (22) * O[j][31] + add) >> shift));
	dst[23][(j + 23) & size_b] = ((((38) * O[j][0] + (-6) * O[j][1] + (-43) * O[j][2] + (-31) * O[j][3] + (16) * O[j][4] + (45) * O[j][5] + (22) * O[j][6] + (-26) * O[j][7] + (-45) * O[j][8] + (-12) * O[j][9] + (34) * O[j][10] + (41) * O[j][11] + (1) * O[j][12] + (-40) * O[j][13] + (-36) * O[j][14] + (10) * O[j][15] + (44) * O[j][16] + (28) * O[j][17] + (-20) * O[j][18] + (-45) * O[j][19] + (-18) * O[j][20] + (30) * O[j][21] + (44) * O[j][22] + (8) * O[j][23] + (-37) * O[j][24] + (-39) * O[j][25] + (3) * O[j][26] + (42) * O[j][27] + (33) * O[j][28] + (-14) * O[j][29] + (-45) * O[j][30] + (-24) * O[j][31] + add) >> shift));
	dst[25][(j + 25) & size_b] = ((((37) * O[j][0] + (-12) * O[j][1] + (-45) * O[j][2] + (-18) * O[j][3] + (33) * O[j][4] + (40) * O[j][5] + (-6) * O[j][6] + (-44) * O[j][7] + (-24) * O[j][8] + (28) * O[j][9] + (43) * O[j][10] + (1) * O[j][11] + (-42) * O[j][12] + (-30) * O[j][13] + (22) * O[j][14] + (45) * O[j][15] + (8) * O[j][16] + (-39) * O[j][17] + (-34) * O[j][18] + (16) * O[j][19] + (45) * O[j][20] + (14) * O[j][21] + (-36) * O[j][22] + (-38) * O[j][23] + (10) * O[j][24] + (45) * O[j][25] + (20) * O[j][26] + (-31) * O[j][27] + (-41) * O[j][28] + (3) * O[j][29] + (44) * O[j][30] + (26) * O[j][31] + add) >> shift));
	dst[27][(j + 27) & size_b] = ((((36) * O[j][0] + (-18) * O[j][1] + (-45) * O[j][2] + (-3) * O[j][3] + (43) * O[j][4] + (24) * O[j][5] + (-31) * O[j][6] + (-39) * O[j][7] + (12) * O[j][8] + (45) * O[j][9] + (10) * O[j][10] + (-40) * O[j][11] + (-30) * O[j][12] + (26) * O[j][13] + (42) * O[j][14] + (-6) * O[j][15] + (-45) * O[j][16] + (-16) * O[j][17] + (37) * O[j][18] + (34) * O[j][19] + (-20) * O[j][20] + (-44) * O[j][21] + (-1) * O[j][22] + (44) * O[j][23] + (22) * O[j][24] + (-33) * O[j][25] + (-38) * O[j][26] + (14) * O[j][27] + (45) * O[j][28] + (8) * O[j][29] + (-41) * O[j][30] + (-28) * O[j][31] + add) >> shift));
	dst[29][(j + 29) & size_b] = ((((34) * O[j][0] + (-24) * O[j][1] + (-41) * O[j][2] + (12) * O[j][3] + (45) * O[j][4] + (1) * O[j][5] + (-45) * O[j][6] + (-14) * O[j][7] + (40) * O[j][8] + (26) * O[j][9] + (-33) * O[j][10] + (-36) * O[j][11] + (22) * O[j][12] + (42) * O[j][13] + (-10) * O[j][14] + (-45) * O[j][15] + (-3) * O[j][16] + (44) * O[j][17] + (16) * O[j][18] + (-39) * O[j][19] + (-28) * O[j][20] + (31) * O[j][21] + (37) * O[j][22] + (-20) * O[j][23] + (-43) * O[j][24] + (8) * O[j][25] + (45) * O[j][26] + (6) * O[j][27] + (-44) * O[j][28] + (-18) * O[j][29] + (38) * O[j][30] + (30) * O[j][31] + add) >> shift));
	dst[31][(j + 31) & size_b] = ((((33) * O[j][0] + (-30) * O[j][1] + (-36) * O[j][2] + (26) * O[j][3] + (38) * O[j][4] + (-22) * O[j][5] + (-40) * O[j][6] + (18) * O[j][7] + (42) * O[j][8] + (-14) * O[j][9] + (-44) * O[j][10] + (10) * O[j][11] + (45) * O[j][12] + (-6) * O[j][13] + (-45) * O[j][14] + (1) * O[j][15] + (45) * O[j][16] + (3) * O[j][17] + (-45) * O[j][18] + (-8) * O[j][19] + (44) * O[j][20] + (12) * O[j][21] + (-43) * O[j][22] + (-16) * O[j][23] + (41) * O[j][24] + (20) * O[j][25] + (-39) * O[j][26] + (-24) * O[j][27] + (37) * O[j][28] + (28) * O[j][29] + (-34) * O[j][30] + (-31) * O[j][31] + add) >> shift));
	dst[33][(j + 33) & size_b] = ((((31) * O[j][0] + (-34) * O[j][1] + (-28) * O[j][2] + (37) * O[j][3] + (24) * O[j][4] + (-39) * O[j][5] + (-20) * O[j][6] + (41) * O[j][7] + (16) * O[j][8] + (-43) * O[j][9] + (-12) * O[j][10] + (44) * O[j][11] + (8) * O[j][12] + (-45) * O[j][13] + (-3) * O[j][14] + (45) * O[j][15] + (-1) * O[j][16] + (-45) * O[j][17] + (6) * O[j][18] + (45) * O[j][19] + (-10) * O[j][20] + (-44) * O[j][21] + (14) * O[j][22] + (42) * O[j][23] + (-18) * O[j][24] + (-40) * O[j][25] + (22) * O[j][26] + (38) * O[j][27] + (-26) * O[j][28] + (-36) * O[j][29] + (30) * O[j][30] + (33) * O[j][31] + add) >> shift));
	dst[35][(j + 35) & size_b] = ((((30) * O[j][0] + (-38) * O[j][1] + (-18) * O[j][2] + (44) * O[j][3] + (6) * O[j][4] + (-45) * O[j][5] + (8) * O[j][6] + (43) * O[j][7] + (-20) * O[j][8] + (-37) * O[j][9] + (31) * O[j][10] + (28) * O[j][11] + (-39) * O[j][12] + (-16) * O[j][13] + (44) * O[j][14] + (3) * O[j][15] + (-45) * O[j][16] + (10) * O[j][17] + (42) * O[j][18] + (-22) * O[j][19] + (-36) * O[j][20] + (33) * O[j][21] + (26) * O[j][22] + (-40) * O[j][23] + (-14) * O[j][24] + (45) * O[j][25] + (1) * O[j][26] + (-45) * O[j][27] + (12) * O[j][28] + (41) * O[j][29] + (-24) * O[j][30] + (-34) * O[j][31] + add) >> shift));
	dst[37][(j + 37) & size_b] = ((((28) * O[j][0] + (-41) * O[j][1] + (-8) * O[j][2] + (45) * O[j][3] + (-14) * O[j][4] + (-38) * O[j][5] + (33) * O[j][6] + (22) * O[j][7] + (-44) * O[j][8] + (-1) * O[j][9] + (44) * O[j][10] + (-20) * O[j][11] + (-34) * O[j][12] + (37) * O[j][13] + (16) * O[j][14] + (-45) * O[j][15] + (6) * O[j][16] + (42) * O[j][17] + (-26) * O[j][18] + (-30) * O[j][19] + (40) * O[j][20] + (10) * O[j][21] + (-45) * O[j][22] + (12) * O[j][23] + (39) * O[j][24] + (-31) * O[j][25] + (-24) * O[j][26] + (43) * O[j][27] + (3) * O[j][28] + (-45) * O[j][29] + (18) * O[j][30] + (36) * O[j][31] + add) >> shift));
	dst[39][(j + 39) & size_b] = ((((26) * O[j][0] + (-44) * O[j][1] + (3) * O[j][2] + (41) * O[j][3] + (-31) * O[j][4] + (-20) * O[j][5] + (45) * O[j][6] + (-10) * O[j][7] + (-38) * O[j][8] + (36) * O[j][9] + (14) * O[j][10] + (-45) * O[j][11] + (16) * O[j][12] + (34) * O[j][13] + (-39) * O[j][14] + (-8) * O[j][15] + (45) * O[j][16] + (-22) * O[j][17] + (-30) * O[j][18] + (42) * O[j][19] + (1) * O[j][20] + (-43) * O[j][21] + (28) * O[j][22] + (24) * O[j][23] + (-44) * O[j][24] + (6) * O[j][25] + (40) * O[j][26] + (-33) * O[j][27] + (-18) * O[j][28] + (45) * O[j][29] + (-12) * O[j][30] + (-37) * O[j][31] + add) >> shift));
	dst[41][(j + 41) & size_b] = ((((24) * O[j][0] + (-45) * O[j][1] + (14) * O[j][2] + (33) * O[j][3] + (-42) * O[j][4] + (3) * O[j][5] + (39) * O[j][6] + (-37) * O[j][7] + (-8) * O[j][8] + (44) * O[j][9] + (-30) * O[j][10] + (-18) * O[j][11] + (45) * O[j][12] + (-20) * O[j][13] + (-28) * O[j][14] + (44) * O[j][15] + (-10) * O[j][16] + (-36) * O[j][17] + (40) * O[j][18] + (1) * O[j][19] + (-41) * O[j][20] + (34) * O[j][21] + (12) * O[j][22] + (-45) * O[j][23] + (26) * O[j][24] + (22) * O[j][25] + (-45) * O[j][26] + (16) * O[j][27] + (31) * O[j][28] + (-43) * O[j][29] + (6) * O[j][30] + (38) * O[j][31] + add) >> shift));
	dst[43][(j + 43) & size_b] = ((((22) * O[j][0] + (-45) * O[j][1] + (24) * O[j][2] + (20) * O[j][3] + (-45) * O[j][4] + (26) * O[j][5] + (18) * O[j][6] + (-45) * O[j][7] + (28) * O[j][8] + (16) * O[j][9] + (-45) * O[j][10] + (30) * O[j][11] + (14) * O[j][12] + (-44) * O[j][13] + (31) * O[j][14] + (12) * O[j][15] + (-44) * O[j][16] + (33) * O[j][17] + (10) * O[j][18] + (-43) * O[j][19] + (34) * O[j][20] + (8) * O[j][21] + (-42) * O[j][22] + (36) * O[j][23] + (6) * O[j][24] + (-41) * O[j][25] + (37) * O[j][26] + (3) * O[j][27] + (-40) * O[j][28] + (38) * O[j][29] + (1) * O[j][30] + (-39) * O[j][31] + add) >> shift));
	dst[45][(j + 45) & size_b] = ((((20) * O[j][0] + (-45) * O[j][1] + (33) * O[j][2] + (6) * O[j][3] + (-39) * O[j][4] + (41) * O[j][5] + (-10) * O[j][6] + (-30) * O[j][7] + (45) * O[j][8] + (-24) * O[j][9] + (-16) * O[j][10] + (44) * O[j][11] + (-36) * O[j][12] + (-1) * O[j][13] + (37) * O[j][14] + (-43) * O[j][15] + (14) * O[j][16] + (26) * O[j][17] + (-45) * O[j][18] + (28) * O[j][19] + (12) * O[j][20] + (-42) * O[j][21] + (38) * O[j][22] + (-3) * O[j][23] + (-34) * O[j][24] + (44) * O[j][25] + (-18) * O[j][26] + (-22) * O[j][27] + (45) * O[j][28] + (-31) * O[j][29] + (-8) * O[j][30] + (40) * O[j][31] + add) >> shift));
	dst[47][(j + 47) & size_b] = ((((18) * O[j][0] + (-43) * O[j][1] + (39) * O[j][2] + (-10) * O[j][3] + (-26) * O[j][4] + (45) * O[j][5] + (-34) * O[j][6] + (1) * O[j][7] + (33) * O[j][8] + (-45) * O[j][9] + (28) * O[j][10] + (8) * O[j][11] + (-38) * O[j][12] + (44) * O[j][13] + (-20) * O[j][14] + (-16) * O[j][15] + (42) * O[j][16] + (-40) * O[j][17] + (12) * O[j][18] + (24) * O[j][19] + (-45) * O[j][20] + (36) * O[j][21] + (-3) * O[j][22] + (-31) * O[j][23] + (45) * O[j][24] + (-30) * O[j][25] + (-6) * O[j][26] + (37) * O[j][27] + (-44) * O[j][28] + (22) * O[j][29] + (14) * O[j][30] + (-41) * O[j][31] + add) >> shift));
	dst[49][(j + 49) & size_b] = ((((16) * O[j][0] + (-40) * O[j][1] + (44) * O[j][2] + (-24) * O[j][3] + (-8) * O[j][4] + (36) * O[j][5] + (-45) * O[j][6] + (31) * O[j][7] + (-1) * O[j][8] + (-30) * O[j][9] + (45) * O[j][10] + (-37) * O[j][11] + (10) * O[j][12] + (22) * O[j][13] + (-43) * O[j][14] + (41) * O[j][15] + (-18) * O[j][16] + (-14) * O[j][17] + (39) * O[j][18] + (-44) * O[j][19] + (26) * O[j][20] + (6) * O[j][21] + (-34) * O[j][22] + (45) * O[j][23] + (-33) * O[j][24] + (3) * O[j][25] + (28) * O[j][26] + (-45) * O[j][27] + (38) * O[j][28] + (-12) * O[j][29] + (-20) * O[j][30] + (42) * O[j][31] + add) >> shift));
	dst[51][(j + 51) & size_b] = ((((14) * O[j][0] + (-37) * O[j][1] + (45) * O[j][2] + (-36) * O[j][3] + (12) * O[j][4] + (16) * O[j][5] + (-38) * O[j][6] + (45) * O[j][7] + (-34) * O[j][8] + (10) * O[j][9] + (18) * O[j][10] + (-39) * O[j][11] + (45) * O[j][12] + (-33) * O[j][13] + (8) * O[j][14] + (20) * O[j][15] + (-40) * O[j][16] + (45) * O[j][17] + (-31) * O[j][18] + (6) * O[j][19] + (22) * O[j][20] + (-41) * O[j][21] + (44) * O[j][22] + (-30) * O[j][23] + (3) * O[j][24] + (24) * O[j][25] + (-42) * O[j][26] + (44) * O[j][27] + (-28) * O[j][28] + (1) * O[j][29] + (26) * O[j][30] + (-43) * O[j][31] + add) >> shift));
	dst[53][(j + 53) & size_b] = ((((12) * O[j][0] + (-33) * O[j][1] + (44) * O[j][2] + (-43) * O[j][3] + (30) * O[j][4] + (-8) * O[j][5] + (-16) * O[j][6] + (36) * O[j][7] + (-45) * O[j][8] + (41) * O[j][9] + (-26) * O[j][10] + (3) * O[j][11] + (20) * O[j][12] + (-38) * O[j][13] + (45) * O[j][14] + (-39) * O[j][15] + (22) * O[j][16] + (1) * O[j][17] + (-24) * O[j][18] + (40) * O[j][19] + (-45) * O[j][20] + (37) * O[j][21] + (-18) * O[j][22] + (-6) * O[j][23] + (28) * O[j][24] + (-42) * O[j][25] + (45) * O[j][26] + (-34) * O[j][27] + (14) * O[j][28] + (10) * O[j][29] + (-31) * O[j][30] + (44) * O[j][31] + add) >> shift));
	dst[55][(j + 55) & size_b] = ((((10) * O[j][0] + (-28) * O[j][1] + (40) * O[j][2] + (-45) * O[j][3] + (41) * O[j][4] + (-30) * O[j][5] + (12) * O[j][6] + (8) * O[j][7] + (-26) * O[j][8] + (39) * O[j][9] + (-45) * O[j][10] + (42) * O[j][11] + (-31) * O[j][12] + (14) * O[j][13] + (6) * O[j][14] + (-24) * O[j][15] + (38) * O[j][16] + (-45) * O[j][17] + (43) * O[j][18] + (-33) * O[j][19] + (16) * O[j][20] + (3) * O[j][21] + (-22) * O[j][22] + (37) * O[j][23] + (-45) * O[j][24] + (44) * O[j][25] + (-34) * O[j][26] + (18) * O[j][27] + (1) * O[j][28] + (-20) * O[j][29] + (36) * O[j][30] + (-44) * O[j][31] + add) >> shift));
	dst[57][(j + 57) & size_b] = ((((8) * O[j][0] + (-22) * O[j][1] + (34) * O[j][2] + (-42) * O[j][3] + (45) * O[j][4] + (-43) * O[j][5] + (36) * O[j][6] + (-24) * O[j][7] + (10) * O[j][8] + (6) * O[j][9] + (-20) * O[j][10] + (33) * O[j][11] + (-41) * O[j][12] + (45) * O[j][13] + (-44) * O[j][14] + (37) * O[j][15] + (-26) * O[j][16] + (12) * O[j][17] + (3) * O[j][18] + (-18) * O[j][19] + (31) * O[j][20] + (-40) * O[j][21] + (45) * O[j][22] + (-44) * O[j][23] + (38) * O[j][24] + (-28) * O[j][25] + (14) * O[j][26] + (1) * O[j][27] + (-16) * O[j][28] + (30) * O[j][29] + (-39) * O[j][30] + (45) * O[j][31] + add) >> shift));
	dst[59][(j + 59) & size_b] = ((((6) * O[j][0] + (-16) * O[j][1] + (26) * O[j][2] + (-34) * O[j][3] + (40) * O[j][4] + (-44) * O[j][5] + (45) * O[j][6] + (-44) * O[j][7] + (39) * O[j][8] + (-33) * O[j][9] + (24) * O[j][10] + (-14) * O[j][11] + (3) * O[j][12] + (8) * O[j][13] + (-18) * O[j][14] + (28) * O[j][15] + (-36) * O[j][16] + (41) * O[j][17] + (-45) * O[j][18] + (45) * O[j][19] + (-43) * O[j][20] + (38) * O[j][21] + (-31) * O[j][22] + (22) * O[j][23] + (-12) * O[j][24] + (1) * O[j][25] + (10) * O[j][26] + (-20) * O[j][27] + (30) * O[j][28] + (-37) * O[j][29] + (42) * O[j][30] + (-45) * O[j][31] + add) >> shift));
	dst[61][(j + 61) & size_b] = ((((3) * O[j][0] + (-10) * O[j][1] + (16) * O[j][2] + (-22) * O[j][3] + (28) * O[j][4] + (-33) * O[j][5] + (37) * O[j][6] + (-40) * O[j][7] + (43) * O[j][8] + (-45) * O[j][9] + (45) * O[j][10] + (-45) * O[j][11] + (44) * O[j][12] + (-41) * O[j][13] + (38) * O[j][14] + (-34) * O[j][15] + (30) * O[j][16] + (-24) * O[j][17] + (18) * O[j][18] + (-12) * O[j][19] + (6) * O[j][20] + (1) * O[j][21] + (-8) * O[j][22] + (14) * O[j][23] + (-20) * O[j][24] + (26) * O[j][25] + (-31) * O[j][26] + (36) * O[j][27] + (-39) * O[j][28] + (42) * O[j][29] + (-44) * O[j][30] + (45) * O[j][31] + add) >> shift));
	dst[63][(j + 63) & size_b] = ((((1) * O[j][0] + (-3) * O[j][1] + (6) * O[j][2] + (-8) * O[j][3] + (10) * O[j][4] + (-12) * O[j][5] + (14) * O[j][6] + (-16) * O[j][7] + (18) * O[j][8] + (-20) * O[j][9] + (22) * O[j][10] + (-24) * O[j][11] + (26) * O[j][12] + (-28) * O[j][13] + (30) * O[j][14] + (-31) * O[j][15] + (33) * O[j][16] + (-34) * O[j][17] + (36) * O[j][18] + (-37) * O[j][19] + (38) * O[j][20] + (-39) * O[j][21] + (40) * O[j][22] + (-41) * O[j][23] + (42) * O[j][24] + (-43) * O[j][25] + (44) * O[j][26] + (-44) * O[j][27] + (45) * O[j][28] + (-45) * O[j][29] + (45) * O[j][30] + (-45) * O[j][31] + add) >> shift));

}
#endif
}

void TR_FUNC_NAME(dct_col, W, H)(s16 src[TMP_SIZE][TMP_SIZE], s16 dst[H][W], U4 shift)
{
	U7 size = MAX_SIZE;
	U8 size_b = size - 1;
#if (H == 4)
#pragma HLS ARRAY_PARTITION variable=src complete dim=0
#pragma HLS ARRAY_PARTITION variable=dst complete dim=0
	int j;
	int E[W][2], O[W][2];

#pragma HLS ARRAY_PARTITION variable=E complete dim=0
#pragma HLS ARRAY_PARTITION variable=O complete dim=0

	//int add = 1 << (shift - 1);
	int add = shift == 0 ? 0 : 1 << (shift - 1);
	for (j = 0; j < W; j++)
	{
#pragma HLS UNROLL
		E[j][0] = src[j][(0 + j) & size_b] + src[j][(3 + j) & size_b];
		O[j][0] = src[j][(0 + j) & size_b] - src[j][(3 + j) & size_b];
		E[j][1] = src[j][(1 + j) & size_b] + src[j][(2 + j) & size_b];
		O[j][1] = src[j][(1 + j) & size_b] - src[j][(2 + j) & size_b];
		dst[0][j] = ((32 * E[j][0] + 32 * E[j][1] + add) >> shift);
		dst[2][j] = ((32 * E[j][0] - 32 * E[j][1] + add) >> shift);
		dst[1][j] = ((42 * O[j][0] + 17 * O[j][1] + add) >> shift);
		dst[3][j] = ((17 * O[j][0] - 42 * O[j][1] + add) >> shift);
	}
#elif (H == 8)
#pragma HLS ARRAY_PARTITION variable=src complete dim=0
#pragma HLS ARRAY_PARTITION variable=dst complete dim=0
	int j, k;
	int E[W][4], O[W][4];
	int EE[W][2], EO[W][2];

#pragma HLS ARRAY_PARTITION variable=E complete dim=0
#pragma HLS ARRAY_PARTITION variable=O complete dim=0
#pragma HLS ARRAY_PARTITION variable=EE complete dim=0
#pragma HLS ARRAY_PARTITION variable=EO complete dim=0

	int add = 1 << (shift - 1);
	for (j = 0; j < W; j++)
	{
#pragma HLS UNROLL
		/* E and O*/
		for (k = 0; k < 4; k++)
		{
#pragma HLS UNROLL
			E[j][k] = src[j][(k + j) & size_b] + src[j][(7 - k + j) & size_b];
			O[j][k] = src[j][(k + j) & size_b] - src[j][(7 - k + j) & size_b];
		}
		/* EE and EO */
		EE[j][0] = E[j][0] + E[j][3];
		EO[j][0] = E[j][0] - E[j][3];
		EE[j][1] = E[j][1] + E[j][2];
		EO[j][1] = E[j][1] - E[j][2];
		dst[0][j] = ((32 * EE[j][0] + 32 * EE[j][1] + add) >> shift);
		dst[4][j] = ((32 * EE[j][0] - 32 * EE[j][1] + add) >> shift);
		dst[2][j] = ((42 * EO[j][0] + 17 * EO[j][1] + add) >> shift);
		dst[6][j] = ((17 * EO[j][0] - 42 * EO[j][1] + add) >> shift);
		dst[1][j] = ((44 * O[j][0] + 38 * O[j][1] + 25 * O[j][2] + 9 * O[j][3] + add) >> shift);
		dst[3][j] = ((38 * O[j][0] - 9 * O[j][1] - 44 * O[j][2] - 25 * O[j][3] + add) >> shift);
		dst[5][j] = ((25 * O[j][0] - 44 * O[j][1] + 9 * O[j][2] + 38 * O[j][3] + add) >> shift);
		dst[7][j] = ((9 * O[j][0] - 25 * O[j][1] + 38 * O[j][2] - 44 * O[j][3] + add) >> shift);
	}
#elif (H == 16)
#pragma HLS ARRAY_PARTITION variable=src complete dim=0
#pragma HLS ARRAY_PARTITION variable=dst complete dim=0
	int j, k;
	int E[W][8], O[W][8];
	int EE[W][4], EO[W][4];
	int EEE[W][2], EEO[W][2];

#pragma HLS ARRAY_PARTITION variable=E complete dim=0
#pragma HLS ARRAY_PARTITION variable=O complete dim=0
#pragma HLS ARRAY_PARTITION variable=EE complete dim=0
#pragma HLS ARRAY_PARTITION variable=EO complete dim=0
#pragma HLS ARRAY_PARTITION variable=EEE complete dim=0
#pragma HLS ARRAY_PARTITION variable=EEO complete dim=0

	int add = 1 << (shift - 1);
	for (j = 0; j < W; j++)
	{
#pragma HLS UNROLL
		/* E and O*/
		for (k = 0; k < 8; k++)
		{
#pragma HLS UNROLL
			E[j][k] = src[j][(k + j) & size_b] + src[j][(15 - k + j) & size_b];
			O[j][k] = src[j][(k + j) & size_b] - src[j][(15 - k + j) & size_b];
		}
		/* EE and EO */
		for (k = 0; k < 4; k++)
		{
#pragma HLS UNROLL
			EE[j][k] = E[j][k] + E[j][7 - k];
			EO[j][k] = E[j][k] - E[j][7 - k];
		}
		/* EEE and EEO */
		EEE[j][0] = EE[j][0] + EE[j][3];
		EEO[j][0] = EE[j][0] - EE[j][3];
		EEE[j][1] = EE[j][1] + EE[j][2];
		EEO[j][1] = EE[j][1] - EE[j][2];
		dst[0][j] = ((32 * EEE[j][0] + 32 * EEE[j][1] + add) >> shift);
		dst[8][j] = ((32 * EEE[j][0] - 32 * EEE[j][1] + add) >> shift);
		dst[4][j] = ((42 * EEO[j][0] + 17 * EEO[j][1] + add) >> shift);
		dst[12][j] = ((17 * EEO[j][0] - 42 * EEO[j][1] + add) >> shift);
		dst[2][j] = ((44 * EO[j][0] + 38 * EO[j][1] + 25 * EO[j][2] + 9 * EO[j][3] + add) >> shift);
		dst[6][j] = ((38 * EO[j][0] - 9 * EO[j][1] - 44 * EO[j][2] - 25 * EO[j][3] + add) >> shift);
		dst[10][j] = ((25 * EO[j][0] - 44 * EO[j][1] + 9 * EO[j][2] + 38 * EO[j][3] + add) >> shift);
		dst[14][j] = ((9 * EO[j][0] - 25 * EO[j][1] + 38 * EO[j][2] - 44 * EO[j][3] + add) >> shift);
		dst[1][j] = (((45) * O[j][0] + (43) * O[j][1] + (40) * O[j][2] + (35) * O[j][3] + (29) * O[j][4] + (21) * O[j][5] + (13) * O[j][6] + (4) * O[j][7] + add) >> shift);
		dst[3][j] = (((43) * O[j][0] + (29) * O[j][1] + (4) * O[j][2] + (-21) * O[j][3] + (-40) * O[j][4] + (-45) * O[j][5] + (-35) * O[j][6] + (-13) * O[j][7] + add) >> shift);
		dst[5][j] = (((40) * O[j][0] + (4) * O[j][1] + (-35) * O[j][2] + (-43) * O[j][3] + (-13) * O[j][4] + (29) * O[j][5] + (45) * O[j][6] + (21) * O[j][7] + add) >> shift);
		dst[7][j] = (((35) * O[j][0] + (-21) * O[j][1] + (-43) * O[j][2] + (4) * O[j][3] + (45) * O[j][4] + (13) * O[j][5] + (-40) * O[j][6] + (-29) * O[j][7] + add) >> shift);
		dst[9][j] = (((29) * O[j][0] + (-40) * O[j][1] + (-13) * O[j][2] + (45) * O[j][3] + (-4) * O[j][4] + (-43) * O[j][5] + (21) * O[j][6] + (35) * O[j][7] + add) >> shift);
		dst[11][j] = (((21) * O[j][0] + (-45) * O[j][1] + (29) * O[j][2] + (13) * O[j][3] + (-43) * O[j][4] + (35) * O[j][5] + (4) * O[j][6] + (-40) * O[j][7] + add) >> shift);
		dst[13][j] = (((13) * O[j][0] + (-35) * O[j][1] + (45) * O[j][2] + (-40) * O[j][3] + (21) * O[j][4] + (4) * O[j][5] + (-29) * O[j][6] + (43) * O[j][7] + add) >> shift);
		dst[15][j] = (((4) * O[j][0] + (-13) * O[j][1] + (21) * O[j][2] + (-29) * O[j][3] + (35) * O[j][4] + (-40) * O[j][5] + (43) * O[j][6] + (-45) * O[j][7] + add) >> shift);
	}
#elif (H == 32)
#pragma HLS ARRAY_PARTITION variable=src cyclic factor=64 dim=2
#pragma HLS ARRAY_PARTITION variable=dst cyclic factor=32 dim=1

	int j, k;
	int E[W][16], O[W][16];
	int EE[W][8], EO[W][8];
	int EEE[W][4], EEO[W][4];
	int EEEE[W][2], EEEO[W][2];

#pragma HLS ARRAY_PARTITION variable=E    cyclic factor=16 dim=2
#pragma HLS ARRAY_PARTITION variable=O    cyclic factor=16 dim=2
#pragma HLS ARRAY_PARTITION variable=EE   cyclic factor=8 dim=2
#pragma HLS ARRAY_PARTITION variable=EO   cyclic factor=8 dim=2
#pragma HLS ARRAY_PARTITION variable=EEE  cyclic factor=4 dim=2
#pragma HLS ARRAY_PARTITION variable=EEO  cyclic factor=4 dim=2
#pragma HLS ARRAY_PARTITION variable=EEEE cyclic factor=2 dim=2
#pragma HLS ARRAY_PARTITION variable=EEEO cyclic factor=2 dim=2

	int add = 1 << (shift - 1);
	for (j = 0; j < W; j++)
	{
#pragma HLS PIPELINE II=1
		/* E and O*/
		for (k = 0; k < 16; k++)
		{
#pragma HLS LOOP_TRIPCOUNT max=16 
#pragma HLS UNROLL
			E[j][k] = src[j][(k + j) & size_b] + src[j][(31 - k + j) & size_b];
			O[j][k] = src[j][(k + j) & size_b] - src[j][(31 - k + j) & size_b];
		}
		/* EE and EO */
		for (k = 0; k < 8; k++)
		{
#pragma HLS LOOP_TRIPCOUNT max=8 
#pragma HLS UNROLL
			EE[j][k] = E[j][k] + E[j][15 - k];
			EO[j][k] = E[j][k] - E[j][15 - k];
		}
		/* EEE and EEO */
		for (k = 0; k < 4; k++)
		{
#pragma HLS LOOP_TRIPCOUNT max=4 
#pragma HLS UNROLL
			EEE[j][k] = EE[j][k] + EE[j][7 - k];
			EEO[j][k] = EE[j][k] - EE[j][7 - k];
		}
		/* EEEE and EEEO */
		EEEE[j][0] = EEE[j][0] + EEE[j][3];
		EEEO[j][0] = EEE[j][0] - EEE[j][3];
		EEEE[j][1] = EEE[j][1] + EEE[j][2];
		EEEO[j][1] = EEE[j][1] - EEE[j][2];
		dst[0][j] =  ((32 * EEEE[j][0] + 32 * EEEE[j][1] + add) >> shift);
		dst[16][j] = ((32 * EEEE[j][0] - 32 * EEEE[j][1] + add) >> shift);
		dst[8][j] =  ((42 * EEEO[j][0] + 17 * EEEO[j][1] + add) >> shift);
		dst[24][j] = ((17 * EEEO[j][0] - 42 * EEEO[j][1] + add) >> shift);
		dst[4][j] =  (((44) * EEO[j][0] + (38) * EEO[j][1] + (25) * EEO[j][2] + (9) * EEO[j][3] + add) >> shift);
		dst[12][j] = (((38) * EEO[j][0] + (-9) * EEO[j][1] + (-44) * EEO[j][2] + (-25) * EEO[j][3] + add) >> shift);
		dst[20][j] = (((25) * EEO[j][0] + (-44) * EEO[j][1] + (9) * EEO[j][2] + (38) * EEO[j][3] + add) >> shift);
		dst[28][j] = (((9) * EEO[j][0] + (-25) * EEO[j][1] + (38) * EEO[j][2] + (-44) * EEO[j][3] + add) >> shift);
		dst[2][j] =  (((45) * EO[j][0] + (43) * EO[j][1] + (40) * EO[j][2] + (35) * EO[j][3] + (29) * EO[j][4] + (21) * EO[j][5] + (13) * EO[j][6] + (4) * EO[j][7] + add) >> shift);
		dst[6][j] =  (((43) * EO[j][0] + (29) * EO[j][1] + (4) * EO[j][2] + (-21) * EO[j][3] + (-40) * EO[j][4] + (-45) * EO[j][5] + (-35) * EO[j][6] + (-13) * EO[j][7] + add) >> shift);
		dst[10][j] = (((40) * EO[j][0] + (4) * EO[j][1] + (-35) * EO[j][2] + (-43) * EO[j][3] + (-13) * EO[j][4] + (29) * EO[j][5] + (45) * EO[j][6] + (21) * EO[j][7] + add) >> shift);
		dst[14][j] = (((35) * EO[j][0] + (-21) * EO[j][1] + (-43) * EO[j][2] + (4) * EO[j][3] + (45) * EO[j][4] + (13) * EO[j][5] + (-40) * EO[j][6] + (-29) * EO[j][7] + add) >> shift);
		dst[18][j] = (((29) * EO[j][0] + (-40) * EO[j][1] + (-13) * EO[j][2] + (45) * EO[j][3] + (-4) * EO[j][4] + (-43) * EO[j][5] + (21) * EO[j][6] + (35) * EO[j][7] + add) >> shift);
		dst[22][j] = (((21) * EO[j][0] + (-45) * EO[j][1] + (29) * EO[j][2] + (13) * EO[j][3] + (-43) * EO[j][4] + (35) * EO[j][5] + (4) * EO[j][6] + (-40) * EO[j][7] + add) >> shift);
		dst[26][j] = (((13) * EO[j][0] + (-35) * EO[j][1] + (45) * EO[j][2] + (-40) * EO[j][3] + (21) * EO[j][4] + (4) * EO[j][5] + (-29) * EO[j][6] + (43) * EO[j][7] + add) >> shift);
		dst[30][j] = (((4) * EO[j][0] + (-13) * EO[j][1] + (21) * EO[j][2] + (-29) * EO[j][3] + (35) * EO[j][4] + (-40) * EO[j][5] + (43) * EO[j][6] + (-45) * EO[j][7] + add) >> shift);
		dst[1][j] = (((45) * O[j][0] + (45) * O[j][1] + (44) * O[j][2] + (43) * O[j][3] + (41) * O[j][4] + (39) * O[j][5] + (36) * O[j][6] + (34) * O[j][7] + (30) * O[j][8] + (27) * O[j][9] + (23) * O[j][10] + (19) * O[j][11] + (15) * O[j][12] + (11) * O[j][13] + (7) * O[j][14] + (2) * O[j][15] + add) >> shift);
		dst[3][j] = (((45) * O[j][0] + (41) * O[j][1] + (34) * O[j][2] + (23) * O[j][3] + (11) * O[j][4] + (-2) * O[j][5] + (-15) * O[j][6] + (-27) * O[j][7] + (-36) * O[j][8] + (-43) * O[j][9] + (-45) * O[j][10] + (-44) * O[j][11] + (-39) * O[j][12] + (-30) * O[j][13] + (-19) * O[j][14] + (-7) * O[j][15] + add) >> shift);
		dst[5][j] = (((44) * O[j][0] + (34) * O[j][1] + (15) * O[j][2] + (-7) * O[j][3] + (-27) * O[j][4] + (-41) * O[j][5] + (-45) * O[j][6] + (-39) * O[j][7] + (-23) * O[j][8] + (-2) * O[j][9] + (19) * O[j][10] + (36) * O[j][11] + (45) * O[j][12] + (43) * O[j][13] + (30) * O[j][14] + (11) * O[j][15] + add) >> shift);
		dst[7][j] = (((43) * O[j][0] + (23) * O[j][1] + (-7) * O[j][2] + (-34) * O[j][3] + (-45) * O[j][4] + (-36) * O[j][5] + (-11) * O[j][6] + (19) * O[j][7] + (41) * O[j][8] + (44) * O[j][9] + (27) * O[j][10] + (-2) * O[j][11] + (-30) * O[j][12] + (-45) * O[j][13] + (-39) * O[j][14] + (-15) * O[j][15] + add) >> shift);
		dst[9][j] = (((41) * O[j][0] + (11) * O[j][1] + (-27) * O[j][2] + (-45) * O[j][3] + (-30) * O[j][4] + (7) * O[j][5] + (39) * O[j][6] + (43) * O[j][7] + (15) * O[j][8] + (-23) * O[j][9] + (-45) * O[j][10] + (-34) * O[j][11] + (2) * O[j][12] + (36) * O[j][13] + (44) * O[j][14] + (19) * O[j][15] + add) >> shift);
		dst[11][j] = (((39) * O[j][0] + (-2) * O[j][1] + (-41) * O[j][2] + (-36) * O[j][3] + (7) * O[j][4] + (43) * O[j][5] + (34) * O[j][6] + (-11) * O[j][7] + (-44) * O[j][8] + (-30) * O[j][9] + (15) * O[j][10] + (45) * O[j][11] + (27) * O[j][12] + (-19) * O[j][13] + (-45) * O[j][14] + (-23) * O[j][15] + add) >> shift);
		dst[13][j] = (((36) * O[j][0] + (-15) * O[j][1] + (-45) * O[j][2] + (-11) * O[j][3] + (39) * O[j][4] + (34) * O[j][5] + (-19) * O[j][6] + (-45) * O[j][7] + (-7) * O[j][8] + (41) * O[j][9] + (30) * O[j][10] + (-23) * O[j][11] + (-44) * O[j][12] + (-2) * O[j][13] + (43) * O[j][14] + (27) * O[j][15] + add) >> shift);
		dst[15][j] = (((34) * O[j][0] + (-27) * O[j][1] + (-39) * O[j][2] + (19) * O[j][3] + (43) * O[j][4] + (-11) * O[j][5] + (-45) * O[j][6] + (2) * O[j][7] + (45) * O[j][8] + (7) * O[j][9] + (-44) * O[j][10] + (-15) * O[j][11] + (41) * O[j][12] + (23) * O[j][13] + (-36) * O[j][14] + (-30) * O[j][15] + add) >> shift);
		dst[17][j] = (((30) * O[j][0] + (-36) * O[j][1] + (-23) * O[j][2] + (41) * O[j][3] + (15) * O[j][4] + (-44) * O[j][5] + (-7) * O[j][6] + (45) * O[j][7] + (-2) * O[j][8] + (-45) * O[j][9] + (11) * O[j][10] + (43) * O[j][11] + (-19) * O[j][12] + (-39) * O[j][13] + (27) * O[j][14] + (34) * O[j][15] + add) >> shift);
		dst[19][j] = (((27) * O[j][0] + (-43) * O[j][1] + (-2) * O[j][2] + (44) * O[j][3] + (-23) * O[j][4] + (-30) * O[j][5] + (41) * O[j][6] + (7) * O[j][7] + (-45) * O[j][8] + (19) * O[j][9] + (34) * O[j][10] + (-39) * O[j][11] + (-11) * O[j][12] + (45) * O[j][13] + (-15) * O[j][14] + (-36) * O[j][15] + add) >> shift);
		dst[21][j] = (((23) * O[j][0] + (-45) * O[j][1] + (19) * O[j][2] + (27) * O[j][3] + (-45) * O[j][4] + (15) * O[j][5] + (30) * O[j][6] + (-44) * O[j][7] + (11) * O[j][8] + (34) * O[j][9] + (-43) * O[j][10] + (7) * O[j][11] + (36) * O[j][12] + (-41) * O[j][13] + (2) * O[j][14] + (39) * O[j][15] + add) >> shift);
		dst[23][j] = (((19) * O[j][0] + (-44) * O[j][1] + (36) * O[j][2] + (-2) * O[j][3] + (-34) * O[j][4] + (45) * O[j][5] + (-23) * O[j][6] + (-15) * O[j][7] + (43) * O[j][8] + (-39) * O[j][9] + (7) * O[j][10] + (30) * O[j][11] + (-45) * O[j][12] + (27) * O[j][13] + (11) * O[j][14] + (-41) * O[j][15] + add) >> shift);
		dst[25][j] = (((15) * O[j][0] + (-39) * O[j][1] + (45) * O[j][2] + (-30) * O[j][3] + (2) * O[j][4] + (27) * O[j][5] + (-44) * O[j][6] + (41) * O[j][7] + (-19) * O[j][8] + (-11) * O[j][9] + (36) * O[j][10] + (-45) * O[j][11] + (34) * O[j][12] + (-7) * O[j][13] + (-23) * O[j][14] + (43) * O[j][15] + add) >> shift);
		dst[27][j] = (((11) * O[j][0] + (-30) * O[j][1] + (43) * O[j][2] + (-45) * O[j][3] + (36) * O[j][4] + (-19) * O[j][5] + (-2) * O[j][6] + (23) * O[j][7] + (-39) * O[j][8] + (45) * O[j][9] + (-41) * O[j][10] + (27) * O[j][11] + (-7) * O[j][12] + (-15) * O[j][13] + (34) * O[j][14] + (-44) * O[j][15] + add) >> shift);
		dst[29][j] = (((7) * O[j][0] + (-19) * O[j][1] + (30) * O[j][2] + (-39) * O[j][3] + (44) * O[j][4] + (-45) * O[j][5] + (43) * O[j][6] + (-36) * O[j][7] + (27) * O[j][8] + (-15) * O[j][9] + (2) * O[j][10] + (11) * O[j][11] + (-23) * O[j][12] + (34) * O[j][13] + (-41) * O[j][14] + (45) * O[j][15] + add) >> shift);
		dst[31][j] = (((2) * O[j][0] + (-7) * O[j][1] + (11) * O[j][2] + (-15) * O[j][3] + (19) * O[j][4] + (-23) * O[j][5] + (27) * O[j][6] + (-30) * O[j][7] + (34) * O[j][8] + (-36) * O[j][9] + (39) * O[j][10] + (-41) * O[j][11] + (43) * O[j][12] + (-44) * O[j][13] + (45) * O[j][14] + (-45) * O[j][15] + add) >> shift);
	}
#else
#pragma HLS ARRAY_PARTITION variable=src cyclic factor=64 dim=2
#pragma HLS ARRAY_PARTITION variable=dst cyclic factor=64 dim=1

	const int tx_size = 64;
	//const s8 *tm = (const s8 *)com_tbl_tm64[DCT2][0];
	int j;
	int k;
	int E[W][32];
	int O[W][32];
	int EE[W][16];
	int EO[W][16];
	int EEE[W][8];
	int EEO[W][8];
	int EEEE[W][4];
	int EEEO[W][4];
	int EEEEE[W][2];
	int EEEEO[W][2];

#pragma HLS ARRAY_PARTITION variable=E     cyclic factor=32 dim=2
#pragma HLS ARRAY_PARTITION variable=O     cyclic factor=32 dim=2
#pragma HLS ARRAY_PARTITION variable=EE    cyclic factor=16 dim=2
#pragma HLS ARRAY_PARTITION variable=EO    cyclic factor=16 dim=2
#pragma HLS ARRAY_PARTITION variable=EEE   cyclic factor=8 dim=2
#pragma HLS ARRAY_PARTITION variable=EEO   cyclic factor=8 dim=2
#pragma HLS ARRAY_PARTITION variable=EEEE  cyclic factor=4 dim=2
#pragma HLS ARRAY_PARTITION variable=EEEO  cyclic factor=4 dim=2
#pragma HLS ARRAY_PARTITION variable=EEEEE cyclic factor=2 dim=2
#pragma HLS ARRAY_PARTITION variable=EEEEO cyclic factor=2 dim=2


	int add = 1 << (shift - 1);
	for (j = 0; j < W; j++) {
#pragma HLS PIPELINE II=1
		for (k = 0; k < 32; k++) {
			E[j][k] = (src[j][(k + j) & size_b]) + (src[j][(63 - k + j) & size_b]);
			O[j][k] = (src[j][(k + j) & size_b]) - (src[j][(63 - k + j) & size_b]);
		}
		for (k = 0; k < 16; k++) {
			EE[j][k] = E[j][k] + E[j][31 - k];
			EO[j][k] = E[j][k] - E[j][31 - k];
		}
		for (k = 0; k < 8; k++) {
			EEE[j][k] = EE[j][k] + EE[j][15 - k];
			EEO[j][k] = EE[j][k] - EE[j][15 - k];
		}
		for (k = 0; k < 4; k++) {
			EEEE[j][k] = EEE[j][k] + EEE[j][7 - k];
			EEEO[j][k] = EEE[j][k] - EEE[j][7 - k];
		}
		EEEEE[j][0] = EEEE[j][0] + EEEE[j][3];
		EEEEO[j][0] = EEEE[j][0] - EEEE[j][3];
		EEEEE[j][1] = EEEE[j][1] + EEEE[j][2];
		EEEEO[j][1] = EEEE[j][1] - EEEE[j][2];
		dst[0][j] = ( ((32 * EEEEE[j][0] + 32 * EEEEE[j][1] + add) >> shift));
		dst[16][j] = (((42 * EEEEO[j][0] + 17 * EEEEO[j][1] + add) >> shift));
		dst[32][j] = (((32 * EEEEE[j][0] - 32 * EEEEE[j][1] + add) >> shift));
		dst[48][j] = (((17 * EEEEO[j][0] - 42 * EEEEO[j][1] + add) >> shift));

		dst[8][j] = ( (((44) * EEEO[j][0] + (38) * EEEO[j][1] + (25) * EEEO[j][2] + (9) * EEEO[j][3] + add) >> shift));
		dst[24][j] = ((((38) * EEEO[j][0] + (-9) * EEEO[j][1] + (-44) * EEEO[j][2] + (-25) * EEEO[j][3] + add) >> shift));
		dst[40][j] = ((((25) * EEEO[j][0] + (-44) * EEEO[j][1] + (9) * EEEO[j][2] + (38) * EEEO[j][3] + add) >> shift));
		dst[56][j] = ((((9) * EEEO[j][0] + (-25) * EEEO[j][1] + (38) * EEEO[j][2] + (-44) * EEEO[j][3] + add) >> shift));

		dst[4][j] = ( (((45) * EEO[j][0] + (43) * EEO[j][1] + (40) * EEO[j][2] + (35) * EEO[j][3] + (29) * EEO[j][4] + (21) * EEO[j][5] + (13) * EEO[j][6] + (4) * EEO[j][7] + add) >> shift));
		dst[12][j] = ((((43) * EEO[j][0] + (29) * EEO[j][1] + (4) * EEO[j][2] + (-21) * EEO[j][3] + (-40) * EEO[j][4] + (-45) * EEO[j][5] + (-35) * EEO[j][6] + (-13) * EEO[j][7] + add) >> shift));
		dst[20][j] = ((((40) * EEO[j][0] + (4) * EEO[j][1] + (-35) * EEO[j][2] + (-43) * EEO[j][3] + (-13) * EEO[j][4] + (29) * EEO[j][5] + (45) * EEO[j][6] + (21) * EEO[j][7] + add) >> shift));
		dst[28][j] = ((((35) * EEO[j][0] + (-21) * EEO[j][1] + (-43) * EEO[j][2] + (4) * EEO[j][3] + (45) * EEO[j][4] + (13) * EEO[j][5] + (-40) * EEO[j][6] + (-29) * EEO[j][7] + add) >> shift));
		dst[36][j] = ((((29) * EEO[j][0] + (-40) * EEO[j][1] + (-13) * EEO[j][2] + (45) * EEO[j][3] + (-4) * EEO[j][4] + (-43) * EEO[j][5] + (21) * EEO[j][6] + (35) * EEO[j][7] + add) >> shift));
		dst[44][j] = ((((21) * EEO[j][0] + (-45) * EEO[j][1] + (29) * EEO[j][2] + (13) * EEO[j][3] + (-43) * EEO[j][4] + (35) * EEO[j][5] + (4) * EEO[j][6] + (-40) * EEO[j][7] + add) >> shift));
		dst[52][j] = ((((13) * EEO[j][0] + (-35) * EEO[j][1] + (45) * EEO[j][2] + (-40) * EEO[j][3] + (21) * EEO[j][4] + (4) * EEO[j][5] + (-29) * EEO[j][6] + (43) * EEO[j][7] + add) >> shift));
		dst[60][j] = ((((4) * EEO[j][0] + (-13) * EEO[j][1] + (21) * EEO[j][2] + (-29) * EEO[j][3] + (35) * EEO[j][4] + (-40) * EEO[j][5] + (43) * EEO[j][6] + (-45) * EEO[j][7] + add) >> shift));

		dst[2][j] = ( (((45) * EO[j][0] + (45) * EO[j][1] + (44) * EO[j][2] + (43) * EO[j][3] + (41) * EO[j][4] + (39) * EO[j][5] + (36) * EO[j][6] + (34) * EO[j][7] + (30) * EO[j][8] + (27) * EO[j][9] + (23) * EO[j][10] + (19) * EO[j][11] + (15) * EO[j][12] + (11) * EO[j][13] + (7) * EO[j][14] + (2) * EO[j][15] + add) >> shift));
		dst[6][j] = ( (((45) * EO[j][0] + (41) * EO[j][1] + (34) * EO[j][2] + (23) * EO[j][3] + (11) * EO[j][4] + (-2) * EO[j][5] + (-15) * EO[j][6] + (-27) * EO[j][7] + (-36) * EO[j][8] + (-43) * EO[j][9] + (-45) * EO[j][10] + (-44) * EO[j][11] + (-39) * EO[j][12] + (-30) * EO[j][13] + (-19) * EO[j][14] + (-7) * EO[j][15] + add) >> shift));
		dst[10][j] = ((((44) * EO[j][0] + (34) * EO[j][1] + (15) * EO[j][2] + (-7) * EO[j][3] + (-27) * EO[j][4] + (-41) * EO[j][5] + (-45) * EO[j][6] + (-39) * EO[j][7] + (-23) * EO[j][8] + (-2) * EO[j][9] + (19) * EO[j][10] + (36) * EO[j][11] + (45) * EO[j][12] + (43) * EO[j][13] + (30) * EO[j][14] + (11) * EO[j][15] + add) >> shift));
		dst[14][j] = ((((43) * EO[j][0] + (23) * EO[j][1] + (-7) * EO[j][2] + (-34) * EO[j][3] + (-45) * EO[j][4] + (-36) * EO[j][5] + (-11) * EO[j][6] + (19) * EO[j][7] + (41) * EO[j][8] + (44) * EO[j][9] + (27) * EO[j][10] + (-2) * EO[j][11] + (-30) * EO[j][12] + (-45) * EO[j][13] + (-39) * EO[j][14] + (-15) * EO[j][15] + add) >> shift));
		dst[18][j] = ((((41) * EO[j][0] + (11) * EO[j][1] + (-27) * EO[j][2] + (-45) * EO[j][3] + (-30) * EO[j][4] + (7) * EO[j][5] + (39) * EO[j][6] + (43) * EO[j][7] + (15) * EO[j][8] + (-23) * EO[j][9] + (-45) * EO[j][10] + (-34) * EO[j][11] + (2) * EO[j][12] + (36) * EO[j][13] + (44) * EO[j][14] + (19) * EO[j][15] + add) >> shift));
		dst[22][j] = ((((39) * EO[j][0] + (-2) * EO[j][1] + (-41) * EO[j][2] + (-36) * EO[j][3] + (7) * EO[j][4] + (43) * EO[j][5] + (34) * EO[j][6] + (-11) * EO[j][7] + (-44) * EO[j][8] + (-30) * EO[j][9] + (15) * EO[j][10] + (45) * EO[j][11] + (27) * EO[j][12] + (-19) * EO[j][13] + (-45) * EO[j][14] + (-23) * EO[j][15] + add) >> shift));
		dst[26][j] = ((((36) * EO[j][0] + (-15) * EO[j][1] + (-45) * EO[j][2] + (-11) * EO[j][3] + (39) * EO[j][4] + (34) * EO[j][5] + (-19) * EO[j][6] + (-45) * EO[j][7] + (-7) * EO[j][8] + (41) * EO[j][9] + (30) * EO[j][10] + (-23) * EO[j][11] + (-44) * EO[j][12] + (-2) * EO[j][13] + (43) * EO[j][14] + (27) * EO[j][15] + add) >> shift));
		dst[30][j] = ((((34) * EO[j][0] + (-27) * EO[j][1] + (-39) * EO[j][2] + (19) * EO[j][3] + (43) * EO[j][4] + (-11) * EO[j][5] + (-45) * EO[j][6] + (2) * EO[j][7] + (45) * EO[j][8] + (7) * EO[j][9] + (-44) * EO[j][10] + (-15) * EO[j][11] + (41) * EO[j][12] + (23) * EO[j][13] + (-36) * EO[j][14] + (-30) * EO[j][15] + add) >> shift));
		dst[34][j] = ((((30) * EO[j][0] + (-36) * EO[j][1] + (-23) * EO[j][2] + (41) * EO[j][3] + (15) * EO[j][4] + (-44) * EO[j][5] + (-7) * EO[j][6] + (45) * EO[j][7] + (-2) * EO[j][8] + (-45) * EO[j][9] + (11) * EO[j][10] + (43) * EO[j][11] + (-19) * EO[j][12] + (-39) * EO[j][13] + (27) * EO[j][14] + (34) * EO[j][15] + add) >> shift));
		dst[38][j] = ((((27) * EO[j][0] + (-43) * EO[j][1] + (-2) * EO[j][2] + (44) * EO[j][3] + (-23) * EO[j][4] + (-30) * EO[j][5] + (41) * EO[j][6] + (7) * EO[j][7] + (-45) * EO[j][8] + (19) * EO[j][9] + (34) * EO[j][10] + (-39) * EO[j][11] + (-11) * EO[j][12] + (45) * EO[j][13] + (-15) * EO[j][14] + (-36) * EO[j][15] + add) >> shift));
		dst[42][j] = ((((23) * EO[j][0] + (-45) * EO[j][1] + (19) * EO[j][2] + (27) * EO[j][3] + (-45) * EO[j][4] + (15) * EO[j][5] + (30) * EO[j][6] + (-44) * EO[j][7] + (11) * EO[j][8] + (34) * EO[j][9] + (-43) * EO[j][10] + (7) * EO[j][11] + (36) * EO[j][12] + (-41) * EO[j][13] + (2) * EO[j][14] + (39) * EO[j][15] + add) >> shift));
		dst[46][j] = ((((19) * EO[j][0] + (-44) * EO[j][1] + (36) * EO[j][2] + (-2) * EO[j][3] + (-34) * EO[j][4] + (45) * EO[j][5] + (-23) * EO[j][6] + (-15) * EO[j][7] + (43) * EO[j][8] + (-39) * EO[j][9] + (7) * EO[j][10] + (30) * EO[j][11] + (-45) * EO[j][12] + (27) * EO[j][13] + (11) * EO[j][14] + (-41) * EO[j][15] + add) >> shift));
		dst[50][j] = ((((15) * EO[j][0] + (-39) * EO[j][1] + (45) * EO[j][2] + (-30) * EO[j][3] + (2) * EO[j][4] + (27) * EO[j][5] + (-44) * EO[j][6] + (41) * EO[j][7] + (-19) * EO[j][8] + (-11) * EO[j][9] + (36) * EO[j][10] + (-45) * EO[j][11] + (34) * EO[j][12] + (-7) * EO[j][13] + (-23) * EO[j][14] + (43) * EO[j][15] + add) >> shift));
		dst[54][j] = ((((11) * EO[j][0] + (-30) * EO[j][1] + (43) * EO[j][2] + (-45) * EO[j][3] + (36) * EO[j][4] + (-19) * EO[j][5] + (-2) * EO[j][6] + (23) * EO[j][7] + (-39) * EO[j][8] + (45) * EO[j][9] + (-41) * EO[j][10] + (27) * EO[j][11] + (-7) * EO[j][12] + (-15) * EO[j][13] + (34) * EO[j][14] + (-44) * EO[j][15] + add) >> shift));
		dst[58][j] = ((((7) * EO[j][0] + (-19) * EO[j][1] + (30) * EO[j][2] + (-39) * EO[j][3] + (44) * EO[j][4] + (-45) * EO[j][5] + (43) * EO[j][6] + (-36) * EO[j][7] + (27) * EO[j][8] + (-15) * EO[j][9] + (2) * EO[j][10] + (11) * EO[j][11] + (-23) * EO[j][12] + (34) * EO[j][13] + (-41) * EO[j][14] + (45) * EO[j][15] + add) >> shift));
		dst[62][j] = ((((2) * EO[j][0] + (-7) * EO[j][1] + (11) * EO[j][2] + (-15) * EO[j][3] + (19) * EO[j][4] + (-23) * EO[j][5] + (27) * EO[j][6] + (-30) * EO[j][7] + (34) * EO[j][8] + (-36) * EO[j][9] + (39) * EO[j][10] + (-41) * EO[j][11] + (43) * EO[j][12] + (-44) * EO[j][13] + (45) * EO[j][14] + (-45) * EO[j][15] + add) >> shift));

		dst[1][j] = ((((45) * O[j][0] + (45) * O[j][1] + (45) * O[j][2] + (45) * O[j][3] + (44) * O[j][4] + (44) * O[j][5] + (43) * O[j][6] + (42) * O[j][7] + (41) * O[j][8] + (40) * O[j][9] + (39) * O[j][10] + (38) * O[j][11] + (37) * O[j][12] + (36) * O[j][13] + (34) * O[j][14] + (33) * O[j][15] + (31) * O[j][16] + (30) * O[j][17] + (28) * O[j][18] + (26) * O[j][19] + (24) * O[j][20] + (22) * O[j][21] + (20) * O[j][22] + (18) * O[j][23] + (16) * O[j][24] + (14) * O[j][25] + (12) * O[j][26] + (10) * O[j][27] + (8) * O[j][28] + (6) * O[j][29] + (3) * O[j][30] + (1) * O[j][31] + add) >> shift));
		dst[3][j] = ((((45) * O[j][0] + (44) * O[j][1] + (42) * O[j][2] + (39) * O[j][3] + (36) * O[j][4] + (31) * O[j][5] + (26) * O[j][6] + (20) * O[j][7] + (14) * O[j][8] + (8) * O[j][9] + (1) * O[j][10] + (-6) * O[j][11] + (-12) * O[j][12] + (-18) * O[j][13] + (-24) * O[j][14] + (-30) * O[j][15] + (-34) * O[j][16] + (-38) * O[j][17] + (-41) * O[j][18] + (-44) * O[j][19] + (-45) * O[j][20] + (-45) * O[j][21] + (-45) * O[j][22] + (-43) * O[j][23] + (-40) * O[j][24] + (-37) * O[j][25] + (-33) * O[j][26] + (-28) * O[j][27] + (-22) * O[j][28] + (-16) * O[j][29] + (-10) * O[j][30] + (-3) * O[j][31] + add) >> shift));
		dst[5][j] = ((((45) * O[j][0] + (42) * O[j][1] + (37) * O[j][2] + (30) * O[j][3] + (20) * O[j][4] + (10) * O[j][5] + (-1) * O[j][6] + (-12) * O[j][7] + (-22) * O[j][8] + (-31) * O[j][9] + (-38) * O[j][10] + (-43) * O[j][11] + (-45) * O[j][12] + (-45) * O[j][13] + (-41) * O[j][14] + (-36) * O[j][15] + (-28) * O[j][16] + (-18) * O[j][17] + (-8) * O[j][18] + (3) * O[j][19] + (14) * O[j][20] + (24) * O[j][21] + (33) * O[j][22] + (39) * O[j][23] + (44) * O[j][24] + (45) * O[j][25] + (44) * O[j][26] + (40) * O[j][27] + (34) * O[j][28] + (26) * O[j][29] + (16) * O[j][30] + (6) * O[j][31] + add) >> shift));
		dst[7][j] = ((((45) * O[j][0] + (39) * O[j][1] + (30) * O[j][2] + (16) * O[j][3] + (1) * O[j][4] + (-14) * O[j][5] + (-28) * O[j][6] + (-38) * O[j][7] + (-44) * O[j][8] + (-45) * O[j][9] + (-40) * O[j][10] + (-31) * O[j][11] + (-18) * O[j][12] + (-3) * O[j][13] + (12) * O[j][14] + (26) * O[j][15] + (37) * O[j][16] + (44) * O[j][17] + (45) * O[j][18] + (41) * O[j][19] + (33) * O[j][20] + (20) * O[j][21] + (6) * O[j][22] + (-10) * O[j][23] + (-24) * O[j][24] + (-36) * O[j][25] + (-43) * O[j][26] + (-45) * O[j][27] + (-42) * O[j][28] + (-34) * O[j][29] + (-22) * O[j][30] + (-8) * O[j][31] + add) >> shift));
		dst[9][j] = ((((44) * O[j][0] + (36) * O[j][1] + (20) * O[j][2] + (1) * O[j][3] + (-18) * O[j][4] + (-34) * O[j][5] + (-44) * O[j][6] + (-45) * O[j][7] + (-37) * O[j][8] + (-22) * O[j][9] + (-3) * O[j][10] + (16) * O[j][11] + (33) * O[j][12] + (43) * O[j][13] + (45) * O[j][14] + (38) * O[j][15] + (24) * O[j][16] + (6) * O[j][17] + (-14) * O[j][18] + (-31) * O[j][19] + (-42) * O[j][20] + (-45) * O[j][21] + (-39) * O[j][22] + (-26) * O[j][23] + (-8) * O[j][24] + (12) * O[j][25] + (30) * O[j][26] + (41) * O[j][27] + (45) * O[j][28] + (40) * O[j][29] + (28) * O[j][30] + (10) * O[j][31] + add) >> shift));
		dst[11][j] = ((((44) * O[j][0] + (31) * O[j][1] + (10) * O[j][2] + (-14) * O[j][3] + (-34) * O[j][4] + (-45) * O[j][5] + (-42) * O[j][6] + (-28) * O[j][7] + (-6) * O[j][8] + (18) * O[j][9] + (37) * O[j][10] + (45) * O[j][11] + (40) * O[j][12] + (24) * O[j][13] + (1) * O[j][14] + (-22) * O[j][15] + (-39) * O[j][16] + (-45) * O[j][17] + (-38) * O[j][18] + (-20) * O[j][19] + (3) * O[j][20] + (26) * O[j][21] + (41) * O[j][22] + (45) * O[j][23] + (36) * O[j][24] + (16) * O[j][25] + (-8) * O[j][26] + (-30) * O[j][27] + (-43) * O[j][28] + (-44) * O[j][29] + (-33) * O[j][30] + (-12) * O[j][31] + add) >> shift));
		dst[13][j] = ((((43) * O[j][0] + (26) * O[j][1] + (-1) * O[j][2] + (-28) * O[j][3] + (-44) * O[j][4] + (-42) * O[j][5] + (-24) * O[j][6] + (3) * O[j][7] + (30) * O[j][8] + (44) * O[j][9] + (41) * O[j][10] + (22) * O[j][11] + (-6) * O[j][12] + (-31) * O[j][13] + (-45) * O[j][14] + (-40) * O[j][15] + (-20) * O[j][16] + (8) * O[j][17] + (33) * O[j][18] + (45) * O[j][19] + (39) * O[j][20] + (18) * O[j][21] + (-10) * O[j][22] + (-34) * O[j][23] + (-45) * O[j][24] + (-38) * O[j][25] + (-16) * O[j][26] + (12) * O[j][27] + (36) * O[j][28] + (45) * O[j][29] + (37) * O[j][30] + (14) * O[j][31] + add) >> shift));
		dst[15][j] = ((((42) * O[j][0] + (20) * O[j][1] + (-12) * O[j][2] + (-38) * O[j][3] + (-45) * O[j][4] + (-28) * O[j][5] + (3) * O[j][6] + (33) * O[j][7] + (45) * O[j][8] + (34) * O[j][9] + (6) * O[j][10] + (-26) * O[j][11] + (-44) * O[j][12] + (-39) * O[j][13] + (-14) * O[j][14] + (18) * O[j][15] + (41) * O[j][16] + (43) * O[j][17] + (22) * O[j][18] + (-10) * O[j][19] + (-37) * O[j][20] + (-45) * O[j][21] + (-30) * O[j][22] + (1) * O[j][23] + (31) * O[j][24] + (45) * O[j][25] + (36) * O[j][26] + (8) * O[j][27] + (-24) * O[j][28] + (-44) * O[j][29] + (-40) * O[j][30] + (-16) * O[j][31] + add) >> shift));
		dst[17][j] = ((((41) * O[j][0] + (14) * O[j][1] + (-22) * O[j][2] + (-44) * O[j][3] + (-37) * O[j][4] + (-6) * O[j][5] + (30) * O[j][6] + (45) * O[j][7] + (31) * O[j][8] + (-3) * O[j][9] + (-36) * O[j][10] + (-45) * O[j][11] + (-24) * O[j][12] + (12) * O[j][13] + (40) * O[j][14] + (42) * O[j][15] + (16) * O[j][16] + (-20) * O[j][17] + (-44) * O[j][18] + (-38) * O[j][19] + (-8) * O[j][20] + (28) * O[j][21] + (45) * O[j][22] + (33) * O[j][23] + (-1) * O[j][24] + (-34) * O[j][25] + (-45) * O[j][26] + (-26) * O[j][27] + (10) * O[j][28] + (39) * O[j][29] + (43) * O[j][30] + (18) * O[j][31] + add) >> shift));
		dst[19][j] = ((((40) * O[j][0] + (8) * O[j][1] + (-31) * O[j][2] + (-45) * O[j][3] + (-22) * O[j][4] + (18) * O[j][5] + (44) * O[j][6] + (34) * O[j][7] + (-3) * O[j][8] + (-38) * O[j][9] + (-42) * O[j][10] + (-12) * O[j][11] + (28) * O[j][12] + (45) * O[j][13] + (26) * O[j][14] + (-14) * O[j][15] + (-43) * O[j][16] + (-37) * O[j][17] + (-1) * O[j][18] + (36) * O[j][19] + (44) * O[j][20] + (16) * O[j][21] + (-24) * O[j][22] + (-45) * O[j][23] + (-30) * O[j][24] + (10) * O[j][25] + (41) * O[j][26] + (39) * O[j][27] + (6) * O[j][28] + (-33) * O[j][29] + (-45) * O[j][30] + (-20) * O[j][31] + add) >> shift));
		dst[21][j] = ((((39) * O[j][0] + (1) * O[j][1] + (-38) * O[j][2] + (-40) * O[j][3] + (-3) * O[j][4] + (37) * O[j][5] + (41) * O[j][6] + (6) * O[j][7] + (-36) * O[j][8] + (-42) * O[j][9] + (-8) * O[j][10] + (34) * O[j][11] + (43) * O[j][12] + (10) * O[j][13] + (-33) * O[j][14] + (-44) * O[j][15] + (-12) * O[j][16] + (31) * O[j][17] + (44) * O[j][18] + (14) * O[j][19] + (-30) * O[j][20] + (-45) * O[j][21] + (-16) * O[j][22] + (28) * O[j][23] + (45) * O[j][24] + (18) * O[j][25] + (-26) * O[j][26] + (-45) * O[j][27] + (-20) * O[j][28] + (24) * O[j][29] + (45) * O[j][30] + (22) * O[j][31] + add) >> shift));
		dst[23][j] = ((((38) * O[j][0] + (-6) * O[j][1] + (-43) * O[j][2] + (-31) * O[j][3] + (16) * O[j][4] + (45) * O[j][5] + (22) * O[j][6] + (-26) * O[j][7] + (-45) * O[j][8] + (-12) * O[j][9] + (34) * O[j][10] + (41) * O[j][11] + (1) * O[j][12] + (-40) * O[j][13] + (-36) * O[j][14] + (10) * O[j][15] + (44) * O[j][16] + (28) * O[j][17] + (-20) * O[j][18] + (-45) * O[j][19] + (-18) * O[j][20] + (30) * O[j][21] + (44) * O[j][22] + (8) * O[j][23] + (-37) * O[j][24] + (-39) * O[j][25] + (3) * O[j][26] + (42) * O[j][27] + (33) * O[j][28] + (-14) * O[j][29] + (-45) * O[j][30] + (-24) * O[j][31] + add) >> shift));
		dst[25][j] = ((((37) * O[j][0] + (-12) * O[j][1] + (-45) * O[j][2] + (-18) * O[j][3] + (33) * O[j][4] + (40) * O[j][5] + (-6) * O[j][6] + (-44) * O[j][7] + (-24) * O[j][8] + (28) * O[j][9] + (43) * O[j][10] + (1) * O[j][11] + (-42) * O[j][12] + (-30) * O[j][13] + (22) * O[j][14] + (45) * O[j][15] + (8) * O[j][16] + (-39) * O[j][17] + (-34) * O[j][18] + (16) * O[j][19] + (45) * O[j][20] + (14) * O[j][21] + (-36) * O[j][22] + (-38) * O[j][23] + (10) * O[j][24] + (45) * O[j][25] + (20) * O[j][26] + (-31) * O[j][27] + (-41) * O[j][28] + (3) * O[j][29] + (44) * O[j][30] + (26) * O[j][31] + add) >> shift));
		dst[27][j] = ((((36) * O[j][0] + (-18) * O[j][1] + (-45) * O[j][2] + (-3) * O[j][3] + (43) * O[j][4] + (24) * O[j][5] + (-31) * O[j][6] + (-39) * O[j][7] + (12) * O[j][8] + (45) * O[j][9] + (10) * O[j][10] + (-40) * O[j][11] + (-30) * O[j][12] + (26) * O[j][13] + (42) * O[j][14] + (-6) * O[j][15] + (-45) * O[j][16] + (-16) * O[j][17] + (37) * O[j][18] + (34) * O[j][19] + (-20) * O[j][20] + (-44) * O[j][21] + (-1) * O[j][22] + (44) * O[j][23] + (22) * O[j][24] + (-33) * O[j][25] + (-38) * O[j][26] + (14) * O[j][27] + (45) * O[j][28] + (8) * O[j][29] + (-41) * O[j][30] + (-28) * O[j][31] + add) >> shift));
		dst[29][j] = ((((34) * O[j][0] + (-24) * O[j][1] + (-41) * O[j][2] + (12) * O[j][3] + (45) * O[j][4] + (1) * O[j][5] + (-45) * O[j][6] + (-14) * O[j][7] + (40) * O[j][8] + (26) * O[j][9] + (-33) * O[j][10] + (-36) * O[j][11] + (22) * O[j][12] + (42) * O[j][13] + (-10) * O[j][14] + (-45) * O[j][15] + (-3) * O[j][16] + (44) * O[j][17] + (16) * O[j][18] + (-39) * O[j][19] + (-28) * O[j][20] + (31) * O[j][21] + (37) * O[j][22] + (-20) * O[j][23] + (-43) * O[j][24] + (8) * O[j][25] + (45) * O[j][26] + (6) * O[j][27] + (-44) * O[j][28] + (-18) * O[j][29] + (38) * O[j][30] + (30) * O[j][31] + add) >> shift));
		dst[31][j] = ((((33) * O[j][0] + (-30) * O[j][1] + (-36) * O[j][2] + (26) * O[j][3] + (38) * O[j][4] + (-22) * O[j][5] + (-40) * O[j][6] + (18) * O[j][7] + (42) * O[j][8] + (-14) * O[j][9] + (-44) * O[j][10] + (10) * O[j][11] + (45) * O[j][12] + (-6) * O[j][13] + (-45) * O[j][14] + (1) * O[j][15] + (45) * O[j][16] + (3) * O[j][17] + (-45) * O[j][18] + (-8) * O[j][19] + (44) * O[j][20] + (12) * O[j][21] + (-43) * O[j][22] + (-16) * O[j][23] + (41) * O[j][24] + (20) * O[j][25] + (-39) * O[j][26] + (-24) * O[j][27] + (37) * O[j][28] + (28) * O[j][29] + (-34) * O[j][30] + (-31) * O[j][31] + add) >> shift));
		dst[33][j] = ((((31) * O[j][0] + (-34) * O[j][1] + (-28) * O[j][2] + (37) * O[j][3] + (24) * O[j][4] + (-39) * O[j][5] + (-20) * O[j][6] + (41) * O[j][7] + (16) * O[j][8] + (-43) * O[j][9] + (-12) * O[j][10] + (44) * O[j][11] + (8) * O[j][12] + (-45) * O[j][13] + (-3) * O[j][14] + (45) * O[j][15] + (-1) * O[j][16] + (-45) * O[j][17] + (6) * O[j][18] + (45) * O[j][19] + (-10) * O[j][20] + (-44) * O[j][21] + (14) * O[j][22] + (42) * O[j][23] + (-18) * O[j][24] + (-40) * O[j][25] + (22) * O[j][26] + (38) * O[j][27] + (-26) * O[j][28] + (-36) * O[j][29] + (30) * O[j][30] + (33) * O[j][31] + add) >> shift));
		dst[35][j] = ((((30) * O[j][0] + (-38) * O[j][1] + (-18) * O[j][2] + (44) * O[j][3] + (6) * O[j][4] + (-45) * O[j][5] + (8) * O[j][6] + (43) * O[j][7] + (-20) * O[j][8] + (-37) * O[j][9] + (31) * O[j][10] + (28) * O[j][11] + (-39) * O[j][12] + (-16) * O[j][13] + (44) * O[j][14] + (3) * O[j][15] + (-45) * O[j][16] + (10) * O[j][17] + (42) * O[j][18] + (-22) * O[j][19] + (-36) * O[j][20] + (33) * O[j][21] + (26) * O[j][22] + (-40) * O[j][23] + (-14) * O[j][24] + (45) * O[j][25] + (1) * O[j][26] + (-45) * O[j][27] + (12) * O[j][28] + (41) * O[j][29] + (-24) * O[j][30] + (-34) * O[j][31] + add) >> shift));
		dst[37][j] = ((((28) * O[j][0] + (-41) * O[j][1] + (-8) * O[j][2] + (45) * O[j][3] + (-14) * O[j][4] + (-38) * O[j][5] + (33) * O[j][6] + (22) * O[j][7] + (-44) * O[j][8] + (-1) * O[j][9] + (44) * O[j][10] + (-20) * O[j][11] + (-34) * O[j][12] + (37) * O[j][13] + (16) * O[j][14] + (-45) * O[j][15] + (6) * O[j][16] + (42) * O[j][17] + (-26) * O[j][18] + (-30) * O[j][19] + (40) * O[j][20] + (10) * O[j][21] + (-45) * O[j][22] + (12) * O[j][23] + (39) * O[j][24] + (-31) * O[j][25] + (-24) * O[j][26] + (43) * O[j][27] + (3) * O[j][28] + (-45) * O[j][29] + (18) * O[j][30] + (36) * O[j][31] + add) >> shift));
		dst[39][j] = ((((26) * O[j][0] + (-44) * O[j][1] + (3) * O[j][2] + (41) * O[j][3] + (-31) * O[j][4] + (-20) * O[j][5] + (45) * O[j][6] + (-10) * O[j][7] + (-38) * O[j][8] + (36) * O[j][9] + (14) * O[j][10] + (-45) * O[j][11] + (16) * O[j][12] + (34) * O[j][13] + (-39) * O[j][14] + (-8) * O[j][15] + (45) * O[j][16] + (-22) * O[j][17] + (-30) * O[j][18] + (42) * O[j][19] + (1) * O[j][20] + (-43) * O[j][21] + (28) * O[j][22] + (24) * O[j][23] + (-44) * O[j][24] + (6) * O[j][25] + (40) * O[j][26] + (-33) * O[j][27] + (-18) * O[j][28] + (45) * O[j][29] + (-12) * O[j][30] + (-37) * O[j][31] + add) >> shift));
		dst[41][j] = ((((24) * O[j][0] + (-45) * O[j][1] + (14) * O[j][2] + (33) * O[j][3] + (-42) * O[j][4] + (3) * O[j][5] + (39) * O[j][6] + (-37) * O[j][7] + (-8) * O[j][8] + (44) * O[j][9] + (-30) * O[j][10] + (-18) * O[j][11] + (45) * O[j][12] + (-20) * O[j][13] + (-28) * O[j][14] + (44) * O[j][15] + (-10) * O[j][16] + (-36) * O[j][17] + (40) * O[j][18] + (1) * O[j][19] + (-41) * O[j][20] + (34) * O[j][21] + (12) * O[j][22] + (-45) * O[j][23] + (26) * O[j][24] + (22) * O[j][25] + (-45) * O[j][26] + (16) * O[j][27] + (31) * O[j][28] + (-43) * O[j][29] + (6) * O[j][30] + (38) * O[j][31] + add) >> shift));
		dst[43][j] = ((((22) * O[j][0] + (-45) * O[j][1] + (24) * O[j][2] + (20) * O[j][3] + (-45) * O[j][4] + (26) * O[j][5] + (18) * O[j][6] + (-45) * O[j][7] + (28) * O[j][8] + (16) * O[j][9] + (-45) * O[j][10] + (30) * O[j][11] + (14) * O[j][12] + (-44) * O[j][13] + (31) * O[j][14] + (12) * O[j][15] + (-44) * O[j][16] + (33) * O[j][17] + (10) * O[j][18] + (-43) * O[j][19] + (34) * O[j][20] + (8) * O[j][21] + (-42) * O[j][22] + (36) * O[j][23] + (6) * O[j][24] + (-41) * O[j][25] + (37) * O[j][26] + (3) * O[j][27] + (-40) * O[j][28] + (38) * O[j][29] + (1) * O[j][30] + (-39) * O[j][31] + add) >> shift));
		dst[45][j] = ((((20) * O[j][0] + (-45) * O[j][1] + (33) * O[j][2] + (6) * O[j][3] + (-39) * O[j][4] + (41) * O[j][5] + (-10) * O[j][6] + (-30) * O[j][7] + (45) * O[j][8] + (-24) * O[j][9] + (-16) * O[j][10] + (44) * O[j][11] + (-36) * O[j][12] + (-1) * O[j][13] + (37) * O[j][14] + (-43) * O[j][15] + (14) * O[j][16] + (26) * O[j][17] + (-45) * O[j][18] + (28) * O[j][19] + (12) * O[j][20] + (-42) * O[j][21] + (38) * O[j][22] + (-3) * O[j][23] + (-34) * O[j][24] + (44) * O[j][25] + (-18) * O[j][26] + (-22) * O[j][27] + (45) * O[j][28] + (-31) * O[j][29] + (-8) * O[j][30] + (40) * O[j][31] + add) >> shift));
		dst[47][j] = ((((18) * O[j][0] + (-43) * O[j][1] + (39) * O[j][2] + (-10) * O[j][3] + (-26) * O[j][4] + (45) * O[j][5] + (-34) * O[j][6] + (1) * O[j][7] + (33) * O[j][8] + (-45) * O[j][9] + (28) * O[j][10] + (8) * O[j][11] + (-38) * O[j][12] + (44) * O[j][13] + (-20) * O[j][14] + (-16) * O[j][15] + (42) * O[j][16] + (-40) * O[j][17] + (12) * O[j][18] + (24) * O[j][19] + (-45) * O[j][20] + (36) * O[j][21] + (-3) * O[j][22] + (-31) * O[j][23] + (45) * O[j][24] + (-30) * O[j][25] + (-6) * O[j][26] + (37) * O[j][27] + (-44) * O[j][28] + (22) * O[j][29] + (14) * O[j][30] + (-41) * O[j][31] + add) >> shift));
		dst[49][j] = ((((16) * O[j][0] + (-40) * O[j][1] + (44) * O[j][2] + (-24) * O[j][3] + (-8) * O[j][4] + (36) * O[j][5] + (-45) * O[j][6] + (31) * O[j][7] + (-1) * O[j][8] + (-30) * O[j][9] + (45) * O[j][10] + (-37) * O[j][11] + (10) * O[j][12] + (22) * O[j][13] + (-43) * O[j][14] + (41) * O[j][15] + (-18) * O[j][16] + (-14) * O[j][17] + (39) * O[j][18] + (-44) * O[j][19] + (26) * O[j][20] + (6) * O[j][21] + (-34) * O[j][22] + (45) * O[j][23] + (-33) * O[j][24] + (3) * O[j][25] + (28) * O[j][26] + (-45) * O[j][27] + (38) * O[j][28] + (-12) * O[j][29] + (-20) * O[j][30] + (42) * O[j][31] + add) >> shift));
		dst[51][j] = ((((14) * O[j][0] + (-37) * O[j][1] + (45) * O[j][2] + (-36) * O[j][3] + (12) * O[j][4] + (16) * O[j][5] + (-38) * O[j][6] + (45) * O[j][7] + (-34) * O[j][8] + (10) * O[j][9] + (18) * O[j][10] + (-39) * O[j][11] + (45) * O[j][12] + (-33) * O[j][13] + (8) * O[j][14] + (20) * O[j][15] + (-40) * O[j][16] + (45) * O[j][17] + (-31) * O[j][18] + (6) * O[j][19] + (22) * O[j][20] + (-41) * O[j][21] + (44) * O[j][22] + (-30) * O[j][23] + (3) * O[j][24] + (24) * O[j][25] + (-42) * O[j][26] + (44) * O[j][27] + (-28) * O[j][28] + (1) * O[j][29] + (26) * O[j][30] + (-43) * O[j][31] + add) >> shift));
		dst[53][j] = ((((12) * O[j][0] + (-33) * O[j][1] + (44) * O[j][2] + (-43) * O[j][3] + (30) * O[j][4] + (-8) * O[j][5] + (-16) * O[j][6] + (36) * O[j][7] + (-45) * O[j][8] + (41) * O[j][9] + (-26) * O[j][10] + (3) * O[j][11] + (20) * O[j][12] + (-38) * O[j][13] + (45) * O[j][14] + (-39) * O[j][15] + (22) * O[j][16] + (1) * O[j][17] + (-24) * O[j][18] + (40) * O[j][19] + (-45) * O[j][20] + (37) * O[j][21] + (-18) * O[j][22] + (-6) * O[j][23] + (28) * O[j][24] + (-42) * O[j][25] + (45) * O[j][26] + (-34) * O[j][27] + (14) * O[j][28] + (10) * O[j][29] + (-31) * O[j][30] + (44) * O[j][31] + add) >> shift));
		dst[55][j] = ((((10) * O[j][0] + (-28) * O[j][1] + (40) * O[j][2] + (-45) * O[j][3] + (41) * O[j][4] + (-30) * O[j][5] + (12) * O[j][6] + (8) * O[j][7] + (-26) * O[j][8] + (39) * O[j][9] + (-45) * O[j][10] + (42) * O[j][11] + (-31) * O[j][12] + (14) * O[j][13] + (6) * O[j][14] + (-24) * O[j][15] + (38) * O[j][16] + (-45) * O[j][17] + (43) * O[j][18] + (-33) * O[j][19] + (16) * O[j][20] + (3) * O[j][21] + (-22) * O[j][22] + (37) * O[j][23] + (-45) * O[j][24] + (44) * O[j][25] + (-34) * O[j][26] + (18) * O[j][27] + (1) * O[j][28] + (-20) * O[j][29] + (36) * O[j][30] + (-44) * O[j][31] + add) >> shift));
		dst[57][j] = ((((8) * O[j][0] + (-22) * O[j][1] + (34) * O[j][2] + (-42) * O[j][3] + (45) * O[j][4] + (-43) * O[j][5] + (36) * O[j][6] + (-24) * O[j][7] + (10) * O[j][8] + (6) * O[j][9] + (-20) * O[j][10] + (33) * O[j][11] + (-41) * O[j][12] + (45) * O[j][13] + (-44) * O[j][14] + (37) * O[j][15] + (-26) * O[j][16] + (12) * O[j][17] + (3) * O[j][18] + (-18) * O[j][19] + (31) * O[j][20] + (-40) * O[j][21] + (45) * O[j][22] + (-44) * O[j][23] + (38) * O[j][24] + (-28) * O[j][25] + (14) * O[j][26] + (1) * O[j][27] + (-16) * O[j][28] + (30) * O[j][29] + (-39) * O[j][30] + (45) * O[j][31] + add) >> shift));
		dst[59][j] = ((((6) * O[j][0] + (-16) * O[j][1] + (26) * O[j][2] + (-34) * O[j][3] + (40) * O[j][4] + (-44) * O[j][5] + (45) * O[j][6] + (-44) * O[j][7] + (39) * O[j][8] + (-33) * O[j][9] + (24) * O[j][10] + (-14) * O[j][11] + (3) * O[j][12] + (8) * O[j][13] + (-18) * O[j][14] + (28) * O[j][15] + (-36) * O[j][16] + (41) * O[j][17] + (-45) * O[j][18] + (45) * O[j][19] + (-43) * O[j][20] + (38) * O[j][21] + (-31) * O[j][22] + (22) * O[j][23] + (-12) * O[j][24] + (1) * O[j][25] + (10) * O[j][26] + (-20) * O[j][27] + (30) * O[j][28] + (-37) * O[j][29] + (42) * O[j][30] + (-45) * O[j][31] + add) >> shift));
		dst[61][j] = ((((3) * O[j][0] + (-10) * O[j][1] + (16) * O[j][2] + (-22) * O[j][3] + (28) * O[j][4] + (-33) * O[j][5] + (37) * O[j][6] + (-40) * O[j][7] + (43) * O[j][8] + (-45) * O[j][9] + (45) * O[j][10] + (-45) * O[j][11] + (44) * O[j][12] + (-41) * O[j][13] + (38) * O[j][14] + (-34) * O[j][15] + (30) * O[j][16] + (-24) * O[j][17] + (18) * O[j][18] + (-12) * O[j][19] + (6) * O[j][20] + (1) * O[j][21] + (-8) * O[j][22] + (14) * O[j][23] + (-20) * O[j][24] + (26) * O[j][25] + (-31) * O[j][26] + (36) * O[j][27] + (-39) * O[j][28] + (42) * O[j][29] + (-44) * O[j][30] + (45) * O[j][31] + add) >> shift));
		dst[63][j] = ((((1) * O[j][0] + (-3) * O[j][1] + (6) * O[j][2] + (-8) * O[j][3] + (10) * O[j][4] + (-12) * O[j][5] + (14) * O[j][6] + (-16) * O[j][7] + (18) * O[j][8] + (-20) * O[j][9] + (22) * O[j][10] + (-24) * O[j][11] + (26) * O[j][12] + (-28) * O[j][13] + (30) * O[j][14] + (-31) * O[j][15] + (33) * O[j][16] + (-34) * O[j][17] + (36) * O[j][18] + (-37) * O[j][19] + (38) * O[j][20] + (-39) * O[j][21] + (40) * O[j][22] + (-41) * O[j][23] + (42) * O[j][24] + (-43) * O[j][25] + (44) * O[j][26] + (-44) * O[j][27] + (45) * O[j][28] + (-45) * O[j][29] + (45) * O[j][30] + (-45) * O[j][31] + add) >> shift));

	}
#endif
}

/*  IDCT core  */
void TR_FUNC_NAME(inv_dct_col, W, H)(s16 coeff[H][W], s16 block[TMP_SIZE][TMP_SIZE], U4 shift)
{
	U7 size = MAX_SIZE;
	U8 size_b = size - 1;
#if(H == 2)
#pragma HLS ARRAY_PARTITION variable=coeff complete dim=0
#pragma HLS ARRAY_PARTITION variable=block complete dim=0
	int E, O;
	int rnd_factor = 1 << (shift - 1);

	for (int i = 0; i < W; i++){
		E = 32 * coeff[0][i];
		O = 32 * coeff[1][i];
		block[i][0] = Clip3(-(1 << 15), (1 << 15) - 1, (E + O + rnd_factor) >> shift);
		block[i][1] = Clip3(-(1 << 15), (1 << 15) - 1, (E - O + rnd_factor) >> shift);
	}
#elif(H == 4)
#pragma HLS ARRAY_PARTITION variable=coeff complete dim=0
#pragma HLS ARRAY_PARTITION variable=block complete dim=0

	int E[2], O[2];
	int rnd_factor = 1 << (shift - 1);

	for (int i = 0; i < W; i++){
		O[0] = (42) * coeff[1][i] + (17) * coeff[3][i];
		O[1] = (17) * coeff[1][i] + (-42) * coeff[3][i];
		E[0] = (32) * coeff[0][i] + (32) * coeff[2][i];
		E[1] = (32) * coeff[0][i] + (-32) * coeff[2][i];
		block[i][0] = Clip3(-(1 << 15), (1 << 15) - 1, (E[0] + O[0] + rnd_factor) >> shift);
		block[i][1] = Clip3(-(1 << 15), (1 << 15) - 1, (E[1] + O[1] + rnd_factor) >> shift);
		block[i][2] = Clip3(-(1 << 15), (1 << 15) - 1, (E[1] - O[1] + rnd_factor) >> shift);
		block[i][3] = Clip3(-(1 << 15), (1 << 15) - 1, (E[0] - O[0] + rnd_factor) >> shift);
	}
#elif(H == 8)
#pragma HLS ARRAY_PARTITION variable=coeff complete dim=0
#pragma HLS ARRAY_PARTITION variable=block complete dim=0

	int E[4], O[4];
	int EE[2], EO[2];
	int rnd_factor = 1 << (shift - 1);
	int k;
	for (int i = 0; i < W; i++){
		O[0] = (44) * coeff[1][i] + (38) * coeff[3][i] + (25) * coeff[5][i] + (9) * coeff[7][i];
		O[1] = (38) * coeff[1][i] + (-9) * coeff[3][i] + (-44) * coeff[5][i] + (-25) * coeff[7][i];
		O[2] = (25) * coeff[1][i] + (-44) * coeff[3][i] + (9) * coeff[5][i] + (38) * coeff[7][i];
		O[3] = (9) * coeff[1][i] + (-25) * coeff[3][i] + (38) * coeff[5][i] + (-44) * coeff[7][i];

		EO[0] = (42) * coeff[2][i] + (17) * coeff[6][i];
		EO[1] = (17) * coeff[2][i] + (-42) * coeff[6][i];
		EE[0] = (32) * coeff[0][i] + (32) * coeff[4][i];
		EE[1] = (32) * coeff[0][i] + (-32) * coeff[4][i];

		E[0] = EE[0] + EO[0];
		E[3] = EE[0] - EO[0];
		E[1] = EE[1] + EO[1];
		E[2] = EE[1] - EO[1];
		for (k = 0; k < 4; k++) {
			block[i][k] = Clip3(-(1 << 15), (1 << 15) - 1, ((int)(E[k] + O[k] + rnd_factor)) >> shift);
			block[i][k + 4] = Clip3(-(1 << 15), (1 << 15) - 1, ((int)(E[3 - k] - O[3 - k] + rnd_factor)) >> shift);

		}
	}
#elif (H == 16)
#pragma HLS ARRAY_PARTITION variable=coeff complete dim=0
#pragma HLS ARRAY_PARTITION variable=block complete dim=0

	int E[8], O[8];
	int EE[4], EO[4];
	int EEE[2], EEO[2];
	int rnd_factor = 1 << (shift - 1);
	int k;
	for (int i = 0; i < W; i++){
		O[0] = (45) * coeff[1][i] + (43) * coeff[3][i] + (40) * coeff[5][i] + (35) * coeff[7][i] + (29) * coeff[9][i] + (21) * coeff[11][i] + (13) * coeff[13][i] + (4) * coeff[15][i];
		O[1] = (43) * coeff[1][i] + (29) * coeff[3][i] + (4) * coeff[5][i] + (-21) * coeff[7][i] + (-40) * coeff[9][i] + (-45) * coeff[11][i] + (-35) * coeff[13][i] + (-13) * coeff[15][i];
		O[2] = (40) * coeff[1][i] + (4) * coeff[3][i] + (-35) * coeff[5][i] + (-43) * coeff[7][i] + (-13) * coeff[9][i] + (29) * coeff[11][i] + (45) * coeff[13][i] + (21) * coeff[15][i];
		O[3] = (35) * coeff[1][i] + (-21) * coeff[3][i] + (-43) * coeff[5][i] + (4) * coeff[7][i] + (45) * coeff[9][i] + (13) * coeff[11][i] + (-40) * coeff[13][i] + (-29) * coeff[15][i];
		O[4] = (29) * coeff[1][i] + (-40) * coeff[3][i] + (-13) * coeff[5][i] + (45) * coeff[7][i] + (-4) * coeff[9][i] + (-43) * coeff[11][i] + (21) * coeff[13][i] + (35) * coeff[15][i];
		O[5] = (21) * coeff[1][i] + (-45) * coeff[3][i] + (29) * coeff[5][i] + (13) * coeff[7][i] + (-43) * coeff[9][i] + (35) * coeff[11][i] + (4) * coeff[13][i] + (-40) * coeff[15][i];
		O[6] = (13) * coeff[1][i] + (-35) * coeff[3][i] + (45) * coeff[5][i] + (-40) * coeff[7][i] + (21) * coeff[9][i] + (4) * coeff[11][i] + (-29) * coeff[13][i] + (43) * coeff[15][i];
		O[7] = (4) * coeff[1][i] + (-13) * coeff[3][i] + (21) * coeff[5][i] + (-29) * coeff[7][i] + (35) * coeff[9][i] + (-40) * coeff[11][i] + (43) * coeff[13][i] + (-45) * coeff[15][i];

		EO[0] = (44) * coeff[2][i] + (38) * coeff[6][i] + (25) * coeff[10][i] + (9) * coeff[14][i];
		EO[1] = (38) * coeff[2][i] + (-9) * coeff[6][i] + (-44) * coeff[10][i] + (-25) * coeff[14][i];
		EO[2] = (25) * coeff[2][i] + (-44) * coeff[6][i] + (9) * coeff[10][i] + (38) * coeff[14][i];
		EO[3] = (9) * coeff[2][i] + (-25) * coeff[6][i] + (38) * coeff[10][i] + (-44) * coeff[14][i];

		EEO[0] = (42) * coeff[4][i] + (17) * coeff[12][i];
		EEE[0] = (32) * coeff[0][i] + (32) * coeff[8][i];
		EEO[1] = (17) * coeff[4][i] + (-42) * coeff[12][i];
		EEE[1] = (32) * coeff[0][i] + (-32) * coeff[8][i];

		for (k = 0; k < 2; k++) {
			EE[k] = EEE[k] + EEO[k];
			EE[k + 2] = EEE[1 - k] - EEO[1 - k];
		}
		for (k = 0; k < 4; k++) {
			E[k] = EE[k] + EO[k];
			E[k + 4] = EE[3 - k] - EO[3 - k];
		}
		for (k = 0; k < 8; k++) {
			block[i][k] = Clip3(-(1 << 15), (1 << 15) - 1, (E[k] + O[k] + rnd_factor) >> shift);
			block[i][k + 8] = Clip3(-(1 << 15), (1 << 15) - 1, (E[7 - k] - O[7 - k] + rnd_factor) >> shift);
		}
	}
#elif(H == 32)
#pragma HLS ARRAY_PARTITION variable=coeff cyclic factor=32 dim=2
#pragma HLS ARRAY_PARTITION variable=block cyclic factor=64 dim=2

	int E[16], O[16];
	int EE[8], EO[8];
	int EEE[4], EEO[4];
	int EEEE[2], EEEO[2];
	int rnd_factor = 1 << (shift - 1);
	int k;
	for (int i = 0; i < W; i++) {
		O[0] = (45) * coeff[1][i] + (45) * coeff[3][i] + (44) * coeff[5][i] + (43) * coeff[7][i] + (41) * coeff[9][i] + (39) * coeff[11][i] + (36) * coeff[13][i] + (34) * coeff[15][i] + (30) * coeff[17][i] + (27) * coeff[19][i] + (23) * coeff[21][i] + (19) * coeff[23][i] + (15) * coeff[25][i] + (11) * coeff[27][i] + (7) * coeff[29][i] + (2) * coeff[31][i];
		O[1] = (45) * coeff[1][i] + (41) * coeff[3][i] + (34) * coeff[5][i] + (23) * coeff[7][i] + (11) * coeff[9][i] + (-2) * coeff[11][i] + (-15) * coeff[13][i] + (-27) * coeff[15][i] + (-36) * coeff[17][i] + (-43) * coeff[19][i] + (-45) * coeff[21][i] + (-44) * coeff[23][i] + (-39) * coeff[25][i] + (-30) * coeff[27][i] + (-19) * coeff[29][i] + (-7) * coeff[31][i];
		O[2] = (44) * coeff[1][i] + (34) * coeff[3][i] + (15) * coeff[5][i] + (-7) * coeff[7][i] + (-27) * coeff[9][i] + (-41) * coeff[11][i] + (-45) * coeff[13][i] + (-39) * coeff[15][i] + (-23) * coeff[17][i] + (-2) * coeff[19][i] + (19) * coeff[21][i] + (36) * coeff[23][i] + (45) * coeff[25][i] + (43) * coeff[27][i] + (30) * coeff[29][i] + (11) * coeff[31][i];
		O[3] = (43) * coeff[1][i] + (23) * coeff[3][i] + (-7) * coeff[5][i] + (-34) * coeff[7][i] + (-45) * coeff[9][i] + (-36) * coeff[11][i] + (-11) * coeff[13][i] + (19) * coeff[15][i] + (41) * coeff[17][i] + (44) * coeff[19][i] + (27) * coeff[21][i] + (-2) * coeff[23][i] + (-30) * coeff[25][i] + (-45) * coeff[27][i] + (-39) * coeff[29][i] + (-15) * coeff[31][i];
		O[4] = (41) * coeff[1][i] + (11) * coeff[3][i] + (-27) * coeff[5][i] + (-45) * coeff[7][i] + (-30) * coeff[9][i] + (7) * coeff[11][i] + (39) * coeff[13][i] + (43) * coeff[15][i] + (15) * coeff[17][i] + (-23) * coeff[19][i] + (-45) * coeff[21][i] + (-34) * coeff[23][i] + (2) * coeff[25][i] + (36) * coeff[27][i] + (44) * coeff[29][i] + (19) * coeff[31][i];
		O[5] = (39) * coeff[1][i] + (-2) * coeff[3][i] + (-41) * coeff[5][i] + (-36) * coeff[7][i] + (7) * coeff[9][i] + (43) * coeff[11][i] + (34) * coeff[13][i] + (-11) * coeff[15][i] + (-44) * coeff[17][i] + (-30) * coeff[19][i] + (15) * coeff[21][i] + (45) * coeff[23][i] + (27) * coeff[25][i] + (-19) * coeff[27][i] + (-45) * coeff[29][i] + (-23) * coeff[31][i];
		O[6] = (36) * coeff[1][i] + (-15) * coeff[3][i] + (-45) * coeff[5][i] + (-11) * coeff[7][i] + (39) * coeff[9][i] + (34) * coeff[11][i] + (-19) * coeff[13][i] + (-45) * coeff[15][i] + (-7) * coeff[17][i] + (41) * coeff[19][i] + (30) * coeff[21][i] + (-23) * coeff[23][i] + (-44) * coeff[25][i] + (-2) * coeff[27][i] + (43) * coeff[29][i] + (27) * coeff[31][i];
		O[7] = (34) * coeff[1][i] + (-27) * coeff[3][i] + (-39) * coeff[5][i] + (19) * coeff[7][i] + (43) * coeff[9][i] + (-11) * coeff[11][i] + (-45) * coeff[13][i] + (2) * coeff[15][i] + (45) * coeff[17][i] + (7) * coeff[19][i] + (-44) * coeff[21][i] + (-15) * coeff[23][i] + (41) * coeff[25][i] + (23) * coeff[27][i] + (-36) * coeff[29][i] + (-30) * coeff[31][i];
		O[8] = (30) * coeff[1][i] + (-36) * coeff[3][i] + (-23) * coeff[5][i] + (41) * coeff[7][i] + (15) * coeff[9][i] + (-44) * coeff[11][i] + (-7) * coeff[13][i] + (45) * coeff[15][i] + (-2) * coeff[17][i] + (-45) * coeff[19][i] + (11) * coeff[21][i] + (43) * coeff[23][i] + (-19) * coeff[25][i] + (-39) * coeff[27][i] + (27) * coeff[29][i] + (34) * coeff[31][i];
		O[9] = (27) * coeff[1][i] + (-43) * coeff[3][i] + (-2) * coeff[5][i] + (44) * coeff[7][i] + (-23) * coeff[9][i] + (-30) * coeff[11][i] + (41) * coeff[13][i] + (7) * coeff[15][i] + (-45) * coeff[17][i] + (19) * coeff[19][i] + (34) * coeff[21][i] + (-39) * coeff[23][i] + (-11) * coeff[25][i] + (45) * coeff[27][i] + (-15) * coeff[29][i] + (-36) * coeff[31][i];
		O[10] = (23) * coeff[1][i] + (-45) * coeff[3][i] + (19) * coeff[5][i] + (27) * coeff[7][i] + (-45) * coeff[9][i] + (15) * coeff[11][i] + (30) * coeff[13][i] + (-44) * coeff[15][i] + (11) * coeff[17][i] + (34) * coeff[19][i] + (-43) * coeff[21][i] + (7) * coeff[23][i] + (36) * coeff[25][i] + (-41) * coeff[27][i] + (2) * coeff[29][i] + (39) * coeff[31][i];
		O[11] = (19) * coeff[1][i] + (-44) * coeff[3][i] + (36) * coeff[5][i] + (-2) * coeff[7][i] + (-34) * coeff[9][i] + (45) * coeff[11][i] + (-23) * coeff[13][i] + (-15) * coeff[15][i] + (43) * coeff[17][i] + (-39) * coeff[19][i] + (7) * coeff[21][i] + (30) * coeff[23][i] + (-45) * coeff[25][i] + (27) * coeff[27][i] + (11) * coeff[29][i] + (-41) * coeff[31][i];
		O[12] = (15) * coeff[1][i] + (-39) * coeff[3][i] + (45) * coeff[5][i] + (-30) * coeff[7][i] + (2) * coeff[9][i] + (27) * coeff[11][i] + (-44) * coeff[13][i] + (41) * coeff[15][i] + (-19) * coeff[17][i] + (-11) * coeff[19][i] + (36) * coeff[21][i] + (-45) * coeff[23][i] + (34) * coeff[25][i] + (-7) * coeff[27][i] + (-23) * coeff[29][i] + (43) * coeff[31][i];
		O[13] = (11) * coeff[1][i] + (-30) * coeff[3][i] + (43) * coeff[5][i] + (-45) * coeff[7][i] + (36) * coeff[9][i] + (-19) * coeff[11][i] + (-2) * coeff[13][i] + (23) * coeff[15][i] + (-39) * coeff[17][i] + (45) * coeff[19][i] + (-41) * coeff[21][i] + (27) * coeff[23][i] + (-7) * coeff[25][i] + (-15) * coeff[27][i] + (34) * coeff[29][i] + (-44) * coeff[31][i];
		O[14] = (7) * coeff[1][i] + (-19) * coeff[3][i] + (30) * coeff[5][i] + (-39) * coeff[7][i] + (44) * coeff[9][i] + (-45) * coeff[11][i] + (43) * coeff[13][i] + (-36) * coeff[15][i] + (27) * coeff[17][i] + (-15) * coeff[19][i] + (2) * coeff[21][i] + (11) * coeff[23][i] + (-23) * coeff[25][i] + (34) * coeff[27][i] + (-41) * coeff[29][i] + (45) * coeff[31][i];
		O[15] = (2) * coeff[1][i] + (-7) * coeff[3][i] + (11) * coeff[5][i] + (-15) * coeff[7][i] + (19) * coeff[9][i] + (-23) * coeff[11][i] + (27) * coeff[13][i] + (-30) * coeff[15][i] + (34) * coeff[17][i] + (-36) * coeff[19][i] + (39) * coeff[21][i] + (-41) * coeff[23][i] + (43) * coeff[25][i] + (-44) * coeff[27][i] + (45) * coeff[29][i] + (-45) * coeff[31][i];
		
		EO[0] = (45) * coeff[2][i] + (43) * coeff[6][i] + (40) * coeff[10][i] + (35) * coeff[14][i] + (29) * coeff[18][i] + (21) * coeff[22][i] + (13) * coeff[26][i] + (4) * coeff[30][i];
		EO[1] = (43) * coeff[2][i] + (29) * coeff[6][i] + (4) * coeff[10][i] + (-21) * coeff[14][i] + (-40) * coeff[18][i] + (-45) * coeff[22][i] + (-35) * coeff[26][i] + (-13) * coeff[30][i];
		EO[2] = (40) * coeff[2][i] + (4) * coeff[6][i] + (-35) * coeff[10][i] + (-43) * coeff[14][i] + (-13) * coeff[18][i] + (29) * coeff[22][i] + (45) * coeff[26][i] + (21) * coeff[30][i];
		EO[3] = (35) * coeff[2][i] + (-21) * coeff[6][i] + (-43) * coeff[10][i] + (4) * coeff[14][i] + (45) * coeff[18][i] + (13) * coeff[22][i] + (-40) * coeff[26][i] + (-29) * coeff[30][i];
		EO[4] = (29) * coeff[2][i] + (-40) * coeff[6][i] + (-13) * coeff[10][i] + (45) * coeff[14][i] + (-4) * coeff[18][i] + (-43) * coeff[22][i] + (21) * coeff[26][i] + (35) * coeff[30][i];
		EO[5] = (21) * coeff[2][i] + (-45) * coeff[6][i] + (29) * coeff[10][i] + (13) * coeff[14][i] + (-43) * coeff[18][i] + (35) * coeff[22][i] + (4) * coeff[26][i] + (-40) * coeff[30][i];
		EO[6] = (13) * coeff[2][i] + (-35) * coeff[6][i] + (45) * coeff[10][i] + (-40) * coeff[14][i] + (21) * coeff[18][i] + (4) * coeff[22][i] + (-29) * coeff[26][i] + (43) * coeff[30][i];
		EO[7] = (4) * coeff[2][i] + (-13) * coeff[6][i] + (21) * coeff[10][i] + (-29) * coeff[14][i] + (35) * coeff[18][i] + (-40) * coeff[22][i] + (43) * coeff[26][i] + (-45) * coeff[30][i];
		
		EEO[0] = (44) * coeff[4][i] + (38) * coeff[12][i] + (25) * coeff[20][i] + (9) * coeff[28][i];
		EEO[1] = (38) * coeff[4][i] + (-9) * coeff[12][i] + (-44) * coeff[20][i] + (-25) * coeff[28][i];
		EEO[2] = (25) * coeff[4][i] + (-44) * coeff[12][i] + (9) * coeff[20][i] + (38) * coeff[28][i];
		EEO[3] = (9) * coeff[4][i] + (-25) * coeff[12][i] + (38) * coeff[20][i] + (-44) * coeff[28][i];

		EEEO[0] = (42) * coeff[8][i] + (17) * coeff[24][i];
		EEEO[1] = (17) * coeff[8][i] + (-42) * coeff[24][i];
		EEEE[0] = (32) * coeff[0][i] + (32) * coeff[16][i];
		EEEE[1] = (32) * coeff[0][i] + (-32) * coeff[16][i];

		EEE[0] = EEEE[0] + EEEO[0];
		EEE[3] = EEEE[0] - EEEO[0];
		EEE[1] = EEEE[1] + EEEO[1];
		EEE[2] = EEEE[1] - EEEO[1];

		for (k = 0; k < 4; k++) {
			EE[k] = EEE[k] + EEO[k];
			EE[k + 4] = EEE[3 - k] - EEO[3 - k];
		}
		for (k = 0; k < 8; k++) {
			E[k] = EE[k] + EO[k];
			E[k + 8] = EE[7 - k] - EO[7 - k];
		}
		for (k = 0; k < 16; k++) {
			block[(i + k) & size_b][k] = Clip3(-(1 << 15), (1 << 15) - 1, (E[k] + O[k] + rnd_factor) >> shift);
			block[(i + k + 16) & size_b][k + 16] = Clip3(-(1 << 15), (1 << 15) - 1, (E[15 - k] - O[15 - k] + rnd_factor) >> shift);
		}
	}
#else
#pragma HLS ARRAY_PARTITION variable=coeff cyclic factor=64 dim=2
#pragma HLS ARRAY_PARTITION variable=block cyclic factor=64 dim=2

int E[32], O[32];
int EE[16], EO[16];
int EEE[8], EEO[8];
int EEEE[4], EEEO[4];
int EEEEE[2], EEEEO[2];
int rnd_factor = 1 << (shift - 1);
int k;
for (int i = 0; i < W; i++){
	O[0] = (45) * coeff[1][i] + (45) * coeff[3][i] + (45) * coeff[5][i] + (45) * coeff[7][i] + (44) * coeff[9][i] + (44) * coeff[11][i] + (43) * coeff[13][i] + (42) * coeff[15][i] + (41) * coeff[17][i] + (40) * coeff[19][i] + (39) * coeff[21][i] + (38) * coeff[23][i] + (37) * coeff[25][i] + (36) * coeff[27][i] + (34) * coeff[29][i] + (33) * coeff[31][i] + (31) * coeff[33][i] + (30) * coeff[35][i] + (28) * coeff[37][i] + (26) * coeff[39][i] + (24) * coeff[41][i] + (22) * coeff[43][i] + (20) * coeff[45][i] + (18) * coeff[47][i] + (16) * coeff[49][i] + (14) * coeff[51][i] + (12) * coeff[53][i] + (10) * coeff[55][i] + (8) * coeff[57][i] + (6) * coeff[59][i] + (3) * coeff[61][i] + (1) * coeff[63][i];
	O[1] = (45) * coeff[1][i] + (44) * coeff[3][i] + (42) * coeff[5][i] + (39) * coeff[7][i] + (36) * coeff[9][i] + (31) * coeff[11][i] + (26) * coeff[13][i] + (20) * coeff[15][i] + (14) * coeff[17][i] + (8) * coeff[19][i] + (1) * coeff[21][i] + (-6) * coeff[23][i] + (-12) * coeff[25][i] + (-18) * coeff[27][i] + (-24) * coeff[29][i] + (-30) * coeff[31][i] + (-34) * coeff[33][i] + (-38) * coeff[35][i] + (-41) * coeff[37][i] + (-44) * coeff[39][i] + (-45) * coeff[41][i] + (-45) * coeff[43][i] + (-45) * coeff[45][i] + (-43) * coeff[47][i] + (-40) * coeff[49][i] + (-37) * coeff[51][i] + (-33) * coeff[53][i] + (-28) * coeff[55][i] + (-22) * coeff[57][i] + (-16) * coeff[59][i] + (-10) * coeff[61][i] + (-3) * coeff[63][i];
	O[2] = (45) * coeff[1][i] + (42) * coeff[3][i] + (37) * coeff[5][i] + (30) * coeff[7][i] + (20) * coeff[9][i] + (10) * coeff[11][i] + (-1) * coeff[13][i] + (-12) * coeff[15][i] + (-22) * coeff[17][i] + (-31) * coeff[19][i] + (-38) * coeff[21][i] + (-43) * coeff[23][i] + (-45) * coeff[25][i] + (-45) * coeff[27][i] + (-41) * coeff[29][i] + (-36) * coeff[31][i] + (-28) * coeff[33][i] + (-18) * coeff[35][i] + (-8) * coeff[37][i] + (3) * coeff[39][i] + (14) * coeff[41][i] + (24) * coeff[43][i] + (33) * coeff[45][i] + (39) * coeff[47][i] + (44) * coeff[49][i] + (45) * coeff[51][i] + (44) * coeff[53][i] + (40) * coeff[55][i] + (34) * coeff[57][i] + (26) * coeff[59][i] + (16) * coeff[61][i] + (6) * coeff[63][i];
	O[3] = (45) * coeff[1][i] + (39) * coeff[3][i] + (30) * coeff[5][i] + (16) * coeff[7][i] + (1) * coeff[9][i] + (-14) * coeff[11][i] + (-28) * coeff[13][i] + (-38) * coeff[15][i] + (-44) * coeff[17][i] + (-45) * coeff[19][i] + (-40) * coeff[21][i] + (-31) * coeff[23][i] + (-18) * coeff[25][i] + (-3) * coeff[27][i] + (12) * coeff[29][i] + (26) * coeff[31][i] + (37) * coeff[33][i] + (44) * coeff[35][i] + (45) * coeff[37][i] + (41) * coeff[39][i] + (33) * coeff[41][i] + (20) * coeff[43][i] + (6) * coeff[45][i] + (-10) * coeff[47][i] + (-24) * coeff[49][i] + (-36) * coeff[51][i] + (-43) * coeff[53][i] + (-45) * coeff[55][i] + (-42) * coeff[57][i] + (-34) * coeff[59][i] + (-22) * coeff[61][i] + (-8) * coeff[63][i];
	O[4] = (44) * coeff[1][i] + (36) * coeff[3][i] + (20) * coeff[5][i] + (1) * coeff[7][i] + (-18) * coeff[9][i] + (-34) * coeff[11][i] + (-44) * coeff[13][i] + (-45) * coeff[15][i] + (-37) * coeff[17][i] + (-22) * coeff[19][i] + (-3) * coeff[21][i] + (16) * coeff[23][i] + (33) * coeff[25][i] + (43) * coeff[27][i] + (45) * coeff[29][i] + (38) * coeff[31][i] + (24) * coeff[33][i] + (6) * coeff[35][i] + (-14) * coeff[37][i] + (-31) * coeff[39][i] + (-42) * coeff[41][i] + (-45) * coeff[43][i] + (-39) * coeff[45][i] + (-26) * coeff[47][i] + (-8) * coeff[49][i] + (12) * coeff[51][i] + (30) * coeff[53][i] + (41) * coeff[55][i] + (45) * coeff[57][i] + (40) * coeff[59][i] + (28) * coeff[61][i] + (10) * coeff[63][i];
	O[5] = (44) * coeff[1][i] + (31) * coeff[3][i] + (10) * coeff[5][i] + (-14) * coeff[7][i] + (-34) * coeff[9][i] + (-45) * coeff[11][i] + (-42) * coeff[13][i] + (-28) * coeff[15][i] + (-6) * coeff[17][i] + (18) * coeff[19][i] + (37) * coeff[21][i] + (45) * coeff[23][i] + (40) * coeff[25][i] + (24) * coeff[27][i] + (1) * coeff[29][i] + (-22) * coeff[31][i] + (-39) * coeff[33][i] + (-45) * coeff[35][i] + (-38) * coeff[37][i] + (-20) * coeff[39][i] + (3) * coeff[41][i] + (26) * coeff[43][i] + (41) * coeff[45][i] + (45) * coeff[47][i] + (36) * coeff[49][i] + (16) * coeff[51][i] + (-8) * coeff[53][i] + (-30) * coeff[55][i] + (-43) * coeff[57][i] + (-44) * coeff[59][i] + (-33) * coeff[61][i] + (-12) * coeff[63][i];
	O[6] = (43) * coeff[1][i] + (26) * coeff[3][i] + (-1) * coeff[5][i] + (-28) * coeff[7][i] + (-44) * coeff[9][i] + (-42) * coeff[11][i] + (-24) * coeff[13][i] + (3) * coeff[15][i] + (30) * coeff[17][i] + (44) * coeff[19][i] + (41) * coeff[21][i] + (22) * coeff[23][i] + (-6) * coeff[25][i] + (-31) * coeff[27][i] + (-45) * coeff[29][i] + (-40) * coeff[31][i] + (-20) * coeff[33][i] + (8) * coeff[35][i] + (33) * coeff[37][i] + (45) * coeff[39][i] + (39) * coeff[41][i] + (18) * coeff[43][i] + (-10) * coeff[45][i] + (-34) * coeff[47][i] + (-45) * coeff[49][i] + (-38) * coeff[51][i] + (-16) * coeff[53][i] + (12) * coeff[55][i] + (36) * coeff[57][i] + (45) * coeff[59][i] + (37) * coeff[61][i] + (14) * coeff[63][i];
	O[7] = (42) * coeff[1][i] + (20) * coeff[3][i] + (-12) * coeff[5][i] + (-38) * coeff[7][i] + (-45) * coeff[9][i] + (-28) * coeff[11][i] + (3) * coeff[13][i] + (33) * coeff[15][i] + (45) * coeff[17][i] + (34) * coeff[19][i] + (6) * coeff[21][i] + (-26) * coeff[23][i] + (-44) * coeff[25][i] + (-39) * coeff[27][i] + (-14) * coeff[29][i] + (18) * coeff[31][i] + (41) * coeff[33][i] + (43) * coeff[35][i] + (22) * coeff[37][i] + (-10) * coeff[39][i] + (-37) * coeff[41][i] + (-45) * coeff[43][i] + (-30) * coeff[45][i] + (1) * coeff[47][i] + (31) * coeff[49][i] + (45) * coeff[51][i] + (36) * coeff[53][i] + (8) * coeff[55][i] + (-24) * coeff[57][i] + (-44) * coeff[59][i] + (-40) * coeff[61][i] + (-16) * coeff[63][i];
	O[8] = (41) * coeff[1][i] + (14) * coeff[3][i] + (-22) * coeff[5][i] + (-44) * coeff[7][i] + (-37) * coeff[9][i] + (-6) * coeff[11][i] + (30) * coeff[13][i] + (45) * coeff[15][i] + (31) * coeff[17][i] + (-3) * coeff[19][i] + (-36) * coeff[21][i] + (-45) * coeff[23][i] + (-24) * coeff[25][i] + (12) * coeff[27][i] + (40) * coeff[29][i] + (42) * coeff[31][i] + (16) * coeff[33][i] + (-20) * coeff[35][i] + (-44) * coeff[37][i] + (-38) * coeff[39][i] + (-8) * coeff[41][i] + (28) * coeff[43][i] + (45) * coeff[45][i] + (33) * coeff[47][i] + (-1) * coeff[49][i] + (-34) * coeff[51][i] + (-45) * coeff[53][i] + (-26) * coeff[55][i] + (10) * coeff[57][i] + (39) * coeff[59][i] + (43) * coeff[61][i] + (18) * coeff[63][i];
	O[9] = (40) * coeff[1][i] + (8) * coeff[3][i] + (-31) * coeff[5][i] + (-45) * coeff[7][i] + (-22) * coeff[9][i] + (18) * coeff[11][i] + (44) * coeff[13][i] + (34) * coeff[15][i] + (-3) * coeff[17][i] + (-38) * coeff[19][i] + (-42) * coeff[21][i] + (-12) * coeff[23][i] + (28) * coeff[25][i] + (45) * coeff[27][i] + (26) * coeff[29][i] + (-14) * coeff[31][i] + (-43) * coeff[33][i] + (-37) * coeff[35][i] + (-1) * coeff[37][i] + (36) * coeff[39][i] + (44) * coeff[41][i] + (16) * coeff[43][i] + (-24) * coeff[45][i] + (-45) * coeff[47][i] + (-30) * coeff[49][i] + (10) * coeff[51][i] + (41) * coeff[53][i] + (39) * coeff[55][i] + (6) * coeff[57][i] + (-33) * coeff[59][i] + (-45) * coeff[61][i] + (-20) * coeff[63][i];
	O[10] = (39) * coeff[1][i] + (1) * coeff[3][i] + (-38) * coeff[5][i] + (-40) * coeff[7][i] + (-3) * coeff[9][i] + (37) * coeff[11][i] + (41) * coeff[13][i] + (6) * coeff[15][i] + (-36) * coeff[17][i] + (-42) * coeff[19][i] + (-8) * coeff[21][i] + (34) * coeff[23][i] + (43) * coeff[25][i] + (10) * coeff[27][i] + (-33) * coeff[29][i] + (-44) * coeff[31][i] + (-12) * coeff[33][i] + (31) * coeff[35][i] + (44) * coeff[37][i] + (14) * coeff[39][i] + (-30) * coeff[41][i] + (-45) * coeff[43][i] + (-16) * coeff[45][i] + (28) * coeff[47][i] + (45) * coeff[49][i] + (18) * coeff[51][i] + (-26) * coeff[53][i] + (-45) * coeff[55][i] + (-20) * coeff[57][i] + (24) * coeff[59][i] + (45) * coeff[61][i] + (22) * coeff[63][i];
	O[11] = (38) * coeff[1][i] + (-6) * coeff[3][i] + (-43) * coeff[5][i] + (-31) * coeff[7][i] + (16) * coeff[9][i] + (45) * coeff[11][i] + (22) * coeff[13][i] + (-26) * coeff[15][i] + (-45) * coeff[17][i] + (-12) * coeff[19][i] + (34) * coeff[21][i] + (41) * coeff[23][i] + (1) * coeff[25][i] + (-40) * coeff[27][i] + (-36) * coeff[29][i] + (10) * coeff[31][i] + (44) * coeff[33][i] + (28) * coeff[35][i] + (-20) * coeff[37][i] + (-45) * coeff[39][i] + (-18) * coeff[41][i] + (30) * coeff[43][i] + (44) * coeff[45][i] + (8) * coeff[47][i] + (-37) * coeff[49][i] + (-39) * coeff[51][i] + (3) * coeff[53][i] + (42) * coeff[55][i] + (33) * coeff[57][i] + (-14) * coeff[59][i] + (-45) * coeff[61][i] + (-24) * coeff[63][i];
	O[12] = (37) * coeff[1][i] + (-12) * coeff[3][i] + (-45) * coeff[5][i] + (-18) * coeff[7][i] + (33) * coeff[9][i] + (40) * coeff[11][i] + (-6) * coeff[13][i] + (-44) * coeff[15][i] + (-24) * coeff[17][i] + (28) * coeff[19][i] + (43) * coeff[21][i] + (1) * coeff[23][i] + (-42) * coeff[25][i] + (-30) * coeff[27][i] + (22) * coeff[29][i] + (45) * coeff[31][i] + (8) * coeff[33][i] + (-39) * coeff[35][i] + (-34) * coeff[37][i] + (16) * coeff[39][i] + (45) * coeff[41][i] + (14) * coeff[43][i] + (-36) * coeff[45][i] + (-38) * coeff[47][i] + (10) * coeff[49][i] + (45) * coeff[51][i] + (20) * coeff[53][i] + (-31) * coeff[55][i] + (-41) * coeff[57][i] + (3) * coeff[59][i] + (44) * coeff[61][i] + (26) * coeff[63][i];
	O[13] = (36) * coeff[1][i] + (-18) * coeff[3][i] + (-45) * coeff[5][i] + (-3) * coeff[7][i] + (43) * coeff[9][i] + (24) * coeff[11][i] + (-31) * coeff[13][i] + (-39) * coeff[15][i] + (12) * coeff[17][i] + (45) * coeff[19][i] + (10) * coeff[21][i] + (-40) * coeff[23][i] + (-30) * coeff[25][i] + (26) * coeff[27][i] + (42) * coeff[29][i] + (-6) * coeff[31][i] + (-45) * coeff[33][i] + (-16) * coeff[35][i] + (37) * coeff[37][i] + (34) * coeff[39][i] + (-20) * coeff[41][i] + (-44) * coeff[43][i] + (-1) * coeff[45][i] + (44) * coeff[47][i] + (22) * coeff[49][i] + (-33) * coeff[51][i] + (-38) * coeff[53][i] + (14) * coeff[55][i] + (45) * coeff[57][i] + (8) * coeff[59][i] + (-41) * coeff[61][i] + (-28) * coeff[63][i];
	O[14] = (34) * coeff[1][i] + (-24) * coeff[3][i] + (-41) * coeff[5][i] + (12) * coeff[7][i] + (45) * coeff[9][i] + (1) * coeff[11][i] + (-45) * coeff[13][i] + (-14) * coeff[15][i] + (40) * coeff[17][i] + (26) * coeff[19][i] + (-33) * coeff[21][i] + (-36) * coeff[23][i] + (22) * coeff[25][i] + (42) * coeff[27][i] + (-10) * coeff[29][i] + (-45) * coeff[31][i] + (-3) * coeff[33][i] + (44) * coeff[35][i] + (16) * coeff[37][i] + (-39) * coeff[39][i] + (-28) * coeff[41][i] + (31) * coeff[43][i] + (37) * coeff[45][i] + (-20) * coeff[47][i] + (-43) * coeff[49][i] + (8) * coeff[51][i] + (45) * coeff[53][i] + (6) * coeff[55][i] + (-44) * coeff[57][i] + (-18) * coeff[59][i] + (38) * coeff[61][i] + (30) * coeff[63][i];
	O[15] = (33) * coeff[1][i] + (-30) * coeff[3][i] + (-36) * coeff[5][i] + (26) * coeff[7][i] + (38) * coeff[9][i] + (-22) * coeff[11][i] + (-40) * coeff[13][i] + (18) * coeff[15][i] + (42) * coeff[17][i] + (-14) * coeff[19][i] + (-44) * coeff[21][i] + (10) * coeff[23][i] + (45) * coeff[25][i] + (-6) * coeff[27][i] + (-45) * coeff[29][i] + (1) * coeff[31][i] + (45) * coeff[33][i] + (3) * coeff[35][i] + (-45) * coeff[37][i] + (-8) * coeff[39][i] + (44) * coeff[41][i] + (12) * coeff[43][i] + (-43) * coeff[45][i] + (-16) * coeff[47][i] + (41) * coeff[49][i] + (20) * coeff[51][i] + (-39) * coeff[53][i] + (-24) * coeff[55][i] + (37) * coeff[57][i] + (28) * coeff[59][i] + (-34) * coeff[61][i] + (-31) * coeff[63][i];
	O[16] = (31) * coeff[1][i] + (-34) * coeff[3][i] + (-28) * coeff[5][i] + (37) * coeff[7][i] + (24) * coeff[9][i] + (-39) * coeff[11][i] + (-20) * coeff[13][i] + (41) * coeff[15][i] + (16) * coeff[17][i] + (-43) * coeff[19][i] + (-12) * coeff[21][i] + (44) * coeff[23][i] + (8) * coeff[25][i] + (-45) * coeff[27][i] + (-3) * coeff[29][i] + (45) * coeff[31][i] + (-1) * coeff[33][i] + (-45) * coeff[35][i] + (6) * coeff[37][i] + (45) * coeff[39][i] + (-10) * coeff[41][i] + (-44) * coeff[43][i] + (14) * coeff[45][i] + (42) * coeff[47][i] + (-18) * coeff[49][i] + (-40) * coeff[51][i] + (22) * coeff[53][i] + (38) * coeff[55][i] + (-26) * coeff[57][i] + (-36) * coeff[59][i] + (30) * coeff[61][i] + (33) * coeff[63][i];
	O[17] = (30) * coeff[1][i] + (-38) * coeff[3][i] + (-18) * coeff[5][i] + (44) * coeff[7][i] + (6) * coeff[9][i] + (-45) * coeff[11][i] + (8) * coeff[13][i] + (43) * coeff[15][i] + (-20) * coeff[17][i] + (-37) * coeff[19][i] + (31) * coeff[21][i] + (28) * coeff[23][i] + (-39) * coeff[25][i] + (-16) * coeff[27][i] + (44) * coeff[29][i] + (3) * coeff[31][i] + (-45) * coeff[33][i] + (10) * coeff[35][i] + (42) * coeff[37][i] + (-22) * coeff[39][i] + (-36) * coeff[41][i] + (33) * coeff[43][i] + (26) * coeff[45][i] + (-40) * coeff[47][i] + (-14) * coeff[49][i] + (45) * coeff[51][i] + (1) * coeff[53][i] + (-45) * coeff[55][i] + (12) * coeff[57][i] + (41) * coeff[59][i] + (-24) * coeff[61][i] + (-34) * coeff[63][i];
	O[18] = (28) * coeff[1][i] + (-41) * coeff[3][i] + (-8) * coeff[5][i] + (45) * coeff[7][i] + (-14) * coeff[9][i] + (-38) * coeff[11][i] + (33) * coeff[13][i] + (22) * coeff[15][i] + (-44) * coeff[17][i] + (-1) * coeff[19][i] + (44) * coeff[21][i] + (-20) * coeff[23][i] + (-34) * coeff[25][i] + (37) * coeff[27][i] + (16) * coeff[29][i] + (-45) * coeff[31][i] + (6) * coeff[33][i] + (42) * coeff[35][i] + (-26) * coeff[37][i] + (-30) * coeff[39][i] + (40) * coeff[41][i] + (10) * coeff[43][i] + (-45) * coeff[45][i] + (12) * coeff[47][i] + (39) * coeff[49][i] + (-31) * coeff[51][i] + (-24) * coeff[53][i] + (43) * coeff[55][i] + (3) * coeff[57][i] + (-45) * coeff[59][i] + (18) * coeff[61][i] + (36) * coeff[63][i];
	O[19] = (26) * coeff[1][i] + (-44) * coeff[3][i] + (3) * coeff[5][i] + (41) * coeff[7][i] + (-31) * coeff[9][i] + (-20) * coeff[11][i] + (45) * coeff[13][i] + (-10) * coeff[15][i] + (-38) * coeff[17][i] + (36) * coeff[19][i] + (14) * coeff[21][i] + (-45) * coeff[23][i] + (16) * coeff[25][i] + (34) * coeff[27][i] + (-39) * coeff[29][i] + (-8) * coeff[31][i] + (45) * coeff[33][i] + (-22) * coeff[35][i] + (-30) * coeff[37][i] + (42) * coeff[39][i] + (1) * coeff[41][i] + (-43) * coeff[43][i] + (28) * coeff[45][i] + (24) * coeff[47][i] + (-44) * coeff[49][i] + (6) * coeff[51][i] + (40) * coeff[53][i] + (-33) * coeff[55][i] + (-18) * coeff[57][i] + (45) * coeff[59][i] + (-12) * coeff[61][i] + (-37) * coeff[63][i];
	O[20] = (24) * coeff[1][i] + (-45) * coeff[3][i] + (14) * coeff[5][i] + (33) * coeff[7][i] + (-42) * coeff[9][i] + (3) * coeff[11][i] + (39) * coeff[13][i] + (-37) * coeff[15][i] + (-8) * coeff[17][i] + (44) * coeff[19][i] + (-30) * coeff[21][i] + (-18) * coeff[23][i] + (45) * coeff[25][i] + (-20) * coeff[27][i] + (-28) * coeff[29][i] + (44) * coeff[31][i] + (-10) * coeff[33][i] + (-36) * coeff[35][i] + (40) * coeff[37][i] + (1) * coeff[39][i] + (-41) * coeff[41][i] + (34) * coeff[43][i] + (12) * coeff[45][i] + (-45) * coeff[47][i] + (26) * coeff[49][i] + (22) * coeff[51][i] + (-45) * coeff[53][i] + (16) * coeff[55][i] + (31) * coeff[57][i] + (-43) * coeff[59][i] + (6) * coeff[61][i] + (38) * coeff[63][i];
	O[21] = (22) * coeff[1][i] + (-45) * coeff[3][i] + (24) * coeff[5][i] + (20) * coeff[7][i] + (-45) * coeff[9][i] + (26) * coeff[11][i] + (18) * coeff[13][i] + (-45) * coeff[15][i] + (28) * coeff[17][i] + (16) * coeff[19][i] + (-45) * coeff[21][i] + (30) * coeff[23][i] + (14) * coeff[25][i] + (-44) * coeff[27][i] + (31) * coeff[29][i] + (12) * coeff[31][i] + (-44) * coeff[33][i] + (33) * coeff[35][i] + (10) * coeff[37][i] + (-43) * coeff[39][i] + (34) * coeff[41][i] + (8) * coeff[43][i] + (-42) * coeff[45][i] + (36) * coeff[47][i] + (6) * coeff[49][i] + (-41) * coeff[51][i] + (37) * coeff[53][i] + (3) * coeff[55][i] + (-40) * coeff[57][i] + (38) * coeff[59][i] + (1) * coeff[61][i] + (-39) * coeff[63][i];
	O[22] = (20) * coeff[1][i] + (-45) * coeff[3][i] + (33) * coeff[5][i] + (6) * coeff[7][i] + (-39) * coeff[9][i] + (41) * coeff[11][i] + (-10) * coeff[13][i] + (-30) * coeff[15][i] + (45) * coeff[17][i] + (-24) * coeff[19][i] + (-16) * coeff[21][i] + (44) * coeff[23][i] + (-36) * coeff[25][i] + (-1) * coeff[27][i] + (37) * coeff[29][i] + (-43) * coeff[31][i] + (14) * coeff[33][i] + (26) * coeff[35][i] + (-45) * coeff[37][i] + (28) * coeff[39][i] + (12) * coeff[41][i] + (-42) * coeff[43][i] + (38) * coeff[45][i] + (-3) * coeff[47][i] + (-34) * coeff[49][i] + (44) * coeff[51][i] + (-18) * coeff[53][i] + (-22) * coeff[55][i] + (45) * coeff[57][i] + (-31) * coeff[59][i] + (-8) * coeff[61][i] + (40) * coeff[63][i];
	O[23] = (18) * coeff[1][i] + (-43) * coeff[3][i] + (39) * coeff[5][i] + (-10) * coeff[7][i] + (-26) * coeff[9][i] + (45) * coeff[11][i] + (-34) * coeff[13][i] + (1) * coeff[15][i] + (33) * coeff[17][i] + (-45) * coeff[19][i] + (28) * coeff[21][i] + (8) * coeff[23][i] + (-38) * coeff[25][i] + (44) * coeff[27][i] + (-20) * coeff[29][i] + (-16) * coeff[31][i] + (42) * coeff[33][i] + (-40) * coeff[35][i] + (12) * coeff[37][i] + (24) * coeff[39][i] + (-45) * coeff[41][i] + (36) * coeff[43][i] + (-3) * coeff[45][i] + (-31) * coeff[47][i] + (45) * coeff[49][i] + (-30) * coeff[51][i] + (-6) * coeff[53][i] + (37) * coeff[55][i] + (-44) * coeff[57][i] + (22) * coeff[59][i] + (14) * coeff[61][i] + (-41) * coeff[63][i];
	O[24] = (16) * coeff[1][i] + (-40) * coeff[3][i] + (44) * coeff[5][i] + (-24) * coeff[7][i] + (-8) * coeff[9][i] + (36) * coeff[11][i] + (-45) * coeff[13][i] + (31) * coeff[15][i] + (-1) * coeff[17][i] + (-30) * coeff[19][i] + (45) * coeff[21][i] + (-37) * coeff[23][i] + (10) * coeff[25][i] + (22) * coeff[27][i] + (-43) * coeff[29][i] + (41) * coeff[31][i] + (-18) * coeff[33][i] + (-14) * coeff[35][i] + (39) * coeff[37][i] + (-44) * coeff[39][i] + (26) * coeff[41][i] + (6) * coeff[43][i] + (-34) * coeff[45][i] + (45) * coeff[47][i] + (-33) * coeff[49][i] + (3) * coeff[51][i] + (28) * coeff[53][i] + (-45) * coeff[55][i] + (38) * coeff[57][i] + (-12) * coeff[59][i] + (-20) * coeff[61][i] + (42) * coeff[63][i];
	O[25] = (14) * coeff[1][i] + (-37) * coeff[3][i] + (45) * coeff[5][i] + (-36) * coeff[7][i] + (12) * coeff[9][i] + (16) * coeff[11][i] + (-38) * coeff[13][i] + (45) * coeff[15][i] + (-34) * coeff[17][i] + (10) * coeff[19][i] + (18) * coeff[21][i] + (-39) * coeff[23][i] + (45) * coeff[25][i] + (-33) * coeff[27][i] + (8) * coeff[29][i] + (20) * coeff[31][i] + (-40) * coeff[33][i] + (45) * coeff[35][i] + (-31) * coeff[37][i] + (6) * coeff[39][i] + (22) * coeff[41][i] + (-41) * coeff[43][i] + (44) * coeff[45][i] + (-30) * coeff[47][i] + (3) * coeff[49][i] + (24) * coeff[51][i] + (-42) * coeff[53][i] + (44) * coeff[55][i] + (-28) * coeff[57][i] + (1) * coeff[59][i] + (26) * coeff[61][i] + (-43) * coeff[63][i];
	O[26] = (12) * coeff[1][i] + (-33) * coeff[3][i] + (44) * coeff[5][i] + (-43) * coeff[7][i] + (30) * coeff[9][i] + (-8) * coeff[11][i] + (-16) * coeff[13][i] + (36) * coeff[15][i] + (-45) * coeff[17][i] + (41) * coeff[19][i] + (-26) * coeff[21][i] + (3) * coeff[23][i] + (20) * coeff[25][i] + (-38) * coeff[27][i] + (45) * coeff[29][i] + (-39) * coeff[31][i] + (22) * coeff[33][i] + (1) * coeff[35][i] + (-24) * coeff[37][i] + (40) * coeff[39][i] + (-45) * coeff[41][i] + (37) * coeff[43][i] + (-18) * coeff[45][i] + (-6) * coeff[47][i] + (28) * coeff[49][i] + (-42) * coeff[51][i] + (45) * coeff[53][i] + (-34) * coeff[55][i] + (14) * coeff[57][i] + (10) * coeff[59][i] + (-31) * coeff[61][i] + (44) * coeff[63][i];
	O[27] = (10) * coeff[1][i] + (-28) * coeff[3][i] + (40) * coeff[5][i] + (-45) * coeff[7][i] + (41) * coeff[9][i] + (-30) * coeff[11][i] + (12) * coeff[13][i] + (8) * coeff[15][i] + (-26) * coeff[17][i] + (39) * coeff[19][i] + (-45) * coeff[21][i] + (42) * coeff[23][i] + (-31) * coeff[25][i] + (14) * coeff[27][i] + (6) * coeff[29][i] + (-24) * coeff[31][i] + (38) * coeff[33][i] + (-45) * coeff[35][i] + (43) * coeff[37][i] + (-33) * coeff[39][i] + (16) * coeff[41][i] + (3) * coeff[43][i] + (-22) * coeff[45][i] + (37) * coeff[47][i] + (-45) * coeff[49][i] + (44) * coeff[51][i] + (-34) * coeff[53][i] + (18) * coeff[55][i] + (1) * coeff[57][i] + (-20) * coeff[59][i] + (36) * coeff[61][i] + (-44) * coeff[63][i];
	O[28] = (8) * coeff[1][i] + (-22) * coeff[3][i] + (34) * coeff[5][i] + (-42) * coeff[7][i] + (45) * coeff[9][i] + (-43) * coeff[11][i] + (36) * coeff[13][i] + (-24) * coeff[15][i] + (10) * coeff[17][i] + (6) * coeff[19][i] + (-20) * coeff[21][i] + (33) * coeff[23][i] + (-41) * coeff[25][i] + (45) * coeff[27][i] + (-44) * coeff[29][i] + (37) * coeff[31][i] + (-26) * coeff[33][i] + (12) * coeff[35][i] + (3) * coeff[37][i] + (-18) * coeff[39][i] + (31) * coeff[41][i] + (-40) * coeff[43][i] + (45) * coeff[45][i] + (-44) * coeff[47][i] + (38) * coeff[49][i] + (-28) * coeff[51][i] + (14) * coeff[53][i] + (1) * coeff[55][i] + (-16) * coeff[57][i] + (30) * coeff[59][i] + (-39) * coeff[61][i] + (45) * coeff[63][i];
	O[29] = (6) * coeff[1][i] + (-16) * coeff[3][i] + (26) * coeff[5][i] + (-34) * coeff[7][i] + (40) * coeff[9][i] + (-44) * coeff[11][i] + (45) * coeff[13][i] + (-44) * coeff[15][i] + (39) * coeff[17][i] + (-33) * coeff[19][i] + (24) * coeff[21][i] + (-14) * coeff[23][i] + (3) * coeff[25][i] + (8) * coeff[27][i] + (-18) * coeff[29][i] + (28) * coeff[31][i] + (-36) * coeff[33][i] + (41) * coeff[35][i] + (-45) * coeff[37][i] + (45) * coeff[39][i] + (-43) * coeff[41][i] + (38) * coeff[43][i] + (-31) * coeff[45][i] + (22) * coeff[47][i] + (-12) * coeff[49][i] + (1) * coeff[51][i] + (10) * coeff[53][i] + (-20) * coeff[55][i] + (30) * coeff[57][i] + (-37) * coeff[59][i] + (42) * coeff[61][i] + (-45) * coeff[63][i];
	O[30] = (3) * coeff[1][i] + (-10) * coeff[3][i] + (16) * coeff[5][i] + (-22) * coeff[7][i] + (28) * coeff[9][i] + (-33) * coeff[11][i] + (37) * coeff[13][i] + (-40) * coeff[15][i] + (43) * coeff[17][i] + (-45) * coeff[19][i] + (45) * coeff[21][i] + (-45) * coeff[23][i] + (44) * coeff[25][i] + (-41) * coeff[27][i] + (38) * coeff[29][i] + (-34) * coeff[31][i] + (30) * coeff[33][i] + (-24) * coeff[35][i] + (18) * coeff[37][i] + (-12) * coeff[39][i] + (6) * coeff[41][i] + (1) * coeff[43][i] + (-8) * coeff[45][i] + (14) * coeff[47][i] + (-20) * coeff[49][i] + (26) * coeff[51][i] + (-31) * coeff[53][i] + (36) * coeff[55][i] + (-39) * coeff[57][i] + (42) * coeff[59][i] + (-44) * coeff[61][i] + (45) * coeff[63][i];
	O[31] = (1) * coeff[1][i] + (-3) * coeff[3][i] + (6) * coeff[5][i] + (-8) * coeff[7][i] + (10) * coeff[9][i] + (-12) * coeff[11][i] + (14) * coeff[13][i] + (-16) * coeff[15][i] + (18) * coeff[17][i] + (-20) * coeff[19][i] + (22) * coeff[21][i] + (-24) * coeff[23][i] + (26) * coeff[25][i] + (-28) * coeff[27][i] + (30) * coeff[29][i] + (-31) * coeff[31][i] + (33) * coeff[33][i] + (-34) * coeff[35][i] + (36) * coeff[37][i] + (-37) * coeff[39][i] + (38) * coeff[41][i] + (-39) * coeff[43][i] + (40) * coeff[45][i] + (-41) * coeff[47][i] + (42) * coeff[49][i] + (-43) * coeff[51][i] + (44) * coeff[53][i] + (-44) * coeff[55][i] + (45) * coeff[57][i] + (-45) * coeff[59][i] + (45) * coeff[61][i] + (-45) * coeff[63][i];
	
	EO[0] = (45) * coeff[2][i] + (45) * coeff[6][i] + (44) * coeff[10][i] + (43) * coeff[14][i] + (41) * coeff[18][i] + (39) * coeff[22][i] + (36) * coeff[26][i] + (34) * coeff[30][i] + (30) * coeff[34][i] + (27) * coeff[38][i] + (23) * coeff[42][i] + (19) * coeff[46][i] + (15) * coeff[50][i] + (11) * coeff[54][i] + (7) * coeff[58][i] + (2) * coeff[62][i];
	EO[1] = (45) * coeff[2][i] + (41) * coeff[6][i] + (34) * coeff[10][i] + (23) * coeff[14][i] + (11) * coeff[18][i] + (-2) * coeff[22][i] + (-15) * coeff[26][i] + (-27) * coeff[30][i] + (-36) * coeff[34][i] + (-43) * coeff[38][i] + (-45) * coeff[42][i] + (-44) * coeff[46][i] + (-39) * coeff[50][i] + (-30) * coeff[54][i] + (-19) * coeff[58][i] + (-7) * coeff[62][i];
	EO[2] = (44) * coeff[2][i] + (34) * coeff[6][i] + (15) * coeff[10][i] + (-7) * coeff[14][i] + (-27) * coeff[18][i] + (-41) * coeff[22][i] + (-45) * coeff[26][i] + (-39) * coeff[30][i] + (-23) * coeff[34][i] + (-2) * coeff[38][i] + (19) * coeff[42][i] + (36) * coeff[46][i] + (45) * coeff[50][i] + (43) * coeff[54][i] + (30) * coeff[58][i] + (11) * coeff[62][i];
	EO[3] = (43) * coeff[2][i] + (23) * coeff[6][i] + (-7) * coeff[10][i] + (-34) * coeff[14][i] + (-45) * coeff[18][i] + (-36) * coeff[22][i] + (-11) * coeff[26][i] + (19) * coeff[30][i] + (41) * coeff[34][i] + (44) * coeff[38][i] + (27) * coeff[42][i] + (-2) * coeff[46][i] + (-30) * coeff[50][i] + (-45) * coeff[54][i] + (-39) * coeff[58][i] + (-15) * coeff[62][i];
	EO[4] = (41) * coeff[2][i] + (11) * coeff[6][i] + (-27) * coeff[10][i] + (-45) * coeff[14][i] + (-30) * coeff[18][i] + (7) * coeff[22][i] + (39) * coeff[26][i] + (43) * coeff[30][i] + (15) * coeff[34][i] + (-23) * coeff[38][i] + (-45) * coeff[42][i] + (-34) * coeff[46][i] + (2) * coeff[50][i] + (36) * coeff[54][i] + (44) * coeff[58][i] + (19) * coeff[62][i];
	EO[5] = (39) * coeff[2][i] + (-2) * coeff[6][i] + (-41) * coeff[10][i] + (-36) * coeff[14][i] + (7) * coeff[18][i] + (43) * coeff[22][i] + (34) * coeff[26][i] + (-11) * coeff[30][i] + (-44) * coeff[34][i] + (-30) * coeff[38][i] + (15) * coeff[42][i] + (45) * coeff[46][i] + (27) * coeff[50][i] + (-19) * coeff[54][i] + (-45) * coeff[58][i] + (-23) * coeff[62][i];
	EO[6] = (36) * coeff[2][i] + (-15) * coeff[6][i] + (-45) * coeff[10][i] + (-11) * coeff[14][i] + (39) * coeff[18][i] + (34) * coeff[22][i] + (-19) * coeff[26][i] + (-45) * coeff[30][i] + (-7) * coeff[34][i] + (41) * coeff[38][i] + (30) * coeff[42][i] + (-23) * coeff[46][i] + (-44) * coeff[50][i] + (-2) * coeff[54][i] + (43) * coeff[58][i] + (27) * coeff[62][i];
	EO[7] = (34) * coeff[2][i] + (-27) * coeff[6][i] + (-39) * coeff[10][i] + (19) * coeff[14][i] + (43) * coeff[18][i] + (-11) * coeff[22][i] + (-45) * coeff[26][i] + (2) * coeff[30][i] + (45) * coeff[34][i] + (7) * coeff[38][i] + (-44) * coeff[42][i] + (-15) * coeff[46][i] + (41) * coeff[50][i] + (23) * coeff[54][i] + (-36) * coeff[58][i] + (-30) * coeff[62][i];
	EO[8] = (30) * coeff[2][i] + (-36) * coeff[6][i] + (-23) * coeff[10][i] + (41) * coeff[14][i] + (15) * coeff[18][i] + (-44) * coeff[22][i] + (-7) * coeff[26][i] + (45) * coeff[30][i] + (-2) * coeff[34][i] + (-45) * coeff[38][i] + (11) * coeff[42][i] + (43) * coeff[46][i] + (-19) * coeff[50][i] + (-39) * coeff[54][i] + (27) * coeff[58][i] + (34) * coeff[62][i];
	EO[9] = (27) * coeff[2][i] + (-43) * coeff[6][i] + (-2) * coeff[10][i] + (44) * coeff[14][i] + (-23) * coeff[18][i] + (-30) * coeff[22][i] + (41) * coeff[26][i] + (7) * coeff[30][i] + (-45) * coeff[34][i] + (19) * coeff[38][i] + (34) * coeff[42][i] + (-39) * coeff[46][i] + (-11) * coeff[50][i] + (45) * coeff[54][i] + (-15) * coeff[58][i] + (-36) * coeff[62][i];
	EO[10] = (23) * coeff[2][i] + (-45) * coeff[6][i] + (19) * coeff[10][i] + (27) * coeff[14][i] + (-45) * coeff[18][i] + (15) * coeff[22][i] + (30) * coeff[26][i] + (-44) * coeff[30][i] + (11) * coeff[34][i] + (34) * coeff[38][i] + (-43) * coeff[42][i] + (7) * coeff[46][i] + (36) * coeff[50][i] + (-41) * coeff[54][i] + (2) * coeff[58][i] + (39) * coeff[62][i];
	EO[11] = (19) * coeff[2][i] + (-44) * coeff[6][i] + (36) * coeff[10][i] + (-2) * coeff[14][i] + (-34) * coeff[18][i] + (45) * coeff[22][i] + (-23) * coeff[26][i] + (-15) * coeff[30][i] + (43) * coeff[34][i] + (-39) * coeff[38][i] + (7) * coeff[42][i] + (30) * coeff[46][i] + (-45) * coeff[50][i] + (27) * coeff[54][i] + (11) * coeff[58][i] + (-41) * coeff[62][i];
	EO[12] = (15) * coeff[2][i] + (-39) * coeff[6][i] + (45) * coeff[10][i] + (-30) * coeff[14][i] + (2) * coeff[18][i] + (27) * coeff[22][i] + (-44) * coeff[26][i] + (41) * coeff[30][i] + (-19) * coeff[34][i] + (-11) * coeff[38][i] + (36) * coeff[42][i] + (-45) * coeff[46][i] + (34) * coeff[50][i] + (-7) * coeff[54][i] + (-23) * coeff[58][i] + (43) * coeff[62][i];
	EO[13] = (11) * coeff[2][i] + (-30) * coeff[6][i] + (43) * coeff[10][i] + (-45) * coeff[14][i] + (36) * coeff[18][i] + (-19) * coeff[22][i] + (-2) * coeff[26][i] + (23) * coeff[30][i] + (-39) * coeff[34][i] + (45) * coeff[38][i] + (-41) * coeff[42][i] + (27) * coeff[46][i] + (-7) * coeff[50][i] + (-15) * coeff[54][i] + (34) * coeff[58][i] + (-44) * coeff[62][i];
	EO[14] = (7) * coeff[2][i] + (-19) * coeff[6][i] + (30) * coeff[10][i] + (-39) * coeff[14][i] + (44) * coeff[18][i] + (-45) * coeff[22][i] + (43) * coeff[26][i] + (-36) * coeff[30][i] + (27) * coeff[34][i] + (-15) * coeff[38][i] + (2) * coeff[42][i] + (11) * coeff[46][i] + (-23) * coeff[50][i] + (34) * coeff[54][i] + (-41) * coeff[58][i] + (45) * coeff[62][i];
	EO[15] = (2) * coeff[2][i] + (-7) * coeff[6][i] + (11) * coeff[10][i] + (-15) * coeff[14][i] + (19) * coeff[18][i] + (-23) * coeff[22][i] + (27) * coeff[26][i] + (-30) * coeff[30][i] + (34) * coeff[34][i] + (-36) * coeff[38][i] + (39) * coeff[42][i] + (-41) * coeff[46][i] + (43) * coeff[50][i] + (-44) * coeff[54][i] + (45) * coeff[58][i] + (-45) * coeff[62][i];
	
	EEO[0] = (45) * coeff[4][i] + (43) * coeff[12][i] + (40) * coeff[20][i] + (35) * coeff[28][i] + (29) * coeff[36][i] + (21) * coeff[44][i] + (13) * coeff[52][i] + (4) * coeff[60][i];
	EEO[1] = (43) * coeff[4][i] + (29) * coeff[12][i] + (4) * coeff[20][i] + (-21) * coeff[28][i] + (-40) * coeff[36][i] + (-45) * coeff[44][i] + (-35) * coeff[52][i] + (-13) * coeff[60][i];
	EEO[2] = (40) * coeff[4][i] + (4) * coeff[12][i] + (-35) * coeff[20][i] + (-43) * coeff[28][i] + (-13) * coeff[36][i] + (29) * coeff[44][i] + (45) * coeff[52][i] + (21) * coeff[60][i];
	EEO[3] = (35) * coeff[4][i] + (-21) * coeff[12][i] + (-43) * coeff[20][i] + (4) * coeff[28][i] + (45) * coeff[36][i] + (13) * coeff[44][i] + (-40) * coeff[52][i] + (-29) * coeff[60][i];
	EEO[4] = (29) * coeff[4][i] + (-40) * coeff[12][i] + (-13) * coeff[20][i] + (45) * coeff[28][i] + (-4) * coeff[36][i] + (-43) * coeff[44][i] + (21) * coeff[52][i] + (35) * coeff[60][i];
	EEO[5] = (21) * coeff[4][i] + (-45) * coeff[12][i] + (29) * coeff[20][i] + (13) * coeff[28][i] + (-43) * coeff[36][i] + (35) * coeff[44][i] + (4) * coeff[52][i] + (-40) * coeff[60][i];
	EEO[6] = (13) * coeff[4][i] + (-35) * coeff[12][i] + (45) * coeff[20][i] + (-40) * coeff[28][i] + (21) * coeff[36][i] + (4) * coeff[44][i] + (-29) * coeff[52][i] + (43) * coeff[60][i];
	EEO[7] = (4) * coeff[4][i] + (-13) * coeff[12][i] + (21) * coeff[20][i] + (-29) * coeff[28][i] + (35) * coeff[36][i] + (-40) * coeff[44][i] + (43) * coeff[52][i] + (-45) * coeff[60][i];
	
	EEEO[0] = (44) * coeff[8][i] + (38) * coeff[24][i] + (25) * coeff[40][i] + (9) * coeff[56][i];
	EEEO[1] = (38) * coeff[8][i] + (-9) * coeff[24][i] + (-44) * coeff[40][i] + (-25) * coeff[56][i];
	EEEO[2] = (25) * coeff[8][i] + (-44) * coeff[24][i] + (9) * coeff[40][i] + (38) * coeff[56][i];
	EEEO[3] = (9) * coeff[8][i] + (-25) * coeff[24][i] + (38) * coeff[40][i] + (-44) * coeff[56][i];
	
	EEEEO[0] = (42) * coeff[16][i] + (17) * coeff[48][i];
	EEEEO[1] = (17) * coeff[16][i] + (-42) * coeff[48][i];
	EEEEE[0] = (32) * coeff[0][i] +  (32) * coeff[32][i];
	EEEEE[1] = (32) * coeff[0][i] +  (-32) * coeff[32][i];
	
	EEEE[0] = EEEEE[0] + EEEEO[0];
	EEEE[3] = EEEEE[0] - EEEEO[0];
	EEEE[1] = EEEEE[1] + EEEEO[1];
	EEEE[2] = EEEEE[1] - EEEEO[1];
	for (k = 0; k < 4; k++){
		EEE[k] = EEEE[k] + EEEO[k];
		EEE[k + 4] = EEEE[3 - k] - EEEO[3 - k];
	}
	for (k = 0; k < 8; k++) {
		EE[k] = EEE[k] + EEO[k];
		EE[k + 8] = EEE[7 - k] - EEO[7 - k];
	}
	for (k = 0; k < 16; k++) {
		E[k] = EE[k] + EO[k];
		E[k + 16] = EE[15 - k] - EO[15 - k];
	}
	for (k = 0; k < 32; k++) {
		block[(i + k) & size_b][k] = Clip3(-(1 << 15), (1 << 15) - 1, (E[k] + O[k] + rnd_factor) >> shift);
		block[(i + k + 32) & size_b][k + 32] = Clip3(-(1 << 15), (1 << 15) - 1, (E[31 - k] - O[31 - k] + rnd_factor) >> shift);
	}
}
#endif
}

void TR_FUNC_NAME(inv_dct_row, W, H)(s16 coeff[TMP_SIZE][TMP_SIZE], s16 block[H][W], U4 shift)
{
	U7 size = MAX_SIZE;
	U8 size_b = size - 1;
#if(W == 2)
#pragma HLS ARRAY_PARTITION variable=coeff complete dim=0
#pragma HLS ARRAY_PARTITION variable=block complete dim=0
	int E, O;
	int rnd_factor = 1 << (shift - 1);

	for (int i = 0; i < H; i++){
		E = 32 * coeff[0][i];
		O = 32 * coeff[1][i];
		block[i][0] = Clip3(-(1 << 15), (1 << 15) - 1, (E + O + rnd_factor) >> shift);
		block[i][1] = Clip3(-(1 << 15), (1 << 15) - 1, (E - O + rnd_factor) >> shift);
	}
#elif(W == 4)
#pragma HLS ARRAY_PARTITION variable=coeff complete dim=0
#pragma HLS ARRAY_PARTITION variable=block complete dim=0

	int E[2], O[2];
	int rnd_factor = 1 << (shift - 1);
	for (int i = 0; i < H; i++){
		O[0] = (42) * coeff[1][i] + (17) * coeff[3][i];
		O[1] = (17) * coeff[1][i] + (-42) * coeff[3][i];
		E[0] = (32) * coeff[0][i] + (32) * coeff[2][i];
		E[1] = (32) * coeff[0][i] + (-32) * coeff[2][i];
		block[i][0] = Clip3(-(1 << 15), (1 << 15) - 1, (E[0] + O[0] + rnd_factor) >> shift);
		block[i][1] = Clip3(-(1 << 15), (1 << 15) - 1, (E[1] + O[1] + rnd_factor) >> shift);
		block[i][2] = Clip3(-(1 << 15), (1 << 15) - 1, (E[1] - O[1] + rnd_factor) >> shift);
		block[i][3] = Clip3(-(1 << 15), (1 << 15) - 1, (E[0] - O[0] + rnd_factor) >> shift);
	}
#elif(W == 8)
#pragma HLS ARRAY_PARTITION variable=coeff complete dim=0
#pragma HLS ARRAY_PARTITION variable=block complete dim=0

	int E[4], O[4];
	int EE[2], EO[2];
	int rnd_factor = 1 << (shift - 1);
	int k;
	for (int i = 0; i < H; i++){
		O[0] = (44) * coeff[1][i] + (38) * coeff[3][i] + (25) * coeff[5][i] + (9) * coeff[7][i];
		O[1] = (38) * coeff[1][i] + (-9) * coeff[3][i] + (-44) * coeff[5][i] + (-25) * coeff[7][i];
		O[2] = (25) * coeff[1][i] + (-44) * coeff[3][i] + (9) * coeff[5][i] + (38) * coeff[7][i];
		O[3] = (9) * coeff[1][i] + (-25) * coeff[3][i] + (38) * coeff[5][i] + (-44) * coeff[7][i];

		EO[0] = (42) * coeff[2][i] + (17) * coeff[6][i];
		EO[1] = (17) * coeff[2][i] + (-42) * coeff[6][i];
		EE[0] = (32) * coeff[0][i] + (32) * coeff[4][i];
		EE[1] = (32) * coeff[0][i] + (-32) * coeff[4][i];

		E[0] = EE[0] + EO[0];
		E[3] = EE[0] - EO[0];
		E[1] = EE[1] + EO[1];
		E[2] = EE[1] - EO[1];
		for (k = 0; k < 4; k++) {
			block[i][k] = Clip3(-(1 << 15), (1 << 15) - 1, ((int)(E[k] + O[k] + rnd_factor)) >> shift);
			block[i][k + 4] = Clip3(-(1 << 15), (1 << 15) - 1, ((int)(E[3 - k] - O[3 - k] + rnd_factor)) >> shift);

		}
	}
#elif ( W == 16)
#pragma HLS ARRAY_PARTITION variable=coeff complete dim=0
#pragma HLS ARRAY_PARTITION variable=block complete dim=0

	int E[8], O[8];
	int EE[4], EO[4];
	int EEE[2], EEO[2];
	int rnd_factor = 1 << (shift - 1);
	int k;
	for (int i = 0; i < H; i++){
		O[0] = (45) * coeff[1][i] + (43) * coeff[3][i] + (40) * coeff[5][i] + (35) * coeff[7][i] + (29) * coeff[9][i] + (21) * coeff[11][i] + (13) * coeff[13][i] + (4) * coeff[15][i];
		O[1] = (43) * coeff[1][i] + (29) * coeff[3][i] + (4) * coeff[5][i] + (-21) * coeff[7][i] + (-40) * coeff[9][i] + (-45) * coeff[11][i] + (-35) * coeff[13][i] + (-13) * coeff[15][i];
		O[2] = (40) * coeff[1][i] + (4) * coeff[3][i] + (-35) * coeff[5][i] + (-43) * coeff[7][i] + (-13) * coeff[9][i] + (29) * coeff[11][i] + (45) * coeff[13][i] + (21) * coeff[15][i];
		O[3] = (35) * coeff[1][i] + (-21) * coeff[3][i] + (-43) * coeff[5][i] + (4) * coeff[7][i] + (45) * coeff[9][i] + (13) * coeff[11][i] + (-40) * coeff[13][i] + (-29) * coeff[15][i];
		O[4] = (29) * coeff[1][i] + (-40) * coeff[3][i] + (-13) * coeff[5][i] + (45) * coeff[7][i] + (-4) * coeff[9][i] + (-43) * coeff[11][i] + (21) * coeff[13][i] + (35) * coeff[15][i];
		O[5] = (21) * coeff[1][i] + (-45) * coeff[3][i] + (29) * coeff[5][i] + (13) * coeff[7][i] + (-43) * coeff[9][i] + (35) * coeff[11][i] + (4) * coeff[13][i] + (-40) * coeff[15][i];
		O[6] = (13) * coeff[1][i] + (-35) * coeff[3][i] + (45) * coeff[5][i] + (-40) * coeff[7][i] + (21) * coeff[9][i] + (4) * coeff[11][i] + (-29) * coeff[13][i] + (43) * coeff[15][i];
		O[7] = (4) * coeff[1][i] + (-13) * coeff[3][i] + (21) * coeff[5][i] + (-29) * coeff[7][i] + (35) * coeff[9][i] + (-40) * coeff[11][i] + (43) * coeff[13][i] + (-45) * coeff[15][i];

		EO[0] = (44) * coeff[2][i] + (38) * coeff[6][i] + (25) * coeff[10][i] + (9) * coeff[14][i];
		EO[1] = (38) * coeff[2][i] + (-9) * coeff[6][i] + (-44) * coeff[10][i] + (-25) * coeff[14][i];
		EO[2] = (25) * coeff[2][i] + (-44) * coeff[6][i] + (9) * coeff[10][i] + (38) * coeff[14][i];
		EO[3] = (9) * coeff[2][i] + (-25) * coeff[6][i] + (38) * coeff[10][i] + (-44) * coeff[14][i];

		EEO[0] = (42) * coeff[4][i] + (17) * coeff[12][i];
		EEE[0] = (32) * coeff[0][i] + (32) * coeff[8][i];
		EEO[1] = (17) * coeff[4][i] + (-42) * coeff[12][i];
		EEE[1] = (32) * coeff[0][i] + (-32) * coeff[8][i];

		for (k = 0; k < 2; k++) {
			EE[k] = EEE[k] + EEO[k];
			EE[k + 2] = EEE[1 - k] - EEO[1 - k];
		}
		for (k = 0; k < 4; k++) {
			E[k] = EE[k] + EO[k];
			E[k + 4] = EE[3 - k] - EO[3 - k];
		}
		for (k = 0; k < 8; k++) {
			block[i][k] = Clip3(-(1 << 15), (1 << 15) - 1, (E[k] + O[k] + rnd_factor) >> shift);
			block[i][k + 8] = Clip3(-(1 << 15), (1 << 15) - 1, (E[7 - k] - O[7 - k] + rnd_factor) >> shift);
		}
	}
#elif(W == 32)
#pragma HLS ARRAY_PARTITION variable=coeff cyclic factor=32 dim=2
#pragma HLS ARRAY_PARTITION variable=block cyclic factor=64 dim=2

	int E[16], O[16];
	int EE[8], EO[8];
	int EEE[4], EEO[4];
	int EEEE[2], EEEO[2];
	int rnd_factor = 1 << (shift - 1);
	int k;
	for (int i = 0; i < H; i++) {
		O[0] = (45) * coeff[(1 + i) & size_b][i] + (45) * coeff[(3 + i) & size_b][i] + (44) * coeff[(5 + i) & size_b][i] + (43) * coeff[(7 + i) & size_b][i] + (41) * coeff[(9 + i) & size_b][i] + (39) * coeff[(11 + i) & size_b][i] + (36) * coeff[(13 + i) & size_b][i] + (34) * coeff[(15 + i) & size_b][i] + (30) * coeff[(17 + i) & size_b][i] + (27) * coeff[(19 + i) & size_b][i] + (23) * coeff[(21 + i) & size_b][i] + (19) * coeff[(23 + i) & size_b][i] + (15) * coeff[(25 + i) & size_b][i] + (11) * coeff[(27 + i) & size_b][i] + (7) * coeff[(29 + i) & size_b][i] + (2) * coeff[(31 + i) & size_b][i];
		O[1] = (45) * coeff[(1 + i) & size_b][i] + (41) * coeff[(3 + i) & size_b][i] + (34) * coeff[(5 + i) & size_b][i] + (23) * coeff[(7 + i) & size_b][i] + (11) * coeff[(9 + i) & size_b][i] + (-2) * coeff[(11 + i) & size_b][i] + (-15) * coeff[(13 + i) & size_b][i] + (-27) * coeff[(15 + i) & size_b][i] + (-36) * coeff[(17 + i) & size_b][i] + (-43) * coeff[(19 + i) & size_b][i] + (-45) * coeff[(21 + i) & size_b][i] + (-44) * coeff[(23 + i) & size_b][i] + (-39) * coeff[(25 + i) & size_b][i] + (-30) * coeff[(27 + i) & size_b][i] + (-19) * coeff[(29 + i) & size_b][i] + (-7) * coeff[(31 + i) & size_b][i];
		O[2] = (44) * coeff[(1 + i) & size_b][i] + (34) * coeff[(3 + i) & size_b][i] + (15) * coeff[(5 + i) & size_b][i] + (-7) * coeff[(7 + i) & size_b][i] + (-27) * coeff[(9 + i) & size_b][i] + (-41) * coeff[(11 + i) & size_b][i] + (-45) * coeff[(13 + i) & size_b][i] + (-39) * coeff[(15 + i) & size_b][i] + (-23) * coeff[(17 + i) & size_b][i] + (-2) * coeff[(19 + i) & size_b][i] + (19) * coeff[(21 + i) & size_b][i] + (36) * coeff[(23 + i) & size_b][i] + (45) * coeff[(25 + i) & size_b][i] + (43) * coeff[(27 + i) & size_b][i] + (30) * coeff[(29 + i) & size_b][i] + (11) * coeff[(31 + i) & size_b][i];
		O[3] = (43) * coeff[(1 + i) & size_b][i] + (23) * coeff[(3 + i) & size_b][i] + (-7) * coeff[(5 + i) & size_b][i] + (-34) * coeff[(7 + i) & size_b][i] + (-45) * coeff[(9 + i) & size_b][i] + (-36) * coeff[(11 + i) & size_b][i] + (-11) * coeff[(13 + i) & size_b][i] + (19) * coeff[(15 + i) & size_b][i] + (41) * coeff[(17 + i) & size_b][i] + (44) * coeff[(19 + i) & size_b][i] + (27) * coeff[(21 + i) & size_b][i] + (-2) * coeff[(23 + i) & size_b][i] + (-30) * coeff[(25 + i) & size_b][i] + (-45) * coeff[(27 + i) & size_b][i] + (-39) * coeff[(29 + i) & size_b][i] + (-15) * coeff[(31 + i) & size_b][i];
		O[4] = (41) * coeff[(1 + i) & size_b][i] + (11) * coeff[(3 + i) & size_b][i] + (-27) * coeff[(5 + i) & size_b][i] + (-45) * coeff[(7 + i) & size_b][i] + (-30) * coeff[(9 + i) & size_b][i] + (7) * coeff[(11 + i) & size_b][i] + (39) * coeff[(13 + i) & size_b][i] + (43) * coeff[(15 + i) & size_b][i] + (15) * coeff[(17 + i) & size_b][i] + (-23) * coeff[(19 + i) & size_b][i] + (-45) * coeff[(21 + i) & size_b][i] + (-34) * coeff[(23 + i) & size_b][i] + (2) * coeff[(25 + i) & size_b][i] + (36) * coeff[(27 + i) & size_b][i] + (44) * coeff[(29 + i) & size_b][i] + (19) * coeff[(31 + i) & size_b][i];
		O[5] = (39) * coeff[(1 + i) & size_b][i] + (-2) * coeff[(3 + i) & size_b][i] + (-41) * coeff[(5 + i) & size_b][i] + (-36) * coeff[(7 + i) & size_b][i] + (7) * coeff[(9 + i) & size_b][i] + (43) * coeff[(11 + i) & size_b][i] + (34) * coeff[(13 + i) & size_b][i] + (-11) * coeff[(15 + i) & size_b][i] + (-44) * coeff[(17 + i) & size_b][i] + (-30) * coeff[(19 + i) & size_b][i] + (15) * coeff[(21 + i) & size_b][i] + (45) * coeff[(23 + i) & size_b][i] + (27) * coeff[(25 + i) & size_b][i] + (-19) * coeff[(27 + i) & size_b][i] + (-45) * coeff[(29 + i) & size_b][i] + (-23) * coeff[(31 + i) & size_b][i];
		O[6] = (36) * coeff[(1 + i) & size_b][i] + (-15) * coeff[(3 + i) & size_b][i] + (-45) * coeff[(5 + i) & size_b][i] + (-11) * coeff[(7 + i) & size_b][i] + (39) * coeff[(9 + i) & size_b][i] + (34) * coeff[(11 + i) & size_b][i] + (-19) * coeff[(13 + i) & size_b][i] + (-45) * coeff[(15 + i) & size_b][i] + (-7) * coeff[(17 + i) & size_b][i] + (41) * coeff[(19 + i) & size_b][i] + (30) * coeff[(21 + i) & size_b][i] + (-23) * coeff[(23 + i) & size_b][i] + (-44) * coeff[(25 + i) & size_b][i] + (-2) * coeff[(27 + i) & size_b][i] + (43) * coeff[(29 + i) & size_b][i] + (27) * coeff[(31 + i) & size_b][i];
		O[7] = (34) * coeff[(1 + i) & size_b][i] + (-27) * coeff[(3 + i) & size_b][i] + (-39) * coeff[(5 + i) & size_b][i] + (19) * coeff[(7 + i) & size_b][i] + (43) * coeff[(9 + i) & size_b][i] + (-11) * coeff[(11 + i) & size_b][i] + (-45) * coeff[(13 + i) & size_b][i] + (2) * coeff[(15 + i) & size_b][i] + (45) * coeff[(17 + i) & size_b][i] + (7) * coeff[(19 + i) & size_b][i] + (-44) * coeff[(21 + i) & size_b][i] + (-15) * coeff[(23 + i) & size_b][i] + (41) * coeff[(25 + i) & size_b][i] + (23) * coeff[(27 + i) & size_b][i] + (-36) * coeff[(29 + i) & size_b][i] + (-30) * coeff[(31 + i) & size_b][i];
		O[8] = (30) * coeff[(1 + i) & size_b][i] + (-36) * coeff[(3 + i) & size_b][i] + (-23) * coeff[(5 + i) & size_b][i] + (41) * coeff[(7 + i) & size_b][i] + (15) * coeff[(9 + i) & size_b][i] + (-44) * coeff[(11 + i) & size_b][i] + (-7) * coeff[(13 + i) & size_b][i] + (45) * coeff[(15 + i) & size_b][i] + (-2) * coeff[(17 + i) & size_b][i] + (-45) * coeff[(19 + i) & size_b][i] + (11) * coeff[(21 + i) & size_b][i] + (43) * coeff[(23 + i) & size_b][i] + (-19) * coeff[(25 + i) & size_b][i] + (-39) * coeff[(27 + i) & size_b][i] + (27) * coeff[(29 + i) & size_b][i] + (34) * coeff[(31 + i) & size_b][i];
		O[9] = (27) * coeff[(1 + i) & size_b][i] + (-43) * coeff[(3 + i) & size_b][i] + (-2) * coeff[(5 + i) & size_b][i] + (44) * coeff[(7 + i) & size_b][i] + (-23) * coeff[(9 + i) & size_b][i] + (-30) * coeff[(11 + i) & size_b][i] + (41) * coeff[(13 + i) & size_b][i] + (7) * coeff[(15 + i) & size_b][i] + (-45) * coeff[(17 + i) & size_b][i] + (19) * coeff[(19 + i) & size_b][i] + (34) * coeff[(21 + i) & size_b][i] + (-39) * coeff[(23 + i) & size_b][i] + (-11) * coeff[(25 + i) & size_b][i] + (45) * coeff[(27 + i) & size_b][i] + (-15) * coeff[(29 + i) & size_b][i] + (-36) * coeff[(31 + i) & size_b][i];
		O[10] = (23) * coeff[(1 + i) & size_b][i] + (-45) * coeff[(3 + i) & size_b][i] + (19) * coeff[(5 + i) & size_b][i] + (27) * coeff[(7 + i) & size_b][i] + (-45) * coeff[(9 + i) & size_b][i] + (15) * coeff[(11 + i) & size_b][i] + (30) * coeff[(13 + i) & size_b][i] + (-44) * coeff[(15 + i) & size_b][i] + (11) * coeff[(17 + i) & size_b][i] + (34) * coeff[(19 + i) & size_b][i] + (-43) * coeff[(21 + i) & size_b][i] + (7) * coeff[(23 + i) & size_b][i] + (36) * coeff[(25 + i) & size_b][i] + (-41) * coeff[(27 + i) & size_b][i] + (2) * coeff[(29 + i) & size_b][i] + (39) * coeff[(31 + i) & size_b][i];
		O[11] = (19) * coeff[(1 + i) & size_b][i] + (-44) * coeff[(3 + i) & size_b][i] + (36) * coeff[(5 + i) & size_b][i] + (-2) * coeff[(7 + i) & size_b][i] + (-34) * coeff[(9 + i) & size_b][i] + (45) * coeff[(11 + i) & size_b][i] + (-23) * coeff[(13 + i) & size_b][i] + (-15) * coeff[(15 + i) & size_b][i] + (43) * coeff[(17 + i) & size_b][i] + (-39) * coeff[(19 + i) & size_b][i] + (7) * coeff[(21 + i) & size_b][i] + (30) * coeff[(23 + i) & size_b][i] + (-45) * coeff[(25 + i) & size_b][i] + (27) * coeff[(27 + i) & size_b][i] + (11) * coeff[(29 + i) & size_b][i] + (-41) * coeff[(31 + i) & size_b][i];
		O[12] = (15) * coeff[(1 + i) & size_b][i] + (-39) * coeff[(3 + i) & size_b][i] + (45) * coeff[(5 + i) & size_b][i] + (-30) * coeff[(7 + i) & size_b][i] + (2) * coeff[(9 + i) & size_b][i] + (27) * coeff[(11 + i) & size_b][i] + (-44) * coeff[(13 + i) & size_b][i] + (41) * coeff[(15 + i) & size_b][i] + (-19) * coeff[(17 + i) & size_b][i] + (-11) * coeff[(19 + i) & size_b][i] + (36) * coeff[(21 + i) & size_b][i] + (-45) * coeff[(23 + i) & size_b][i] + (34) * coeff[(25 + i) & size_b][i] + (-7) * coeff[(27 + i) & size_b][i] + (-23) * coeff[(29 + i) & size_b][i] + (43) * coeff[(31 + i) & size_b][i];
		O[13] = (11) * coeff[(1 + i) & size_b][i] + (-30) * coeff[(3 + i) & size_b][i] + (43) * coeff[(5 + i) & size_b][i] + (-45) * coeff[(7 + i) & size_b][i] + (36) * coeff[(9 + i) & size_b][i] + (-19) * coeff[(11 + i) & size_b][i] + (-2) * coeff[(13 + i) & size_b][i] + (23) * coeff[(15 + i) & size_b][i] + (-39) * coeff[(17 + i) & size_b][i] + (45) * coeff[(19 + i) & size_b][i] + (-41) * coeff[(21 + i) & size_b][i] + (27) * coeff[(23 + i) & size_b][i] + (-7) * coeff[(25 + i) & size_b][i] + (-15) * coeff[(27 + i) & size_b][i] + (34) * coeff[(29 + i) & size_b][i] + (-44) * coeff[(31 + i) & size_b][i];
		O[14] = (7) * coeff[(1 + i) & size_b][i] + (-19) * coeff[(3 + i) & size_b][i] + (30) * coeff[(5 + i) & size_b][i] + (-39) * coeff[(7 + i) & size_b][i] + (44) * coeff[(9 + i) & size_b][i] + (-45) * coeff[(11 + i) & size_b][i] + (43) * coeff[(13 + i) & size_b][i] + (-36) * coeff[(15 + i) & size_b][i] + (27) * coeff[(17 + i) & size_b][i] + (-15) * coeff[(19 + i) & size_b][i] + (2) * coeff[(21 + i) & size_b][i] + (11) * coeff[(23 + i) & size_b][i] + (-23) * coeff[(25 + i) & size_b][i] + (34) * coeff[(27 + i) & size_b][i] + (-41) * coeff[(29 + i) & size_b][i] + (45) * coeff[(31 + i) & size_b][i];
		O[15] = (2) * coeff[(1 + i) & size_b][i] + (-7) * coeff[(3 + i) & size_b][i] + (11) * coeff[(5 + i) & size_b][i] + (-15) * coeff[(7 + i) & size_b][i] + (19) * coeff[(9 + i) & size_b][i] + (-23) * coeff[(11 + i) & size_b][i] + (27) * coeff[(13 + i) & size_b][i] + (-30) * coeff[(15 + i) & size_b][i] + (34) * coeff[(17 + i) & size_b][i] + (-36) * coeff[(19 + i) & size_b][i] + (39) * coeff[(21 + i) & size_b][i] + (-41) * coeff[(23 + i) & size_b][i] + (43) * coeff[(25 + i) & size_b][i] + (-44) * coeff[(27 + i) & size_b][i] + (45) * coeff[(29 + i) & size_b][i] + (-45) * coeff[(31 + i) & size_b][i];

		EO[0] = (45) * coeff[(2 + i) & size_b][i] + (43) * coeff[(6 + i) & size_b][i] + (40) * coeff[(10 + i) & size_b][i] + (35) * coeff[(14 + i) & size_b][i] + (29) * coeff[(18 + i) & size_b][i] + (21) * coeff[(22 + i) & size_b][i] + (13) * coeff[(26 + i) & size_b][i] + (4) * coeff[(30 + i) & size_b][i];
		EO[1] = (43) * coeff[(2 + i) & size_b][i] + (29) * coeff[(6 + i) & size_b][i] + (4) * coeff[(10 + i) & size_b][i] + (-21) * coeff[(14 + i) & size_b][i] + (-40) * coeff[(18 + i) & size_b][i] + (-45) * coeff[(22 + i) & size_b][i] + (-35) * coeff[(26 + i) & size_b][i] + (-13) * coeff[(30 + i) & size_b][i];
		EO[2] = (40) * coeff[(2 + i) & size_b][i] + (4) * coeff[(6 + i) & size_b][i] + (-35) * coeff[(10 + i) & size_b][i] + (-43) * coeff[(14 + i) & size_b][i] + (-13) * coeff[(18 + i) & size_b][i] + (29) * coeff[(22 + i) & size_b][i] + (45) * coeff[(26 + i) & size_b][i] + (21) * coeff[(30 + i) & size_b][i];
		EO[3] = (35) * coeff[(2 + i) & size_b][i] + (-21) * coeff[(6 + i) & size_b][i] + (-43) * coeff[(10 + i) & size_b][i] + (4) * coeff[(14 + i) & size_b][i] + (45) * coeff[(18 + i) & size_b][i] + (13) * coeff[(22 + i) & size_b][i] + (-40) * coeff[(26 + i) & size_b][i] + (-29) * coeff[(30 + i) & size_b][i];
		EO[4] = (29) * coeff[(2 + i) & size_b][i] + (-40) * coeff[(6 + i) & size_b][i] + (-13) * coeff[(10 + i) & size_b][i] + (45) * coeff[(14 + i) & size_b][i] + (-4) * coeff[(18 + i) & size_b][i] + (-43) * coeff[(22 + i) & size_b][i] + (21) * coeff[(26 + i) & size_b][i] + (35) * coeff[(30 + i) & size_b][i];
		EO[5] = (21) * coeff[(2 + i) & size_b][i] + (-45) * coeff[(6 + i) & size_b][i] + (29) * coeff[(10 + i) & size_b][i] + (13) * coeff[(14 + i) & size_b][i] + (-43) * coeff[(18 + i) & size_b][i] + (35) * coeff[(22 + i) & size_b][i] + (4) * coeff[(26 + i) & size_b][i] + (-40) * coeff[(30 + i) & size_b][i];
		EO[6] = (13) * coeff[(2 + i) & size_b][i] + (-35) * coeff[(6 + i) & size_b][i] + (45) * coeff[(10 + i) & size_b][i] + (-40) * coeff[(14 + i) & size_b][i] + (21) * coeff[(18 + i) & size_b][i] + (4) * coeff[(22 + i) & size_b][i] + (-29) * coeff[(26 + i) & size_b][i] + (43) * coeff[(30 + i) & size_b][i];
		EO[7] = (4) * coeff[(2 + i) & size_b][i] + (-13) * coeff[(6 + i) & size_b][i] + (21) * coeff[(10 + i) & size_b][i] + (-29) * coeff[(14 + i) & size_b][i] + (35) * coeff[(18 + i) & size_b][i] + (-40) * coeff[(22 + i) & size_b][i] + (43) * coeff[(26 + i) & size_b][i] + (-45) * coeff[(30 + i) & size_b][i];

		EEO[0] = (44) * coeff[(4 + i) & size_b][i] + (38) * coeff[(12 + i) & size_b][i] + (25) * coeff[(20 + i) & size_b][i] + (9) * coeff[(28 + i) & size_b][i];
		EEO[1] = (38) * coeff[(4 + i) & size_b][i] + (-9) * coeff[(12 + i) & size_b][i] + (-44) * coeff[(20 + i) & size_b][i] + (-25) * coeff[(28 + i) & size_b][i];
		EEO[2] = (25) * coeff[(4 + i) & size_b][i] + (-44) * coeff[(12 + i) & size_b][i] + (9) * coeff[(20 + i) & size_b][i] + (38) * coeff[(28 + i) & size_b][i];
		EEO[3] = (9) * coeff[(4 + i) & size_b][i] + (-25) * coeff[(12 + i) & size_b][i] + (38) * coeff[(20 + i) & size_b][i] + (-44) * coeff[(28 + i) & size_b][i];

		EEEO[0] = (42) * coeff[(8 + i) & size_b][i] + (17)  * coeff[(24 + i) & size_b][i];
		EEEO[1] = (17) * coeff[(8 + i) & size_b][i] + (-42) * coeff[(24 + i) & size_b][i];
		EEEE[0] = (32) * coeff[(0 + i) & size_b][i] + (32)  * coeff[(16 + i) & size_b][i];
		EEEE[1] = (32) * coeff[(0 + i) & size_b][i] + (-32) * coeff[(16 + i) & size_b][i];
		EEE[0] = EEEE[0] + EEEO[0];
		EEE[3] = EEEE[0] - EEEO[0];
		EEE[1] = EEEE[1] + EEEO[1];
		EEE[2] = EEEE[1] - EEEO[1];
		for (k = 0; k < 4; k++) {
			EE[k] = EEE[k] + EEO[k];
			EE[k + 4] = EEE[3 - k] - EEO[3 - k];
		}
		for (k = 0; k < 8; k++) {
			E[k] = EE[k] + EO[k];
			E[k + 8] = EE[7 - k] - EO[7 - k];
		}
		for (k = 0; k < 16; k++) {
			block[i][k] = Clip3(-(1 << 15), (1 << 15) - 1, (E[k] + O[k] + rnd_factor) >> shift);
			block[i][k + 16] = Clip3(-(1 << 15), (1 << 15) - 1, (E[15 - k] - O[15 - k] + rnd_factor) >> shift);
		}
	}
#else
#pragma HLS ARRAY_PARTITION variable=coeff cyclic factor=64 dim=2
#pragma HLS ARRAY_PARTITION variable=block cyclic factor=64 dim=2

	int E[32], O[32];
	int EE[16], EO[16];
	int EEE[8], EEO[8];
	int EEEE[4], EEEO[4];
	int EEEEE[2], EEEEO[2];
	int rnd_factor = 1 << (shift - 1);
	int k;
	for (int i = 0; i < H; i++){
		O[0] = (45) * coeff[(1 + i) & size_b][i] + (45) * coeff[(3 + i) & size_b][i] + (45) * coeff[(5 + i) & size_b][i] + (45) * coeff[(7 + i) & size_b][i] + (44) * coeff[(9 + i) & size_b][i] + (44) * coeff[(11 + i) & size_b][i] + (43) * coeff[(13 + i) & size_b][i] + (42) * coeff[(15 + i) & size_b][i] + (41) * coeff[(17 + i) & size_b][i] + (40) * coeff[(19 + i) & size_b][i] + (39) * coeff[(21 + i) & size_b][i] + (38) * coeff[(23 + i) & size_b][i] + (37) * coeff[(25 + i) & size_b][i] + (36) * coeff[(27 + i) & size_b][i] + (34) * coeff[(29 + i) & size_b][i] + (33) * coeff[(31 + i) & size_b][i] + (31) * coeff[(33 + i) & size_b][i] + (30) * coeff[(35 + i) & size_b][i] + (28) * coeff[(37 + i) & size_b][i] + (26) * coeff[(39 + i) & size_b][i] + (24) * coeff[(41 + i) & size_b][i] + (22) * coeff[(43 + i) & size_b][i] + (20) * coeff[(45 + i) & size_b][i] + (18) * coeff[(47 + i) & size_b][i] + (16) * coeff[(49 + i) & size_b][i] + (14) * coeff[(51 + i) & size_b][i] + (12) * coeff[(53 + i) & size_b][i] + (10) * coeff[(55 + i) & size_b][i] + (8) * coeff[(57 + i) & size_b][i] + (6) * coeff[(59 + i) & size_b][i] + (3) * coeff[(61 + i) & size_b][i] + (1) * coeff[(63 + i) & size_b][i];
		O[1] = (45) * coeff[(1 + i) & size_b][i] + (44) * coeff[(3 + i) & size_b][i] + (42) * coeff[(5 + i) & size_b][i] + (39) * coeff[(7 + i) & size_b][i] + (36) * coeff[(9 + i) & size_b][i] + (31) * coeff[(11 + i) & size_b][i] + (26) * coeff[(13 + i) & size_b][i] + (20) * coeff[(15 + i) & size_b][i] + (14) * coeff[(17 + i) & size_b][i] + (8) * coeff[(19 + i) & size_b][i] + (1) * coeff[(21 + i) & size_b][i] + (-6) * coeff[(23 + i) & size_b][i] + (-12) * coeff[(25 + i) & size_b][i] + (-18) * coeff[(27 + i) & size_b][i] + (-24) * coeff[(29 + i) & size_b][i] + (-30) * coeff[(31 + i) & size_b][i] + (-34) * coeff[(33 + i) & size_b][i] + (-38) * coeff[(35 + i) & size_b][i] + (-41) * coeff[(37 + i) & size_b][i] + (-44) * coeff[(39 + i) & size_b][i] + (-45) * coeff[(41 + i) & size_b][i] + (-45) * coeff[(43 + i) & size_b][i] + (-45) * coeff[(45 + i) & size_b][i] + (-43) * coeff[(47 + i) & size_b][i] + (-40) * coeff[(49 + i) & size_b][i] + (-37) * coeff[(51 + i) & size_b][i] + (-33) * coeff[(53 + i) & size_b][i] + (-28) * coeff[(55 + i) & size_b][i] + (-22) * coeff[(57 + i) & size_b][i] + (-16) * coeff[(59 + i) & size_b][i] + (-10) * coeff[(61 + i) & size_b][i] + (-3) * coeff[(63 + i) & size_b][i];
		O[2] = (45) * coeff[(1 + i) & size_b][i] + (42) * coeff[(3 + i) & size_b][i] + (37) * coeff[(5 + i) & size_b][i] + (30) * coeff[(7 + i) & size_b][i] + (20) * coeff[(9 + i) & size_b][i] + (10) * coeff[(11 + i) & size_b][i] + (-1) * coeff[(13 + i) & size_b][i] + (-12) * coeff[(15 + i) & size_b][i] + (-22) * coeff[(17 + i) & size_b][i] + (-31) * coeff[(19 + i) & size_b][i] + (-38) * coeff[(21 + i) & size_b][i] + (-43) * coeff[(23 + i) & size_b][i] + (-45) * coeff[(25 + i) & size_b][i] + (-45) * coeff[(27 + i) & size_b][i] + (-41) * coeff[(29 + i) & size_b][i] + (-36) * coeff[(31 + i) & size_b][i] + (-28) * coeff[(33 + i) & size_b][i] + (-18) * coeff[(35 + i) & size_b][i] + (-8) * coeff[(37 + i) & size_b][i] + (3) * coeff[(39 + i) & size_b][i] + (14) * coeff[(41 + i) & size_b][i] + (24) * coeff[(43 + i) & size_b][i] + (33) * coeff[(45 + i) & size_b][i] + (39) * coeff[(47 + i) & size_b][i] + (44) * coeff[(49 + i) & size_b][i] + (45) * coeff[(51 + i) & size_b][i] + (44) * coeff[(53 + i) & size_b][i] + (40) * coeff[(55 + i) & size_b][i] + (34) * coeff[(57 + i) & size_b][i] + (26) * coeff[(59 + i) & size_b][i] + (16) * coeff[(61 + i) & size_b][i] + (6) * coeff[(63 + i) & size_b][i];
		O[3] = (45) * coeff[(1 + i) & size_b][i] + (39) * coeff[(3 + i) & size_b][i] + (30) * coeff[(5 + i) & size_b][i] + (16) * coeff[(7 + i) & size_b][i] + (1) * coeff[(9 + i) & size_b][i] + (-14) * coeff[(11 + i) & size_b][i] + (-28) * coeff[(13 + i) & size_b][i] + (-38) * coeff[(15 + i) & size_b][i] + (-44) * coeff[(17 + i) & size_b][i] + (-45) * coeff[(19 + i) & size_b][i] + (-40) * coeff[(21 + i) & size_b][i] + (-31) * coeff[(23 + i) & size_b][i] + (-18) * coeff[(25 + i) & size_b][i] + (-3) * coeff[(27 + i) & size_b][i] + (12) * coeff[(29 + i) & size_b][i] + (26) * coeff[(31 + i) & size_b][i] + (37) * coeff[(33 + i) & size_b][i] + (44) * coeff[(35 + i) & size_b][i] + (45) * coeff[(37 + i) & size_b][i] + (41) * coeff[(39 + i) & size_b][i] + (33) * coeff[(41 + i) & size_b][i] + (20) * coeff[(43 + i) & size_b][i] + (6) * coeff[(45 + i) & size_b][i] + (-10) * coeff[(47 + i) & size_b][i] + (-24) * coeff[(49 + i) & size_b][i] + (-36) * coeff[(51 + i) & size_b][i] + (-43) * coeff[(53 + i) & size_b][i] + (-45) * coeff[(55 + i) & size_b][i] + (-42) * coeff[(57 + i) & size_b][i] + (-34) * coeff[(59 + i) & size_b][i] + (-22) * coeff[(61 + i) & size_b][i] + (-8) * coeff[(63 + i) & size_b][i];
		O[4] = (44) * coeff[(1 + i) & size_b][i] + (36) * coeff[(3 + i) & size_b][i] + (20) * coeff[(5 + i) & size_b][i] + (1) * coeff[(7 + i) & size_b][i] + (-18) * coeff[(9 + i) & size_b][i] + (-34) * coeff[(11 + i) & size_b][i] + (-44) * coeff[(13 + i) & size_b][i] + (-45) * coeff[(15 + i) & size_b][i] + (-37) * coeff[(17 + i) & size_b][i] + (-22) * coeff[(19 + i) & size_b][i] + (-3) * coeff[(21 + i) & size_b][i] + (16) * coeff[(23 + i) & size_b][i] + (33) * coeff[(25 + i) & size_b][i] + (43) * coeff[(27 + i) & size_b][i] + (45) * coeff[(29 + i) & size_b][i] + (38) * coeff[(31 + i) & size_b][i] + (24) * coeff[(33 + i) & size_b][i] + (6) * coeff[(35 + i) & size_b][i] + (-14) * coeff[(37 + i) & size_b][i] + (-31) * coeff[(39 + i) & size_b][i] + (-42) * coeff[(41 + i) & size_b][i] + (-45) * coeff[(43 + i) & size_b][i] + (-39) * coeff[(45 + i) & size_b][i] + (-26) * coeff[(47 + i) & size_b][i] + (-8) * coeff[(49 + i) & size_b][i] + (12) * coeff[(51 + i) & size_b][i] + (30) * coeff[(53 + i) & size_b][i] + (41) * coeff[(55 + i) & size_b][i] + (45) * coeff[(57 + i) & size_b][i] + (40) * coeff[(59 + i) & size_b][i] + (28) * coeff[(61 + i) & size_b][i] + (10) * coeff[(63 + i) & size_b][i];
		O[5] = (44) * coeff[(1 + i) & size_b][i] + (31) * coeff[(3 + i) & size_b][i] + (10) * coeff[(5 + i) & size_b][i] + (-14) * coeff[(7 + i) & size_b][i] + (-34) * coeff[(9 + i) & size_b][i] + (-45) * coeff[(11 + i) & size_b][i] + (-42) * coeff[(13 + i) & size_b][i] + (-28) * coeff[(15 + i) & size_b][i] + (-6) * coeff[(17 + i) & size_b][i] + (18) * coeff[(19 + i) & size_b][i] + (37) * coeff[(21 + i) & size_b][i] + (45) * coeff[(23 + i) & size_b][i] + (40) * coeff[(25 + i) & size_b][i] + (24) * coeff[(27 + i) & size_b][i] + (1) * coeff[(29 + i) & size_b][i] + (-22) * coeff[(31 + i) & size_b][i] + (-39) * coeff[(33 + i) & size_b][i] + (-45) * coeff[(35 + i) & size_b][i] + (-38) * coeff[(37 + i) & size_b][i] + (-20) * coeff[(39 + i) & size_b][i] + (3) * coeff[(41 + i) & size_b][i] + (26) * coeff[(43 + i) & size_b][i] + (41) * coeff[(45 + i) & size_b][i] + (45) * coeff[(47 + i) & size_b][i] + (36) * coeff[(49 + i) & size_b][i] + (16) * coeff[(51 + i) & size_b][i] + (-8) * coeff[(53 + i) & size_b][i] + (-30) * coeff[(55 + i) & size_b][i] + (-43) * coeff[(57 + i) & size_b][i] + (-44) * coeff[(59 + i) & size_b][i] + (-33) * coeff[(61 + i) & size_b][i] + (-12) * coeff[(63 + i) & size_b][i];
		O[6] = (43) * coeff[(1 + i) & size_b][i] + (26) * coeff[(3 + i) & size_b][i] + (-1) * coeff[(5 + i) & size_b][i] + (-28) * coeff[(7 + i) & size_b][i] + (-44) * coeff[(9 + i) & size_b][i] + (-42) * coeff[(11 + i) & size_b][i] + (-24) * coeff[(13 + i) & size_b][i] + (3) * coeff[(15 + i) & size_b][i] + (30) * coeff[(17 + i) & size_b][i] + (44) * coeff[(19 + i) & size_b][i] + (41) * coeff[(21 + i) & size_b][i] + (22) * coeff[(23 + i) & size_b][i] + (-6) * coeff[(25 + i) & size_b][i] + (-31) * coeff[(27 + i) & size_b][i] + (-45) * coeff[(29 + i) & size_b][i] + (-40) * coeff[(31 + i) & size_b][i] + (-20) * coeff[(33 + i) & size_b][i] + (8) * coeff[(35 + i) & size_b][i] + (33) * coeff[(37 + i) & size_b][i] + (45) * coeff[(39 + i) & size_b][i] + (39) * coeff[(41 + i) & size_b][i] + (18) * coeff[(43 + i) & size_b][i] + (-10) * coeff[(45 + i) & size_b][i] + (-34) * coeff[(47 + i) & size_b][i] + (-45) * coeff[(49 + i) & size_b][i] + (-38) * coeff[(51 + i) & size_b][i] + (-16) * coeff[(53 + i) & size_b][i] + (12) * coeff[(55 + i) & size_b][i] + (36) * coeff[(57 + i) & size_b][i] + (45) * coeff[(59 + i) & size_b][i] + (37) * coeff[(61 + i) & size_b][i] + (14) * coeff[(63 + i) & size_b][i];
		O[7] = (42) * coeff[(1 + i) & size_b][i] + (20) * coeff[(3 + i) & size_b][i] + (-12) * coeff[(5 + i) & size_b][i] + (-38) * coeff[(7 + i) & size_b][i] + (-45) * coeff[(9 + i) & size_b][i] + (-28) * coeff[(11 + i) & size_b][i] + (3) * coeff[(13 + i) & size_b][i] + (33) * coeff[(15 + i) & size_b][i] + (45) * coeff[(17 + i) & size_b][i] + (34) * coeff[(19 + i) & size_b][i] + (6) * coeff[(21 + i) & size_b][i] + (-26) * coeff[(23 + i) & size_b][i] + (-44) * coeff[(25 + i) & size_b][i] + (-39) * coeff[(27 + i) & size_b][i] + (-14) * coeff[(29 + i) & size_b][i] + (18) * coeff[(31 + i) & size_b][i] + (41) * coeff[(33 + i) & size_b][i] + (43) * coeff[(35 + i) & size_b][i] + (22) * coeff[(37 + i) & size_b][i] + (-10) * coeff[(39 + i) & size_b][i] + (-37) * coeff[(41 + i) & size_b][i] + (-45) * coeff[(43 + i) & size_b][i] + (-30) * coeff[(45 + i) & size_b][i] + (1) * coeff[(47 + i) & size_b][i] + (31) * coeff[(49 + i) & size_b][i] + (45) * coeff[(51 + i) & size_b][i] + (36) * coeff[(53 + i) & size_b][i] + (8) * coeff[(55 + i) & size_b][i] + (-24) * coeff[(57 + i) & size_b][i] + (-44) * coeff[(59 + i) & size_b][i] + (-40) * coeff[(61 + i) & size_b][i] + (-16) * coeff[(63 + i) & size_b][i];
		O[8] = (41) * coeff[(1 + i) & size_b][i] + (14) * coeff[(3 + i) & size_b][i] + (-22) * coeff[(5 + i) & size_b][i] + (-44) * coeff[(7 + i) & size_b][i] + (-37) * coeff[(9 + i) & size_b][i] + (-6) * coeff[(11 + i) & size_b][i] + (30) * coeff[(13 + i) & size_b][i] + (45) * coeff[(15 + i) & size_b][i] + (31) * coeff[(17 + i) & size_b][i] + (-3) * coeff[(19 + i) & size_b][i] + (-36) * coeff[(21 + i) & size_b][i] + (-45) * coeff[(23 + i) & size_b][i] + (-24) * coeff[(25 + i) & size_b][i] + (12) * coeff[(27 + i) & size_b][i] + (40) * coeff[(29 + i) & size_b][i] + (42) * coeff[(31 + i) & size_b][i] + (16) * coeff[(33 + i) & size_b][i] + (-20) * coeff[(35 + i) & size_b][i] + (-44) * coeff[(37 + i) & size_b][i] + (-38) * coeff[(39 + i) & size_b][i] + (-8) * coeff[(41 + i) & size_b][i] + (28) * coeff[(43 + i) & size_b][i] + (45) * coeff[(45 + i) & size_b][i] + (33) * coeff[(47 + i) & size_b][i] + (-1) * coeff[(49 + i) & size_b][i] + (-34) * coeff[(51 + i) & size_b][i] + (-45) * coeff[(53 + i) & size_b][i] + (-26) * coeff[(55 + i) & size_b][i] + (10) * coeff[(57 + i) & size_b][i] + (39) * coeff[(59 + i) & size_b][i] + (43) * coeff[(61 + i) & size_b][i] + (18) * coeff[(63 + i) & size_b][i];
		O[9] = (40) * coeff[(1 + i) & size_b][i] + (8) * coeff[(3 + i) & size_b][i] + (-31) * coeff[(5 + i) & size_b][i] + (-45) * coeff[(7 + i) & size_b][i] + (-22) * coeff[(9 + i) & size_b][i] + (18) * coeff[(11 + i) & size_b][i] + (44) * coeff[(13 + i) & size_b][i] + (34) * coeff[(15 + i) & size_b][i] + (-3) * coeff[(17 + i) & size_b][i] + (-38) * coeff[(19 + i) & size_b][i] + (-42) * coeff[(21 + i) & size_b][i] + (-12) * coeff[(23 + i) & size_b][i] + (28) * coeff[(25 + i) & size_b][i] + (45) * coeff[(27 + i) & size_b][i] + (26) * coeff[(29 + i) & size_b][i] + (-14) * coeff[(31 + i) & size_b][i] + (-43) * coeff[(33 + i) & size_b][i] + (-37) * coeff[(35 + i) & size_b][i] + (-1) * coeff[(37 + i) & size_b][i] + (36) * coeff[(39 + i) & size_b][i] + (44) * coeff[(41 + i) & size_b][i] + (16) * coeff[(43 + i) & size_b][i] + (-24) * coeff[(45 + i) & size_b][i] + (-45) * coeff[(47 + i) & size_b][i] + (-30) * coeff[(49 + i) & size_b][i] + (10) * coeff[(51 + i) & size_b][i] + (41) * coeff[(53 + i) & size_b][i] + (39) * coeff[(55 + i) & size_b][i] + (6) * coeff[(57 + i) & size_b][i] + (-33) * coeff[(59 + i) & size_b][i] + (-45) * coeff[(61 + i) & size_b][i] + (-20) * coeff[(63 + i) & size_b][i];
		O[10] = (39) * coeff[(1 + i) & size_b][i] + (1) * coeff[(3 + i) & size_b][i] + (-38) * coeff[(5 + i) & size_b][i] + (-40) * coeff[(7 + i) & size_b][i] + (-3) * coeff[(9 + i) & size_b][i] + (37) * coeff[(11 + i) & size_b][i] + (41) * coeff[(13 + i) & size_b][i] + (6) * coeff[(15 + i) & size_b][i] + (-36) * coeff[(17 + i) & size_b][i] + (-42) * coeff[(19 + i) & size_b][i] + (-8) * coeff[(21 + i) & size_b][i] + (34) * coeff[(23 + i) & size_b][i] + (43) * coeff[(25 + i) & size_b][i] + (10) * coeff[(27 + i) & size_b][i] + (-33) * coeff[(29 + i) & size_b][i] + (-44) * coeff[(31 + i) & size_b][i] + (-12) * coeff[(33 + i) & size_b][i] + (31) * coeff[(35 + i) & size_b][i] + (44) * coeff[(37 + i) & size_b][i] + (14) * coeff[(39 + i) & size_b][i] + (-30) * coeff[(41 + i) & size_b][i] + (-45) * coeff[(43 + i) & size_b][i] + (-16) * coeff[(45 + i) & size_b][i] + (28) * coeff[(47 + i) & size_b][i] + (45) * coeff[(49 + i) & size_b][i] + (18) * coeff[(51 + i) & size_b][i] + (-26) * coeff[(53 + i) & size_b][i] + (-45) * coeff[(55 + i) & size_b][i] + (-20) * coeff[(57 + i) & size_b][i] + (24) * coeff[(59 + i) & size_b][i] + (45) * coeff[(61 + i) & size_b][i] + (22) * coeff[(63 + i) & size_b][i];
		O[11] = (38) * coeff[(1 + i) & size_b][i] + (-6) * coeff[(3 + i) & size_b][i] + (-43) * coeff[(5 + i) & size_b][i] + (-31) * coeff[(7 + i) & size_b][i] + (16) * coeff[(9 + i) & size_b][i] + (45) * coeff[(11 + i) & size_b][i] + (22) * coeff[(13 + i) & size_b][i] + (-26) * coeff[(15 + i) & size_b][i] + (-45) * coeff[(17 + i) & size_b][i] + (-12) * coeff[(19 + i) & size_b][i] + (34) * coeff[(21 + i) & size_b][i] + (41) * coeff[(23 + i) & size_b][i] + (1) * coeff[(25 + i) & size_b][i] + (-40) * coeff[(27 + i) & size_b][i] + (-36) * coeff[(29 + i) & size_b][i] + (10) * coeff[(31 + i) & size_b][i] + (44) * coeff[(33 + i) & size_b][i] + (28) * coeff[(35 + i) & size_b][i] + (-20) * coeff[(37 + i) & size_b][i] + (-45) * coeff[(39 + i) & size_b][i] + (-18) * coeff[(41 + i) & size_b][i] + (30) * coeff[(43 + i) & size_b][i] + (44) * coeff[(45 + i) & size_b][i] + (8) * coeff[(47 + i) & size_b][i] + (-37) * coeff[(49 + i) & size_b][i] + (-39) * coeff[(51 + i) & size_b][i] + (3) * coeff[(53 + i) & size_b][i] + (42) * coeff[(55 + i) & size_b][i] + (33) * coeff[(57 + i) & size_b][i] + (-14) * coeff[(59 + i) & size_b][i] + (-45) * coeff[(61 + i) & size_b][i] + (-24) * coeff[(63 + i) & size_b][i];
		O[12] = (37) * coeff[(1 + i) & size_b][i] + (-12) * coeff[(3 + i) & size_b][i] + (-45) * coeff[(5 + i) & size_b][i] + (-18) * coeff[(7 + i) & size_b][i] + (33) * coeff[(9 + i) & size_b][i] + (40) * coeff[(11 + i) & size_b][i] + (-6) * coeff[(13 + i) & size_b][i] + (-44) * coeff[(15 + i) & size_b][i] + (-24) * coeff[(17 + i) & size_b][i] + (28) * coeff[(19 + i) & size_b][i] + (43) * coeff[(21 + i) & size_b][i] + (1) * coeff[(23 + i) & size_b][i] + (-42) * coeff[(25 + i) & size_b][i] + (-30) * coeff[(27 + i) & size_b][i] + (22) * coeff[(29 + i) & size_b][i] + (45) * coeff[(31 + i) & size_b][i] + (8) * coeff[(33 + i) & size_b][i] + (-39) * coeff[(35 + i) & size_b][i] + (-34) * coeff[(37 + i) & size_b][i] + (16) * coeff[(39 + i) & size_b][i] + (45) * coeff[(41 + i) & size_b][i] + (14) * coeff[(43 + i) & size_b][i] + (-36) * coeff[(45 + i) & size_b][i] + (-38) * coeff[(47 + i) & size_b][i] + (10) * coeff[(49 + i) & size_b][i] + (45) * coeff[(51 + i) & size_b][i] + (20) * coeff[(53 + i) & size_b][i] + (-31) * coeff[(55 + i) & size_b][i] + (-41) * coeff[(57 + i) & size_b][i] + (3) * coeff[(59 + i) & size_b][i] + (44) * coeff[(61 + i) & size_b][i] + (26) * coeff[(63 + i) & size_b][i];
		O[13] = (36) * coeff[(1 + i) & size_b][i] + (-18) * coeff[(3 + i) & size_b][i] + (-45) * coeff[(5 + i) & size_b][i] + (-3) * coeff[(7 + i) & size_b][i] + (43) * coeff[(9 + i) & size_b][i] + (24) * coeff[(11 + i) & size_b][i] + (-31) * coeff[(13 + i) & size_b][i] + (-39) * coeff[(15 + i) & size_b][i] + (12) * coeff[(17 + i) & size_b][i] + (45) * coeff[(19 + i) & size_b][i] + (10) * coeff[(21 + i) & size_b][i] + (-40) * coeff[(23 + i) & size_b][i] + (-30) * coeff[(25 + i) & size_b][i] + (26) * coeff[(27 + i) & size_b][i] + (42) * coeff[(29 + i) & size_b][i] + (-6) * coeff[(31 + i) & size_b][i] + (-45) * coeff[(33 + i) & size_b][i] + (-16) * coeff[(35 + i) & size_b][i] + (37) * coeff[(37 + i) & size_b][i] + (34) * coeff[(39 + i) & size_b][i] + (-20) * coeff[(41 + i) & size_b][i] + (-44) * coeff[(43 + i) & size_b][i] + (-1) * coeff[(45 + i) & size_b][i] + (44) * coeff[(47 + i) & size_b][i] + (22) * coeff[(49 + i) & size_b][i] + (-33) * coeff[(51 + i) & size_b][i] + (-38) * coeff[(53 + i) & size_b][i] + (14) * coeff[(55 + i) & size_b][i] + (45) * coeff[(57 + i) & size_b][i] + (8) * coeff[(59 + i) & size_b][i] + (-41) * coeff[(61 + i) & size_b][i] + (-28) * coeff[(63 + i) & size_b][i];
		O[14] = (34) * coeff[(1 + i) & size_b][i] + (-24) * coeff[(3 + i) & size_b][i] + (-41) * coeff[(5 + i) & size_b][i] + (12) * coeff[(7 + i) & size_b][i] + (45) * coeff[(9 + i) & size_b][i] + (1) * coeff[(11 + i) & size_b][i] + (-45) * coeff[(13 + i) & size_b][i] + (-14) * coeff[(15 + i) & size_b][i] + (40) * coeff[(17 + i) & size_b][i] + (26) * coeff[(19 + i) & size_b][i] + (-33) * coeff[(21 + i) & size_b][i] + (-36) * coeff[(23 + i) & size_b][i] + (22) * coeff[(25 + i) & size_b][i] + (42) * coeff[(27 + i) & size_b][i] + (-10) * coeff[(29 + i) & size_b][i] + (-45) * coeff[(31 + i) & size_b][i] + (-3) * coeff[(33 + i) & size_b][i] + (44) * coeff[(35 + i) & size_b][i] + (16) * coeff[(37 + i) & size_b][i] + (-39) * coeff[(39 + i) & size_b][i] + (-28) * coeff[(41 + i) & size_b][i] + (31) * coeff[(43 + i) & size_b][i] + (37) * coeff[(45 + i) & size_b][i] + (-20) * coeff[(47 + i) & size_b][i] + (-43) * coeff[(49 + i) & size_b][i] + (8) * coeff[(51 + i) & size_b][i] + (45) * coeff[(53 + i) & size_b][i] + (6) * coeff[(55 + i) & size_b][i] + (-44) * coeff[(57 + i) & size_b][i] + (-18) * coeff[(59 + i) & size_b][i] + (38) * coeff[(61 + i) & size_b][i] + (30) * coeff[(63 + i) & size_b][i];
		O[15] = (33) * coeff[(1 + i) & size_b][i] + (-30) * coeff[(3 + i) & size_b][i] + (-36) * coeff[(5 + i) & size_b][i] + (26) * coeff[(7 + i) & size_b][i] + (38) * coeff[(9 + i) & size_b][i] + (-22) * coeff[(11 + i) & size_b][i] + (-40) * coeff[(13 + i) & size_b][i] + (18) * coeff[(15 + i) & size_b][i] + (42) * coeff[(17 + i) & size_b][i] + (-14) * coeff[(19 + i) & size_b][i] + (-44) * coeff[(21 + i) & size_b][i] + (10) * coeff[(23 + i) & size_b][i] + (45) * coeff[(25 + i) & size_b][i] + (-6) * coeff[(27 + i) & size_b][i] + (-45) * coeff[(29 + i) & size_b][i] + (1) * coeff[(31 + i) & size_b][i] + (45) * coeff[(33 + i) & size_b][i] + (3) * coeff[(35 + i) & size_b][i] + (-45) * coeff[(37 + i) & size_b][i] + (-8) * coeff[(39 + i) & size_b][i] + (44) * coeff[(41 + i) & size_b][i] + (12) * coeff[(43 + i) & size_b][i] + (-43) * coeff[(45 + i) & size_b][i] + (-16) * coeff[(47 + i) & size_b][i] + (41) * coeff[(49 + i) & size_b][i] + (20) * coeff[(51 + i) & size_b][i] + (-39) * coeff[(53 + i) & size_b][i] + (-24) * coeff[(55 + i) & size_b][i] + (37) * coeff[(57 + i) & size_b][i] + (28) * coeff[(59 + i) & size_b][i] + (-34) * coeff[(61 + i) & size_b][i] + (-31) * coeff[(63 + i) & size_b][i];
		O[16] = (31) * coeff[(1 + i) & size_b][i] + (-34) * coeff[(3 + i) & size_b][i] + (-28) * coeff[(5 + i) & size_b][i] + (37) * coeff[(7 + i) & size_b][i] + (24) * coeff[(9 + i) & size_b][i] + (-39) * coeff[(11 + i) & size_b][i] + (-20) * coeff[(13 + i) & size_b][i] + (41) * coeff[(15 + i) & size_b][i] + (16) * coeff[(17 + i) & size_b][i] + (-43) * coeff[(19 + i) & size_b][i] + (-12) * coeff[(21 + i) & size_b][i] + (44) * coeff[(23 + i) & size_b][i] + (8) * coeff[(25 + i) & size_b][i] + (-45) * coeff[(27 + i) & size_b][i] + (-3) * coeff[(29 + i) & size_b][i] + (45) * coeff[(31 + i) & size_b][i] + (-1) * coeff[(33 + i) & size_b][i] + (-45) * coeff[(35 + i) & size_b][i] + (6) * coeff[(37 + i) & size_b][i] + (45) * coeff[(39 + i) & size_b][i] + (-10) * coeff[(41 + i) & size_b][i] + (-44) * coeff[(43 + i) & size_b][i] + (14) * coeff[(45 + i) & size_b][i] + (42) * coeff[(47 + i) & size_b][i] + (-18) * coeff[(49 + i) & size_b][i] + (-40) * coeff[(51 + i) & size_b][i] + (22) * coeff[(53 + i) & size_b][i] + (38) * coeff[(55 + i) & size_b][i] + (-26) * coeff[(57 + i) & size_b][i] + (-36) * coeff[(59 + i) & size_b][i] + (30) * coeff[(61 + i) & size_b][i] + (33) * coeff[(63 + i) & size_b][i];
		O[17] = (30) * coeff[(1 + i) & size_b][i] + (-38) * coeff[(3 + i) & size_b][i] + (-18) * coeff[(5 + i) & size_b][i] + (44) * coeff[(7 + i) & size_b][i] + (6) * coeff[(9 + i) & size_b][i] + (-45) * coeff[(11 + i) & size_b][i] + (8) * coeff[(13 + i) & size_b][i] + (43) * coeff[(15 + i) & size_b][i] + (-20) * coeff[(17 + i) & size_b][i] + (-37) * coeff[(19 + i) & size_b][i] + (31) * coeff[(21 + i) & size_b][i] + (28) * coeff[(23 + i) & size_b][i] + (-39) * coeff[(25 + i) & size_b][i] + (-16) * coeff[(27 + i) & size_b][i] + (44) * coeff[(29 + i) & size_b][i] + (3) * coeff[(31 + i) & size_b][i] + (-45) * coeff[(33 + i) & size_b][i] + (10) * coeff[(35 + i) & size_b][i] + (42) * coeff[(37 + i) & size_b][i] + (-22) * coeff[(39 + i) & size_b][i] + (-36) * coeff[(41 + i) & size_b][i] + (33) * coeff[(43 + i) & size_b][i] + (26) * coeff[(45 + i) & size_b][i] + (-40) * coeff[(47 + i) & size_b][i] + (-14) * coeff[(49 + i) & size_b][i] + (45) * coeff[(51 + i) & size_b][i] + (1) * coeff[(53 + i) & size_b][i] + (-45) * coeff[(55 + i) & size_b][i] + (12) * coeff[(57 + i) & size_b][i] + (41) * coeff[(59 + i) & size_b][i] + (-24) * coeff[(61 + i) & size_b][i] + (-34) * coeff[(63 + i) & size_b][i];
		O[18] = (28) * coeff[(1 + i) & size_b][i] + (-41) * coeff[(3 + i) & size_b][i] + (-8) * coeff[(5 + i) & size_b][i] + (45) * coeff[(7 + i) & size_b][i] + (-14) * coeff[(9 + i) & size_b][i] + (-38) * coeff[(11 + i) & size_b][i] + (33) * coeff[(13 + i) & size_b][i] + (22) * coeff[(15 + i) & size_b][i] + (-44) * coeff[(17 + i) & size_b][i] + (-1) * coeff[(19 + i) & size_b][i] + (44) * coeff[(21 + i) & size_b][i] + (-20) * coeff[(23 + i) & size_b][i] + (-34) * coeff[(25 + i) & size_b][i] + (37) * coeff[(27 + i) & size_b][i] + (16) * coeff[(29 + i) & size_b][i] + (-45) * coeff[(31 + i) & size_b][i] + (6) * coeff[(33 + i) & size_b][i] + (42) * coeff[(35 + i) & size_b][i] + (-26) * coeff[(37 + i) & size_b][i] + (-30) * coeff[(39 + i) & size_b][i] + (40) * coeff[(41 + i) & size_b][i] + (10) * coeff[(43 + i) & size_b][i] + (-45) * coeff[(45 + i) & size_b][i] + (12) * coeff[(47 + i) & size_b][i] + (39) * coeff[(49 + i) & size_b][i] + (-31) * coeff[(51 + i) & size_b][i] + (-24) * coeff[(53 + i) & size_b][i] + (43) * coeff[(55 + i) & size_b][i] + (3) * coeff[(57 + i) & size_b][i] + (-45) * coeff[(59 + i) & size_b][i] + (18) * coeff[(61 + i) & size_b][i] + (36) * coeff[(63 + i) & size_b][i];
		O[19] = (26) * coeff[(1 + i) & size_b][i] + (-44) * coeff[(3 + i) & size_b][i] + (3) * coeff[(5 + i) & size_b][i] + (41) * coeff[(7 + i) & size_b][i] + (-31) * coeff[(9 + i) & size_b][i] + (-20) * coeff[(11 + i) & size_b][i] + (45) * coeff[(13 + i) & size_b][i] + (-10) * coeff[(15 + i) & size_b][i] + (-38) * coeff[(17 + i) & size_b][i] + (36) * coeff[(19 + i) & size_b][i] + (14) * coeff[(21 + i) & size_b][i] + (-45) * coeff[(23 + i) & size_b][i] + (16) * coeff[(25 + i) & size_b][i] + (34) * coeff[(27 + i) & size_b][i] + (-39) * coeff[(29 + i) & size_b][i] + (-8) * coeff[(31 + i) & size_b][i] + (45) * coeff[(33 + i) & size_b][i] + (-22) * coeff[(35 + i) & size_b][i] + (-30) * coeff[(37 + i) & size_b][i] + (42) * coeff[(39 + i) & size_b][i] + (1) * coeff[(41 + i) & size_b][i] + (-43) * coeff[(43 + i) & size_b][i] + (28) * coeff[(45 + i) & size_b][i] + (24) * coeff[(47 + i) & size_b][i] + (-44) * coeff[(49 + i) & size_b][i] + (6) * coeff[(51 + i) & size_b][i] + (40) * coeff[(53 + i) & size_b][i] + (-33) * coeff[(55 + i) & size_b][i] + (-18) * coeff[(57 + i) & size_b][i] + (45) * coeff[(59 + i) & size_b][i] + (-12) * coeff[(61 + i) & size_b][i] + (-37) * coeff[(63 + i) & size_b][i];
		O[20] = (24) * coeff[(1 + i) & size_b][i] + (-45) * coeff[(3 + i) & size_b][i] + (14) * coeff[(5 + i) & size_b][i] + (33) * coeff[(7 + i) & size_b][i] + (-42) * coeff[(9 + i) & size_b][i] + (3) * coeff[(11 + i) & size_b][i] + (39) * coeff[(13 + i) & size_b][i] + (-37) * coeff[(15 + i) & size_b][i] + (-8) * coeff[(17 + i) & size_b][i] + (44) * coeff[(19 + i) & size_b][i] + (-30) * coeff[(21 + i) & size_b][i] + (-18) * coeff[(23 + i) & size_b][i] + (45) * coeff[(25 + i) & size_b][i] + (-20) * coeff[(27 + i) & size_b][i] + (-28) * coeff[(29 + i) & size_b][i] + (44) * coeff[(31 + i) & size_b][i] + (-10) * coeff[(33 + i) & size_b][i] + (-36) * coeff[(35 + i) & size_b][i] + (40) * coeff[(37 + i) & size_b][i] + (1) * coeff[(39 + i) & size_b][i] + (-41) * coeff[(41 + i) & size_b][i] + (34) * coeff[(43 + i) & size_b][i] + (12) * coeff[(45 + i) & size_b][i] + (-45) * coeff[(47 + i) & size_b][i] + (26) * coeff[(49 + i) & size_b][i] + (22) * coeff[(51 + i) & size_b][i] + (-45) * coeff[(53 + i) & size_b][i] + (16) * coeff[(55 + i) & size_b][i] + (31) * coeff[(57 + i) & size_b][i] + (-43) * coeff[(59 + i) & size_b][i] + (6) * coeff[(61 + i) & size_b][i] + (38) * coeff[(63 + i) & size_b][i];
		O[21] = (22) * coeff[(1 + i) & size_b][i] + (-45) * coeff[(3 + i) & size_b][i] + (24) * coeff[(5 + i) & size_b][i] + (20) * coeff[(7 + i) & size_b][i] + (-45) * coeff[(9 + i) & size_b][i] + (26) * coeff[(11 + i) & size_b][i] + (18) * coeff[(13 + i) & size_b][i] + (-45) * coeff[(15 + i) & size_b][i] + (28) * coeff[(17 + i) & size_b][i] + (16) * coeff[(19 + i) & size_b][i] + (-45) * coeff[(21 + i) & size_b][i] + (30) * coeff[(23 + i) & size_b][i] + (14) * coeff[(25 + i) & size_b][i] + (-44) * coeff[(27 + i) & size_b][i] + (31) * coeff[(29 + i) & size_b][i] + (12) * coeff[(31 + i) & size_b][i] + (-44) * coeff[(33 + i) & size_b][i] + (33) * coeff[(35 + i) & size_b][i] + (10) * coeff[(37 + i) & size_b][i] + (-43) * coeff[(39 + i) & size_b][i] + (34) * coeff[(41 + i) & size_b][i] + (8) * coeff[(43 + i) & size_b][i] + (-42) * coeff[(45 + i) & size_b][i] + (36) * coeff[(47 + i) & size_b][i] + (6) * coeff[(49 + i) & size_b][i] + (-41) * coeff[(51 + i) & size_b][i] + (37) * coeff[(53 + i) & size_b][i] + (3) * coeff[(55 + i) & size_b][i] + (-40) * coeff[(57 + i) & size_b][i] + (38) * coeff[(59 + i) & size_b][i] + (1) * coeff[(61 + i) & size_b][i] + (-39) * coeff[(63 + i) & size_b][i];
		O[22] = (20) * coeff[(1 + i) & size_b][i] + (-45) * coeff[(3 + i) & size_b][i] + (33) * coeff[(5 + i) & size_b][i] + (6) * coeff[(7 + i) & size_b][i] + (-39) * coeff[(9 + i) & size_b][i] + (41) * coeff[(11 + i) & size_b][i] + (-10) * coeff[(13 + i) & size_b][i] + (-30) * coeff[(15 + i) & size_b][i] + (45) * coeff[(17 + i) & size_b][i] + (-24) * coeff[(19 + i) & size_b][i] + (-16) * coeff[(21 + i) & size_b][i] + (44) * coeff[(23 + i) & size_b][i] + (-36) * coeff[(25 + i) & size_b][i] + (-1) * coeff[(27 + i) & size_b][i] + (37) * coeff[(29 + i) & size_b][i] + (-43) * coeff[(31 + i) & size_b][i] + (14) * coeff[(33 + i) & size_b][i] + (26) * coeff[(35 + i) & size_b][i] + (-45) * coeff[(37 + i) & size_b][i] + (28) * coeff[(39 + i) & size_b][i] + (12) * coeff[(41 + i) & size_b][i] + (-42) * coeff[(43 + i) & size_b][i] + (38) * coeff[(45 + i) & size_b][i] + (-3) * coeff[(47 + i) & size_b][i] + (-34) * coeff[(49 + i) & size_b][i] + (44) * coeff[(51 + i) & size_b][i] + (-18) * coeff[(53 + i) & size_b][i] + (-22) * coeff[(55 + i) & size_b][i] + (45) * coeff[(57 + i) & size_b][i] + (-31) * coeff[(59 + i) & size_b][i] + (-8) * coeff[(61 + i) & size_b][i] + (40) * coeff[(63 + i) & size_b][i];
		O[23] = (18) * coeff[(1 + i) & size_b][i] + (-43) * coeff[(3 + i) & size_b][i] + (39) * coeff[(5 + i) & size_b][i] + (-10) * coeff[(7 + i) & size_b][i] + (-26) * coeff[(9 + i) & size_b][i] + (45) * coeff[(11 + i) & size_b][i] + (-34) * coeff[(13 + i) & size_b][i] + (1) * coeff[(15 + i) & size_b][i] + (33) * coeff[(17 + i) & size_b][i] + (-45) * coeff[(19 + i) & size_b][i] + (28) * coeff[(21 + i) & size_b][i] + (8) * coeff[(23 + i) & size_b][i] + (-38) * coeff[(25 + i) & size_b][i] + (44) * coeff[(27 + i) & size_b][i] + (-20) * coeff[(29 + i) & size_b][i] + (-16) * coeff[(31 + i) & size_b][i] + (42) * coeff[(33 + i) & size_b][i] + (-40) * coeff[(35 + i) & size_b][i] + (12) * coeff[(37 + i) & size_b][i] + (24) * coeff[(39 + i) & size_b][i] + (-45) * coeff[(41 + i) & size_b][i] + (36) * coeff[(43 + i) & size_b][i] + (-3) * coeff[(45 + i) & size_b][i] + (-31) * coeff[(47 + i) & size_b][i] + (45) * coeff[(49 + i) & size_b][i] + (-30) * coeff[(51 + i) & size_b][i] + (-6) * coeff[(53 + i) & size_b][i] + (37) * coeff[(55 + i) & size_b][i] + (-44) * coeff[(57 + i) & size_b][i] + (22) * coeff[(59 + i) & size_b][i] + (14) * coeff[(61 + i) & size_b][i] + (-41) * coeff[(63 + i) & size_b][i];
		O[24] = (16) * coeff[(1 + i) & size_b][i] + (-40) * coeff[(3 + i) & size_b][i] + (44) * coeff[(5 + i) & size_b][i] + (-24) * coeff[(7 + i) & size_b][i] + (-8) * coeff[(9 + i) & size_b][i] + (36) * coeff[(11 + i) & size_b][i] + (-45) * coeff[(13 + i) & size_b][i] + (31) * coeff[(15 + i) & size_b][i] + (-1) * coeff[(17 + i) & size_b][i] + (-30) * coeff[(19 + i) & size_b][i] + (45) * coeff[(21 + i) & size_b][i] + (-37) * coeff[(23 + i) & size_b][i] + (10) * coeff[(25 + i) & size_b][i] + (22) * coeff[(27 + i) & size_b][i] + (-43) * coeff[(29 + i) & size_b][i] + (41) * coeff[(31 + i) & size_b][i] + (-18) * coeff[(33 + i) & size_b][i] + (-14) * coeff[(35 + i) & size_b][i] + (39) * coeff[(37 + i) & size_b][i] + (-44) * coeff[(39 + i) & size_b][i] + (26) * coeff[(41 + i) & size_b][i] + (6) * coeff[(43 + i) & size_b][i] + (-34) * coeff[(45 + i) & size_b][i] + (45) * coeff[(47 + i) & size_b][i] + (-33) * coeff[(49 + i) & size_b][i] + (3) * coeff[(51 + i) & size_b][i] + (28) * coeff[(53 + i) & size_b][i] + (-45) * coeff[(55 + i) & size_b][i] + (38) * coeff[(57 + i) & size_b][i] + (-12) * coeff[(59 + i) & size_b][i] + (-20) * coeff[(61 + i) & size_b][i] + (42) * coeff[(63 + i) & size_b][i];
		O[25] = (14) * coeff[(1 + i) & size_b][i] + (-37) * coeff[(3 + i) & size_b][i] + (45) * coeff[(5 + i) & size_b][i] + (-36) * coeff[(7 + i) & size_b][i] + (12) * coeff[(9 + i) & size_b][i] + (16) * coeff[(11 + i) & size_b][i] + (-38) * coeff[(13 + i) & size_b][i] + (45) * coeff[(15 + i) & size_b][i] + (-34) * coeff[(17 + i) & size_b][i] + (10) * coeff[(19 + i) & size_b][i] + (18) * coeff[(21 + i) & size_b][i] + (-39) * coeff[(23 + i) & size_b][i] + (45) * coeff[(25 + i) & size_b][i] + (-33) * coeff[(27 + i) & size_b][i] + (8) * coeff[(29 + i) & size_b][i] + (20) * coeff[(31 + i) & size_b][i] + (-40) * coeff[(33 + i) & size_b][i] + (45) * coeff[(35 + i) & size_b][i] + (-31) * coeff[(37 + i) & size_b][i] + (6) * coeff[(39 + i) & size_b][i] + (22) * coeff[(41 + i) & size_b][i] + (-41) * coeff[(43 + i) & size_b][i] + (44) * coeff[(45 + i) & size_b][i] + (-30) * coeff[(47 + i) & size_b][i] + (3) * coeff[(49 + i) & size_b][i] + (24) * coeff[(51 + i) & size_b][i] + (-42) * coeff[(53 + i) & size_b][i] + (44) * coeff[(55 + i) & size_b][i] + (-28) * coeff[(57 + i) & size_b][i] + (1) * coeff[(59 + i) & size_b][i] + (26) * coeff[(61 + i) & size_b][i] + (-43) * coeff[(63 + i) & size_b][i];
		O[26] = (12) * coeff[(1 + i) & size_b][i] + (-33) * coeff[(3 + i) & size_b][i] + (44) * coeff[(5 + i) & size_b][i] + (-43) * coeff[(7 + i) & size_b][i] + (30) * coeff[(9 + i) & size_b][i] + (-8) * coeff[(11 + i) & size_b][i] + (-16) * coeff[(13 + i) & size_b][i] + (36) * coeff[(15 + i) & size_b][i] + (-45) * coeff[(17 + i) & size_b][i] + (41) * coeff[(19 + i) & size_b][i] + (-26) * coeff[(21 + i) & size_b][i] + (3) * coeff[(23 + i) & size_b][i] + (20) * coeff[(25 + i) & size_b][i] + (-38) * coeff[(27 + i) & size_b][i] + (45) * coeff[(29 + i) & size_b][i] + (-39) * coeff[(31 + i) & size_b][i] + (22) * coeff[(33 + i) & size_b][i] + (1) * coeff[(35 + i) & size_b][i] + (-24) * coeff[(37 + i) & size_b][i] + (40) * coeff[(39 + i) & size_b][i] + (-45) * coeff[(41 + i) & size_b][i] + (37) * coeff[(43 + i) & size_b][i] + (-18) * coeff[(45 + i) & size_b][i] + (-6) * coeff[(47 + i) & size_b][i] + (28) * coeff[(49 + i) & size_b][i] + (-42) * coeff[(51 + i) & size_b][i] + (45) * coeff[(53 + i) & size_b][i] + (-34) * coeff[(55 + i) & size_b][i] + (14) * coeff[(57 + i) & size_b][i] + (10) * coeff[(59 + i) & size_b][i] + (-31) * coeff[(61 + i) & size_b][i] + (44) * coeff[(63 + i) & size_b][i];
		O[27] = (10) * coeff[(1 + i) & size_b][i] + (-28) * coeff[(3 + i) & size_b][i] + (40) * coeff[(5 + i) & size_b][i] + (-45) * coeff[(7 + i) & size_b][i] + (41) * coeff[(9 + i) & size_b][i] + (-30) * coeff[(11 + i) & size_b][i] + (12) * coeff[(13 + i) & size_b][i] + (8) * coeff[(15 + i) & size_b][i] + (-26) * coeff[(17 + i) & size_b][i] + (39) * coeff[(19 + i) & size_b][i] + (-45) * coeff[(21 + i) & size_b][i] + (42) * coeff[(23 + i) & size_b][i] + (-31) * coeff[(25 + i) & size_b][i] + (14) * coeff[(27 + i) & size_b][i] + (6) * coeff[(29 + i) & size_b][i] + (-24) * coeff[(31 + i) & size_b][i] + (38) * coeff[(33 + i) & size_b][i] + (-45) * coeff[(35 + i) & size_b][i] + (43) * coeff[(37 + i) & size_b][i] + (-33) * coeff[(39 + i) & size_b][i] + (16) * coeff[(41 + i) & size_b][i] + (3) * coeff[(43 + i) & size_b][i] + (-22) * coeff[(45 + i) & size_b][i] + (37) * coeff[(47 + i) & size_b][i] + (-45) * coeff[(49 + i) & size_b][i] + (44) * coeff[(51 + i) & size_b][i] + (-34) * coeff[(53 + i) & size_b][i] + (18) * coeff[(55 + i) & size_b][i] + (1) * coeff[(57 + i) & size_b][i] + (-20) * coeff[(59 + i) & size_b][i] + (36) * coeff[(61 + i) & size_b][i] + (-44) * coeff[(63 + i) & size_b][i] ;
		O[28] = (8) * coeff[(1 + i) & size_b][i] + (-22) * coeff[(3 + i) & size_b][i] + (34) * coeff[(5 + i) & size_b][i] + (-42) * coeff[(7 + i) & size_b][i] + (45) * coeff[(9 + i) & size_b][i] + (-43) * coeff[(11 + i) & size_b][i] + (36) * coeff[(13 + i) & size_b][i] + (-24) * coeff[(15 + i) & size_b][i] + (10) * coeff[(17 + i) & size_b][i] + (6) * coeff[(19 + i) & size_b][i] + (-20) * coeff[(21 + i) & size_b][i] + (33) * coeff[(23 + i) & size_b][i] + (-41) * coeff[(25 + i) & size_b][i] + (45) * coeff[(27 + i) & size_b][i] + (-44) * coeff[(29 + i) & size_b][i] + (37) * coeff[(31 + i) & size_b][i] + (-26) * coeff[(33 + i) & size_b][i] + (12) * coeff[(35 + i) & size_b][i] + (3) * coeff[(37 + i) & size_b][i] + (-18) * coeff[(39 + i) & size_b][i] + (31) * coeff[(41 + i) & size_b][i] + (-40) * coeff[(43 + i) & size_b][i] + (45) * coeff[(45 + i) & size_b][i] + (-44) * coeff[(47 + i) & size_b][i] + (38) * coeff[(49 + i) & size_b][i] + (-28) * coeff[(51 + i) & size_b][i] + (14) * coeff[(53 + i) & size_b][i] + (1) * coeff[(55 + i) & size_b][i] + (-16) * coeff[(57 + i) & size_b][i] + (30) * coeff[(59 + i) & size_b][i] + (-39) * coeff[(61 + i) & size_b][i] + (45) * coeff[(63 + i) & size_b][i] ;
		O[29] = (6) * coeff[(1 + i) & size_b][i] + (-16) * coeff[(3 + i) & size_b][i] + (26) * coeff[(5 + i) & size_b][i] + (-34) * coeff[(7 + i) & size_b][i] + (40) * coeff[(9 + i) & size_b][i] + (-44) * coeff[(11 + i) & size_b][i] + (45) * coeff[(13 + i) & size_b][i] + (-44) * coeff[(15 + i) & size_b][i] + (39) * coeff[(17 + i) & size_b][i] + (-33) * coeff[(19 + i) & size_b][i] + (24) * coeff[(21 + i) & size_b][i] + (-14) * coeff[(23 + i) & size_b][i] + (3) * coeff[(25 + i) & size_b][i] + (8) * coeff[(27 + i) & size_b][i] + (-18) * coeff[(29 + i) & size_b][i] + (28) * coeff[(31 + i) & size_b][i] + (-36) * coeff[(33 + i) & size_b][i] + (41) * coeff[(35 + i) & size_b][i] + (-45) * coeff[(37 + i) & size_b][i] + (45) * coeff[(39 + i) & size_b][i] + (-43) * coeff[(41 + i) & size_b][i] + (38) * coeff[(43 + i) & size_b][i] + (-31) * coeff[(45 + i) & size_b][i] + (22) * coeff[(47 + i) & size_b][i] + (-12) * coeff[(49 + i) & size_b][i] + (1) * coeff[(51 + i) & size_b][i] + (10) * coeff[(53 + i) & size_b][i] + (-20) * coeff[(55 + i) & size_b][i] + (30) * coeff[(57 + i) & size_b][i] + (-37) * coeff[(59 + i) & size_b][i] + (42) * coeff[(61 + i) & size_b][i] + (-45) * coeff[(63 + i) & size_b][i] ;
		O[30] = (3) * coeff[(1 + i) & size_b][i] + (-10) * coeff[(3 + i) & size_b][i] + (16) * coeff[(5 + i) & size_b][i] + (-22) * coeff[(7 + i) & size_b][i] + (28) * coeff[(9 + i) & size_b][i] + (-33) * coeff[(11 + i) & size_b][i] + (37) * coeff[(13 + i) & size_b][i] + (-40) * coeff[(15 + i) & size_b][i] + (43) * coeff[(17 + i) & size_b][i] + (-45) * coeff[(19 + i) & size_b][i] + (45) * coeff[(21 + i) & size_b][i] + (-45) * coeff[(23 + i) & size_b][i] + (44) * coeff[(25 + i) & size_b][i] + (-41) * coeff[(27 + i) & size_b][i] + (38) * coeff[(29 + i) & size_b][i] + (-34) * coeff[(31 + i) & size_b][i] + (30) * coeff[(33 + i) & size_b][i] + (-24) * coeff[(35 + i) & size_b][i] + (18) * coeff[(37 + i) & size_b][i] + (-12) * coeff[(39 + i) & size_b][i] + (6) * coeff[(41 + i) & size_b][i] + (1) * coeff[(43 + i) & size_b][i] + (-8) * coeff[(45 + i) & size_b][i] + (14) * coeff[(47 + i) & size_b][i] + (-20) * coeff[(49 + i) & size_b][i] + (26) * coeff[(51 + i) & size_b][i] + (-31) * coeff[(53 + i) & size_b][i] + (36) * coeff[(55 + i) & size_b][i] + (-39) * coeff[(57 + i) & size_b][i] + (42) * coeff[(59 + i) & size_b][i] + (-44) * coeff[(61 + i) & size_b][i] + (45) * coeff[(63 + i) & size_b][i] ;
		O[31] = (1) * coeff[(1 + i) & size_b][i] + (-3) * coeff[(3 + i) & size_b][i] + (6) * coeff[(5 + i) & size_b][i] + (-8) * coeff[(7 + i) & size_b][i] + (10) * coeff[(9 + i) & size_b][i] + (-12) * coeff[(11 + i) & size_b][i] + (14) * coeff[(13 + i) & size_b][i] + (-16) * coeff[(15 + i) & size_b][i] + (18) * coeff[(17 + i) & size_b][i] + (-20) * coeff[(19 + i) & size_b][i] + (22) * coeff[(21 + i) & size_b][i] + (-24) * coeff[(23 + i) & size_b][i] + (26) * coeff[(25 + i) & size_b][i] + (-28) * coeff[(27 + i) & size_b][i] + (30) * coeff[(29 + i) & size_b][i] + (-31) * coeff[(31 + i) & size_b][i] + (33) * coeff[(33 + i) & size_b][i] + (-34) * coeff[(35 + i) & size_b][i] + (36) * coeff[(37 + i) & size_b][i] + (-37) * coeff[(39 + i) & size_b][i] + (38) * coeff[(41 + i) & size_b][i] + (-39) * coeff[(43 + i) & size_b][i] + (40) * coeff[(45 + i) & size_b][i] + (-41) * coeff[(47 + i) & size_b][i] + (42) * coeff[(49 + i) & size_b][i] + (-43) * coeff[(51 + i) & size_b][i] + (44) * coeff[(53 + i) & size_b][i] + (-44) * coeff[(55 + i) & size_b][i] + (45) * coeff[(57 + i) & size_b][i] + (-45) * coeff[(59 + i) & size_b][i] + (45) * coeff[(61 + i) & size_b][i] + (-45) * coeff[(63 + i) & size_b][i];	
		
		EO[0] = (45) * coeff[(2 + i) & size_b][i] + (45) * coeff[(6 + i) & size_b][i] + (44) * coeff[(10 + i) & size_b][i] + (43) * coeff[(14 + i) & size_b][i] + (41) * coeff[(18 + i) & size_b][i] + (39) * coeff[(22 + i) & size_b][i] + (36) * coeff[(26 + i) & size_b][i] + (34) * coeff[(30 + i) & size_b][i] + (30) * coeff[(34 + i) & size_b][i] + (27) * coeff[(38 + i) & size_b][i] + (23) * coeff[(42 + i) & size_b][i] + (19) * coeff[(46 + i) & size_b][i] + (15) * coeff[(50 + i) & size_b][i] + (11) * coeff[(54 + i) & size_b][i] + (7) * coeff[(58 + i) & size_b][i] + (2) * coeff[(62 + i) & size_b][i];
		EO[1] = (45) * coeff[(2 + i) & size_b][i] + (41) * coeff[(6 + i) & size_b][i] + (34) * coeff[(10 + i) & size_b][i] + (23) * coeff[(14 + i) & size_b][i] + (11) * coeff[(18 + i) & size_b][i] + (-2) * coeff[(22 + i) & size_b][i] + (-15) * coeff[(26 + i) & size_b][i] + (-27) * coeff[(30 + i) & size_b][i] + (-36) * coeff[(34 + i) & size_b][i] + (-43) * coeff[(38 + i) & size_b][i] + (-45) * coeff[(42 + i) & size_b][i] + (-44) * coeff[(46 + i) & size_b][i] + (-39) * coeff[(50 + i) & size_b][i] + (-30) * coeff[(54 + i) & size_b][i] + (-19) * coeff[(58 + i) & size_b][i] + (-7) * coeff[(62 + i) & size_b][i];
		EO[2] = (44) * coeff[(2 + i) & size_b][i] + (34) * coeff[(6 + i) & size_b][i] + (15) * coeff[(10 + i) & size_b][i] + (-7) * coeff[(14 + i) & size_b][i] + (-27) * coeff[(18 + i) & size_b][i] + (-41) * coeff[(22 + i) & size_b][i] + (-45) * coeff[(26 + i) & size_b][i] + (-39) * coeff[(30 + i) & size_b][i] + (-23) * coeff[(34 + i) & size_b][i] + (-2) * coeff[(38 + i) & size_b][i] + (19) * coeff[(42 + i) & size_b][i] + (36) * coeff[(46 + i) & size_b][i] + (45) * coeff[(50 + i) & size_b][i] + (43) * coeff[(54 + i) & size_b][i] + (30) * coeff[(58 + i) & size_b][i] + (11) * coeff[(62 + i) & size_b][i];
		EO[3] = (43) * coeff[(2 + i) & size_b][i] + (23) * coeff[(6 + i) & size_b][i] + (-7) * coeff[(10 + i) & size_b][i] + (-34) * coeff[(14 + i) & size_b][i] + (-45) * coeff[(18 + i) & size_b][i] + (-36) * coeff[(22 + i) & size_b][i] + (-11) * coeff[(26 + i) & size_b][i] + (19) * coeff[(30 + i) & size_b][i] + (41) * coeff[(34 + i) & size_b][i] + (44) * coeff[(38 + i) & size_b][i] + (27) * coeff[(42 + i) & size_b][i] + (-2) * coeff[(46 + i) & size_b][i] + (-30) * coeff[(50 + i) & size_b][i] + (-45) * coeff[(54 + i) & size_b][i] + (-39) * coeff[(58 + i) & size_b][i] + (-15) * coeff[(62 + i) & size_b][i];
		EO[4] = (41) * coeff[(2 + i) & size_b][i] + (11) * coeff[(6 + i) & size_b][i] + (-27) * coeff[(10 + i) & size_b][i] + (-45) * coeff[(14 + i) & size_b][i] + (-30) * coeff[(18 + i) & size_b][i] + (7) * coeff[(22 + i) & size_b][i] + (39) * coeff[(26 + i) & size_b][i] + (43) * coeff[(30 + i) & size_b][i] + (15) * coeff[(34 + i) & size_b][i] + (-23) * coeff[(38 + i) & size_b][i] + (-45) * coeff[(42 + i) & size_b][i] + (-34) * coeff[(46 + i) & size_b][i] + (2) * coeff[(50 + i) & size_b][i] + (36) * coeff[(54 + i) & size_b][i] + (44) * coeff[(58 + i) & size_b][i] + (19) * coeff[(62 + i) & size_b][i];
		EO[5] = (39) * coeff[(2 + i) & size_b][i] + (-2) * coeff[(6 + i) & size_b][i] + (-41) * coeff[(10 + i) & size_b][i] + (-36) * coeff[(14 + i) & size_b][i] + (7) * coeff[(18 + i) & size_b][i] + (43) * coeff[(22 + i) & size_b][i] + (34) * coeff[(26 + i) & size_b][i] + (-11) * coeff[(30 + i) & size_b][i] + (-44) * coeff[(34 + i) & size_b][i] + (-30) * coeff[(38 + i) & size_b][i] + (15) * coeff[(42 + i) & size_b][i] + (45) * coeff[(46 + i) & size_b][i] + (27) * coeff[(50 + i) & size_b][i] + (-19) * coeff[(54 + i) & size_b][i] + (-45) * coeff[(58 + i) & size_b][i] + (-23) * coeff[(62 + i) & size_b][i];
		EO[6] = (36) * coeff[(2 + i) & size_b][i] + (-15) * coeff[(6 + i) & size_b][i] + (-45) * coeff[(10 + i) & size_b][i] + (-11) * coeff[(14 + i) & size_b][i] + (39) * coeff[(18 + i) & size_b][i] + (34) * coeff[(22 + i) & size_b][i] + (-19) * coeff[(26 + i) & size_b][i] + (-45) * coeff[(30 + i) & size_b][i] + (-7) * coeff[(34 + i) & size_b][i] + (41) * coeff[(38 + i) & size_b][i] + (30) * coeff[(42 + i) & size_b][i] + (-23) * coeff[(46 + i) & size_b][i] + (-44) * coeff[(50 + i) & size_b][i] + (-2) * coeff[(54 + i) & size_b][i] + (43) * coeff[(58 + i) & size_b][i] + (27) * coeff[(62 + i) & size_b][i];
		EO[7] = (34) * coeff[(2 + i) & size_b][i] + (-27) * coeff[(6 + i) & size_b][i] + (-39) * coeff[(10 + i) & size_b][i] + (19) * coeff[(14 + i) & size_b][i] + (43) * coeff[(18 + i) & size_b][i] + (-11) * coeff[(22 + i) & size_b][i] + (-45) * coeff[(26 + i) & size_b][i] + (2) * coeff[(30 + i) & size_b][i] + (45) * coeff[(34 + i) & size_b][i] + (7) * coeff[(38 + i) & size_b][i] + (-44) * coeff[(42 + i) & size_b][i] + (-15) * coeff[(46 + i) & size_b][i] + (41) * coeff[(50 + i) & size_b][i] + (23) * coeff[(54 + i) & size_b][i] + (-36) * coeff[(58 + i) & size_b][i] + (-30) * coeff[(62 + i) & size_b][i];
		EO[8] = (30) * coeff[(2 + i) & size_b][i] + (-36) * coeff[(6 + i) & size_b][i] + (-23) * coeff[(10 + i) & size_b][i] + (41) * coeff[(14 + i) & size_b][i] + (15) * coeff[(18 + i) & size_b][i] + (-44) * coeff[(22 + i) & size_b][i] + (-7) * coeff[(26 + i) & size_b][i] + (45) * coeff[(30 + i) & size_b][i] + (-2) * coeff[(34 + i) & size_b][i] + (-45) * coeff[(38 + i) & size_b][i] + (11) * coeff[(42 + i) & size_b][i] + (43) * coeff[(46 + i) & size_b][i] + (-19) * coeff[(50 + i) & size_b][i] + (-39) * coeff[(54 + i) & size_b][i] + (27) * coeff[(58 + i) & size_b][i] + (34) * coeff[(62 + i) & size_b][i];
		EO[9] = (27) * coeff[(2 + i) & size_b][i] + (-43) * coeff[(6 + i) & size_b][i] + (-2) * coeff[(10 + i) & size_b][i] + (44) * coeff[(14 + i) & size_b][i] + (-23) * coeff[(18 + i) & size_b][i] + (-30) * coeff[(22 + i) & size_b][i] + (41) * coeff[(26 + i) & size_b][i] + (7) * coeff[(30 + i) & size_b][i] + (-45) * coeff[(34 + i) & size_b][i] + (19) * coeff[(38 + i) & size_b][i] + (34) * coeff[(42 + i) & size_b][i] + (-39) * coeff[(46 + i) & size_b][i] + (-11) * coeff[(50 + i) & size_b][i] + (45) * coeff[(54 + i) & size_b][i] + (-15) * coeff[(58 + i) & size_b][i] + (-36) * coeff[(62 + i) & size_b][i];
		EO[10] = (23) * coeff[(2 + i) & size_b][i] + (-45) * coeff[(6 + i) & size_b][i] + (19) * coeff[(10 + i) & size_b][i] + (27) * coeff[(14 + i) & size_b][i] + (-45) * coeff[(18 + i) & size_b][i] + (15) * coeff[(22 + i) & size_b][i] + (30) * coeff[(26 + i) & size_b][i] + (-44) * coeff[(30 + i) & size_b][i] + (11) * coeff[(34 + i) & size_b][i] + (34) * coeff[(38 + i) & size_b][i] + (-43) * coeff[(42 + i) & size_b][i] + (7) * coeff[(46 + i) & size_b][i] + (36) * coeff[(50 + i) & size_b][i] + (-41) * coeff[(54 + i) & size_b][i] + (2) * coeff[(58 + i) & size_b][i] + (39) * coeff[(62 + i) & size_b][i];
		EO[11] = (19) * coeff[(2 + i) & size_b][i] + (-44) * coeff[(6 + i) & size_b][i] + (36) * coeff[(10 + i) & size_b][i] + (-2) * coeff[(14 + i) & size_b][i] + (-34) * coeff[(18 + i) & size_b][i] + (45) * coeff[(22 + i) & size_b][i] + (-23) * coeff[(26 + i) & size_b][i] + (-15) * coeff[(30 + i) & size_b][i] + (43) * coeff[(34 + i) & size_b][i] + (-39) * coeff[(38 + i) & size_b][i] + (7) * coeff[(42 + i) & size_b][i] + (30) * coeff[(46 + i) & size_b][i] + (-45) * coeff[(50 + i) & size_b][i] + (27) * coeff[(54 + i) & size_b][i] + (11) * coeff[(58 + i) & size_b][i] + (-41) * coeff[(62 + i) & size_b][i];
		EO[12] = (15) * coeff[(2 + i) & size_b][i] + (-39) * coeff[(6 + i) & size_b][i] + (45) * coeff[(10 + i) & size_b][i] + (-30) * coeff[(14 + i) & size_b][i] + (2) * coeff[(18 + i) & size_b][i] + (27) * coeff[(22 + i) & size_b][i] + (-44) * coeff[(26 + i) & size_b][i] + (41) * coeff[(30 + i) & size_b][i] + (-19) * coeff[(34 + i) & size_b][i] + (-11) * coeff[(38 + i) & size_b][i] + (36) * coeff[(42 + i) & size_b][i] + (-45) * coeff[(46 + i) & size_b][i] + (34) * coeff[(50 + i) & size_b][i] + (-7) * coeff[(54 + i) & size_b][i] + (-23) * coeff[(58 + i) & size_b][i] + (43) * coeff[(62 + i) & size_b][i];
		EO[13] = (11) * coeff[(2 + i) & size_b][i] + (-30) * coeff[(6 + i) & size_b][i] + (43) * coeff[(10 + i) & size_b][i] + (-45) * coeff[(14 + i) & size_b][i] + (36) * coeff[(18 + i) & size_b][i] + (-19) * coeff[(22 + i) & size_b][i] + (-2) * coeff[(26 + i) & size_b][i] + (23) * coeff[(30 + i) & size_b][i] + (-39) * coeff[(34 + i) & size_b][i] + (45) * coeff[(38 + i) & size_b][i] + (-41) * coeff[(42 + i) & size_b][i] + (27) * coeff[(46 + i) & size_b][i] + (-7) * coeff[(50 + i) & size_b][i] + (-15) * coeff[(54 + i) & size_b][i] + (34) * coeff[(58 + i) & size_b][i] + (-44) * coeff[(62 + i) & size_b][i];
		EO[14] = (7) * coeff[(2 + i) & size_b][i] + (-19) * coeff[(6 + i) & size_b][i] + (30) * coeff[(10 + i) & size_b][i] + (-39) * coeff[(14 + i) & size_b][i] + (44) * coeff[(18 + i) & size_b][i] + (-45) * coeff[(22 + i) & size_b][i] + (43) * coeff[(26 + i) & size_b][i] + (-36) * coeff[(30 + i) & size_b][i] + (27) * coeff[(34 + i) & size_b][i] + (-15) * coeff[(38 + i) & size_b][i] + (2) * coeff[(42 + i) & size_b][i] + (11) * coeff[(46 + i) & size_b][i] + (-23) * coeff[(50 + i) & size_b][i] + (34) * coeff[(54 + i) & size_b][i] + (-41) * coeff[(58 + i) & size_b][i] + (45) * coeff[(62 + i) & size_b][i];
		EO[15] = (2) * coeff[(2 + i) & size_b][i] + (-7) * coeff[(6 + i) & size_b][i] + (11) * coeff[(10 + i) & size_b][i] + (-15) * coeff[(14 + i) & size_b][i] + (19) * coeff[(18 + i) & size_b][i] + (-23) * coeff[(22 + i) & size_b][i] + (27) * coeff[(26 + i) & size_b][i] + (-30) * coeff[(30 + i) & size_b][i] + (34) * coeff[(34 + i) & size_b][i] + (-36) * coeff[(38 + i) & size_b][i] + (39) * coeff[(42 + i) & size_b][i] + (-41) * coeff[(46 + i) & size_b][i] + (43) * coeff[(50 + i) & size_b][i] + (-44) * coeff[(54 + i) & size_b][i] + (45) * coeff[(58 + i) & size_b][i] + (-45) * coeff[(62 + i) & size_b][i];

		EEO[0] = (45) * coeff[(4 + i) & size_b][i] + (43) * coeff[(12 + i) & size_b][i] + (40) * coeff[(20 + i) & size_b][i] + (35) * coeff[(28 + i) & size_b][i] + (29) * coeff[(36 + i) & size_b][i] + (21) * coeff[(44 + i) & size_b][i] + (13) * coeff[(52 + i) & size_b][i] + (4) * coeff[(60 + i) & size_b][i] ;
		EEO[1] = (43) * coeff[(4 + i) & size_b][i] + (29) * coeff[(12 + i) & size_b][i] + (4) * coeff[(20 + i) & size_b][i] + (-21) * coeff[(28 + i) & size_b][i] + (-40) * coeff[(36 + i) & size_b][i] + (-45) * coeff[(44 + i) & size_b][i] + (-35) * coeff[(52 + i) & size_b][i] + (-13) * coeff[(60 + i) & size_b][i];
		EEO[2] = (40) * coeff[(4 + i) & size_b][i] + (4) * coeff[(12 + i) & size_b][i] + (-35) * coeff[(20 + i) & size_b][i] + (-43) * coeff[(28 + i) & size_b][i] + (-13) * coeff[(36 + i) & size_b][i] + (29) * coeff[(44 + i) & size_b][i] + (45) * coeff[(52 + i) & size_b][i] + (21) * coeff[(60 + i) & size_b][i];
		EEO[3] = (35) * coeff[(4 + i) & size_b][i] + (-21) * coeff[(12 + i) & size_b][i] + (-43) * coeff[(20 + i) & size_b][i] + (4) * coeff[(28 + i) & size_b][i] + (45) * coeff[(36 + i) & size_b][i] + (13) * coeff[(44 + i) & size_b][i] + (-40) * coeff[(52 + i) & size_b][i] + (-29) * coeff[(60 + i) & size_b][i];
		EEO[4] = (29) * coeff[(4 + i) & size_b][i] + (-40) * coeff[(12 + i) & size_b][i] + (-13) * coeff[(20 + i) & size_b][i] + (45) * coeff[(28 + i) & size_b][i] + (-4) * coeff[(36 + i) & size_b][i] + (-43) * coeff[(44 + i) & size_b][i] + (21) * coeff[(52 + i) & size_b][i] + (35) * coeff[(60 + i) & size_b][i];
		EEO[5] = (21) * coeff[(4 + i) & size_b][i] + (-45) * coeff[(12 + i) & size_b][i] + (29) * coeff[(20 + i) & size_b][i] + (13) * coeff[(28 + i) & size_b][i] + (-43) * coeff[(36 + i) & size_b][i] + (35) * coeff[(44 + i) & size_b][i] + (4) * coeff[(52 + i) & size_b][i] + (-40) * coeff[(60 + i) & size_b][i];
		EEO[6] = (13) * coeff[(4 + i) & size_b][i] + (-35) * coeff[(12 + i) & size_b][i] + (45) * coeff[(20 + i) & size_b][i] + (-40) * coeff[(28 + i) & size_b][i] + (21) * coeff[(36 + i) & size_b][i] + (4) * coeff[(44 + i) & size_b][i] + (-29) * coeff[(52 + i) & size_b][i] + (43) * coeff[(60 + i) & size_b][i];
		EEO[7] = (4) * coeff[(4 + i) & size_b][i] + (-13) * coeff[(12 + i) & size_b][i] + (21) * coeff[(20 + i) & size_b][i] + (-29) * coeff[(28 + i) & size_b][i] + (35) * coeff[(36 + i) & size_b][i] + (-40) * coeff[(44 + i) & size_b][i] + (43) * coeff[(52 + i) & size_b][i] + (-45) * coeff[(60 + i) & size_b][i];
		
		EEEO[0] = (44) * coeff[(8 + i) & size_b][i] + (38) * coeff[(24 + i) & size_b][i] + (25) * coeff[(40 + i) & size_b][i] + (9) * coeff[(56 + i) & size_b][i];
		EEEO[1] = (38) * coeff[(8 + i) & size_b][i] + (-9) * coeff[(24 + i) & size_b][i] + (-44) * coeff[(40 + i) & size_b][i] + (-25) * coeff[(56 + i) & size_b][i];
		EEEO[2] = (25) * coeff[(8 + i) & size_b][i] + (-44) * coeff[(24 + i) & size_b][i] + (9) * coeff[(40 + i) & size_b][i] + (38) * coeff[(56 + i) & size_b][i];
		EEEO[3] = (9) * coeff[(8 + i) & size_b][i] + (-25) * coeff[(24 + i) & size_b][i] + (38) * coeff[(40 + i) & size_b][i] + (-44) * coeff[(56 + i) & size_b][i];
		
		EEEEO[0] = (42) * coeff[(16 + i) & size_b][i] + (17)  * coeff[(48 + i) & size_b][i];
		EEEEO[1] = (17) * coeff[(16 + i) & size_b][i] + (-42) * coeff[(48 + i) & size_b][i];
		EEEEE[0] = (32)* coeff[(0 + i) & size_b][i] + (32)  * coeff[(32 + i) & size_b][i];
		EEEEE[1] = (32)* coeff[(0 + i) & size_b][i] + (-32) * coeff[(32 + i) & size_b][i];
		
		EEEE[0] = EEEEE[0] + EEEEO[0];
		EEEE[3] = EEEEE[0] - EEEEO[0];
		EEEE[1] = EEEEE[1] + EEEEO[1];
		EEEE[2] = EEEEE[1] - EEEEO[1];

		for (k = 0; k < 4; k++){
			EEE[k] = EEEE[k] + EEEO[k];
			EEE[k + 4] = EEEE[3 - k] - EEEO[3 - k];
		}
		for (k = 0; k < 8; k++) {
			EE[k] = EEE[k] + EEO[k];
			EE[k + 8] = EEE[7 - k] - EEO[7 - k];
		}
		for (k = 0; k < 16; k++) {
			E[k] = EE[k] + EO[k];
			E[k + 16] = EE[15 - k] - EO[15 - k];
		}
		for (k = 0; k < 32; k++) {
			block[i][k] = Clip3(-(1 << 15), (1 << 15) - 1, (E[k] + O[k] + rnd_factor) >> shift);
			block[i][k + 32] = Clip3(-(1 << 15), (1 << 15) - 1, (E[31 - k] - O[31 - k] + rnd_factor) >> shift);
		}
	}
#endif
}

/*  sub func  */
void TR_FUNC_NAME(recon, W, H)(PART_SIZE part, s16* resi, pel* pred, int(*is_coef)[3], int plane, U7 cu_width, U7 cu_height, int s_rec, pel* rec, U4 bit_depth)
{

#pragma HLS INLINE off
	int i;
	int j;
	s16 t0;
	//get_part_num(part);
	int k;
	int part_num = 1;
	int tb_height = cu_height;
	int tb_width = cu_width;
	int tb_x;
	int tb_y;
	pel* p;
	pel* r;
	s16* c;

	//get_tb_width_height(cu_width, cu_height, part, &tb_width, &tb_height);
	for (k = 0; k < part_num; k++) {

		get_tb_start_pos(cu_width, cu_height, part, k, &tb_x, &tb_y);
		p = pred + tb_y * cu_width + tb_x;
		r = rec + tb_y * s_rec + tb_x;
		/* just copy pred to rec */
		if (is_coef[k][plane] == 0) {
			for (i = 0; i < H; i++) {

#pragma HLS LOOP_TRIPCOUNT max=64
				for (j = 0; j < W; j++) {

#pragma HLS LOOP_TRIPCOUNT max=64
					r[i * s_rec + j] = (((0 > (((1 << bit_depth) - 1 < (p[i * cu_width + j]) ? (1 << bit_depth) - 1 : (p[i * cu_width + j]))) ? 0 : (((1 << bit_depth) - 1 < (p[i * cu_width + j]) ? (1 << bit_depth) - 1 : (p[i * cu_width + j]))))));
				}
			}
		}
		else
			/* add b/w pred and coef and copy it into rec */
		{
			c = resi + k * tb_width * tb_height;
			for (i = 0; i < H; i++) {

#pragma HLS LOOP_TRIPCOUNT max=64
				for (j = 0; j < W; j++) {

#pragma HLS LOOP_TRIPCOUNT max=64
					t0 = (((c[i * tb_width + j]) + (p[i * cu_width + j])));
					r[i * s_rec + j] = (((0 > (((1 << bit_depth) - 1 < (t0) ? (1 << bit_depth) - 1 : (t0))) ? 0 : (((
						1 << bit_depth) - 1 < (t0) ? (1 << bit_depth) - 1 : (t0))))));
				}
			}
		}
	}
}
void TR_FUNC_NAME(itrans_h, W, H)(s16* resi, s16* coef_temp, U3 cu_width_log2, U3 cu_height_log2, U4 bit_depth)
{
	U4 shift2;
	static s16 block1[TMP_SIZE][TMP_SIZE];
	static s16 rec1[H][W];
    U7 size = MAX_SIZE;
	U8 size_b = size - 1;

#pragma HLS INLINE off
	//s16 coef_temp[MAX_TR_DIM];
	if (cu_width_log2 > 6 || cu_height_log2 > 6) {
		0 ? ((void)0) : __assert_HLS("0", "../separate/enc_pintra.c", (unsigned int)2554, __FUNCTION__);
	}
	else {
		shift2 = com_get_inverse_trans_shift(cu_height_log2, 1, bit_depth);


		if (W == 32 || W == 64){
			for (int i = 0; i < W; i++) {
				for (int j = 0; j < H; j++) {
					block1[(i + j) & size_b][j] = coef_temp[i * H + j];
				}
			}
		}
		else{
			for (int i = 0; i < W; i++) {
				for (int j = 0; j < H; j++) {
					block1[i][j] = coef_temp[i * H + j];
				}
			}
		}

		TR_FUNC_NAME(inv_dct_row, W, H)(block1, rec1, shift2);
	
			for (int i = 0; i < H; i++)
				for (int j = 0; j < W; j++) {
					resi[i * W + j] = rec1[i][j];
				}
		}
}
void TR_FUNC_NAME(itrans_v, W, H)(s16* coef_dq, s16* coef_temp, U3 cu_width_log2, U3 cu_height_log2, U4 bit_depth)
{

#pragma HLS INLINE off
	U4 shift1 = com_get_inverse_trans_shift(cu_width_log2, 0, bit_depth);
	static s16 coeff1[H][W];
	static s16 block1[TMP_SIZE][TMP_SIZE];

	U7 size = MAX_SIZE;
	U8 size_b = size - 1;

	for (int i = 0; i < H; i++)
		for (int j = 0; j < W; j++) {
			coeff1[i][j] = coef_dq[i * W + j];
		}

	TR_FUNC_NAME(inv_dct_col, W, H)(coeff1, block1, shift1);

	if (H == 32 || H == 64){
		for (int i = 0; i < W; i++)
			for (int j = 0; j < H; j++) {
				coef_temp[i * H + j] = block1[(i + j) & size_b][j];
			}
	}
	else {
		for (int i = 0; i < W; i++)
			for (int j = 0; j < H; j++) {
				coef_temp[i * H + j] = block1[i][j];
			}
	}
}
void TR_FUNC_NAME(dquant, W, H)(U6 qp, s16* coef, s16* coef_out, U3 log2_w, U3 log2_h, U4 bit_depth)
{

#pragma HLS INLINE off
	int i;
	int j;
	int w = 1 << log2_w;
	int h = 1 << log2_h;
	U4 log2_size = ((U4)log2_w + log2_h) >> 1;
	int refix = (log2_w + log2_h) & 1;
	const int com_tbl_dq_scale[80] = { // [64 + 16]
	32768, 36061, 38968, 42495, 46341, 50535, 55437, 60424,
	32932, 35734, 38968, 42495, 46177, 50535, 55109, 59933,
	65535, 35734, 38968, 42577, 46341, 50617, 55027, 60097,
	32809, 35734, 38968, 42454, 46382, 50576, 55109, 60056,
	65535, 35734, 38968, 42495, 46320, 50515, 55109, 60076,
	65535, 35744, 38968, 42495, 46341, 50535, 55099, 60087,
	65535, 35734, 38973, 42500, 46341, 50535, 55109, 60097,
	32771, 35734, 38965, 42497, 46341, 50535, 55109, 60099,
	32768, 36061, 38968, 42495, 46341, 50535, 55437, 60424,
	32932, 35734, 38968, 42495, 46177, 50535, 55109, 59933
	};
	const int com_tbl_dq_shift[80] = { // [64 + 16]
	14, 14, 14, 14, 14, 14, 14, 14,  //15, 15, 15, 15, 15, 15, 15, 15,
	13, 13, 13, 13, 13, 13, 13, 13,  //14, 14, 14, 14, 14, 14, 14, 14,
	13, 12, 12, 12, 12, 12, 12, 12,  //14, 13, 13, 13, 13, 13, 13, 13,
	11, 11, 11, 11, 11, 11, 11, 11,  //12, 12, 12, 12, 12, 12, 12, 12,
	11, 10, 10, 10, 10, 10, 10, 10,  //12, 11, 11, 11, 11, 11, 11, 11,
	10,  9,  9,  9,  9,  9,  9,  9,  //11, 10, 10, 10, 10, 10, 10, 10,
	9,  8,  8,  8,  8,  8,  8,  8,  //10,  9,  9,  9,  9,  9,  9,  9,
	7,  7,  7,  7,  7,  7,  7,  7,  // 8,  8,  8,  8,  8,  8,  8,  8,
	6,  6,  6,  6,  6,  6,  6,  6,  // 7,  7,  7,  7,  7,  7,  7,  7,
	5,  5,  5,  5,  5,  5,  5,  5,  // 6,  6,  6,  6,  6,  6,  6,  6
	};
	int scale = com_tbl_dq_scale[qp];
	// +1 is used to compensate for the mismatching of shifts in quantization and inverse quantization
	int shift = com_tbl_dq_shift[qp] - get_transform_shift(bit_depth, log2_size) + 1;
	int offset = shift == 0 ? 0 : 1 << (shift - 1);
	if (log2_w > 6 || log2_h > 6) {
		0 ? ((void)0) : __assert_HLS("0", "../separate/enc_pintra.c", (unsigned int)2617, __FUNCTION__);
	}
	for (i = 0; i < H; i++) {
		for (j = 0; j < W; j++) {
			int weight = (i | j) & 0xE0 ? 0 : 64;
			int lev = (((coef[j] * weight >> 2) * scale >> 4) + offset) >> shift;
			lev = (lev > 32767 ? 32767 : ((lev < -32768 ? -32768 : lev)));
			if (refix) {
				lev =(lev * 181 + 128) >> 8;
			}
			coef_out[j] = (lev);
		}
		coef_out += W;
		coef += W;
	}
}

/*  top func  */
u8 TR_FUNC_NAME(transform_hor, W, H)(U4 bit_depth, s16 resi[SIZE], s16 coef_tmp[SIZE], U7 tb_w, U7 tb_h, U2 slice_type, U3 type, U3 tree_status)
{
	//xingxing pay attention to it

	//cu_plane_nz_cln(num_nz, type);
#pragma HLS INLINE
	U3 tb_width_log2 = com_tbl_log2[W];
	U3 tb_height_log2 = com_tbl_log2[H];
#if (W <= 16) && (H <= 16)
	static s16 coef_temp[16][16];
#else
	static s16 coef_temp[64][64];
#endif
	static s16 resi_temp[H][W];

	U7 size = (W >= H) ? W : H;
	U8 size_b = size - 1;
	int i, j;
	U4 shift1;
	U4 shift2;
#pragma HLS ARRAY_PARTITION variable=resi complete dim=1
#pragma HLS ARRAY_PARTITION variable=coef_tmp complete dim=1
#pragma HLS ARRAY_PARTITION variable=coef_temp complete dim=1
#pragma HLS ARRAY_PARTITION variable=resi_temp complete dim=1

	for (i = 0; i < 4; i++) {
#pragma HLS UNROLL
		for (j = 0; j < 4; j++) {
#pragma HLS UNROLL
			resi_temp[i][j] = resi[i * W + j];
		}
	}
	shift1 = com_get_forward_trans_shift(tb_width_log2, 0, bit_depth);
	shift2 = com_get_forward_trans_shift(tb_height_log2, 1, bit_depth);
//	if (slice_type == 2) {
//		if (tree_status == TREE_L && type != 0) {
//			num_nz[0][type] = 0;
//			return 0;
//		}
//		if (tree_status == TREE_C && type == 0) {
//			num_nz[0][type] = 0;
//			return 0;
//		}
//	}

	TR_FUNC_NAME(dct_row, W, H)(resi_temp, coef_temp, shift1);

	for (i = 0; i < 4; i++) {
#pragma HLS UNROLL
		for (j = 0; j < 4; j++) {
#pragma HLS UNROLL
			coef_tmp[i * H + j] = coef_temp[i][(j + i) & size_b];
		}
	}
	return 1;
}
u8 TR_FUNC_NAME(transform_ver, W, H)(U2 slice_type, U4 bit_depth, U6 qp_y, int num_nz[4][3], s64 lambda[3],
	s16 coef_tmp[4 * 4], s16 coef[4 * 4], U7 tb_w, U7 tb_h, U3 type, U1 is_intra, U3 tree_status)
{
#pragma HLS INLINE
	U3 tb_width_log2 =  com_tbl_log2[W];
	U3 tb_height_log2 = com_tbl_log2[H];
#if (W <= 16) && (H <= 16)
	 s16 coef_input[16][16];
#else
	 s16 coef_input[64][64];
#endif
	 s16 coef_output[H][W];


	int i, j;
	U4 shift1, shift2;
	U7 size = (W >= H) ? W : H;
	U8 size_b = size - 1;
#pragma HLS ARRAY_PARTITION variable=lambda complete dim=1
#pragma HLS ARRAY_PARTITION variable=coef_tmp complete dim=1
#pragma HLS ARRAY_PARTITION variable=coef complete dim=1
#pragma HLS ARRAY_PARTITION variable=coef_input complete dim=2
#pragma HLS ARRAY_PARTITION variable=coef_output complete dim=0

	for (i = 0; i < 4; i++) {
#pragma HLS UNROLL
		for (j = 0; j < 4; j++) {
#pragma HLS UNROLL
			coef_input[i][(j + i) & size_b] = coef_tmp[i * 4 + j];
		}
	}

	if (slice_type == 2) {
		if (tree_status == TREE_L && type != 0) {
			num_nz[0][type] = 0;
			return 0;
		}
		if (tree_status == TREE_C && type == 0) {
			num_nz[0][type] = 0;
			return 0;
		}
	}

	shift1 = com_get_forward_trans_shift(tb_width_log2, 0, bit_depth);
	shift2 = com_get_forward_trans_shift(tb_height_log2, 1, bit_depth);
	TR_FUNC_NAME(dct_col, W, H)(coef_input, coef_output, shift2);

	for (i = 0; i < 4; i++) {
#pragma HLS UNROLL
		for (j = 0; j < 4; j++) {
#pragma HLS UNROLL
			coef[i * 4 + j] = coef_output[i][j];
		}
	}
	return 1;
}

static s64 TR_FUNC_NAME(enc_ssd_16b_1, W, H)(int w_log2, int h_log2, s16 src1[SIZE], s16 src2[MAX_SIZE * MAX_SIZE], int s_src1, int s_src2, int bit_depth)
{

#pragma HLS INLINE off
	int w = 1 << w_log2;
	int h = 1 << h_log2;
	const int shift = (bit_depth - 8) << 1;
	s64 ssd = 0;
	s16* s1 = (s16*)src1;
	s16* s2 = (s16*)src2;
	int i, j;
	int diff;

	for (i = 0; i < h; i++) {

#pragma HLS LOOP_TRIPCOUNT max=64
		for (j = 0; j < w; j++) {

#pragma HLS LOOP_TRIPCOUNT max=64
			diff = ((int)s1[i * s_src1 + j]) - ((int)s2[i * s_src2 + j]);
			ssd += ((diff * diff >> shift));
		}
	}
	return ssd;
	//add by xujch
}

void TR_FUNC_NAME(inv_transform_ver, W, H)(U4 bit_depth, U6 qp_y, int num_nz[4][3], s16 coef_tmp[SIZE], U3 cu_width_log2, U3 cu_height_log2, U7 tb_w, U7 tb_h, U3 type)
{
	U3 tb_width_log2 = com_tbl_log2[W];
	U3 tb_height_log2 = com_tbl_log2[H];
	static s16 coef_dq[SIZE];
	if (num_nz[0][type]) {
		TR_FUNC_NAME(dquant, W, H)(qp_y, coef_tmp, coef_dq, tb_width_log2, tb_height_log2, bit_depth);
		TR_FUNC_NAME(itrans_v, W, H)(coef_dq, coef_tmp, tb_width_log2, tb_height_log2, bit_depth);
	}
}
void TR_FUNC_NAME(inv_transform_hor, W, H)(MD_FW* md_fw_ptr, U4 bit_depth, MD_COM_MODE_BEST* mod_info_curr_ptr, COM_PART_INFO* mod_info_curr_pb_info,
	U3 cu_width_log2, U3 cu_height_log2, pel pred_cache[SIZE], s32* dist, pel rec[SIZE], U13 tb_x, U13 tb_y, U7 tb_w, U7 tb_h, int coef_offset_tb, s16 coef_temp[SIZE], U3 type, U1 is_intra, pel org[MAX_SIZE * MAX_SIZE])
{
	static s16 resi[SIZE];
	int s_org = MAX_SIZE;
	U3 tb_width_log2 = com_tbl_log2[W];
	U3 tb_height_log2 = com_tbl_log2[H];

	pel* resi_tb = resi + coef_offset_tb;
	pel* rec_tb = rec + (tb_y - mod_info_curr_ptr->y_pos) * W + (tb_x - mod_info_curr_ptr->x_pos);
	int pb_x = mod_info_curr_pb_info->sub_x[0];
	int pb_y = mod_info_curr_pb_info->sub_y[0];
	s32 cost = 0;
	//pel* org_luma_tb;

	if (mod_info_curr_ptr->num_nz[0][type]) {
		//com_itrans_h(resi, coef_temp, tb_width_log2, tb_height_log2, bit_depth);
		TR_FUNC_NAME(itrans_h, W, H)(resi, coef_temp, tb_width_log2, tb_height_log2, bit_depth);
	}
	TR_FUNC_NAME(recon, W, H)((PART_SIZE)(type == 0 ? mod_info_curr_ptr->tb_part : (SIZE_2Nx2N)), resi_tb, pred_cache,
		mod_info_curr_ptr->num_nz, type, W, H, W, rec_tb, bit_depth);
	if (!is_intra) {
		if (type == 1)memcpy_rewrintra(mod_info_curr_ptr->rec_u, rec, W * H);
		else if (type == 2)memcpy_rewrintra(mod_info_curr_ptr->rec_v, rec, W * H);
	}
	if (!type)
	{
		//org_luma_tb = org + (tb_x - pb_x) + (tb_y - pb_y) * s_org;
		cost += ((TR_FUNC_NAME(enc_ssd_16b_1, W, H)(tb_width_log2, tb_height_log2, rec_tb, org, W, s_org, bit_depth)));
		*dist = cost;
	}
}




#undef W
#undef H
#undef SIZE
#undef MAX_SIZE
#undef TMP_SIZE